//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subscription.Data.EntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using Subscription.Business;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SubscriptionEntities : DbContext
    {
        public SubscriptionEntities()
            : base("name=SubscriptionEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Role_Permission> Role_Permission { get; set; }
        public virtual DbSet<User_Permission> User_Permission { get; set; }
        public virtual DbSet<BankReconOrderProcessState> BankReconOrderProcessStates { get; set; }
        public virtual DbSet<BankReconOrderType> BankReconOrderTypes { get; set; }
        public virtual DbSet<BankStatementHitList> BankStatementHitLists { get; set; }
        public virtual DbSet<BankStatementHitList_TransactionPreset> BankStatementHitList_TransactionPreset { get; set; }
        public virtual DbSet<BankStatementStaging> BankStatementStagings { get; set; }
        public virtual DbSet<BankStatementStagingDetail> BankStatementStagingDetails { get; set; }
        public virtual DbSet<BankStatementStagingDetailBatch> BankStatementStagingDetailBatches { get; set; }
        public virtual DbSet<BankStatementStagingHit> BankStatementStagingHits { get; set; }
        public virtual DbSet<BankStatementStagingHit_TransactionPreset> BankStatementStagingHit_TransactionPreset { get; set; }
        public virtual DbSet<TemporaryPayment> TemporaryPayments { get; set; }
        public virtual DbSet<TemporaryPaymentDetail> TemporaryPaymentDetails { get; set; }
        public virtual DbSet<TemporaryTransaction> TemporaryTransactions { get; set; }
        public virtual DbSet<TemporaryTransactionDetail> TemporaryTransactionDetails { get; set; }
        public virtual DbSet<TransactionDetailPreset> TransactionDetailPresets { get; set; }
        public virtual DbSet<TransactionPreset> TransactionPresets { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Company_ContactType> Company_ContactType { get; set; }
        public virtual DbSet<CompanyLocation> CompanyLocations { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<User_Role> User_Role { get; set; }
        public virtual DbSet<User_SocialNetwork> User_SocialNetwork { get; set; }
        public virtual DbSet<NLogDetail> NLogDetails { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BankReconHitType> BankReconHitTypes { get; set; }
        public virtual DbSet<BankStatementStagingState> BankStatementStagingStates { get; set; }
        public virtual DbSet<ContactType> ContactTypes { get; set; }
        public virtual DbSet<CustomerType> CustomerTypes { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<StockLocation> StockLocations { get; set; }
        public virtual DbSet<TemporaryTransactionOrderState> TemporaryTransactionOrderStates { get; set; }
        public virtual DbSet<Title> Titles { get; set; }
        public virtual DbSet<TransactionAccount> TransactionAccounts { get; set; }
        public virtual DbSet<TransactionAccountType> TransactionAccountTypes { get; set; }
        public virtual DbSet<TransactionClass> TransactionClasses { get; set; }
        public virtual DbSet<TransactionState> TransactionStates { get; set; }
        public virtual DbSet<TransactionTemplate> TransactionTemplates { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<MailRecipient> MailRecipients { get; set; }
        public virtual DbSet<MailRecipientType> MailRecipientTypes { get; set; }
        public virtual DbSet<MailServerSetting> MailServerSettings { get; set; }
        public virtual DbSet<MailStatu> MailStatus { get; set; }
        public virtual DbSet<MailToSend> MailToSends { get; set; }
        public virtual DbSet<MailToSendDocument> MailToSendDocuments { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Concept> Concepts { get; set; }
        public virtual DbSet<Concept_Address> Concept_Address { get; set; }
        public virtual DbSet<Concept_ContactType> Concept_ContactType { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Parameter> Parameters { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderAddress> OrderAddresses { get; set; }
        public virtual DbSet<OrderCompany> OrderCompanies { get; set; }
        public virtual DbSet<OrderConcept> OrderConcepts { get; set; }
        public virtual DbSet<OrderConcept_ContactType> OrderConcept_ContactType { get; set; }
        public virtual DbSet<OrderConcept_OrderAddress> OrderConcept_OrderAddress { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<OrderPerson> OrderPersons { get; set; }
        public virtual DbSet<OrderState> OrderStates { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Person_Address> Person_Address { get; set; }
        public virtual DbSet<Person_ContactType> Person_ContactType { get; set; }
        public virtual DbSet<EndType> EndTypes { get; set; }
        public virtual DbSet<Frequency> Frequencies { get; set; }
        public virtual DbSet<PaymentDueState> PaymentDueStates { get; set; }
        public virtual DbSet<ScheduleSetting> ScheduleSettings { get; set; }
        public virtual DbSet<TransactionDue> TransactionDues { get; set; }
        public virtual DbSet<TransactionDue_Transaction> TransactionDue_Transaction { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentDetail> PaymentDetails { get; set; }
        public virtual DbSet<TemporaryTransactionOrder> TemporaryTransactionOrders { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<Transaction_MailToSend> Transaction_MailToSend { get; set; }
        public virtual DbSet<Transaction_Payment> Transaction_Payment { get; set; }
        public virtual DbSet<TransactionDetail> TransactionDetails { get; set; }
        public virtual DbSet<ApprovalMessage> ApprovalMessages { get; set; }
        public virtual DbSet<Request> Requests { get; set; }
        public virtual DbSet<RequestMessageQueue> RequestMessageQueues { get; set; }
        public virtual DbSet<RequestType> RequestTypes { get; set; }
        public virtual DbSet<RequestType_User> RequestType_User { get; set; }
        public virtual DbSet<Workflow> Workflows { get; set; }
        public virtual DbSet<WorkflowAction> WorkflowActions { get; set; }
        public virtual DbSet<WorkflowRole> WorkflowRoles { get; set; }
        public virtual DbSet<WorkflowState> WorkflowStates { get; set; }
        public virtual DbSet<WorkflowTransition> WorkflowTransitions { get; set; }
        public virtual DbSet<WorkflowTransitionOnExecute> WorkflowTransitionOnExecutes { get; set; }
        public virtual DbSet<Transaction_BankStatementStagingDetail> Transaction_BankStatementStagingDetail { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
