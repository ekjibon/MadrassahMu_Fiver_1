
using System;
using Subscription.Business;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Subscription.Data.EntityFramework;
using Subscription.Business.Common;
using System.Linq.Expressions;
using Subscription.Business.ExtensionMethod;
using System.Linq.Dynamic;
using Subscription.Data.Common;
namespace Subscription.Data
{
		public partial class AddressDao :IAddressDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public AddressDao(){
			
			}

			public AddressDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Address> GetAllAddresses(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllAddresses(db, shouldRemap);
                }
            }

            public List<Address> GetAllAddresses(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapAddressList(db.Addresses.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Addresses.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Address> GetAllAddressesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllAddressesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Address> GetAllAddressesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Address, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
            {
				IQueryable<Address> query =  db.Addresses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Address> baseListReturnType = new BaseListReturnType<Address>();

                IQueryable<Address> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdAddress" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Address, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.AddressLine1.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.AddressLine1.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.AddressLine2.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.AddressLine3.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.AddressLine4.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Postcode.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.City.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapAddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Address> GetAllAddressesWithCompanyLocationsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressesByPage(sortingPagingInfo, db,expression,new List<string>(){"CompanyLocations"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Address> GetAllAddressesWithCity1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressesByPage(sortingPagingInfo, db,expression,new List<string>(){"City1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Address> GetAllAddressesWithCountryDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressesByPage(sortingPagingInfo, db,expression,new List<string>(){"Country"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Address> GetAllAddressesWithContactsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressesByPage(sortingPagingInfo, db,expression,new List<string>(){"Contacts"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Address> GetAllAddressesWithPerson_AddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressesByPage(sortingPagingInfo, db,expression,new List<string>(){"Person_Address"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Address> GetAllAddressesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllAddressesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Address> GetAllAddressesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Address, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
            {
				IQueryable<Address> query =  db.Addresses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Address> baseListReturnType = new BaseListReturnType<Address>();

                IQueryable<Address> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdAddress" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Address, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapAddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Address> GetAllAddressesWithCompanyLocationsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"CompanyLocations"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Address> GetAllAddressesWithCity1DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"City1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Address> GetAllAddressesWithCountryDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Country"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Address> GetAllAddressesWithContactsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Contacts"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Address> GetAllAddressesWithPerson_AddressDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap = false, Func<Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Person_Address"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Address> GetAllAddressesWithCompanyLocationsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressWitDetails(new List<string>(){"CompanyLocations"},shouldRemap);
					}
				}
							public BaseListReturnType<Address> GetAllAddressesWithCity1Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressWitDetails(new List<string>(){"City1"},shouldRemap);
					}
				}
							public BaseListReturnType<Address> GetAllAddressesWithCountryDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressWitDetails(new List<string>(){"Country"},shouldRemap);
					}
				}
							public BaseListReturnType<Address> GetAllAddressesWithContactsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressWitDetails(new List<string>(){"Contacts"},shouldRemap);
					}
				}
							public BaseListReturnType<Address> GetAllAddressesWithPerson_AddressDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllAddressWitDetails(new List<string>(){"Person_Address"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Address> GetAllAddressWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllAddressWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Address> GetAllAddressWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Address> query =  db.Addresses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Address> baseListReturnType = new BaseListReturnType<Address>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapAddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Address GetAddress(long idAddress,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAddress(idAddress, db,shouldRemap);
                }
            }
                        public Address GetAddress(long idAddress, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapAddressSingle(db.Addresses.Where(p => p.IdAddress == idAddress && p.IsDeactivated != true).FirstOrDefault());

                return db.Addresses.Where(p => p.IdAddress == idAddress && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Address GetAddressCustom( Expression<Func<Address, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetAddressCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Address GetAddressCustom( SubscriptionEntities db , Expression<Func<Address, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Address> query =  db.Addresses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapAddressSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Address> GetAddressCustomList( Expression<Func<Address, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Address, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetAddressCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Address> GetAddressCustomList(  SubscriptionEntities db , Expression<Func<Address, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Address, dynamic> orderExpression = null)
			{
				IQueryable<Address> query =  db.Addresses;
                BaseListReturnType<Address> baseListReturnType = new BaseListReturnType<Address>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapAddressList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Address GetAddressWithCompanyLocationsDetails(long idAddress,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAddressWithDetails(idAddress,new List<string>(){"CompanyLocations"},shouldRemap);
					}
				}

            //IdAddress -- Many


							public Address GetAddressWithCity1Details(long idAddress,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAddressWithDetails(idAddress,new List<string>(){"City1"},shouldRemap);
					}
				}

            //IdCity -- ZeroOrOne

                public BaseListReturnType<Address> GetAllAddressListByCity1(long idCity1)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllAddressListByCity1(idCity1, db);
                    }
                }
                public BaseListReturnType<Address> GetAllAddressListByCity1(long idCity1, SubscriptionEntities db)
                {
                    Expression<Func<Address, bool>> expression = property=> property.IdCity == idCity1 && property.IsDeactivated !=true;
                    return GetAddressCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Address> GetAllAddressListByCity1ByPage(long idCity1, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllAddressListByCity1ByPage(idCity1, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Address> GetAllAddressListByCity1ByPage(long idCity1, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Address, bool>> expression = property => property.IdCity == idCity1 && property.IsDeactivated !=true;
                    return GetAllAddressesByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Address GetAddressWithCountryDetails(long idAddress,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAddressWithDetails(idAddress,new List<string>(){"Country"},shouldRemap);
					}
				}

            //IdCountry -- ZeroOrOne

                public BaseListReturnType<Address> GetAllAddressListByCountry(long idCountry)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllAddressListByCountry(idCountry, db);
                    }
                }
                public BaseListReturnType<Address> GetAllAddressListByCountry(long idCountry, SubscriptionEntities db)
                {
                    Expression<Func<Address, bool>> expression = property=> property.IdCountry == idCountry && property.IsDeactivated !=true;
                    return GetAddressCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Address> GetAllAddressListByCountryByPage(long idCountry, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllAddressListByCountryByPage(idCountry, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Address> GetAllAddressListByCountryByPage(long idCountry, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Address, bool>> expression = property => property.IdCountry == idCountry && property.IsDeactivated !=true;
                    return GetAllAddressesByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Address GetAddressWithContactsDetails(long idAddress,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAddressWithDetails(idAddress,new List<string>(){"Contacts"},shouldRemap);
					}
				}

            //IdAddress -- Many


							public Address GetAddressWithPerson_AddressDetails(long idAddress,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAddressWithDetails(idAddress,new List<string>(){"Person_Address"},shouldRemap);
					}
				}

            //IdAddress -- Many


			


			public Address GetAddressWithDetails(long idAddress, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAddressWithDetails(idAddress, db,includes,shouldRemap);
                }
            }

            public Address GetAddressWithDetails(long idAddress, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Address> query =  db.Addresses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapAddressSingle(query
						.Where(p => p.IdAddress == idAddress && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdAddress == idAddress && p.IsDeactivated != true).FirstOrDefault();
            }

            public Address GetAddressWitDetails(long idAddress,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAddressWitDetails(idAddress, db,shouldRemap);
                }
            }

            public Address GetAddressWitDetails(long idAddress, SubscriptionEntities db,bool shouldRemap = false)
            {
				Address _Address = db.Addresses

					.Include("CompanyLocations")
					.Include("City1")
					.Include("Country")
					.Include("Contacts")
					.Include("Person_Address")
								.Where(p => p.IdAddress == idAddress && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapAddressSingle(_Address);

				return  _Address;
            }

            public List<Address> GetAddressListByIdList(List<long> addressIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAddressListByIdList(addressIds, db);
                }
            }
            public List<Address> GetAddressListByIdList(List<long> addressIds, SubscriptionEntities db)
            {
                return db.Addresses.Where(p => p.IsDeactivated != true && addressIds.Contains(p.IdAddress.Value)).ToList();
            }


            public void SaveAddress(Address address)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveAddress(address, db);
                }
            }

            public void SaveAddress(Address address, SubscriptionEntities db)
            {
									if (address.City1 != null) 
						DaoFactories.Instance.CityDao.SaveCity(address.City1, db);
									if (address.Country != null) 
						DaoFactories.Instance.CountryDao.SaveCountry(address.Country, db);
				                
                if (address.IdAddress.HasValue){
					var addressFromDb = db.Addresses.Where(p => p.IdAddress == address.IdAddress).FirstOrDefault();
													addressFromDb.AddressLine1 = address.AddressLine1;
													addressFromDb.AddressLine2 = address.AddressLine2;
													addressFromDb.AddressLine3 = address.AddressLine3;
													addressFromDb.AddressLine4 = address.AddressLine4;
													addressFromDb.Postcode = address.Postcode;
													addressFromDb.IdCity = address.IdCity;
													addressFromDb.IsDeactivated = address.IsDeactivated;
													addressFromDb.IdCountry = address.IdCountry;
													addressFromDb.City = address.City;
									}
                else{
                                                //fix for saving without duplicating items in db
                              address.City1 = null;
                                                        //fix for saving without duplicating items in db
                              address.Country = null;
                                                db.Addresses.Add(address);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyAddress(Address address)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyAddress(address, db);
                }
            }

            public void SaveOnlyAddress(Address address, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // address.City1 = null;
                                                        //fix for saving without duplicating items in db
                             // address.Country = null;
                                            if (address.IdAddress.HasValue){
					var addressFromDb = db.Addresses.Where(p => p.IdAddress == address.IdAddress).FirstOrDefault();
													addressFromDb.AddressLine1 = address.AddressLine1;
													addressFromDb.AddressLine2 = address.AddressLine2;
													addressFromDb.AddressLine3 = address.AddressLine3;
													addressFromDb.AddressLine4 = address.AddressLine4;
													addressFromDb.Postcode = address.Postcode;
													addressFromDb.IdCity = address.IdCity;
													addressFromDb.IsDeactivated = address.IsDeactivated;
													addressFromDb.IdCountry = address.IdCountry;
													addressFromDb.City = address.City;
										 db.SaveChanges();

				}
                else{
					Address _address = new Address();
																	_address.AddressLine1 = address.AddressLine1;
													_address.AddressLine2 = address.AddressLine2;
													_address.AddressLine3 = address.AddressLine3;
													_address.AddressLine4 = address.AddressLine4;
													_address.Postcode = address.Postcode;
													_address.IdCity = address.IdCity;
													_address.IsDeactivated = address.IsDeactivated;
													_address.IdCountry = address.IdCountry;
													_address.City = address.City;
					

                    db.Addresses.Add(_address);
					db.SaveChanges();
					address.IdAddress =  _address.IdAddress;
                    
                }
            }

            public void DeleteAddress(Address address)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteAddress(address, db);
                }
            }

            public void DeleteAddress(Address address, SubscriptionEntities db)
            {
								var addressFromDb = GetAddress(address.IdAddress.Value,db);
				addressFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyAddress(Address address)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyAddress(address, db);
                }
            }

            public void DeletePermanentlyAddress(Address address, SubscriptionEntities db)
            {
								var addressFromDb = GetAddress(address.IdAddress.Value,db);
				
				db.Addresses.Remove(addressFromDb);
                db.SaveChanges();
            }


            
							public List<CompanyLocation> UpdateCompanyLocationsForAddressWithoutSavingNewItem(List<CompanyLocation> newCompanyLocations,long idAddress)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCompanyLocationsForAddressWithoutSavingNewItem(newCompanyLocations,idAddress,db);
                                }
                            }

							public List<CompanyLocation> UpdateCompanyLocationsForAddressWithoutSavingNewItem(List<CompanyLocation> newCompanyLocations,long idAddress, SubscriptionEntities  db)
                            {
                                Expression<Func<CompanyLocation, bool>> expressionBuilder = p => p.IdAddress == idAddress;
                                var oldCompanyLocations = DaoFactories.Instance.CompanyLocationDao.GetCompanyLocationCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCompanyLocations.EntityList.Select(pc => pc.IdCompanyLocation).Except(newCompanyLocations.Where(pc => pc.IdCompanyLocation.HasValue).Select(pc => pc.IdCompanyLocation)).ToList();
                                var itemsTobeDeleted = oldCompanyLocations.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCompanyLocation)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newCompanyLocations;
                            }


                            public List<CompanyLocation> UpdateCompanyLocationsForAddress(List<CompanyLocation> newCompanyLocations,long idAddress)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCompanyLocationsForAddress(newCompanyLocations,idAddress,db);
                                }
                            }

                            public List<CompanyLocation> UpdateCompanyLocationsForAddress(List<CompanyLocation> newCompanyLocations,long idAddress, SubscriptionEntities  db)
                            {
                                Expression<Func<CompanyLocation, bool>> expressionBuilder = p => p.IdAddress == idAddress;
                                var oldCompanyLocations = DaoFactories.Instance.CompanyLocationDao.GetCompanyLocationCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCompanyLocations.EntityList.Select(pc => pc.IdCompanyLocation).Except(newCompanyLocations.Where(pc => pc.IdCompanyLocation.HasValue).Select(pc => pc.IdCompanyLocation)).ToList();
                                var itemsTobeDeleted = oldCompanyLocations.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCompanyLocation)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newCompanyLocations.ForEach(pc =>
                                {
                                    pc.IdAddress = idAddress;
                                    DaoFactories.Instance.CompanyLocationDao.SaveOnlyCompanyLocation(pc, db);
                                });
                                return newCompanyLocations;
                            }

                        
							public List<Contact> UpdateContactsForAddressWithoutSavingNewItem(List<Contact> newContacts,long idAddress)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateContactsForAddressWithoutSavingNewItem(newContacts,idAddress,db);
                                }
                            }

							public List<Contact> UpdateContactsForAddressWithoutSavingNewItem(List<Contact> newContacts,long idAddress, SubscriptionEntities  db)
                            {
                                Expression<Func<Contact, bool>> expressionBuilder = p => p.IdAddress == idAddress;
                                var oldContacts = DaoFactories.Instance.ContactDao.GetContactCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldContacts.EntityList.Select(pc => pc.IdContact).Except(newContacts.Where(pc => pc.IdContact.HasValue).Select(pc => pc.IdContact)).ToList();
                                var itemsTobeDeleted = oldContacts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdContact)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newContacts;
                            }


                            public List<Contact> UpdateContactsForAddress(List<Contact> newContacts,long idAddress)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateContactsForAddress(newContacts,idAddress,db);
                                }
                            }

                            public List<Contact> UpdateContactsForAddress(List<Contact> newContacts,long idAddress, SubscriptionEntities  db)
                            {
                                Expression<Func<Contact, bool>> expressionBuilder = p => p.IdAddress == idAddress;
                                var oldContacts = DaoFactories.Instance.ContactDao.GetContactCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldContacts.EntityList.Select(pc => pc.IdContact).Except(newContacts.Where(pc => pc.IdContact.HasValue).Select(pc => pc.IdContact)).ToList();
                                var itemsTobeDeleted = oldContacts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdContact)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newContacts.ForEach(pc =>
                                {
                                    pc.IdAddress = idAddress;
                                    DaoFactories.Instance.ContactDao.SaveOnlyContact(pc, db);
                                });
                                return newContacts;
                            }

                        
							public List<Person_Address> UpdatePerson_AddressForAddressWithoutSavingNewItem(List<Person_Address> newPerson_Address,long idAddress)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePerson_AddressForAddressWithoutSavingNewItem(newPerson_Address,idAddress,db);
                                }
                            }

							public List<Person_Address> UpdatePerson_AddressForAddressWithoutSavingNewItem(List<Person_Address> newPerson_Address,long idAddress, SubscriptionEntities  db)
                            {
                                Expression<Func<Person_Address, bool>> expressionBuilder = p => p.IdAddress == idAddress;
                                var oldPerson_Address = DaoFactories.Instance.Person_AddressDao.GetPerson_AddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPerson_Address.EntityList.Select(pc => pc.IdPerson_Address).Except(newPerson_Address.Where(pc => pc.IdPerson_Address.HasValue).Select(pc => pc.IdPerson_Address)).ToList();
                                var itemsTobeDeleted = oldPerson_Address.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPerson_Address)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newPerson_Address;
                            }


                            public List<Person_Address> UpdatePerson_AddressForAddress(List<Person_Address> newPerson_Address,long idAddress)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePerson_AddressForAddress(newPerson_Address,idAddress,db);
                                }
                            }

                            public List<Person_Address> UpdatePerson_AddressForAddress(List<Person_Address> newPerson_Address,long idAddress, SubscriptionEntities  db)
                            {
                                Expression<Func<Person_Address, bool>> expressionBuilder = p => p.IdAddress == idAddress;
                                var oldPerson_Address = DaoFactories.Instance.Person_AddressDao.GetPerson_AddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPerson_Address.EntityList.Select(pc => pc.IdPerson_Address).Except(newPerson_Address.Where(pc => pc.IdPerson_Address.HasValue).Select(pc => pc.IdPerson_Address)).ToList();
                                var itemsTobeDeleted = oldPerson_Address.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPerson_Address)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newPerson_Address.ForEach(pc =>
                                {
                                    pc.IdAddress = idAddress;
                                    DaoFactories.Instance.Person_AddressDao.SaveOnlyPerson_Address(pc, db);
                                });
                                return newPerson_Address;
                            }

                        


    



		}
			public partial class ApprovalMessageDao :IApprovalMessageDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public ApprovalMessageDao(){
			
			}

			public ApprovalMessageDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<ApprovalMessage> GetAllApprovalMessages(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllApprovalMessages(db, shouldRemap);
                }
            }

            public List<ApprovalMessage> GetAllApprovalMessages(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapApprovalMessageList(db.ApprovalMessages.Where(p => p.IsDeactivated != true).ToList());
				
				return db.ApprovalMessages.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ApprovalMessage, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ApprovalMessage, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllApprovalMessagesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<ApprovalMessage, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ApprovalMessage, dynamic> orderExpression = null)
            {
				IQueryable<ApprovalMessage> query =  db.ApprovalMessages;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<ApprovalMessage> baseListReturnType = new BaseListReturnType<ApprovalMessage>();

                IQueryable<ApprovalMessage> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdApprovalMessage" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<ApprovalMessage, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapApprovalMessageList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesWithWorkflowActionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ApprovalMessage, bool>> expression = null,bool shouldRemap = false, Func<ApprovalMessage, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllApprovalMessagesByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowAction"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesWithWorkflowDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ApprovalMessage, bool>> expression = null,bool shouldRemap = false, Func<ApprovalMessage, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllApprovalMessagesByPage(sortingPagingInfo, db,expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ApprovalMessage, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ApprovalMessage, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllApprovalMessagesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<ApprovalMessage, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ApprovalMessage, dynamic> orderExpression = null)
            {
				IQueryable<ApprovalMessage> query =  db.ApprovalMessages;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<ApprovalMessage> baseListReturnType = new BaseListReturnType<ApprovalMessage>();

                IQueryable<ApprovalMessage> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdApprovalMessage" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<ApprovalMessage, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapApprovalMessageList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesWithWorkflowActionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ApprovalMessage, bool>> expression = null,bool shouldRemap = false, Func<ApprovalMessage, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllApprovalMessagesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowAction"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesWithWorkflowDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ApprovalMessage, bool>> expression = null,bool shouldRemap = false, Func<ApprovalMessage, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllApprovalMessagesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesWithWorkflowActionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllApprovalMessageWitDetails(new List<string>(){"WorkflowAction"},shouldRemap);
					}
				}
							public BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesWithWorkflowDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllApprovalMessageWitDetails(new List<string>(){"Workflow"},shouldRemap);
					}
				}
			

			public BaseListReturnType<ApprovalMessage> GetAllApprovalMessageWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllApprovalMessageWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<ApprovalMessage> GetAllApprovalMessageWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<ApprovalMessage> query =  db.ApprovalMessages;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<ApprovalMessage> baseListReturnType = new BaseListReturnType<ApprovalMessage>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapApprovalMessageList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public ApprovalMessage GetApprovalMessage(long idApprovalMessage,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetApprovalMessage(idApprovalMessage, db,shouldRemap);
                }
            }
                        public ApprovalMessage GetApprovalMessage(long idApprovalMessage, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapApprovalMessageSingle(db.ApprovalMessages.Where(p => p.IdApprovalMessage == idApprovalMessage && p.IsDeactivated != true).FirstOrDefault());

                return db.ApprovalMessages.Where(p => p.IdApprovalMessage == idApprovalMessage && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public ApprovalMessage GetApprovalMessageCustom( Expression<Func<ApprovalMessage, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetApprovalMessageCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public ApprovalMessage GetApprovalMessageCustom( SubscriptionEntities db , Expression<Func<ApprovalMessage, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<ApprovalMessage> query =  db.ApprovalMessages;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapApprovalMessageSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<ApprovalMessage> GetApprovalMessageCustomList( Expression<Func<ApprovalMessage, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<ApprovalMessage, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetApprovalMessageCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<ApprovalMessage> GetApprovalMessageCustomList(  SubscriptionEntities db , Expression<Func<ApprovalMessage, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<ApprovalMessage, dynamic> orderExpression = null)
			{
				IQueryable<ApprovalMessage> query =  db.ApprovalMessages;
                BaseListReturnType<ApprovalMessage> baseListReturnType = new BaseListReturnType<ApprovalMessage>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapApprovalMessageList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public ApprovalMessage GetApprovalMessageWithWorkflowActionDetails(long idApprovalMessage,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetApprovalMessageWithDetails(idApprovalMessage,new List<string>(){"WorkflowAction"},shouldRemap);
					}
				}

            //IdWorkflowAction -- ZeroOrOne

                public BaseListReturnType<ApprovalMessage> GetAllApprovalMessageListByWorkflowAction(long idWorkflowAction)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllApprovalMessageListByWorkflowAction(idWorkflowAction, db);
                    }
                }
                public BaseListReturnType<ApprovalMessage> GetAllApprovalMessageListByWorkflowAction(long idWorkflowAction, SubscriptionEntities db)
                {
                    Expression<Func<ApprovalMessage, bool>> expression = property=> property.IdWorkflowAction == idWorkflowAction && property.IsDeactivated !=true;
                    return GetApprovalMessageCustomList(db, expression, null, true);
                }
                public BaseListReturnType<ApprovalMessage> GetAllApprovalMessageListByWorkflowActionByPage(long idWorkflowAction, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllApprovalMessageListByWorkflowActionByPage(idWorkflowAction, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<ApprovalMessage> GetAllApprovalMessageListByWorkflowActionByPage(long idWorkflowAction, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<ApprovalMessage, bool>> expression = property => property.IdWorkflowAction == idWorkflowAction && property.IsDeactivated !=true;
                    return GetAllApprovalMessagesByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public ApprovalMessage GetApprovalMessageWithWorkflowDetails(long idApprovalMessage,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetApprovalMessageWithDetails(idApprovalMessage,new List<string>(){"Workflow"},shouldRemap);
					}
				}

            //IdWorkflowToInitiate -- ZeroOrOne

                public BaseListReturnType<ApprovalMessage> GetAllApprovalMessageListByWorkflow(long idWorkflow)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllApprovalMessageListByWorkflow(idWorkflow, db);
                    }
                }
                public BaseListReturnType<ApprovalMessage> GetAllApprovalMessageListByWorkflow(long idWorkflow, SubscriptionEntities db)
                {
                    Expression<Func<ApprovalMessage, bool>> expression = property=> property.IdWorkflowToInitiate == idWorkflow && property.IsDeactivated !=true;
                    return GetApprovalMessageCustomList(db, expression, null, true);
                }
                public BaseListReturnType<ApprovalMessage> GetAllApprovalMessageListByWorkflowByPage(long idWorkflow, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllApprovalMessageListByWorkflowByPage(idWorkflow, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<ApprovalMessage> GetAllApprovalMessageListByWorkflowByPage(long idWorkflow, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<ApprovalMessage, bool>> expression = property => property.IdWorkflowToInitiate == idWorkflow && property.IsDeactivated !=true;
                    return GetAllApprovalMessagesByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public ApprovalMessage GetApprovalMessageWithDetails(long idApprovalMessage, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetApprovalMessageWithDetails(idApprovalMessage, db,includes,shouldRemap);
                }
            }

            public ApprovalMessage GetApprovalMessageWithDetails(long idApprovalMessage, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<ApprovalMessage> query =  db.ApprovalMessages;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapApprovalMessageSingle(query
						.Where(p => p.IdApprovalMessage == idApprovalMessage && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdApprovalMessage == idApprovalMessage && p.IsDeactivated != true).FirstOrDefault();
            }

            public ApprovalMessage GetApprovalMessageWitDetails(long idApprovalMessage,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetApprovalMessageWitDetails(idApprovalMessage, db,shouldRemap);
                }
            }

            public ApprovalMessage GetApprovalMessageWitDetails(long idApprovalMessage, SubscriptionEntities db,bool shouldRemap = false)
            {
				ApprovalMessage _ApprovalMessage = db.ApprovalMessages

					.Include("WorkflowAction")
					.Include("Workflow")
								.Where(p => p.IdApprovalMessage == idApprovalMessage && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapApprovalMessageSingle(_ApprovalMessage);

				return  _ApprovalMessage;
            }

            public List<ApprovalMessage> GetApprovalMessageListByIdList(List<long> approvalMessageIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetApprovalMessageListByIdList(approvalMessageIds, db);
                }
            }
            public List<ApprovalMessage> GetApprovalMessageListByIdList(List<long> approvalMessageIds, SubscriptionEntities db)
            {
                return db.ApprovalMessages.Where(p => p.IsDeactivated != true && approvalMessageIds.Contains(p.IdApprovalMessage.Value)).ToList();
            }


            public void SaveApprovalMessage(ApprovalMessage approvalMessage)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveApprovalMessage(approvalMessage, db);
                }
            }

            public void SaveApprovalMessage(ApprovalMessage approvalMessage, SubscriptionEntities db)
            {
									if (approvalMessage.WorkflowAction != null) 
						DaoFactories.Instance.WorkflowActionDao.SaveWorkflowAction(approvalMessage.WorkflowAction, db);
									if (approvalMessage.Workflow != null) 
						DaoFactories.Instance.WorkflowDao.SaveWorkflow(approvalMessage.Workflow, db);
				                
                if (approvalMessage.IdApprovalMessage.HasValue){
					var approvalMessageFromDb = db.ApprovalMessages.Where(p => p.IdApprovalMessage == approvalMessage.IdApprovalMessage).FirstOrDefault();
													approvalMessageFromDb.Description = approvalMessage.Description;
													approvalMessageFromDb.IsDeactivated = approvalMessage.IsDeactivated;
													approvalMessageFromDb.IdWorkflowToInitiate = approvalMessage.IdWorkflowToInitiate;
													approvalMessageFromDb.IdWorkflowAction = approvalMessage.IdWorkflowAction;
													approvalMessageFromDb.IsRequestRequired = approvalMessage.IsRequestRequired;
													approvalMessageFromDb.IsPostApprovalRequired = approvalMessage.IsPostApprovalRequired;
													approvalMessageFromDb.IsProgressBlocked = approvalMessage.IsProgressBlocked;
									}
                else{
                                                //fix for saving without duplicating items in db
                              approvalMessage.WorkflowAction = null;
                                                        //fix for saving without duplicating items in db
                              approvalMessage.Workflow = null;
                                                db.ApprovalMessages.Add(approvalMessage);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyApprovalMessage(ApprovalMessage approvalMessage)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyApprovalMessage(approvalMessage, db);
                }
            }

            public void SaveOnlyApprovalMessage(ApprovalMessage approvalMessage, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // approvalMessage.WorkflowAction = null;
                                                        //fix for saving without duplicating items in db
                             // approvalMessage.Workflow = null;
                                            if (approvalMessage.IdApprovalMessage.HasValue){
					var approvalMessageFromDb = db.ApprovalMessages.Where(p => p.IdApprovalMessage == approvalMessage.IdApprovalMessage).FirstOrDefault();
													approvalMessageFromDb.Description = approvalMessage.Description;
													approvalMessageFromDb.IsDeactivated = approvalMessage.IsDeactivated;
													approvalMessageFromDb.IdWorkflowToInitiate = approvalMessage.IdWorkflowToInitiate;
													approvalMessageFromDb.IdWorkflowAction = approvalMessage.IdWorkflowAction;
													approvalMessageFromDb.IsRequestRequired = approvalMessage.IsRequestRequired;
													approvalMessageFromDb.IsPostApprovalRequired = approvalMessage.IsPostApprovalRequired;
													approvalMessageFromDb.IsProgressBlocked = approvalMessage.IsProgressBlocked;
										 db.SaveChanges();

				}
                else{
					ApprovalMessage _approvalMessage = new ApprovalMessage();
																	_approvalMessage.Description = approvalMessage.Description;
													_approvalMessage.IsDeactivated = approvalMessage.IsDeactivated;
													_approvalMessage.IdWorkflowToInitiate = approvalMessage.IdWorkflowToInitiate;
													_approvalMessage.IdWorkflowAction = approvalMessage.IdWorkflowAction;
													_approvalMessage.IsRequestRequired = approvalMessage.IsRequestRequired;
													_approvalMessage.IsPostApprovalRequired = approvalMessage.IsPostApprovalRequired;
													_approvalMessage.IsProgressBlocked = approvalMessage.IsProgressBlocked;
					

                    db.ApprovalMessages.Add(_approvalMessage);
					db.SaveChanges();
					approvalMessage.IdApprovalMessage =  _approvalMessage.IdApprovalMessage;
                    
                }
            }

            public void DeleteApprovalMessage(ApprovalMessage approvalMessage)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteApprovalMessage(approvalMessage, db);
                }
            }

            public void DeleteApprovalMessage(ApprovalMessage approvalMessage, SubscriptionEntities db)
            {
								var approvalMessageFromDb = GetApprovalMessage(approvalMessage.IdApprovalMessage.Value,db);
				approvalMessageFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyApprovalMessage(ApprovalMessage approvalMessage)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyApprovalMessage(approvalMessage, db);
                }
            }

            public void DeletePermanentlyApprovalMessage(ApprovalMessage approvalMessage, SubscriptionEntities db)
            {
								var approvalMessageFromDb = GetApprovalMessage(approvalMessage.IdApprovalMessage.Value,db);
				
				db.ApprovalMessages.Remove(approvalMessageFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class BankDao :IBankDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public BankDao(){
			
			}

			public BankDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Bank> GetAllBanks(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBanks(db, shouldRemap);
                }
            }

            public List<Bank> GetAllBanks(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankList(db.Banks.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Banks.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Bank> GetAllBanksByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBanksByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Bank> GetAllBanksByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Bank, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
            {
				IQueryable<Bank> query =  db.Banks;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Bank> baseListReturnType = new BaseListReturnType<Bank>();

                IQueryable<Bank> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBank" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Bank, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Bank> GetAllBanksWithBankStatementStagingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBanksByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Bank> GetAllBanksWithPaymentMethodDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBanksByPage(sortingPagingInfo, db,expression,new List<string>(){"PaymentMethod"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Bank> GetAllBanksWithTransactionAccountDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBanksByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionAccount"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Bank> GetAllBanksWithTransactionTemplateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBanksByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionTemplate"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Bank> GetAllBanksWithPaymentDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBanksByPage(sortingPagingInfo, db,expression,new List<string>(){"PaymentDetails"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Bank> GetAllBanksByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBanksByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Bank> GetAllBanksByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Bank, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
            {
				IQueryable<Bank> query =  db.Banks;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Bank> baseListReturnType = new BaseListReturnType<Bank>();

                IQueryable<Bank> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBank" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Bank, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Bank> GetAllBanksWithBankStatementStagingsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBanksByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Bank> GetAllBanksWithPaymentMethodDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBanksByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"PaymentMethod"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Bank> GetAllBanksWithTransactionAccountDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBanksByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionAccount"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Bank> GetAllBanksWithTransactionTemplateDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBanksByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionTemplate"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Bank> GetAllBanksWithPaymentDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap = false, Func<Bank, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBanksByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"PaymentDetails"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Bank> GetAllBanksWithBankStatementStagingsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankWitDetails(new List<string>(){"BankStatementStagings"},shouldRemap);
					}
				}
							public BaseListReturnType<Bank> GetAllBanksWithPaymentMethodDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankWitDetails(new List<string>(){"PaymentMethod"},shouldRemap);
					}
				}
							public BaseListReturnType<Bank> GetAllBanksWithTransactionAccountDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankWitDetails(new List<string>(){"TransactionAccount"},shouldRemap);
					}
				}
							public BaseListReturnType<Bank> GetAllBanksWithTransactionTemplateDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankWitDetails(new List<string>(){"TransactionTemplate"},shouldRemap);
					}
				}
							public BaseListReturnType<Bank> GetAllBanksWithPaymentDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankWitDetails(new List<string>(){"PaymentDetails"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Bank> GetAllBankWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Bank> GetAllBankWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Bank> query =  db.Banks;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Bank> baseListReturnType = new BaseListReturnType<Bank>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Bank GetBank(long idBank,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBank(idBank, db,shouldRemap);
                }
            }
                        public Bank GetBank(long idBank, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankSingle(db.Banks.Where(p => p.IdBank == idBank && p.IsDeactivated != true).FirstOrDefault());

                return db.Banks.Where(p => p.IdBank == idBank && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Bank GetBankCustom( Expression<Func<Bank, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Bank GetBankCustom( SubscriptionEntities db , Expression<Func<Bank, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Bank> query =  db.Banks;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapBankSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Bank> GetBankCustomList( Expression<Func<Bank, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Bank, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Bank> GetBankCustomList(  SubscriptionEntities db , Expression<Func<Bank, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Bank, dynamic> orderExpression = null)
			{
				IQueryable<Bank> query =  db.Banks;
                BaseListReturnType<Bank> baseListReturnType = new BaseListReturnType<Bank>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Bank GetBankWithBankStatementStagingsDetails(long idBank,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankWithDetails(idBank,new List<string>(){"BankStatementStagings"},shouldRemap);
					}
				}

            //IdBank -- Many


							public Bank GetBankWithPaymentMethodDetails(long idBank,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankWithDetails(idBank,new List<string>(){"PaymentMethod"},shouldRemap);
					}
				}

            //IdBankTransferPaymentMethod -- ZeroOrOne

                public BaseListReturnType<Bank> GetAllBankListByPaymentMethod(long idPaymentMethod)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankListByPaymentMethod(idPaymentMethod, db);
                    }
                }
                public BaseListReturnType<Bank> GetAllBankListByPaymentMethod(long idPaymentMethod, SubscriptionEntities db)
                {
                    Expression<Func<Bank, bool>> expression = property=> property.IdBankTransferPaymentMethod == idPaymentMethod && property.IsDeactivated !=true;
                    return GetBankCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Bank> GetAllBankListByPaymentMethodByPage(long idPaymentMethod, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankListByPaymentMethodByPage(idPaymentMethod, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Bank> GetAllBankListByPaymentMethodByPage(long idPaymentMethod, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Bank, bool>> expression = property => property.IdBankTransferPaymentMethod == idPaymentMethod && property.IsDeactivated !=true;
                    return GetAllBanksByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Bank GetBankWithTransactionAccountDetails(long idBank,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankWithDetails(idBank,new List<string>(){"TransactionAccount"},shouldRemap);
					}
				}

            //IdTransactionAccount -- ZeroOrOne

                public BaseListReturnType<Bank> GetAllBankListByTransactionAccount(long idTransactionAccount)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankListByTransactionAccount(idTransactionAccount, db);
                    }
                }
                public BaseListReturnType<Bank> GetAllBankListByTransactionAccount(long idTransactionAccount, SubscriptionEntities db)
                {
                    Expression<Func<Bank, bool>> expression = property=> property.IdTransactionAccount == idTransactionAccount && property.IsDeactivated !=true;
                    return GetBankCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Bank> GetAllBankListByTransactionAccountByPage(long idTransactionAccount, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankListByTransactionAccountByPage(idTransactionAccount, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Bank> GetAllBankListByTransactionAccountByPage(long idTransactionAccount, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Bank, bool>> expression = property => property.IdTransactionAccount == idTransactionAccount && property.IsDeactivated !=true;
                    return GetAllBanksByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Bank GetBankWithTransactionTemplateDetails(long idBank,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankWithDetails(idBank,new List<string>(){"TransactionTemplate"},shouldRemap);
					}
				}

            //IdTransactionTemplate -- ZeroOrOne

                public BaseListReturnType<Bank> GetAllBankListByTransactionTemplate(long idTransactionTemplate)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankListByTransactionTemplate(idTransactionTemplate, db);
                    }
                }
                public BaseListReturnType<Bank> GetAllBankListByTransactionTemplate(long idTransactionTemplate, SubscriptionEntities db)
                {
                    Expression<Func<Bank, bool>> expression = property=> property.IdTransactionTemplate == idTransactionTemplate && property.IsDeactivated !=true;
                    return GetBankCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Bank> GetAllBankListByTransactionTemplateByPage(long idTransactionTemplate, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankListByTransactionTemplateByPage(idTransactionTemplate, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Bank> GetAllBankListByTransactionTemplateByPage(long idTransactionTemplate, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Bank, bool>> expression = property => property.IdTransactionTemplate == idTransactionTemplate && property.IsDeactivated !=true;
                    return GetAllBanksByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Bank GetBankWithPaymentDetailsDetails(long idBank,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankWithDetails(idBank,new List<string>(){"PaymentDetails"},shouldRemap);
					}
				}

            //IdBank -- Many


			


			public Bank GetBankWithDetails(long idBank, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankWithDetails(idBank, db,includes,shouldRemap);
                }
            }

            public Bank GetBankWithDetails(long idBank, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Bank> query =  db.Banks;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapBankSingle(query
						.Where(p => p.IdBank == idBank && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdBank == idBank && p.IsDeactivated != true).FirstOrDefault();
            }

            public Bank GetBankWitDetails(long idBank,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankWitDetails(idBank, db,shouldRemap);
                }
            }

            public Bank GetBankWitDetails(long idBank, SubscriptionEntities db,bool shouldRemap = false)
            {
				Bank _Bank = db.Banks

					.Include("BankStatementStagings")
					.Include("PaymentMethod")
					.Include("TransactionAccount")
					.Include("TransactionTemplate")
					.Include("PaymentDetails")
								.Where(p => p.IdBank == idBank && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapBankSingle(_Bank);

				return  _Bank;
            }

            public List<Bank> GetBankListByIdList(List<long> bankIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankListByIdList(bankIds, db);
                }
            }
            public List<Bank> GetBankListByIdList(List<long> bankIds, SubscriptionEntities db)
            {
                return db.Banks.Where(p => p.IsDeactivated != true && bankIds.Contains(p.IdBank.Value)).ToList();
            }


            public void SaveBank(Bank bank)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveBank(bank, db);
                }
            }

            public void SaveBank(Bank bank, SubscriptionEntities db)
            {
									if (bank.PaymentMethod != null) 
						DaoFactories.Instance.PaymentMethodDao.SavePaymentMethod(bank.PaymentMethod, db);
									if (bank.TransactionAccount != null) 
						DaoFactories.Instance.TransactionAccountDao.SaveTransactionAccount(bank.TransactionAccount, db);
									if (bank.TransactionTemplate != null) 
						DaoFactories.Instance.TransactionTemplateDao.SaveTransactionTemplate(bank.TransactionTemplate, db);
				                
                if (bank.IdBank.HasValue){
					var bankFromDb = db.Banks.Where(p => p.IdBank == bank.IdBank).FirstOrDefault();
													bankFromDb.Description = bank.Description;
													bankFromDb.IsDeactivated = bank.IsDeactivated;
													bankFromDb.IdBankTransferPaymentMethod = bank.IdBankTransferPaymentMethod;
													bankFromDb.IdTransactionAccount = bank.IdTransactionAccount;
													bankFromDb.IdTransactionTemplate = bank.IdTransactionTemplate;
									}
                else{
                                                //fix for saving without duplicating items in db
                              bank.PaymentMethod = null;
                                                        //fix for saving without duplicating items in db
                              bank.TransactionAccount = null;
                                                        //fix for saving without duplicating items in db
                              bank.TransactionTemplate = null;
                                                db.Banks.Add(bank);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyBank(Bank bank)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyBank(bank, db);
                }
            }

            public void SaveOnlyBank(Bank bank, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // bank.PaymentMethod = null;
                                                        //fix for saving without duplicating items in db
                             // bank.TransactionAccount = null;
                                                        //fix for saving without duplicating items in db
                             // bank.TransactionTemplate = null;
                                            if (bank.IdBank.HasValue){
					var bankFromDb = db.Banks.Where(p => p.IdBank == bank.IdBank).FirstOrDefault();
													bankFromDb.Description = bank.Description;
													bankFromDb.IsDeactivated = bank.IsDeactivated;
													bankFromDb.IdBankTransferPaymentMethod = bank.IdBankTransferPaymentMethod;
													bankFromDb.IdTransactionAccount = bank.IdTransactionAccount;
													bankFromDb.IdTransactionTemplate = bank.IdTransactionTemplate;
										 db.SaveChanges();

				}
                else{
					Bank _bank = new Bank();
																	_bank.Description = bank.Description;
													_bank.IsDeactivated = bank.IsDeactivated;
													_bank.IdBankTransferPaymentMethod = bank.IdBankTransferPaymentMethod;
													_bank.IdTransactionAccount = bank.IdTransactionAccount;
													_bank.IdTransactionTemplate = bank.IdTransactionTemplate;
					

                    db.Banks.Add(_bank);
					db.SaveChanges();
					bank.IdBank =  _bank.IdBank;
                    
                }
            }

            public void DeleteBank(Bank bank)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteBank(bank, db);
                }
            }

            public void DeleteBank(Bank bank, SubscriptionEntities db)
            {
								var bankFromDb = GetBank(bank.IdBank.Value,db);
				bankFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyBank(Bank bank)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyBank(bank, db);
                }
            }

            public void DeletePermanentlyBank(Bank bank, SubscriptionEntities db)
            {
								var bankFromDb = GetBank(bank.IdBank.Value,db);
				
				db.Banks.Remove(bankFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementStaging> UpdateBankStatementStagingsForBankWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idBank)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingsForBankWithoutSavingNewItem(newBankStatementStagings,idBank,db);
                                }
                            }

							public List<BankStatementStaging> UpdateBankStatementStagingsForBankWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idBank, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStaging, bool>> expressionBuilder = p => p.IdBank == idBank;
                                var oldBankStatementStagings = DaoFactories.Instance.BankStatementStagingDao.GetBankStatementStagingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagings.EntityList.Select(pc => pc.IdBankStatementStaging).Except(newBankStatementStagings.Where(pc => pc.IdBankStatementStaging.HasValue).Select(pc => pc.IdBankStatementStaging)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStaging)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagings;
                            }


                            public List<BankStatementStaging> UpdateBankStatementStagingsForBank(List<BankStatementStaging> newBankStatementStagings,long idBank)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingsForBank(newBankStatementStagings,idBank,db);
                                }
                            }

                            public List<BankStatementStaging> UpdateBankStatementStagingsForBank(List<BankStatementStaging> newBankStatementStagings,long idBank, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStaging, bool>> expressionBuilder = p => p.IdBank == idBank;
                                var oldBankStatementStagings = DaoFactories.Instance.BankStatementStagingDao.GetBankStatementStagingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagings.EntityList.Select(pc => pc.IdBankStatementStaging).Except(newBankStatementStagings.Where(pc => pc.IdBankStatementStaging.HasValue).Select(pc => pc.IdBankStatementStaging)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStaging)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagings.ForEach(pc =>
                                {
                                    pc.IdBank = idBank;
                                    DaoFactories.Instance.BankStatementStagingDao.SaveOnlyBankStatementStaging(pc, db);
                                });
                                return newBankStatementStagings;
                            }

                        
							public List<PaymentDetail> UpdatePaymentDetailsForBankWithoutSavingNewItem(List<PaymentDetail> newPaymentDetails,long idBank)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePaymentDetailsForBankWithoutSavingNewItem(newPaymentDetails,idBank,db);
                                }
                            }

							public List<PaymentDetail> UpdatePaymentDetailsForBankWithoutSavingNewItem(List<PaymentDetail> newPaymentDetails,long idBank, SubscriptionEntities  db)
                            {
                                Expression<Func<PaymentDetail, bool>> expressionBuilder = p => p.IdBank == idBank;
                                var oldPaymentDetails = DaoFactories.Instance.PaymentDetailDao.GetPaymentDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPaymentDetails.EntityList.Select(pc => pc.IdPaymentDetail).Except(newPaymentDetails.Where(pc => pc.IdPaymentDetail.HasValue).Select(pc => pc.IdPaymentDetail)).ToList();
                                var itemsTobeDeleted = oldPaymentDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPaymentDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newPaymentDetails;
                            }


                            public List<PaymentDetail> UpdatePaymentDetailsForBank(List<PaymentDetail> newPaymentDetails,long idBank)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePaymentDetailsForBank(newPaymentDetails,idBank,db);
                                }
                            }

                            public List<PaymentDetail> UpdatePaymentDetailsForBank(List<PaymentDetail> newPaymentDetails,long idBank, SubscriptionEntities  db)
                            {
                                Expression<Func<PaymentDetail, bool>> expressionBuilder = p => p.IdBank == idBank;
                                var oldPaymentDetails = DaoFactories.Instance.PaymentDetailDao.GetPaymentDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPaymentDetails.EntityList.Select(pc => pc.IdPaymentDetail).Except(newPaymentDetails.Where(pc => pc.IdPaymentDetail.HasValue).Select(pc => pc.IdPaymentDetail)).ToList();
                                var itemsTobeDeleted = oldPaymentDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPaymentDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newPaymentDetails.ForEach(pc =>
                                {
                                    pc.IdBank = idBank;
                                    DaoFactories.Instance.PaymentDetailDao.SaveOnlyPaymentDetail(pc, db);
                                });
                                return newPaymentDetails;
                            }

                        


    



		}
			public partial class BankReconHitTypeDao :IBankReconHitTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public BankReconHitTypeDao(){
			
			}

			public BankReconHitTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<BankReconHitType> GetAllBankReconHitTypes(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankReconHitTypes(db, shouldRemap);
                }
            }

            public List<BankReconHitType> GetAllBankReconHitTypes(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankReconHitTypeList(db.BankReconHitTypes.Where(p => p.IsDeactivated != true).ToList());
				
				return db.BankReconHitTypes.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<BankReconHitType> GetAllBankReconHitTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconHitType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankReconHitType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankReconHitTypesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankReconHitType> GetAllBankReconHitTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankReconHitType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankReconHitType, dynamic> orderExpression = null)
            {
				IQueryable<BankReconHitType> query =  db.BankReconHitTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankReconHitType> baseListReturnType = new BaseListReturnType<BankReconHitType>();

                IQueryable<BankReconHitType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankReconHitType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankReconHitType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankReconHitTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankReconHitType> GetAllBankReconHitTypesWithBankStatementStagingHitsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconHitType, bool>> expression = null,bool shouldRemap = false, Func<BankReconHitType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankReconHitTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHits"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<BankReconHitType> GetAllBankReconHitTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconHitType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankReconHitType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankReconHitTypesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankReconHitType> GetAllBankReconHitTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankReconHitType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankReconHitType, dynamic> orderExpression = null)
            {
				IQueryable<BankReconHitType> query =  db.BankReconHitTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankReconHitType> baseListReturnType = new BaseListReturnType<BankReconHitType>();

                IQueryable<BankReconHitType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankReconHitType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankReconHitType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankReconHitTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankReconHitType> GetAllBankReconHitTypesWithBankStatementStagingHitsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconHitType, bool>> expression = null,bool shouldRemap = false, Func<BankReconHitType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankReconHitTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHits"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<BankReconHitType> GetAllBankReconHitTypesWithBankStatementStagingHitsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankReconHitTypeWitDetails(new List<string>(){"BankStatementStagingHits"},shouldRemap);
					}
				}
			

			public BaseListReturnType<BankReconHitType> GetAllBankReconHitTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankReconHitTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<BankReconHitType> GetAllBankReconHitTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankReconHitType> query =  db.BankReconHitTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankReconHitType> baseListReturnType = new BaseListReturnType<BankReconHitType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankReconHitTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public BankReconHitType GetBankReconHitType(long idBankReconHitType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankReconHitType(idBankReconHitType, db,shouldRemap);
                }
            }
                        public BankReconHitType GetBankReconHitType(long idBankReconHitType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankReconHitTypeSingle(db.BankReconHitTypes.Where(p => p.IdBankReconHitType == idBankReconHitType && p.IsDeactivated != true).FirstOrDefault());

                return db.BankReconHitTypes.Where(p => p.IdBankReconHitType == idBankReconHitType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public BankReconHitType GetBankReconHitTypeCustom( Expression<Func<BankReconHitType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankReconHitTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public BankReconHitType GetBankReconHitTypeCustom( SubscriptionEntities db , Expression<Func<BankReconHitType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<BankReconHitType> query =  db.BankReconHitTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapBankReconHitTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<BankReconHitType> GetBankReconHitTypeCustomList( Expression<Func<BankReconHitType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankReconHitType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankReconHitTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<BankReconHitType> GetBankReconHitTypeCustomList(  SubscriptionEntities db , Expression<Func<BankReconHitType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankReconHitType, dynamic> orderExpression = null)
			{
				IQueryable<BankReconHitType> query =  db.BankReconHitTypes;
                BaseListReturnType<BankReconHitType> baseListReturnType = new BaseListReturnType<BankReconHitType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankReconHitTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public BankReconHitType GetBankReconHitTypeWithBankStatementStagingHitsDetails(long idBankReconHitType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankReconHitTypeWithDetails(idBankReconHitType,new List<string>(){"BankStatementStagingHits"},shouldRemap);
					}
				}

            //IdBankReconHitType -- Many


			


			public BankReconHitType GetBankReconHitTypeWithDetails(long idBankReconHitType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankReconHitTypeWithDetails(idBankReconHitType, db,includes,shouldRemap);
                }
            }

            public BankReconHitType GetBankReconHitTypeWithDetails(long idBankReconHitType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankReconHitType> query =  db.BankReconHitTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapBankReconHitTypeSingle(query
						.Where(p => p.IdBankReconHitType == idBankReconHitType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdBankReconHitType == idBankReconHitType && p.IsDeactivated != true).FirstOrDefault();
            }

            public BankReconHitType GetBankReconHitTypeWitDetails(long idBankReconHitType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankReconHitTypeWitDetails(idBankReconHitType, db,shouldRemap);
                }
            }

            public BankReconHitType GetBankReconHitTypeWitDetails(long idBankReconHitType, SubscriptionEntities db,bool shouldRemap = false)
            {
				BankReconHitType _BankReconHitType = db.BankReconHitTypes

					.Include("BankStatementStagingHits")
								.Where(p => p.IdBankReconHitType == idBankReconHitType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapBankReconHitTypeSingle(_BankReconHitType);

				return  _BankReconHitType;
            }

            public List<BankReconHitType> GetBankReconHitTypeListByIdList(List<long> bankReconHitTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankReconHitTypeListByIdList(bankReconHitTypeIds, db);
                }
            }
            public List<BankReconHitType> GetBankReconHitTypeListByIdList(List<long> bankReconHitTypeIds, SubscriptionEntities db)
            {
                return db.BankReconHitTypes.Where(p => p.IsDeactivated != true && bankReconHitTypeIds.Contains(p.IdBankReconHitType.Value)).ToList();
            }


            public void SaveBankReconHitType(BankReconHitType bankReconHitType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveBankReconHitType(bankReconHitType, db);
                }
            }

            public void SaveBankReconHitType(BankReconHitType bankReconHitType, SubscriptionEntities db)
            {
				                
                if (bankReconHitType.IdBankReconHitType.HasValue){
					var bankReconHitTypeFromDb = db.BankReconHitTypes.Where(p => p.IdBankReconHitType == bankReconHitType.IdBankReconHitType).FirstOrDefault();
													bankReconHitTypeFromDb.Description = bankReconHitType.Description;
													bankReconHitTypeFromDb.IsDeactivated = bankReconHitType.IsDeactivated;
									}
                else{
                                        db.BankReconHitTypes.Add(bankReconHitType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyBankReconHitType(BankReconHitType bankReconHitType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyBankReconHitType(bankReconHitType, db);
                }
            }

            public void SaveOnlyBankReconHitType(BankReconHitType bankReconHitType, SubscriptionEntities db)
            {
			                    if (bankReconHitType.IdBankReconHitType.HasValue){
					var bankReconHitTypeFromDb = db.BankReconHitTypes.Where(p => p.IdBankReconHitType == bankReconHitType.IdBankReconHitType).FirstOrDefault();
													bankReconHitTypeFromDb.Description = bankReconHitType.Description;
													bankReconHitTypeFromDb.IsDeactivated = bankReconHitType.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					BankReconHitType _bankReconHitType = new BankReconHitType();
																	_bankReconHitType.Description = bankReconHitType.Description;
													_bankReconHitType.IsDeactivated = bankReconHitType.IsDeactivated;
					

                    db.BankReconHitTypes.Add(_bankReconHitType);
					db.SaveChanges();
					bankReconHitType.IdBankReconHitType =  _bankReconHitType.IdBankReconHitType;
                    
                }
            }

            public void DeleteBankReconHitType(BankReconHitType bankReconHitType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteBankReconHitType(bankReconHitType, db);
                }
            }

            public void DeleteBankReconHitType(BankReconHitType bankReconHitType, SubscriptionEntities db)
            {
								var bankReconHitTypeFromDb = GetBankReconHitType(bankReconHitType.IdBankReconHitType.Value,db);
				bankReconHitTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyBankReconHitType(BankReconHitType bankReconHitType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyBankReconHitType(bankReconHitType, db);
                }
            }

            public void DeletePermanentlyBankReconHitType(BankReconHitType bankReconHitType, SubscriptionEntities db)
            {
								var bankReconHitTypeFromDb = GetBankReconHitType(bankReconHitType.IdBankReconHitType.Value,db);
				
				db.BankReconHitTypes.Remove(bankReconHitTypeFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankReconHitTypeWithoutSavingNewItem(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankReconHitType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingHitsForBankReconHitTypeWithoutSavingNewItem(newBankStatementStagingHits,idBankReconHitType,db);
                                }
                            }

							public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankReconHitTypeWithoutSavingNewItem(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankReconHitType, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingHit, bool>> expressionBuilder = p => p.IdBankReconHitType == idBankReconHitType;
                                var oldBankStatementStagingHits = DaoFactories.Instance.BankStatementStagingHitDao.GetBankStatementStagingHitCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingHits.EntityList.Select(pc => pc.IdBankStatementStagingHit).Except(newBankStatementStagingHits.Where(pc => pc.IdBankStatementStagingHit.HasValue).Select(pc => pc.IdBankStatementStagingHit)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingHits.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingHit)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagingHits;
                            }


                            public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankReconHitType(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankReconHitType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingHitsForBankReconHitType(newBankStatementStagingHits,idBankReconHitType,db);
                                }
                            }

                            public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankReconHitType(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankReconHitType, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingHit, bool>> expressionBuilder = p => p.IdBankReconHitType == idBankReconHitType;
                                var oldBankStatementStagingHits = DaoFactories.Instance.BankStatementStagingHitDao.GetBankStatementStagingHitCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingHits.EntityList.Select(pc => pc.IdBankStatementStagingHit).Except(newBankStatementStagingHits.Where(pc => pc.IdBankStatementStagingHit.HasValue).Select(pc => pc.IdBankStatementStagingHit)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingHits.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingHit)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagingHits.ForEach(pc =>
                                {
                                    pc.IdBankReconHitType = idBankReconHitType;
                                    DaoFactories.Instance.BankStatementStagingHitDao.SaveOnlyBankStatementStagingHit(pc, db);
                                });
                                return newBankStatementStagingHits;
                            }

                        


    



		}
			public partial class BankReconOrderProcessStateDao :IBankReconOrderProcessStateDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public BankReconOrderProcessStateDao(){
			
			}

			public BankReconOrderProcessStateDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<BankReconOrderProcessState> GetAllBankReconOrderProcessStates(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankReconOrderProcessStates(db, shouldRemap);
                }
            }

            public List<BankReconOrderProcessState> GetAllBankReconOrderProcessStates(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankReconOrderProcessStateList(db.BankReconOrderProcessStates.Where(p => p.IsDeactivated != true).ToList());
				
				return db.BankReconOrderProcessStates.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<BankReconOrderProcessState> GetAllBankReconOrderProcessStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderProcessState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankReconOrderProcessState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankReconOrderProcessStatesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankReconOrderProcessState> GetAllBankReconOrderProcessStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankReconOrderProcessState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankReconOrderProcessState, dynamic> orderExpression = null)
            {
				IQueryable<BankReconOrderProcessState> query =  db.BankReconOrderProcessStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankReconOrderProcessState> baseListReturnType = new BaseListReturnType<BankReconOrderProcessState>();

                IQueryable<BankReconOrderProcessState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankReconOrderProcessState" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankReconOrderProcessState, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankReconOrderProcessStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankReconOrderProcessState> GetAllBankReconOrderProcessStatesWithBankStatementStagingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderProcessState, bool>> expression = null,bool shouldRemap = false, Func<BankReconOrderProcessState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankReconOrderProcessStatesByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<BankReconOrderProcessState> GetAllBankReconOrderProcessStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderProcessState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankReconOrderProcessState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankReconOrderProcessStatesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankReconOrderProcessState> GetAllBankReconOrderProcessStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankReconOrderProcessState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankReconOrderProcessState, dynamic> orderExpression = null)
            {
				IQueryable<BankReconOrderProcessState> query =  db.BankReconOrderProcessStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankReconOrderProcessState> baseListReturnType = new BaseListReturnType<BankReconOrderProcessState>();

                IQueryable<BankReconOrderProcessState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankReconOrderProcessState" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankReconOrderProcessState, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankReconOrderProcessStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankReconOrderProcessState> GetAllBankReconOrderProcessStatesWithBankStatementStagingsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderProcessState, bool>> expression = null,bool shouldRemap = false, Func<BankReconOrderProcessState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankReconOrderProcessStatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<BankReconOrderProcessState> GetAllBankReconOrderProcessStatesWithBankStatementStagingsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankReconOrderProcessStateWitDetails(new List<string>(){"BankStatementStagings"},shouldRemap);
					}
				}
			

			public BaseListReturnType<BankReconOrderProcessState> GetAllBankReconOrderProcessStateWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankReconOrderProcessStateWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<BankReconOrderProcessState> GetAllBankReconOrderProcessStateWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankReconOrderProcessState> query =  db.BankReconOrderProcessStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankReconOrderProcessState> baseListReturnType = new BaseListReturnType<BankReconOrderProcessState>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankReconOrderProcessStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public BankReconOrderProcessState GetBankReconOrderProcessState(long idBankReconOrderProcessState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankReconOrderProcessState(idBankReconOrderProcessState, db,shouldRemap);
                }
            }
                        public BankReconOrderProcessState GetBankReconOrderProcessState(long idBankReconOrderProcessState, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankReconOrderProcessStateSingle(db.BankReconOrderProcessStates.Where(p => p.IdBankReconOrderProcessState == idBankReconOrderProcessState && p.IsDeactivated != true).FirstOrDefault());

                return db.BankReconOrderProcessStates.Where(p => p.IdBankReconOrderProcessState == idBankReconOrderProcessState && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public BankReconOrderProcessState GetBankReconOrderProcessStateCustom( Expression<Func<BankReconOrderProcessState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankReconOrderProcessStateCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public BankReconOrderProcessState GetBankReconOrderProcessStateCustom( SubscriptionEntities db , Expression<Func<BankReconOrderProcessState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<BankReconOrderProcessState> query =  db.BankReconOrderProcessStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapBankReconOrderProcessStateSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<BankReconOrderProcessState> GetBankReconOrderProcessStateCustomList( Expression<Func<BankReconOrderProcessState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankReconOrderProcessState, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankReconOrderProcessStateCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<BankReconOrderProcessState> GetBankReconOrderProcessStateCustomList(  SubscriptionEntities db , Expression<Func<BankReconOrderProcessState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankReconOrderProcessState, dynamic> orderExpression = null)
			{
				IQueryable<BankReconOrderProcessState> query =  db.BankReconOrderProcessStates;
                BaseListReturnType<BankReconOrderProcessState> baseListReturnType = new BaseListReturnType<BankReconOrderProcessState>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankReconOrderProcessStateList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public BankReconOrderProcessState GetBankReconOrderProcessStateWithBankStatementStagingsDetails(long idBankReconOrderProcessState,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankReconOrderProcessStateWithDetails(idBankReconOrderProcessState,new List<string>(){"BankStatementStagings"},shouldRemap);
					}
				}

            //IdBankReconOrderProcessState -- Many


			


			public BankReconOrderProcessState GetBankReconOrderProcessStateWithDetails(long idBankReconOrderProcessState, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankReconOrderProcessStateWithDetails(idBankReconOrderProcessState, db,includes,shouldRemap);
                }
            }

            public BankReconOrderProcessState GetBankReconOrderProcessStateWithDetails(long idBankReconOrderProcessState, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankReconOrderProcessState> query =  db.BankReconOrderProcessStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapBankReconOrderProcessStateSingle(query
						.Where(p => p.IdBankReconOrderProcessState == idBankReconOrderProcessState && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdBankReconOrderProcessState == idBankReconOrderProcessState && p.IsDeactivated != true).FirstOrDefault();
            }

            public BankReconOrderProcessState GetBankReconOrderProcessStateWitDetails(long idBankReconOrderProcessState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankReconOrderProcessStateWitDetails(idBankReconOrderProcessState, db,shouldRemap);
                }
            }

            public BankReconOrderProcessState GetBankReconOrderProcessStateWitDetails(long idBankReconOrderProcessState, SubscriptionEntities db,bool shouldRemap = false)
            {
				BankReconOrderProcessState _BankReconOrderProcessState = db.BankReconOrderProcessStates

					.Include("BankStatementStagings")
								.Where(p => p.IdBankReconOrderProcessState == idBankReconOrderProcessState && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapBankReconOrderProcessStateSingle(_BankReconOrderProcessState);

				return  _BankReconOrderProcessState;
            }

            public List<BankReconOrderProcessState> GetBankReconOrderProcessStateListByIdList(List<long> bankReconOrderProcessStateIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankReconOrderProcessStateListByIdList(bankReconOrderProcessStateIds, db);
                }
            }
            public List<BankReconOrderProcessState> GetBankReconOrderProcessStateListByIdList(List<long> bankReconOrderProcessStateIds, SubscriptionEntities db)
            {
                return db.BankReconOrderProcessStates.Where(p => p.IsDeactivated != true && bankReconOrderProcessStateIds.Contains(p.IdBankReconOrderProcessState.Value)).ToList();
            }


            public void SaveBankReconOrderProcessState(BankReconOrderProcessState bankReconOrderProcessState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveBankReconOrderProcessState(bankReconOrderProcessState, db);
                }
            }

            public void SaveBankReconOrderProcessState(BankReconOrderProcessState bankReconOrderProcessState, SubscriptionEntities db)
            {
				                
                if (bankReconOrderProcessState.IdBankReconOrderProcessState.HasValue){
					var bankReconOrderProcessStateFromDb = db.BankReconOrderProcessStates.Where(p => p.IdBankReconOrderProcessState == bankReconOrderProcessState.IdBankReconOrderProcessState).FirstOrDefault();
													bankReconOrderProcessStateFromDb.IsDeactivated = bankReconOrderProcessState.IsDeactivated;
													bankReconOrderProcessStateFromDb.Description = bankReconOrderProcessState.Description;
									}
                else{
                                        db.BankReconOrderProcessStates.Add(bankReconOrderProcessState);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyBankReconOrderProcessState(BankReconOrderProcessState bankReconOrderProcessState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyBankReconOrderProcessState(bankReconOrderProcessState, db);
                }
            }

            public void SaveOnlyBankReconOrderProcessState(BankReconOrderProcessState bankReconOrderProcessState, SubscriptionEntities db)
            {
			                    if (bankReconOrderProcessState.IdBankReconOrderProcessState.HasValue){
					var bankReconOrderProcessStateFromDb = db.BankReconOrderProcessStates.Where(p => p.IdBankReconOrderProcessState == bankReconOrderProcessState.IdBankReconOrderProcessState).FirstOrDefault();
													bankReconOrderProcessStateFromDb.IsDeactivated = bankReconOrderProcessState.IsDeactivated;
													bankReconOrderProcessStateFromDb.Description = bankReconOrderProcessState.Description;
										 db.SaveChanges();

				}
                else{
					BankReconOrderProcessState _bankReconOrderProcessState = new BankReconOrderProcessState();
																	_bankReconOrderProcessState.IsDeactivated = bankReconOrderProcessState.IsDeactivated;
													_bankReconOrderProcessState.Description = bankReconOrderProcessState.Description;
					

                    db.BankReconOrderProcessStates.Add(_bankReconOrderProcessState);
					db.SaveChanges();
					bankReconOrderProcessState.IdBankReconOrderProcessState =  _bankReconOrderProcessState.IdBankReconOrderProcessState;
                    
                }
            }

            public void DeleteBankReconOrderProcessState(BankReconOrderProcessState bankReconOrderProcessState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteBankReconOrderProcessState(bankReconOrderProcessState, db);
                }
            }

            public void DeleteBankReconOrderProcessState(BankReconOrderProcessState bankReconOrderProcessState, SubscriptionEntities db)
            {
								var bankReconOrderProcessStateFromDb = GetBankReconOrderProcessState(bankReconOrderProcessState.IdBankReconOrderProcessState.Value,db);
				bankReconOrderProcessStateFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyBankReconOrderProcessState(BankReconOrderProcessState bankReconOrderProcessState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyBankReconOrderProcessState(bankReconOrderProcessState, db);
                }
            }

            public void DeletePermanentlyBankReconOrderProcessState(BankReconOrderProcessState bankReconOrderProcessState, SubscriptionEntities db)
            {
								var bankReconOrderProcessStateFromDb = GetBankReconOrderProcessState(bankReconOrderProcessState.IdBankReconOrderProcessState.Value,db);
				
				db.BankReconOrderProcessStates.Remove(bankReconOrderProcessStateFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementStaging> UpdateBankStatementStagingsForBankReconOrderProcessStateWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idBankReconOrderProcessState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingsForBankReconOrderProcessStateWithoutSavingNewItem(newBankStatementStagings,idBankReconOrderProcessState,db);
                                }
                            }

							public List<BankStatementStaging> UpdateBankStatementStagingsForBankReconOrderProcessStateWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idBankReconOrderProcessState, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStaging, bool>> expressionBuilder = p => p.IdBankReconOrderProcessState == idBankReconOrderProcessState;
                                var oldBankStatementStagings = DaoFactories.Instance.BankStatementStagingDao.GetBankStatementStagingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagings.EntityList.Select(pc => pc.IdBankStatementStaging).Except(newBankStatementStagings.Where(pc => pc.IdBankStatementStaging.HasValue).Select(pc => pc.IdBankStatementStaging)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStaging)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagings;
                            }


                            public List<BankStatementStaging> UpdateBankStatementStagingsForBankReconOrderProcessState(List<BankStatementStaging> newBankStatementStagings,long idBankReconOrderProcessState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingsForBankReconOrderProcessState(newBankStatementStagings,idBankReconOrderProcessState,db);
                                }
                            }

                            public List<BankStatementStaging> UpdateBankStatementStagingsForBankReconOrderProcessState(List<BankStatementStaging> newBankStatementStagings,long idBankReconOrderProcessState, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStaging, bool>> expressionBuilder = p => p.IdBankReconOrderProcessState == idBankReconOrderProcessState;
                                var oldBankStatementStagings = DaoFactories.Instance.BankStatementStagingDao.GetBankStatementStagingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagings.EntityList.Select(pc => pc.IdBankStatementStaging).Except(newBankStatementStagings.Where(pc => pc.IdBankStatementStaging.HasValue).Select(pc => pc.IdBankStatementStaging)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStaging)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagings.ForEach(pc =>
                                {
                                    pc.IdBankReconOrderProcessState = idBankReconOrderProcessState;
                                    DaoFactories.Instance.BankStatementStagingDao.SaveOnlyBankStatementStaging(pc, db);
                                });
                                return newBankStatementStagings;
                            }

                        


    



		}
			public partial class BankReconOrderTypeDao :IBankReconOrderTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public BankReconOrderTypeDao(){
			
			}

			public BankReconOrderTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<BankReconOrderType> GetAllBankReconOrderTypes(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankReconOrderTypes(db, shouldRemap);
                }
            }

            public List<BankReconOrderType> GetAllBankReconOrderTypes(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankReconOrderTypeList(db.BankReconOrderTypes.Where(p => p.IsDeactivated != true).ToList());
				
				return db.BankReconOrderTypes.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<BankReconOrderType> GetAllBankReconOrderTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankReconOrderType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankReconOrderTypesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankReconOrderType> GetAllBankReconOrderTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankReconOrderType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankReconOrderType, dynamic> orderExpression = null)
            {
				IQueryable<BankReconOrderType> query =  db.BankReconOrderTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankReconOrderType> baseListReturnType = new BaseListReturnType<BankReconOrderType>();

                IQueryable<BankReconOrderType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankReconOrderType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankReconOrderType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankReconOrderTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankReconOrderType> GetAllBankReconOrderTypesWithBankStatementStagingDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderType, bool>> expression = null,bool shouldRemap = false, Func<BankReconOrderType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankReconOrderTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetails"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<BankReconOrderType> GetAllBankReconOrderTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankReconOrderType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankReconOrderTypesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankReconOrderType> GetAllBankReconOrderTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankReconOrderType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankReconOrderType, dynamic> orderExpression = null)
            {
				IQueryable<BankReconOrderType> query =  db.BankReconOrderTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankReconOrderType> baseListReturnType = new BaseListReturnType<BankReconOrderType>();

                IQueryable<BankReconOrderType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankReconOrderType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankReconOrderType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankReconOrderTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankReconOrderType> GetAllBankReconOrderTypesWithBankStatementStagingDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderType, bool>> expression = null,bool shouldRemap = false, Func<BankReconOrderType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankReconOrderTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetails"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<BankReconOrderType> GetAllBankReconOrderTypesWithBankStatementStagingDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankReconOrderTypeWitDetails(new List<string>(){"BankStatementStagingDetails"},shouldRemap);
					}
				}
			

			public BaseListReturnType<BankReconOrderType> GetAllBankReconOrderTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankReconOrderTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<BankReconOrderType> GetAllBankReconOrderTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankReconOrderType> query =  db.BankReconOrderTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankReconOrderType> baseListReturnType = new BaseListReturnType<BankReconOrderType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankReconOrderTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public BankReconOrderType GetBankReconOrderType(long idBankReconOrderType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankReconOrderType(idBankReconOrderType, db,shouldRemap);
                }
            }
                        public BankReconOrderType GetBankReconOrderType(long idBankReconOrderType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankReconOrderTypeSingle(db.BankReconOrderTypes.Where(p => p.IdBankReconOrderType == idBankReconOrderType && p.IsDeactivated != true).FirstOrDefault());

                return db.BankReconOrderTypes.Where(p => p.IdBankReconOrderType == idBankReconOrderType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public BankReconOrderType GetBankReconOrderTypeCustom( Expression<Func<BankReconOrderType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankReconOrderTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public BankReconOrderType GetBankReconOrderTypeCustom( SubscriptionEntities db , Expression<Func<BankReconOrderType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<BankReconOrderType> query =  db.BankReconOrderTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapBankReconOrderTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<BankReconOrderType> GetBankReconOrderTypeCustomList( Expression<Func<BankReconOrderType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankReconOrderType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankReconOrderTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<BankReconOrderType> GetBankReconOrderTypeCustomList(  SubscriptionEntities db , Expression<Func<BankReconOrderType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankReconOrderType, dynamic> orderExpression = null)
			{
				IQueryable<BankReconOrderType> query =  db.BankReconOrderTypes;
                BaseListReturnType<BankReconOrderType> baseListReturnType = new BaseListReturnType<BankReconOrderType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankReconOrderTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public BankReconOrderType GetBankReconOrderTypeWithBankStatementStagingDetailsDetails(long idBankReconOrderType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankReconOrderTypeWithDetails(idBankReconOrderType,new List<string>(){"BankStatementStagingDetails"},shouldRemap);
					}
				}

            //IdBankReconOrderType -- Many


			


			public BankReconOrderType GetBankReconOrderTypeWithDetails(long idBankReconOrderType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankReconOrderTypeWithDetails(idBankReconOrderType, db,includes,shouldRemap);
                }
            }

            public BankReconOrderType GetBankReconOrderTypeWithDetails(long idBankReconOrderType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankReconOrderType> query =  db.BankReconOrderTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapBankReconOrderTypeSingle(query
						.Where(p => p.IdBankReconOrderType == idBankReconOrderType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdBankReconOrderType == idBankReconOrderType && p.IsDeactivated != true).FirstOrDefault();
            }

            public BankReconOrderType GetBankReconOrderTypeWitDetails(long idBankReconOrderType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankReconOrderTypeWitDetails(idBankReconOrderType, db,shouldRemap);
                }
            }

            public BankReconOrderType GetBankReconOrderTypeWitDetails(long idBankReconOrderType, SubscriptionEntities db,bool shouldRemap = false)
            {
				BankReconOrderType _BankReconOrderType = db.BankReconOrderTypes

					.Include("BankStatementStagingDetails")
								.Where(p => p.IdBankReconOrderType == idBankReconOrderType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapBankReconOrderTypeSingle(_BankReconOrderType);

				return  _BankReconOrderType;
            }

            public List<BankReconOrderType> GetBankReconOrderTypeListByIdList(List<long> bankReconOrderTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankReconOrderTypeListByIdList(bankReconOrderTypeIds, db);
                }
            }
            public List<BankReconOrderType> GetBankReconOrderTypeListByIdList(List<long> bankReconOrderTypeIds, SubscriptionEntities db)
            {
                return db.BankReconOrderTypes.Where(p => p.IsDeactivated != true && bankReconOrderTypeIds.Contains(p.IdBankReconOrderType.Value)).ToList();
            }


            public void SaveBankReconOrderType(BankReconOrderType bankReconOrderType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveBankReconOrderType(bankReconOrderType, db);
                }
            }

            public void SaveBankReconOrderType(BankReconOrderType bankReconOrderType, SubscriptionEntities db)
            {
				                
                if (bankReconOrderType.IdBankReconOrderType.HasValue){
					var bankReconOrderTypeFromDb = db.BankReconOrderTypes.Where(p => p.IdBankReconOrderType == bankReconOrderType.IdBankReconOrderType).FirstOrDefault();
													bankReconOrderTypeFromDb.IsDeactivated = bankReconOrderType.IsDeactivated;
													bankReconOrderTypeFromDb.Description = bankReconOrderType.Description;
									}
                else{
                                        db.BankReconOrderTypes.Add(bankReconOrderType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyBankReconOrderType(BankReconOrderType bankReconOrderType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyBankReconOrderType(bankReconOrderType, db);
                }
            }

            public void SaveOnlyBankReconOrderType(BankReconOrderType bankReconOrderType, SubscriptionEntities db)
            {
			                    if (bankReconOrderType.IdBankReconOrderType.HasValue){
					var bankReconOrderTypeFromDb = db.BankReconOrderTypes.Where(p => p.IdBankReconOrderType == bankReconOrderType.IdBankReconOrderType).FirstOrDefault();
													bankReconOrderTypeFromDb.IsDeactivated = bankReconOrderType.IsDeactivated;
													bankReconOrderTypeFromDb.Description = bankReconOrderType.Description;
										 db.SaveChanges();

				}
                else{
					BankReconOrderType _bankReconOrderType = new BankReconOrderType();
																	_bankReconOrderType.IsDeactivated = bankReconOrderType.IsDeactivated;
													_bankReconOrderType.Description = bankReconOrderType.Description;
					

                    db.BankReconOrderTypes.Add(_bankReconOrderType);
					db.SaveChanges();
					bankReconOrderType.IdBankReconOrderType =  _bankReconOrderType.IdBankReconOrderType;
                    
                }
            }

            public void DeleteBankReconOrderType(BankReconOrderType bankReconOrderType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteBankReconOrderType(bankReconOrderType, db);
                }
            }

            public void DeleteBankReconOrderType(BankReconOrderType bankReconOrderType, SubscriptionEntities db)
            {
								var bankReconOrderTypeFromDb = GetBankReconOrderType(bankReconOrderType.IdBankReconOrderType.Value,db);
				bankReconOrderTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyBankReconOrderType(BankReconOrderType bankReconOrderType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyBankReconOrderType(bankReconOrderType, db);
                }
            }

            public void DeletePermanentlyBankReconOrderType(BankReconOrderType bankReconOrderType, SubscriptionEntities db)
            {
								var bankReconOrderTypeFromDb = GetBankReconOrderType(bankReconOrderType.IdBankReconOrderType.Value,db);
				
				db.BankReconOrderTypes.Remove(bankReconOrderTypeFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankReconOrderTypeWithoutSavingNewItem(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankReconOrderType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingDetailsForBankReconOrderTypeWithoutSavingNewItem(newBankStatementStagingDetails,idBankReconOrderType,db);
                                }
                            }

							public List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankReconOrderTypeWithoutSavingNewItem(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankReconOrderType, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingDetail, bool>> expressionBuilder = p => p.IdBankReconOrderType == idBankReconOrderType;
                                var oldBankStatementStagingDetails = DaoFactories.Instance.BankStatementStagingDetailDao.GetBankStatementStagingDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingDetails.EntityList.Select(pc => pc.IdBankStatementStagingDetail).Except(newBankStatementStagingDetails.Where(pc => pc.IdBankStatementStagingDetail.HasValue).Select(pc => pc.IdBankStatementStagingDetail)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagingDetails;
                            }


                            public List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankReconOrderType(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankReconOrderType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingDetailsForBankReconOrderType(newBankStatementStagingDetails,idBankReconOrderType,db);
                                }
                            }

                            public List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankReconOrderType(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankReconOrderType, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingDetail, bool>> expressionBuilder = p => p.IdBankReconOrderType == idBankReconOrderType;
                                var oldBankStatementStagingDetails = DaoFactories.Instance.BankStatementStagingDetailDao.GetBankStatementStagingDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingDetails.EntityList.Select(pc => pc.IdBankStatementStagingDetail).Except(newBankStatementStagingDetails.Where(pc => pc.IdBankStatementStagingDetail.HasValue).Select(pc => pc.IdBankStatementStagingDetail)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagingDetails.ForEach(pc =>
                                {
                                    pc.IdBankReconOrderType = idBankReconOrderType;
                                    DaoFactories.Instance.BankStatementStagingDetailDao.SaveOnlyBankStatementStagingDetail(pc, db);
                                });
                                return newBankStatementStagingDetails;
                            }

                        


    



		}
			public partial class BankStatementHitListDao :IBankStatementHitListDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public BankStatementHitListDao(){
			
			}

			public BankStatementHitListDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<BankStatementHitList> GetAllBankStatementHitLists(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementHitLists(db, shouldRemap);
                }
            }

            public List<BankStatementHitList> GetAllBankStatementHitLists(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementHitListList(db.BankStatementHitLists.Where(p => p.IsDeactivated != true).ToList());
				
				return db.BankStatementHitLists.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementHitList, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementHitListsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementHitList, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementHitList, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementHitList> query =  db.BankStatementHitLists;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementHitList> baseListReturnType = new BaseListReturnType<BankStatementHitList>();

                IQueryable<BankStatementHitList> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementHitList" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementHitList, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementHitListList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithBankStatementStagingDetailDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null,bool shouldRemap = false, Func<BankStatementHitList, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitListsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetail"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithBankStatementHitList_TransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null,bool shouldRemap = false, Func<BankStatementHitList, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitListsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementHitList_TransactionPreset"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithBankStatementStagingHitsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null,bool shouldRemap = false, Func<BankStatementHitList, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitListsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHits"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithTemporaryTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null,bool shouldRemap = false, Func<BankStatementHitList, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitListsByPage(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactions"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementHitList, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementHitListsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementHitList, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementHitList, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementHitList> query =  db.BankStatementHitLists;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementHitList> baseListReturnType = new BaseListReturnType<BankStatementHitList>();

                IQueryable<BankStatementHitList> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementHitList" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementHitList, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementHitListList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithBankStatementStagingDetailDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null,bool shouldRemap = false, Func<BankStatementHitList, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitListsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetail"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithBankStatementHitList_TransactionPresetDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null,bool shouldRemap = false, Func<BankStatementHitList, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitListsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementHitList_TransactionPreset"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithBankStatementStagingHitsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null,bool shouldRemap = false, Func<BankStatementHitList, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitListsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHits"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithTemporaryTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null,bool shouldRemap = false, Func<BankStatementHitList, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitListsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactions"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithBankStatementStagingDetailDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitListWitDetails(new List<string>(){"BankStatementStagingDetail"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithBankStatementHitList_TransactionPresetDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitListWitDetails(new List<string>(){"BankStatementHitList_TransactionPreset"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithBankStatementStagingHitsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitListWitDetails(new List<string>(){"BankStatementStagingHits"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithTemporaryTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitListWitDetails(new List<string>(){"TemporaryTransactions"},shouldRemap);
					}
				}
			

			public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementHitListWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementHitList> query =  db.BankStatementHitLists;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementHitList> baseListReturnType = new BaseListReturnType<BankStatementHitList>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementHitListList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public BankStatementHitList GetBankStatementHitList(long idBankStatementHitList,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementHitList(idBankStatementHitList, db,shouldRemap);
                }
            }
                        public BankStatementHitList GetBankStatementHitList(long idBankStatementHitList, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementHitListSingle(db.BankStatementHitLists.Where(p => p.IdBankStatementHitList == idBankStatementHitList && p.IsDeactivated != true).FirstOrDefault());

                return db.BankStatementHitLists.Where(p => p.IdBankStatementHitList == idBankStatementHitList && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public BankStatementHitList GetBankStatementHitListCustom( Expression<Func<BankStatementHitList, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementHitListCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public BankStatementHitList GetBankStatementHitListCustom( SubscriptionEntities db , Expression<Func<BankStatementHitList, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<BankStatementHitList> query =  db.BankStatementHitLists;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapBankStatementHitListSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<BankStatementHitList> GetBankStatementHitListCustomList( Expression<Func<BankStatementHitList, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementHitList, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementHitListCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<BankStatementHitList> GetBankStatementHitListCustomList(  SubscriptionEntities db , Expression<Func<BankStatementHitList, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementHitList, dynamic> orderExpression = null)
			{
				IQueryable<BankStatementHitList> query =  db.BankStatementHitLists;
                BaseListReturnType<BankStatementHitList> baseListReturnType = new BaseListReturnType<BankStatementHitList>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementHitListList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public BankStatementHitList GetBankStatementHitListWithBankStatementStagingDetailDetails(long idBankStatementHitList,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementHitListWithDetails(idBankStatementHitList,new List<string>(){"BankStatementStagingDetail"},shouldRemap);
					}
				}

            //IdBankStatementStagingDetail -- ZeroOrOne

                public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListListByBankStatementStagingDetail(long idBankStatementStagingDetail)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementHitListListByBankStatementStagingDetail(idBankStatementStagingDetail, db);
                    }
                }
                public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListListByBankStatementStagingDetail(long idBankStatementStagingDetail, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementHitList, bool>> expression = property=> property.IdBankStatementStagingDetail == idBankStatementStagingDetail && property.IsDeactivated !=true;
                    return GetBankStatementHitListCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListListByBankStatementStagingDetailByPage(long idBankStatementStagingDetail, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementHitListListByBankStatementStagingDetailByPage(idBankStatementStagingDetail, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListListByBankStatementStagingDetailByPage(long idBankStatementStagingDetail, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementHitList, bool>> expression = property => property.IdBankStatementStagingDetail == idBankStatementStagingDetail && property.IsDeactivated !=true;
                    return GetAllBankStatementHitListsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementHitList GetBankStatementHitListWithBankStatementHitList_TransactionPresetDetails(long idBankStatementHitList,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementHitListWithDetails(idBankStatementHitList,new List<string>(){"BankStatementHitList_TransactionPreset"},shouldRemap);
					}
				}

            //IdBankStatementHitList -- Many


							public BankStatementHitList GetBankStatementHitListWithBankStatementStagingHitsDetails(long idBankStatementHitList,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementHitListWithDetails(idBankStatementHitList,new List<string>(){"BankStatementStagingHits"},shouldRemap);
					}
				}

            //IdBankStatementHitList -- Many


							public BankStatementHitList GetBankStatementHitListWithTemporaryTransactionsDetails(long idBankStatementHitList,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementHitListWithDetails(idBankStatementHitList,new List<string>(){"TemporaryTransactions"},shouldRemap);
					}
				}

            //IdBankStatementHitList -- Many


			


			public BankStatementHitList GetBankStatementHitListWithDetails(long idBankStatementHitList, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementHitListWithDetails(idBankStatementHitList, db,includes,shouldRemap);
                }
            }

            public BankStatementHitList GetBankStatementHitListWithDetails(long idBankStatementHitList, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementHitList> query =  db.BankStatementHitLists;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapBankStatementHitListSingle(query
						.Where(p => p.IdBankStatementHitList == idBankStatementHitList && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdBankStatementHitList == idBankStatementHitList && p.IsDeactivated != true).FirstOrDefault();
            }

            public BankStatementHitList GetBankStatementHitListWitDetails(long idBankStatementHitList,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementHitListWitDetails(idBankStatementHitList, db,shouldRemap);
                }
            }

            public BankStatementHitList GetBankStatementHitListWitDetails(long idBankStatementHitList, SubscriptionEntities db,bool shouldRemap = false)
            {
				BankStatementHitList _BankStatementHitList = db.BankStatementHitLists

					.Include("BankStatementStagingDetail")
					.Include("BankStatementHitList_TransactionPreset")
					.Include("BankStatementStagingHits")
					.Include("TemporaryTransactions")
								.Where(p => p.IdBankStatementHitList == idBankStatementHitList && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapBankStatementHitListSingle(_BankStatementHitList);

				return  _BankStatementHitList;
            }

            public List<BankStatementHitList> GetBankStatementHitListListByIdList(List<long> bankStatementHitListIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementHitListListByIdList(bankStatementHitListIds, db);
                }
            }
            public List<BankStatementHitList> GetBankStatementHitListListByIdList(List<long> bankStatementHitListIds, SubscriptionEntities db)
            {
                return db.BankStatementHitLists.Where(p => p.IsDeactivated != true && bankStatementHitListIds.Contains(p.IdBankStatementHitList.Value)).ToList();
            }


            public void SaveBankStatementHitList(BankStatementHitList bankStatementHitList)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveBankStatementHitList(bankStatementHitList, db);
                }
            }

            public void SaveBankStatementHitList(BankStatementHitList bankStatementHitList, SubscriptionEntities db)
            {
									if (bankStatementHitList.BankStatementStagingDetail != null) 
						DaoFactories.Instance.BankStatementStagingDetailDao.SaveBankStatementStagingDetail(bankStatementHitList.BankStatementStagingDetail, db);
				                
                if (bankStatementHitList.IdBankStatementHitList.HasValue){
					var bankStatementHitListFromDb = db.BankStatementHitLists.Where(p => p.IdBankStatementHitList == bankStatementHitList.IdBankStatementHitList).FirstOrDefault();
													bankStatementHitListFromDb.Description = bankStatementHitList.Description;
													bankStatementHitListFromDb.Amount = bankStatementHitList.Amount;
													bankStatementHitListFromDb.HitCount = bankStatementHitList.HitCount;
													bankStatementHitListFromDb.IsDeactivated = bankStatementHitList.IsDeactivated;
													bankStatementHitListFromDb.IdBankStatementStagingDetail = bankStatementHitList.IdBankStatementStagingDetail;
									}
                else{
                                                //fix for saving without duplicating items in db
                              bankStatementHitList.BankStatementStagingDetail = null;
                                                db.BankStatementHitLists.Add(bankStatementHitList);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyBankStatementHitList(BankStatementHitList bankStatementHitList)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyBankStatementHitList(bankStatementHitList, db);
                }
            }

            public void SaveOnlyBankStatementHitList(BankStatementHitList bankStatementHitList, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // bankStatementHitList.BankStatementStagingDetail = null;
                                            if (bankStatementHitList.IdBankStatementHitList.HasValue){
					var bankStatementHitListFromDb = db.BankStatementHitLists.Where(p => p.IdBankStatementHitList == bankStatementHitList.IdBankStatementHitList).FirstOrDefault();
													bankStatementHitListFromDb.Description = bankStatementHitList.Description;
													bankStatementHitListFromDb.Amount = bankStatementHitList.Amount;
													bankStatementHitListFromDb.HitCount = bankStatementHitList.HitCount;
													bankStatementHitListFromDb.IsDeactivated = bankStatementHitList.IsDeactivated;
													bankStatementHitListFromDb.IdBankStatementStagingDetail = bankStatementHitList.IdBankStatementStagingDetail;
										 db.SaveChanges();

				}
                else{
					BankStatementHitList _bankStatementHitList = new BankStatementHitList();
																	_bankStatementHitList.Description = bankStatementHitList.Description;
													_bankStatementHitList.Amount = bankStatementHitList.Amount;
													_bankStatementHitList.HitCount = bankStatementHitList.HitCount;
													_bankStatementHitList.IsDeactivated = bankStatementHitList.IsDeactivated;
													_bankStatementHitList.IdBankStatementStagingDetail = bankStatementHitList.IdBankStatementStagingDetail;
					

                    db.BankStatementHitLists.Add(_bankStatementHitList);
					db.SaveChanges();
					bankStatementHitList.IdBankStatementHitList =  _bankStatementHitList.IdBankStatementHitList;
                    
                }
            }

            public void DeleteBankStatementHitList(BankStatementHitList bankStatementHitList)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteBankStatementHitList(bankStatementHitList, db);
                }
            }

            public void DeleteBankStatementHitList(BankStatementHitList bankStatementHitList, SubscriptionEntities db)
            {
								var bankStatementHitListFromDb = GetBankStatementHitList(bankStatementHitList.IdBankStatementHitList.Value,db);
				bankStatementHitListFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyBankStatementHitList(BankStatementHitList bankStatementHitList)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyBankStatementHitList(bankStatementHitList, db);
                }
            }

            public void DeletePermanentlyBankStatementHitList(BankStatementHitList bankStatementHitList, SubscriptionEntities db)
            {
								var bankStatementHitListFromDb = GetBankStatementHitList(bankStatementHitList.IdBankStatementHitList.Value,db);
				
				db.BankStatementHitLists.Remove(bankStatementHitListFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementHitList_TransactionPreset> UpdateBankStatementHitList_TransactionPresetForBankStatementHitListWithoutSavingNewItem(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idBankStatementHitList)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementHitList_TransactionPresetForBankStatementHitListWithoutSavingNewItem(newBankStatementHitList_TransactionPreset,idBankStatementHitList,db);
                                }
                            }

							public List<BankStatementHitList_TransactionPreset> UpdateBankStatementHitList_TransactionPresetForBankStatementHitListWithoutSavingNewItem(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idBankStatementHitList, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementHitList_TransactionPreset, bool>> expressionBuilder = p => p.IdBankStatementHitList == idBankStatementHitList;
                                var oldBankStatementHitList_TransactionPreset = DaoFactories.Instance.BankStatementHitList_TransactionPresetDao.GetBankStatementHitList_TransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementHitList_TransactionPreset.EntityList.Select(pc => pc.IdBankStatementHitList_TransactionPreset).Except(newBankStatementHitList_TransactionPreset.Where(pc => pc.IdBankStatementHitList_TransactionPreset.HasValue).Select(pc => pc.IdBankStatementHitList_TransactionPreset)).ToList();
                                var itemsTobeDeleted = oldBankStatementHitList_TransactionPreset.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementHitList_TransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementHitList_TransactionPreset;
                            }


                            public List<BankStatementHitList_TransactionPreset> UpdateBankStatementHitList_TransactionPresetForBankStatementHitList(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idBankStatementHitList)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementHitList_TransactionPresetForBankStatementHitList(newBankStatementHitList_TransactionPreset,idBankStatementHitList,db);
                                }
                            }

                            public List<BankStatementHitList_TransactionPreset> UpdateBankStatementHitList_TransactionPresetForBankStatementHitList(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idBankStatementHitList, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementHitList_TransactionPreset, bool>> expressionBuilder = p => p.IdBankStatementHitList == idBankStatementHitList;
                                var oldBankStatementHitList_TransactionPreset = DaoFactories.Instance.BankStatementHitList_TransactionPresetDao.GetBankStatementHitList_TransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementHitList_TransactionPreset.EntityList.Select(pc => pc.IdBankStatementHitList_TransactionPreset).Except(newBankStatementHitList_TransactionPreset.Where(pc => pc.IdBankStatementHitList_TransactionPreset.HasValue).Select(pc => pc.IdBankStatementHitList_TransactionPreset)).ToList();
                                var itemsTobeDeleted = oldBankStatementHitList_TransactionPreset.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementHitList_TransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementHitList_TransactionPreset.ForEach(pc =>
                                {
                                    pc.IdBankStatementHitList = idBankStatementHitList;
                                    DaoFactories.Instance.BankStatementHitList_TransactionPresetDao.SaveOnlyBankStatementHitList_TransactionPreset(pc, db);
                                });
                                return newBankStatementHitList_TransactionPreset;
                            }

                        
							public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankStatementHitListWithoutSavingNewItem(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementHitList)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingHitsForBankStatementHitListWithoutSavingNewItem(newBankStatementStagingHits,idBankStatementHitList,db);
                                }
                            }

							public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankStatementHitListWithoutSavingNewItem(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementHitList, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingHit, bool>> expressionBuilder = p => p.IdBankStatementHitList == idBankStatementHitList;
                                var oldBankStatementStagingHits = DaoFactories.Instance.BankStatementStagingHitDao.GetBankStatementStagingHitCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingHits.EntityList.Select(pc => pc.IdBankStatementStagingHit).Except(newBankStatementStagingHits.Where(pc => pc.IdBankStatementStagingHit.HasValue).Select(pc => pc.IdBankStatementStagingHit)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingHits.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingHit)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagingHits;
                            }


                            public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankStatementHitList(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementHitList)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingHitsForBankStatementHitList(newBankStatementStagingHits,idBankStatementHitList,db);
                                }
                            }

                            public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankStatementHitList(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementHitList, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingHit, bool>> expressionBuilder = p => p.IdBankStatementHitList == idBankStatementHitList;
                                var oldBankStatementStagingHits = DaoFactories.Instance.BankStatementStagingHitDao.GetBankStatementStagingHitCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingHits.EntityList.Select(pc => pc.IdBankStatementStagingHit).Except(newBankStatementStagingHits.Where(pc => pc.IdBankStatementStagingHit.HasValue).Select(pc => pc.IdBankStatementStagingHit)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingHits.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingHit)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagingHits.ForEach(pc =>
                                {
                                    pc.IdBankStatementHitList = idBankStatementHitList;
                                    DaoFactories.Instance.BankStatementStagingHitDao.SaveOnlyBankStatementStagingHit(pc, db);
                                });
                                return newBankStatementStagingHits;
                            }

                        
							public List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementHitListWithoutSavingNewItem(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementHitList)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionsForBankStatementHitListWithoutSavingNewItem(newTemporaryTransactions,idBankStatementHitList,db);
                                }
                            }

							public List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementHitListWithoutSavingNewItem(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementHitList, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransaction, bool>> expressionBuilder = p => p.IdBankStatementHitList == idBankStatementHitList;
                                var oldTemporaryTransactions = DaoFactories.Instance.TemporaryTransactionDao.GetTemporaryTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactions.EntityList.Select(pc => pc.IdTemporaryTransaction).Except(newTemporaryTransactions.Where(pc => pc.IdTemporaryTransaction.HasValue).Select(pc => pc.IdTemporaryTransaction)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTemporaryTransactions;
                            }


                            public List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementHitList(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementHitList)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionsForBankStatementHitList(newTemporaryTransactions,idBankStatementHitList,db);
                                }
                            }

                            public List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementHitList(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementHitList, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransaction, bool>> expressionBuilder = p => p.IdBankStatementHitList == idBankStatementHitList;
                                var oldTemporaryTransactions = DaoFactories.Instance.TemporaryTransactionDao.GetTemporaryTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactions.EntityList.Select(pc => pc.IdTemporaryTransaction).Except(newTemporaryTransactions.Where(pc => pc.IdTemporaryTransaction.HasValue).Select(pc => pc.IdTemporaryTransaction)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTemporaryTransactions.ForEach(pc =>
                                {
                                    pc.IdBankStatementHitList = idBankStatementHitList;
                                    DaoFactories.Instance.TemporaryTransactionDao.SaveOnlyTemporaryTransaction(pc, db);
                                });
                                return newTemporaryTransactions;
                            }

                        


    



		}
			public partial class BankStatementHitList_TransactionPresetDao :IBankStatementHitList_TransactionPresetDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public BankStatementHitList_TransactionPresetDao(){
			
			}

			public BankStatementHitList_TransactionPresetDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPreset(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementHitList_TransactionPreset(db, shouldRemap);
                }
            }

            public List<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPreset(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementHitList_TransactionPresetList(db.BankStatementHitList_TransactionPreset.Where(p => p.IsDeactivated != true).ToList());
				
				return db.BankStatementHitList_TransactionPreset.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementHitList_TransactionPresetByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementHitList_TransactionPreset> query =  db.BankStatementHitList_TransactionPreset;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementHitList_TransactionPreset> baseListReturnType = new BaseListReturnType<BankStatementHitList_TransactionPreset>();

                IQueryable<BankStatementHitList_TransactionPreset> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementHitList_TransactionPreset" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementHitList_TransactionPreset, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementHitList_TransactionPresetList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetWithBankStatementHitListDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitList_TransactionPresetByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementHitList"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetWithTransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitList_TransactionPresetByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionPreset"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementHitList_TransactionPresetByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementHitList_TransactionPreset> query =  db.BankStatementHitList_TransactionPreset;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementHitList_TransactionPreset> baseListReturnType = new BaseListReturnType<BankStatementHitList_TransactionPreset>();

                IQueryable<BankStatementHitList_TransactionPreset> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementHitList_TransactionPreset" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementHitList_TransactionPreset, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementHitList_TransactionPresetList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetWithBankStatementHitListDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitList_TransactionPresetByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementHitList"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetWithTransactionPresetDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitList_TransactionPresetByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionPreset"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetWithBankStatementHitListDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitList_TransactionPresetWitDetails(new List<string>(){"BankStatementHitList"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetWithTransactionPresetDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementHitList_TransactionPresetWitDetails(new List<string>(){"TransactionPreset"},shouldRemap);
					}
				}
			

			public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementHitList_TransactionPresetWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementHitList_TransactionPreset> query =  db.BankStatementHitList_TransactionPreset;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementHitList_TransactionPreset> baseListReturnType = new BaseListReturnType<BankStatementHitList_TransactionPreset>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementHitList_TransactionPresetList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPreset(long idBankStatementHitList_TransactionPreset,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementHitList_TransactionPreset(idBankStatementHitList_TransactionPreset, db,shouldRemap);
                }
            }
                        public BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPreset(long idBankStatementHitList_TransactionPreset, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementHitList_TransactionPresetSingle(db.BankStatementHitList_TransactionPreset.Where(p => p.IdBankStatementHitList_TransactionPreset == idBankStatementHitList_TransactionPreset && p.IsDeactivated != true).FirstOrDefault());

                return db.BankStatementHitList_TransactionPreset.Where(p => p.IdBankStatementHitList_TransactionPreset == idBankStatementHitList_TransactionPreset && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetCustom( Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementHitList_TransactionPresetCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetCustom( SubscriptionEntities db , Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<BankStatementHitList_TransactionPreset> query =  db.BankStatementHitList_TransactionPreset;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapBankStatementHitList_TransactionPresetSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<BankStatementHitList_TransactionPreset> GetBankStatementHitList_TransactionPresetCustomList( Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementHitList_TransactionPresetCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<BankStatementHitList_TransactionPreset> GetBankStatementHitList_TransactionPresetCustomList(  SubscriptionEntities db , Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
			{
				IQueryable<BankStatementHitList_TransactionPreset> query =  db.BankStatementHitList_TransactionPreset;
                BaseListReturnType<BankStatementHitList_TransactionPreset> baseListReturnType = new BaseListReturnType<BankStatementHitList_TransactionPreset>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementHitList_TransactionPresetList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetWithBankStatementHitListDetails(long idBankStatementHitList_TransactionPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementHitList_TransactionPresetWithDetails(idBankStatementHitList_TransactionPreset,new List<string>(){"BankStatementHitList"},shouldRemap);
					}
				}

            //IdBankStatementHitList -- ZeroOrOne

                public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetListByBankStatementHitList(long idBankStatementHitList)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementHitList_TransactionPresetListByBankStatementHitList(idBankStatementHitList, db);
                    }
                }
                public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetListByBankStatementHitList(long idBankStatementHitList, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = property=> property.IdBankStatementHitList == idBankStatementHitList && property.IsDeactivated !=true;
                    return GetBankStatementHitList_TransactionPresetCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetListByBankStatementHitListByPage(long idBankStatementHitList, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementHitList_TransactionPresetListByBankStatementHitListByPage(idBankStatementHitList, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetListByBankStatementHitListByPage(long idBankStatementHitList, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = property => property.IdBankStatementHitList == idBankStatementHitList && property.IsDeactivated !=true;
                    return GetAllBankStatementHitList_TransactionPresetByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetWithTransactionPresetDetails(long idBankStatementHitList_TransactionPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementHitList_TransactionPresetWithDetails(idBankStatementHitList_TransactionPreset,new List<string>(){"TransactionPreset"},shouldRemap);
					}
				}

            //IdTransactionPreset -- ZeroOrOne

                public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetListByTransactionPreset(long idTransactionPreset)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementHitList_TransactionPresetListByTransactionPreset(idTransactionPreset, db);
                    }
                }
                public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetListByTransactionPreset(long idTransactionPreset, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = property=> property.IdTransactionPreset == idTransactionPreset && property.IsDeactivated !=true;
                    return GetBankStatementHitList_TransactionPresetCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetListByTransactionPresetByPage(long idTransactionPreset, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementHitList_TransactionPresetListByTransactionPresetByPage(idTransactionPreset, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetListByTransactionPresetByPage(long idTransactionPreset, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = property => property.IdTransactionPreset == idTransactionPreset && property.IsDeactivated !=true;
                    return GetAllBankStatementHitList_TransactionPresetByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetWithDetails(long idBankStatementHitList_TransactionPreset, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementHitList_TransactionPresetWithDetails(idBankStatementHitList_TransactionPreset, db,includes,shouldRemap);
                }
            }

            public BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetWithDetails(long idBankStatementHitList_TransactionPreset, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementHitList_TransactionPreset> query =  db.BankStatementHitList_TransactionPreset;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapBankStatementHitList_TransactionPresetSingle(query
						.Where(p => p.IdBankStatementHitList_TransactionPreset == idBankStatementHitList_TransactionPreset && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdBankStatementHitList_TransactionPreset == idBankStatementHitList_TransactionPreset && p.IsDeactivated != true).FirstOrDefault();
            }

            public BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetWitDetails(long idBankStatementHitList_TransactionPreset,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementHitList_TransactionPresetWitDetails(idBankStatementHitList_TransactionPreset, db,shouldRemap);
                }
            }

            public BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetWitDetails(long idBankStatementHitList_TransactionPreset, SubscriptionEntities db,bool shouldRemap = false)
            {
				BankStatementHitList_TransactionPreset _BankStatementHitList_TransactionPreset = db.BankStatementHitList_TransactionPreset

					.Include("BankStatementHitList")
					.Include("TransactionPreset")
								.Where(p => p.IdBankStatementHitList_TransactionPreset == idBankStatementHitList_TransactionPreset && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapBankStatementHitList_TransactionPresetSingle(_BankStatementHitList_TransactionPreset);

				return  _BankStatementHitList_TransactionPreset;
            }

            public List<BankStatementHitList_TransactionPreset> GetBankStatementHitList_TransactionPresetListByIdList(List<long> bankStatementHitList_TransactionPresetIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementHitList_TransactionPresetListByIdList(bankStatementHitList_TransactionPresetIds, db);
                }
            }
            public List<BankStatementHitList_TransactionPreset> GetBankStatementHitList_TransactionPresetListByIdList(List<long> bankStatementHitList_TransactionPresetIds, SubscriptionEntities db)
            {
                return db.BankStatementHitList_TransactionPreset.Where(p => p.IsDeactivated != true && bankStatementHitList_TransactionPresetIds.Contains(p.IdBankStatementHitList_TransactionPreset.Value)).ToList();
            }


            public void SaveBankStatementHitList_TransactionPreset(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveBankStatementHitList_TransactionPreset(bankStatementHitList_TransactionPreset, db);
                }
            }

            public void SaveBankStatementHitList_TransactionPreset(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset, SubscriptionEntities db)
            {
									if (bankStatementHitList_TransactionPreset.BankStatementHitList != null) 
						DaoFactories.Instance.BankStatementHitListDao.SaveBankStatementHitList(bankStatementHitList_TransactionPreset.BankStatementHitList, db);
									if (bankStatementHitList_TransactionPreset.TransactionPreset != null) 
						DaoFactories.Instance.TransactionPresetDao.SaveTransactionPreset(bankStatementHitList_TransactionPreset.TransactionPreset, db);
				                
                if (bankStatementHitList_TransactionPreset.IdBankStatementHitList_TransactionPreset.HasValue){
					var bankStatementHitList_TransactionPresetFromDb = db.BankStatementHitList_TransactionPreset.Where(p => p.IdBankStatementHitList_TransactionPreset == bankStatementHitList_TransactionPreset.IdBankStatementHitList_TransactionPreset).FirstOrDefault();
													bankStatementHitList_TransactionPresetFromDb.IdBankStatementHitList = bankStatementHitList_TransactionPreset.IdBankStatementHitList;
													bankStatementHitList_TransactionPresetFromDb.IdTransactionPreset = bankStatementHitList_TransactionPreset.IdTransactionPreset;
													bankStatementHitList_TransactionPresetFromDb.IsDeactivated = bankStatementHitList_TransactionPreset.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              bankStatementHitList_TransactionPreset.BankStatementHitList = null;
                                                        //fix for saving without duplicating items in db
                              bankStatementHitList_TransactionPreset.TransactionPreset = null;
                                                db.BankStatementHitList_TransactionPreset.Add(bankStatementHitList_TransactionPreset);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyBankStatementHitList_TransactionPreset(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyBankStatementHitList_TransactionPreset(bankStatementHitList_TransactionPreset, db);
                }
            }

            public void SaveOnlyBankStatementHitList_TransactionPreset(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // bankStatementHitList_TransactionPreset.BankStatementHitList = null;
                                                        //fix for saving without duplicating items in db
                             // bankStatementHitList_TransactionPreset.TransactionPreset = null;
                                            if (bankStatementHitList_TransactionPreset.IdBankStatementHitList_TransactionPreset.HasValue){
					var bankStatementHitList_TransactionPresetFromDb = db.BankStatementHitList_TransactionPreset.Where(p => p.IdBankStatementHitList_TransactionPreset == bankStatementHitList_TransactionPreset.IdBankStatementHitList_TransactionPreset).FirstOrDefault();
													bankStatementHitList_TransactionPresetFromDb.IdBankStatementHitList = bankStatementHitList_TransactionPreset.IdBankStatementHitList;
													bankStatementHitList_TransactionPresetFromDb.IdTransactionPreset = bankStatementHitList_TransactionPreset.IdTransactionPreset;
													bankStatementHitList_TransactionPresetFromDb.IsDeactivated = bankStatementHitList_TransactionPreset.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					BankStatementHitList_TransactionPreset _bankStatementHitList_TransactionPreset = new BankStatementHitList_TransactionPreset();
																	_bankStatementHitList_TransactionPreset.IdBankStatementHitList = bankStatementHitList_TransactionPreset.IdBankStatementHitList;
													_bankStatementHitList_TransactionPreset.IdTransactionPreset = bankStatementHitList_TransactionPreset.IdTransactionPreset;
													_bankStatementHitList_TransactionPreset.IsDeactivated = bankStatementHitList_TransactionPreset.IsDeactivated;
					

                    db.BankStatementHitList_TransactionPreset.Add(_bankStatementHitList_TransactionPreset);
					db.SaveChanges();
					bankStatementHitList_TransactionPreset.IdBankStatementHitList_TransactionPreset =  _bankStatementHitList_TransactionPreset.IdBankStatementHitList_TransactionPreset;
                    
                }
            }

            public void DeleteBankStatementHitList_TransactionPreset(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteBankStatementHitList_TransactionPreset(bankStatementHitList_TransactionPreset, db);
                }
            }

            public void DeleteBankStatementHitList_TransactionPreset(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset, SubscriptionEntities db)
            {
								var bankStatementHitList_TransactionPresetFromDb = GetBankStatementHitList_TransactionPreset(bankStatementHitList_TransactionPreset.IdBankStatementHitList_TransactionPreset.Value,db);
				bankStatementHitList_TransactionPresetFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyBankStatementHitList_TransactionPreset(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyBankStatementHitList_TransactionPreset(bankStatementHitList_TransactionPreset, db);
                }
            }

            public void DeletePermanentlyBankStatementHitList_TransactionPreset(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset, SubscriptionEntities db)
            {
								var bankStatementHitList_TransactionPresetFromDb = GetBankStatementHitList_TransactionPreset(bankStatementHitList_TransactionPreset.IdBankStatementHitList_TransactionPreset.Value,db);
				
				db.BankStatementHitList_TransactionPreset.Remove(bankStatementHitList_TransactionPresetFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class BankStatementStagingDao :IBankStatementStagingDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public BankStatementStagingDao(){
			
			}

			public BankStatementStagingDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<BankStatementStaging> GetAllBankStatementStagings(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagings(db, shouldRemap);
                }
            }

            public List<BankStatementStaging> GetAllBankStatementStagings(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementStagingList(db.BankStatementStagings.Where(p => p.IsDeactivated != true).ToList());
				
				return db.BankStatementStagings.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementStaging, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementStaging> query =  db.BankStatementStagings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStaging> baseListReturnType = new BaseListReturnType<BankStatementStaging>();

                IQueryable<BankStatementStaging> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementStaging" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementStaging, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Account.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Account.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankReconOrderProcessStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankReconOrderProcessState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingsByPage(sortingPagingInfo, db,expression,new List<string>(){"Bank"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankStatementStagingStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithDocumentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingsByPage(sortingPagingInfo, db,expression,new List<string>(){"Document"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithUserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingsByPage(sortingPagingInfo, db,expression,new List<string>(){"User"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankStatementStagingDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetails"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementStaging, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementStaging> query =  db.BankStatementStagings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStaging> baseListReturnType = new BaseListReturnType<BankStatementStaging>();

                IQueryable<BankStatementStaging> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementStaging" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementStaging, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankReconOrderProcessStateDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankReconOrderProcessState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Bank"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankStatementStagingStateDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithDocumentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Document"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithUserDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"User"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankStatementStagingDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStaging, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetails"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankReconOrderProcessStateDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingWitDetails(new List<string>(){"BankReconOrderProcessState"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingWitDetails(new List<string>(){"Bank"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankStatementStagingStateDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingWitDetails(new List<string>(){"BankStatementStagingState"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithDocumentDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingWitDetails(new List<string>(){"Document"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithUserDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingWitDetails(new List<string>(){"User"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankStatementStagingDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingWitDetails(new List<string>(){"BankStatementStagingDetails"},shouldRemap);
					}
				}
			

			public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementStaging> query =  db.BankStatementStagings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStaging> baseListReturnType = new BaseListReturnType<BankStatementStaging>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public BankStatementStaging GetBankStatementStaging(long idBankStatementStaging,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStaging(idBankStatementStaging, db,shouldRemap);
                }
            }
                        public BankStatementStaging GetBankStatementStaging(long idBankStatementStaging, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementStagingSingle(db.BankStatementStagings.Where(p => p.IdBankStatementStaging == idBankStatementStaging && p.IsDeactivated != true).FirstOrDefault());

                return db.BankStatementStagings.Where(p => p.IdBankStatementStaging == idBankStatementStaging && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public BankStatementStaging GetBankStatementStagingCustom( Expression<Func<BankStatementStaging, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementStagingCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public BankStatementStaging GetBankStatementStagingCustom( SubscriptionEntities db , Expression<Func<BankStatementStaging, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<BankStatementStaging> query =  db.BankStatementStagings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapBankStatementStagingSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<BankStatementStaging> GetBankStatementStagingCustomList( Expression<Func<BankStatementStaging, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementStaging, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementStagingCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<BankStatementStaging> GetBankStatementStagingCustomList(  SubscriptionEntities db , Expression<Func<BankStatementStaging, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementStaging, dynamic> orderExpression = null)
			{
				IQueryable<BankStatementStaging> query =  db.BankStatementStagings;
                BaseListReturnType<BankStatementStaging> baseListReturnType = new BaseListReturnType<BankStatementStaging>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public BankStatementStaging GetBankStatementStagingWithBankReconOrderProcessStateDetails(long idBankStatementStaging,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingWithDetails(idBankStatementStaging,new List<string>(){"BankReconOrderProcessState"},shouldRemap);
					}
				}

            //IdBankReconOrderProcessState -- ZeroOrOne

                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankReconOrderProcessState(long idBankReconOrderProcessState)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingListByBankReconOrderProcessState(idBankReconOrderProcessState, db);
                    }
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankReconOrderProcessState(long idBankReconOrderProcessState, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStaging, bool>> expression = property=> property.IdBankReconOrderProcessState == idBankReconOrderProcessState && property.IsDeactivated !=true;
                    return GetBankStatementStagingCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankReconOrderProcessStateByPage(long idBankReconOrderProcessState, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingListByBankReconOrderProcessStateByPage(idBankReconOrderProcessState, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankReconOrderProcessStateByPage(long idBankReconOrderProcessState, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStaging, bool>> expression = property => property.IdBankReconOrderProcessState == idBankReconOrderProcessState && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStaging GetBankStatementStagingWithBankDetails(long idBankStatementStaging,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingWithDetails(idBankStatementStaging,new List<string>(){"Bank"},shouldRemap);
					}
				}

            //IdBank -- ZeroOrOne

                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBank(long idBank)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingListByBank(idBank, db);
                    }
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBank(long idBank, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStaging, bool>> expression = property=> property.IdBank == idBank && property.IsDeactivated !=true;
                    return GetBankStatementStagingCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankByPage(long idBank, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingListByBankByPage(idBank, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankByPage(long idBank, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStaging, bool>> expression = property => property.IdBank == idBank && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStaging GetBankStatementStagingWithBankStatementStagingStateDetails(long idBankStatementStaging,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingWithDetails(idBankStatementStaging,new List<string>(){"BankStatementStagingState"},shouldRemap);
					}
				}

            //IdBankStatementStagingState -- ZeroOrOne

                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankStatementStagingState(long idBankStatementStagingState)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingListByBankStatementStagingState(idBankStatementStagingState, db);
                    }
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankStatementStagingState(long idBankStatementStagingState, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStaging, bool>> expression = property=> property.IdBankStatementStagingState == idBankStatementStagingState && property.IsDeactivated !=true;
                    return GetBankStatementStagingCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankStatementStagingStateByPage(long idBankStatementStagingState, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingListByBankStatementStagingStateByPage(idBankStatementStagingState, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankStatementStagingStateByPage(long idBankStatementStagingState, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStaging, bool>> expression = property => property.IdBankStatementStagingState == idBankStatementStagingState && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStaging GetBankStatementStagingWithDocumentDetails(long idBankStatementStaging,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingWithDetails(idBankStatementStaging,new List<string>(){"Document"},shouldRemap);
					}
				}

            //IdDocument -- ZeroOrOne

                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByDocument(long idDocument)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingListByDocument(idDocument, db);
                    }
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByDocument(long idDocument, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStaging, bool>> expression = property=> property.IdDocument == idDocument && property.IsDeactivated !=true;
                    return GetBankStatementStagingCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByDocumentByPage(long idDocument, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingListByDocumentByPage(idDocument, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByDocumentByPage(long idDocument, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStaging, bool>> expression = property => property.IdDocument == idDocument && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStaging GetBankStatementStagingWithUserDetails(long idBankStatementStaging,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingWithDetails(idBankStatementStaging,new List<string>(){"User"},shouldRemap);
					}
				}

            //IdUserUploadedBy -- ZeroOrOne

                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByUser(long idUser)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingListByUser(idUser, db);
                    }
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByUser(long idUser, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStaging, bool>> expression = property=> property.IdUserUploadedBy == idUser && property.IsDeactivated !=true;
                    return GetBankStatementStagingCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByUserByPage(long idUser, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingListByUserByPage(idUser, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByUserByPage(long idUser, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStaging, bool>> expression = property => property.IdUserUploadedBy == idUser && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStaging GetBankStatementStagingWithBankStatementStagingDetailsDetails(long idBankStatementStaging,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingWithDetails(idBankStatementStaging,new List<string>(){"BankStatementStagingDetails"},shouldRemap);
					}
				}

            //IdBankStatementStaging -- Many


			


			public BankStatementStaging GetBankStatementStagingWithDetails(long idBankStatementStaging, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingWithDetails(idBankStatementStaging, db,includes,shouldRemap);
                }
            }

            public BankStatementStaging GetBankStatementStagingWithDetails(long idBankStatementStaging, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementStaging> query =  db.BankStatementStagings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapBankStatementStagingSingle(query
						.Where(p => p.IdBankStatementStaging == idBankStatementStaging && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdBankStatementStaging == idBankStatementStaging && p.IsDeactivated != true).FirstOrDefault();
            }

            public BankStatementStaging GetBankStatementStagingWitDetails(long idBankStatementStaging,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingWitDetails(idBankStatementStaging, db,shouldRemap);
                }
            }

            public BankStatementStaging GetBankStatementStagingWitDetails(long idBankStatementStaging, SubscriptionEntities db,bool shouldRemap = false)
            {
				BankStatementStaging _BankStatementStaging = db.BankStatementStagings

					.Include("BankReconOrderProcessState")
					.Include("Bank")
					.Include("BankStatementStagingState")
					.Include("Document")
					.Include("User")
					.Include("BankStatementStagingDetails")
								.Where(p => p.IdBankStatementStaging == idBankStatementStaging && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapBankStatementStagingSingle(_BankStatementStaging);

				return  _BankStatementStaging;
            }

            public List<BankStatementStaging> GetBankStatementStagingListByIdList(List<long> bankStatementStagingIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingListByIdList(bankStatementStagingIds, db);
                }
            }
            public List<BankStatementStaging> GetBankStatementStagingListByIdList(List<long> bankStatementStagingIds, SubscriptionEntities db)
            {
                return db.BankStatementStagings.Where(p => p.IsDeactivated != true && bankStatementStagingIds.Contains(p.IdBankStatementStaging.Value)).ToList();
            }


            public void SaveBankStatementStaging(BankStatementStaging bankStatementStaging)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveBankStatementStaging(bankStatementStaging, db);
                }
            }

            public void SaveBankStatementStaging(BankStatementStaging bankStatementStaging, SubscriptionEntities db)
            {
									if (bankStatementStaging.BankReconOrderProcessState != null) 
						DaoFactories.Instance.BankReconOrderProcessStateDao.SaveBankReconOrderProcessState(bankStatementStaging.BankReconOrderProcessState, db);
									if (bankStatementStaging.Bank != null) 
						DaoFactories.Instance.BankDao.SaveBank(bankStatementStaging.Bank, db);
									if (bankStatementStaging.BankStatementStagingState != null) 
						DaoFactories.Instance.BankStatementStagingStateDao.SaveBankStatementStagingState(bankStatementStaging.BankStatementStagingState, db);
									if (bankStatementStaging.Document != null) 
						DaoFactories.Instance.DocumentDao.SaveDocument(bankStatementStaging.Document, db);
									if (bankStatementStaging.User != null) 
						DaoFactories.Instance.UserDao.SaveUser(bankStatementStaging.User, db);
				                
                if (bankStatementStaging.IdBankStatementStaging.HasValue){
					var bankStatementStagingFromDb = db.BankStatementStagings.Where(p => p.IdBankStatementStaging == bankStatementStaging.IdBankStatementStaging).FirstOrDefault();
													bankStatementStagingFromDb.UploadDate = bankStatementStaging.UploadDate;
													bankStatementStagingFromDb.IdUserUploadedBy = bankStatementStaging.IdUserUploadedBy;
													bankStatementStagingFromDb.Account = bankStatementStaging.Account;
													bankStatementStagingFromDb.BankStatementDateFrom = bankStatementStaging.BankStatementDateFrom;
													bankStatementStagingFromDb.BankStatementDateTo = bankStatementStaging.BankStatementDateTo;
													bankStatementStagingFromDb.IsDeactivated = bankStatementStaging.IsDeactivated;
													bankStatementStagingFromDb.IdDocument = bankStatementStaging.IdDocument;
													bankStatementStagingFromDb.IdBankStatementStagingState = bankStatementStaging.IdBankStatementStagingState;
													bankStatementStagingFromDb.IdBank = bankStatementStaging.IdBank;
													bankStatementStagingFromDb.IdBankReconOrderProcessState = bankStatementStaging.IdBankReconOrderProcessState;
									}
                else{
                                                //fix for saving without duplicating items in db
                              bankStatementStaging.BankReconOrderProcessState = null;
                                                        //fix for saving without duplicating items in db
                              bankStatementStaging.Bank = null;
                                                        //fix for saving without duplicating items in db
                              bankStatementStaging.BankStatementStagingState = null;
                                                        //fix for saving without duplicating items in db
                              bankStatementStaging.Document = null;
                                                        //fix for saving without duplicating items in db
                              bankStatementStaging.User = null;
                                                db.BankStatementStagings.Add(bankStatementStaging);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyBankStatementStaging(BankStatementStaging bankStatementStaging)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyBankStatementStaging(bankStatementStaging, db);
                }
            }

            public void SaveOnlyBankStatementStaging(BankStatementStaging bankStatementStaging, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // bankStatementStaging.BankReconOrderProcessState = null;
                                                        //fix for saving without duplicating items in db
                             // bankStatementStaging.Bank = null;
                                                        //fix for saving without duplicating items in db
                             // bankStatementStaging.BankStatementStagingState = null;
                                                        //fix for saving without duplicating items in db
                             // bankStatementStaging.Document = null;
                                                        //fix for saving without duplicating items in db
                             // bankStatementStaging.User = null;
                                            if (bankStatementStaging.IdBankStatementStaging.HasValue){
					var bankStatementStagingFromDb = db.BankStatementStagings.Where(p => p.IdBankStatementStaging == bankStatementStaging.IdBankStatementStaging).FirstOrDefault();
													bankStatementStagingFromDb.UploadDate = bankStatementStaging.UploadDate;
													bankStatementStagingFromDb.IdUserUploadedBy = bankStatementStaging.IdUserUploadedBy;
													bankStatementStagingFromDb.Account = bankStatementStaging.Account;
													bankStatementStagingFromDb.BankStatementDateFrom = bankStatementStaging.BankStatementDateFrom;
													bankStatementStagingFromDb.BankStatementDateTo = bankStatementStaging.BankStatementDateTo;
													bankStatementStagingFromDb.IsDeactivated = bankStatementStaging.IsDeactivated;
													bankStatementStagingFromDb.IdDocument = bankStatementStaging.IdDocument;
													bankStatementStagingFromDb.IdBankStatementStagingState = bankStatementStaging.IdBankStatementStagingState;
													bankStatementStagingFromDb.IdBank = bankStatementStaging.IdBank;
													bankStatementStagingFromDb.IdBankReconOrderProcessState = bankStatementStaging.IdBankReconOrderProcessState;
										 db.SaveChanges();

				}
                else{
					BankStatementStaging _bankStatementStaging = new BankStatementStaging();
																	_bankStatementStaging.UploadDate = bankStatementStaging.UploadDate;
													_bankStatementStaging.IdUserUploadedBy = bankStatementStaging.IdUserUploadedBy;
													_bankStatementStaging.Account = bankStatementStaging.Account;
													_bankStatementStaging.BankStatementDateFrom = bankStatementStaging.BankStatementDateFrom;
													_bankStatementStaging.BankStatementDateTo = bankStatementStaging.BankStatementDateTo;
													_bankStatementStaging.IsDeactivated = bankStatementStaging.IsDeactivated;
													_bankStatementStaging.IdDocument = bankStatementStaging.IdDocument;
													_bankStatementStaging.IdBankStatementStagingState = bankStatementStaging.IdBankStatementStagingState;
													_bankStatementStaging.IdBank = bankStatementStaging.IdBank;
													_bankStatementStaging.IdBankReconOrderProcessState = bankStatementStaging.IdBankReconOrderProcessState;
					

                    db.BankStatementStagings.Add(_bankStatementStaging);
					db.SaveChanges();
					bankStatementStaging.IdBankStatementStaging =  _bankStatementStaging.IdBankStatementStaging;
                    
                }
            }

            public void DeleteBankStatementStaging(BankStatementStaging bankStatementStaging)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteBankStatementStaging(bankStatementStaging, db);
                }
            }

            public void DeleteBankStatementStaging(BankStatementStaging bankStatementStaging, SubscriptionEntities db)
            {
								var bankStatementStagingFromDb = GetBankStatementStaging(bankStatementStaging.IdBankStatementStaging.Value,db);
				bankStatementStagingFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyBankStatementStaging(BankStatementStaging bankStatementStaging)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyBankStatementStaging(bankStatementStaging, db);
                }
            }

            public void DeletePermanentlyBankStatementStaging(BankStatementStaging bankStatementStaging, SubscriptionEntities db)
            {
								var bankStatementStagingFromDb = GetBankStatementStaging(bankStatementStaging.IdBankStatementStaging.Value,db);
				
				db.BankStatementStagings.Remove(bankStatementStagingFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankStatementStagingWithoutSavingNewItem(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStaging)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingDetailsForBankStatementStagingWithoutSavingNewItem(newBankStatementStagingDetails,idBankStatementStaging,db);
                                }
                            }

							public List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankStatementStagingWithoutSavingNewItem(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStaging, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingDetail, bool>> expressionBuilder = p => p.IdBankStatementStaging == idBankStatementStaging;
                                var oldBankStatementStagingDetails = DaoFactories.Instance.BankStatementStagingDetailDao.GetBankStatementStagingDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingDetails.EntityList.Select(pc => pc.IdBankStatementStagingDetail).Except(newBankStatementStagingDetails.Where(pc => pc.IdBankStatementStagingDetail.HasValue).Select(pc => pc.IdBankStatementStagingDetail)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagingDetails;
                            }


                            public List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankStatementStaging(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStaging)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingDetailsForBankStatementStaging(newBankStatementStagingDetails,idBankStatementStaging,db);
                                }
                            }

                            public List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankStatementStaging(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStaging, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingDetail, bool>> expressionBuilder = p => p.IdBankStatementStaging == idBankStatementStaging;
                                var oldBankStatementStagingDetails = DaoFactories.Instance.BankStatementStagingDetailDao.GetBankStatementStagingDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingDetails.EntityList.Select(pc => pc.IdBankStatementStagingDetail).Except(newBankStatementStagingDetails.Where(pc => pc.IdBankStatementStagingDetail.HasValue).Select(pc => pc.IdBankStatementStagingDetail)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagingDetails.ForEach(pc =>
                                {
                                    pc.IdBankStatementStaging = idBankStatementStaging;
                                    DaoFactories.Instance.BankStatementStagingDetailDao.SaveOnlyBankStatementStagingDetail(pc, db);
                                });
                                return newBankStatementStagingDetails;
                            }

                        


    



		}
			public partial class BankStatementStagingDetailDao :IBankStatementStagingDetailDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public BankStatementStagingDetailDao(){
			
			}

			public BankStatementStagingDetailDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<BankStatementStagingDetail> GetAllBankStatementStagingDetails(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingDetails(db, shouldRemap);
                }
            }

            public List<BankStatementStagingDetail> GetAllBankStatementStagingDetails(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementStagingDetailList(db.BankStatementStagingDetails.Where(p => p.IsDeactivated != true).ToList());
				
				return db.BankStatementStagingDetails.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementStagingDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementStagingDetail> query =  db.BankStatementStagingDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingDetail> baseListReturnType = new BaseListReturnType<BankStatementStagingDetail>();

                IQueryable<BankStatementStagingDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementStagingDetail" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementStagingDetail, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.BranchCode.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.BranchCode.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Remarks.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.OrderNumber.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankReconOrderTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankReconOrderType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementHitListsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementHitLists"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementStagingDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStaging"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementStagingDetailBatchDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetailBatch"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementStagingHitsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHits"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithTemporaryTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactions"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithTransaction_BankStatementStagingDetailDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction_BankStatementStagingDetail"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementStagingDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementStagingDetail> query =  db.BankStatementStagingDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingDetail> baseListReturnType = new BaseListReturnType<BankStatementStagingDetail>();

                IQueryable<BankStatementStagingDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementStagingDetail" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementStagingDetail, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankReconOrderTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankReconOrderType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementHitListsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementHitLists"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementStagingDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStaging"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementStagingDetailBatchDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetailBatch"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementStagingHitsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHits"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithTemporaryTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactions"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithTransaction_BankStatementStagingDetailDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction_BankStatementStagingDetail"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankReconOrderTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailWitDetails(new List<string>(){"BankReconOrderType"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementHitListsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailWitDetails(new List<string>(){"BankStatementHitLists"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementStagingDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailWitDetails(new List<string>(){"BankStatementStaging"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementStagingDetailBatchDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailWitDetails(new List<string>(){"BankStatementStagingDetailBatch"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementStagingHitsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailWitDetails(new List<string>(){"BankStatementStagingHits"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithTemporaryTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailWitDetails(new List<string>(){"TemporaryTransactions"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithTransaction_BankStatementStagingDetailDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailWitDetails(new List<string>(){"Transaction_BankStatementStagingDetail"},shouldRemap);
					}
				}
			

			public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingDetailWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementStagingDetail> query =  db.BankStatementStagingDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingDetail> baseListReturnType = new BaseListReturnType<BankStatementStagingDetail>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public BankStatementStagingDetail GetBankStatementStagingDetail(long idBankStatementStagingDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingDetail(idBankStatementStagingDetail, db,shouldRemap);
                }
            }
                        public BankStatementStagingDetail GetBankStatementStagingDetail(long idBankStatementStagingDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementStagingDetailSingle(db.BankStatementStagingDetails.Where(p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail && p.IsDeactivated != true).FirstOrDefault());

                return db.BankStatementStagingDetails.Where(p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public BankStatementStagingDetail GetBankStatementStagingDetailCustom( Expression<Func<BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementStagingDetailCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public BankStatementStagingDetail GetBankStatementStagingDetailCustom( SubscriptionEntities db , Expression<Func<BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<BankStatementStagingDetail> query =  db.BankStatementStagingDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapBankStatementStagingDetailSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<BankStatementStagingDetail> GetBankStatementStagingDetailCustomList( Expression<Func<BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementStagingDetail, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementStagingDetailCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<BankStatementStagingDetail> GetBankStatementStagingDetailCustomList(  SubscriptionEntities db , Expression<Func<BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementStagingDetail, dynamic> orderExpression = null)
			{
				IQueryable<BankStatementStagingDetail> query =  db.BankStatementStagingDetails;
                BaseListReturnType<BankStatementStagingDetail> baseListReturnType = new BaseListReturnType<BankStatementStagingDetail>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingDetailList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public BankStatementStagingDetail GetBankStatementStagingDetailWithBankReconOrderTypeDetails(long idBankStatementStagingDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingDetailWithDetails(idBankStatementStagingDetail,new List<string>(){"BankReconOrderType"},shouldRemap);
					}
				}

            //IdBankReconOrderType -- ZeroOrOne

                public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankReconOrderType(long idBankReconOrderType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingDetailListByBankReconOrderType(idBankReconOrderType, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankReconOrderType(long idBankReconOrderType, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingDetail, bool>> expression = property=> property.IdBankReconOrderType == idBankReconOrderType && property.IsDeactivated !=true;
                    return GetBankStatementStagingDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankReconOrderTypeByPage(long idBankReconOrderType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingDetailListByBankReconOrderTypeByPage(idBankReconOrderType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankReconOrderTypeByPage(long idBankReconOrderType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingDetail, bool>> expression = property => property.IdBankReconOrderType == idBankReconOrderType && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStagingDetail GetBankStatementStagingDetailWithBankStatementHitListsDetails(long idBankStatementStagingDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingDetailWithDetails(idBankStatementStagingDetail,new List<string>(){"BankStatementHitLists"},shouldRemap);
					}
				}

            //IdBankStatementStagingDetail -- Many


							public BankStatementStagingDetail GetBankStatementStagingDetailWithBankStatementStagingDetails(long idBankStatementStagingDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingDetailWithDetails(idBankStatementStagingDetail,new List<string>(){"BankStatementStaging"},shouldRemap);
					}
				}

            //IdBankStatementStaging -- ZeroOrOne

                public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankStatementStaging(long idBankStatementStaging)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingDetailListByBankStatementStaging(idBankStatementStaging, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankStatementStaging(long idBankStatementStaging, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingDetail, bool>> expression = property=> property.IdBankStatementStaging == idBankStatementStaging && property.IsDeactivated !=true;
                    return GetBankStatementStagingDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankStatementStagingByPage(long idBankStatementStaging, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingDetailListByBankStatementStagingByPage(idBankStatementStaging, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankStatementStagingByPage(long idBankStatementStaging, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingDetail, bool>> expression = property => property.IdBankStatementStaging == idBankStatementStaging && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStagingDetail GetBankStatementStagingDetailWithBankStatementStagingDetailBatchDetails(long idBankStatementStagingDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingDetailWithDetails(idBankStatementStagingDetail,new List<string>(){"BankStatementStagingDetailBatch"},shouldRemap);
					}
				}

            //IdBankStatementStagingDetailBatch -- ZeroOrOne

                public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatch(long idBankStatementStagingDetailBatch)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatch(idBankStatementStagingDetailBatch, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatch(long idBankStatementStagingDetailBatch, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingDetail, bool>> expression = property=> property.IdBankStatementStagingDetailBatch == idBankStatementStagingDetailBatch && property.IsDeactivated !=true;
                    return GetBankStatementStagingDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatchByPage(long idBankStatementStagingDetailBatch, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatchByPage(idBankStatementStagingDetailBatch, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatchByPage(long idBankStatementStagingDetailBatch, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingDetail, bool>> expression = property => property.IdBankStatementStagingDetailBatch == idBankStatementStagingDetailBatch && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStagingDetail GetBankStatementStagingDetailWithBankStatementStagingHitsDetails(long idBankStatementStagingDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingDetailWithDetails(idBankStatementStagingDetail,new List<string>(){"BankStatementStagingHits"},shouldRemap);
					}
				}

            //IdBankStatementStagingDetail -- Many


							public BankStatementStagingDetail GetBankStatementStagingDetailWithTemporaryTransactionsDetails(long idBankStatementStagingDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingDetailWithDetails(idBankStatementStagingDetail,new List<string>(){"TemporaryTransactions"},shouldRemap);
					}
				}

            //IdBankStatementStagingDetail -- Many


							public BankStatementStagingDetail GetBankStatementStagingDetailWithTransaction_BankStatementStagingDetailDetails(long idBankStatementStagingDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingDetailWithDetails(idBankStatementStagingDetail,new List<string>(){"Transaction_BankStatementStagingDetail"},shouldRemap);
					}
				}

            //IdBankStatementStagingDetail -- Many


			


			public BankStatementStagingDetail GetBankStatementStagingDetailWithDetails(long idBankStatementStagingDetail, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingDetailWithDetails(idBankStatementStagingDetail, db,includes,shouldRemap);
                }
            }

            public BankStatementStagingDetail GetBankStatementStagingDetailWithDetails(long idBankStatementStagingDetail, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementStagingDetail> query =  db.BankStatementStagingDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapBankStatementStagingDetailSingle(query
						.Where(p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail && p.IsDeactivated != true).FirstOrDefault();
            }

            public BankStatementStagingDetail GetBankStatementStagingDetailWitDetails(long idBankStatementStagingDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingDetailWitDetails(idBankStatementStagingDetail, db,shouldRemap);
                }
            }

            public BankStatementStagingDetail GetBankStatementStagingDetailWitDetails(long idBankStatementStagingDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				BankStatementStagingDetail _BankStatementStagingDetail = db.BankStatementStagingDetails

					.Include("BankReconOrderType")
					.Include("BankStatementHitLists")
					.Include("BankStatementStaging")
					.Include("BankStatementStagingDetailBatch")
					.Include("BankStatementStagingHits")
					.Include("TemporaryTransactions")
					.Include("Transaction_BankStatementStagingDetail")
								.Where(p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapBankStatementStagingDetailSingle(_BankStatementStagingDetail);

				return  _BankStatementStagingDetail;
            }

            public List<BankStatementStagingDetail> GetBankStatementStagingDetailListByIdList(List<long> bankStatementStagingDetailIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingDetailListByIdList(bankStatementStagingDetailIds, db);
                }
            }
            public List<BankStatementStagingDetail> GetBankStatementStagingDetailListByIdList(List<long> bankStatementStagingDetailIds, SubscriptionEntities db)
            {
                return db.BankStatementStagingDetails.Where(p => p.IsDeactivated != true && bankStatementStagingDetailIds.Contains(p.IdBankStatementStagingDetail.Value)).ToList();
            }


            public void SaveBankStatementStagingDetail(BankStatementStagingDetail bankStatementStagingDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveBankStatementStagingDetail(bankStatementStagingDetail, db);
                }
            }

            public void SaveBankStatementStagingDetail(BankStatementStagingDetail bankStatementStagingDetail, SubscriptionEntities db)
            {
									if (bankStatementStagingDetail.BankReconOrderType != null) 
						DaoFactories.Instance.BankReconOrderTypeDao.SaveBankReconOrderType(bankStatementStagingDetail.BankReconOrderType, db);
									if (bankStatementStagingDetail.BankStatementStaging != null) 
						DaoFactories.Instance.BankStatementStagingDao.SaveBankStatementStaging(bankStatementStagingDetail.BankStatementStaging, db);
									if (bankStatementStagingDetail.BankStatementStagingDetailBatch != null) 
						DaoFactories.Instance.BankStatementStagingDetailBatchDao.SaveBankStatementStagingDetailBatch(bankStatementStagingDetail.BankStatementStagingDetailBatch, db);
				                
                if (bankStatementStagingDetail.IdBankStatementStagingDetail.HasValue){
					var bankStatementStagingDetailFromDb = db.BankStatementStagingDetails.Where(p => p.IdBankStatementStagingDetail == bankStatementStagingDetail.IdBankStatementStagingDetail).FirstOrDefault();
													bankStatementStagingDetailFromDb.IdBankStatementStaging = bankStatementStagingDetail.IdBankStatementStaging;
													bankStatementStagingDetailFromDb.StatementLineNo = bankStatementStagingDetail.StatementLineNo;
													bankStatementStagingDetailFromDb.ValueDate = bankStatementStagingDetail.ValueDate;
													bankStatementStagingDetailFromDb.BranchCode = bankStatementStagingDetail.BranchCode;
													bankStatementStagingDetailFromDb.Remarks = bankStatementStagingDetail.Remarks;
													bankStatementStagingDetailFromDb.DebitAmount = bankStatementStagingDetail.DebitAmount;
													bankStatementStagingDetailFromDb.CreditAmount = bankStatementStagingDetail.CreditAmount;
													bankStatementStagingDetailFromDb.Balance = bankStatementStagingDetail.Balance;
													bankStatementStagingDetailFromDb.IsDeactivated = bankStatementStagingDetail.IsDeactivated;
													bankStatementStagingDetailFromDb.IdBankStatementStagingDetailBatch = bankStatementStagingDetail.IdBankStatementStagingDetailBatch;
													bankStatementStagingDetailFromDb.IdBankReconOrderType = bankStatementStagingDetail.IdBankReconOrderType;
													bankStatementStagingDetailFromDb.OrderNumber = bankStatementStagingDetail.OrderNumber;
									}
                else{
                                                //fix for saving without duplicating items in db
                              bankStatementStagingDetail.BankReconOrderType = null;
                                                        //fix for saving without duplicating items in db
                              bankStatementStagingDetail.BankStatementStaging = null;
                                                        //fix for saving without duplicating items in db
                              bankStatementStagingDetail.BankStatementStagingDetailBatch = null;
                                                db.BankStatementStagingDetails.Add(bankStatementStagingDetail);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyBankStatementStagingDetail(BankStatementStagingDetail bankStatementStagingDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyBankStatementStagingDetail(bankStatementStagingDetail, db);
                }
            }

            public void SaveOnlyBankStatementStagingDetail(BankStatementStagingDetail bankStatementStagingDetail, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // bankStatementStagingDetail.BankReconOrderType = null;
                                                        //fix for saving without duplicating items in db
                             // bankStatementStagingDetail.BankStatementStaging = null;
                                                        //fix for saving without duplicating items in db
                             // bankStatementStagingDetail.BankStatementStagingDetailBatch = null;
                                            if (bankStatementStagingDetail.IdBankStatementStagingDetail.HasValue){
					var bankStatementStagingDetailFromDb = db.BankStatementStagingDetails.Where(p => p.IdBankStatementStagingDetail == bankStatementStagingDetail.IdBankStatementStagingDetail).FirstOrDefault();
													bankStatementStagingDetailFromDb.IdBankStatementStaging = bankStatementStagingDetail.IdBankStatementStaging;
													bankStatementStagingDetailFromDb.StatementLineNo = bankStatementStagingDetail.StatementLineNo;
													bankStatementStagingDetailFromDb.ValueDate = bankStatementStagingDetail.ValueDate;
													bankStatementStagingDetailFromDb.BranchCode = bankStatementStagingDetail.BranchCode;
													bankStatementStagingDetailFromDb.Remarks = bankStatementStagingDetail.Remarks;
													bankStatementStagingDetailFromDb.DebitAmount = bankStatementStagingDetail.DebitAmount;
													bankStatementStagingDetailFromDb.CreditAmount = bankStatementStagingDetail.CreditAmount;
													bankStatementStagingDetailFromDb.Balance = bankStatementStagingDetail.Balance;
													bankStatementStagingDetailFromDb.IsDeactivated = bankStatementStagingDetail.IsDeactivated;
													bankStatementStagingDetailFromDb.IdBankStatementStagingDetailBatch = bankStatementStagingDetail.IdBankStatementStagingDetailBatch;
													bankStatementStagingDetailFromDb.IdBankReconOrderType = bankStatementStagingDetail.IdBankReconOrderType;
													bankStatementStagingDetailFromDb.OrderNumber = bankStatementStagingDetail.OrderNumber;
										 db.SaveChanges();

				}
                else{
					BankStatementStagingDetail _bankStatementStagingDetail = new BankStatementStagingDetail();
																	_bankStatementStagingDetail.IdBankStatementStaging = bankStatementStagingDetail.IdBankStatementStaging;
													_bankStatementStagingDetail.StatementLineNo = bankStatementStagingDetail.StatementLineNo;
													_bankStatementStagingDetail.ValueDate = bankStatementStagingDetail.ValueDate;
													_bankStatementStagingDetail.BranchCode = bankStatementStagingDetail.BranchCode;
													_bankStatementStagingDetail.Remarks = bankStatementStagingDetail.Remarks;
													_bankStatementStagingDetail.DebitAmount = bankStatementStagingDetail.DebitAmount;
													_bankStatementStagingDetail.CreditAmount = bankStatementStagingDetail.CreditAmount;
													_bankStatementStagingDetail.Balance = bankStatementStagingDetail.Balance;
													_bankStatementStagingDetail.IsDeactivated = bankStatementStagingDetail.IsDeactivated;
													_bankStatementStagingDetail.IdBankStatementStagingDetailBatch = bankStatementStagingDetail.IdBankStatementStagingDetailBatch;
													_bankStatementStagingDetail.IdBankReconOrderType = bankStatementStagingDetail.IdBankReconOrderType;
													_bankStatementStagingDetail.OrderNumber = bankStatementStagingDetail.OrderNumber;
					

                    db.BankStatementStagingDetails.Add(_bankStatementStagingDetail);
					db.SaveChanges();
					bankStatementStagingDetail.IdBankStatementStagingDetail =  _bankStatementStagingDetail.IdBankStatementStagingDetail;
                    
                }
            }

            public void DeleteBankStatementStagingDetail(BankStatementStagingDetail bankStatementStagingDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteBankStatementStagingDetail(bankStatementStagingDetail, db);
                }
            }

            public void DeleteBankStatementStagingDetail(BankStatementStagingDetail bankStatementStagingDetail, SubscriptionEntities db)
            {
								var bankStatementStagingDetailFromDb = GetBankStatementStagingDetail(bankStatementStagingDetail.IdBankStatementStagingDetail.Value,db);
				bankStatementStagingDetailFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyBankStatementStagingDetail(BankStatementStagingDetail bankStatementStagingDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyBankStatementStagingDetail(bankStatementStagingDetail, db);
                }
            }

            public void DeletePermanentlyBankStatementStagingDetail(BankStatementStagingDetail bankStatementStagingDetail, SubscriptionEntities db)
            {
								var bankStatementStagingDetailFromDb = GetBankStatementStagingDetail(bankStatementStagingDetail.IdBankStatementStagingDetail.Value,db);
				
				db.BankStatementStagingDetails.Remove(bankStatementStagingDetailFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementHitList> UpdateBankStatementHitListsForBankStatementStagingDetailWithoutSavingNewItem(List<BankStatementHitList> newBankStatementHitLists,long idBankStatementStagingDetail)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementHitListsForBankStatementStagingDetailWithoutSavingNewItem(newBankStatementHitLists,idBankStatementStagingDetail,db);
                                }
                            }

							public List<BankStatementHitList> UpdateBankStatementHitListsForBankStatementStagingDetailWithoutSavingNewItem(List<BankStatementHitList> newBankStatementHitLists,long idBankStatementStagingDetail, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementHitList, bool>> expressionBuilder = p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail;
                                var oldBankStatementHitLists = DaoFactories.Instance.BankStatementHitListDao.GetBankStatementHitListCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementHitLists.EntityList.Select(pc => pc.IdBankStatementHitList).Except(newBankStatementHitLists.Where(pc => pc.IdBankStatementHitList.HasValue).Select(pc => pc.IdBankStatementHitList)).ToList();
                                var itemsTobeDeleted = oldBankStatementHitLists.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementHitList)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementHitLists;
                            }


                            public List<BankStatementHitList> UpdateBankStatementHitListsForBankStatementStagingDetail(List<BankStatementHitList> newBankStatementHitLists,long idBankStatementStagingDetail)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementHitListsForBankStatementStagingDetail(newBankStatementHitLists,idBankStatementStagingDetail,db);
                                }
                            }

                            public List<BankStatementHitList> UpdateBankStatementHitListsForBankStatementStagingDetail(List<BankStatementHitList> newBankStatementHitLists,long idBankStatementStagingDetail, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementHitList, bool>> expressionBuilder = p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail;
                                var oldBankStatementHitLists = DaoFactories.Instance.BankStatementHitListDao.GetBankStatementHitListCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementHitLists.EntityList.Select(pc => pc.IdBankStatementHitList).Except(newBankStatementHitLists.Where(pc => pc.IdBankStatementHitList.HasValue).Select(pc => pc.IdBankStatementHitList)).ToList();
                                var itemsTobeDeleted = oldBankStatementHitLists.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementHitList)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementHitLists.ForEach(pc =>
                                {
                                    pc.IdBankStatementStagingDetail = idBankStatementStagingDetail;
                                    DaoFactories.Instance.BankStatementHitListDao.SaveOnlyBankStatementHitList(pc, db);
                                });
                                return newBankStatementHitLists;
                            }

                        
							public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankStatementStagingDetailWithoutSavingNewItem(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementStagingDetail)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingHitsForBankStatementStagingDetailWithoutSavingNewItem(newBankStatementStagingHits,idBankStatementStagingDetail,db);
                                }
                            }

							public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankStatementStagingDetailWithoutSavingNewItem(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementStagingDetail, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingHit, bool>> expressionBuilder = p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail;
                                var oldBankStatementStagingHits = DaoFactories.Instance.BankStatementStagingHitDao.GetBankStatementStagingHitCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingHits.EntityList.Select(pc => pc.IdBankStatementStagingHit).Except(newBankStatementStagingHits.Where(pc => pc.IdBankStatementStagingHit.HasValue).Select(pc => pc.IdBankStatementStagingHit)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingHits.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingHit)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagingHits;
                            }


                            public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankStatementStagingDetail(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementStagingDetail)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingHitsForBankStatementStagingDetail(newBankStatementStagingHits,idBankStatementStagingDetail,db);
                                }
                            }

                            public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankStatementStagingDetail(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementStagingDetail, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingHit, bool>> expressionBuilder = p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail;
                                var oldBankStatementStagingHits = DaoFactories.Instance.BankStatementStagingHitDao.GetBankStatementStagingHitCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingHits.EntityList.Select(pc => pc.IdBankStatementStagingHit).Except(newBankStatementStagingHits.Where(pc => pc.IdBankStatementStagingHit.HasValue).Select(pc => pc.IdBankStatementStagingHit)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingHits.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingHit)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagingHits.ForEach(pc =>
                                {
                                    pc.IdBankStatementStagingDetail = idBankStatementStagingDetail;
                                    DaoFactories.Instance.BankStatementStagingHitDao.SaveOnlyBankStatementStagingHit(pc, db);
                                });
                                return newBankStatementStagingHits;
                            }

                        
							public List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementStagingDetailWithoutSavingNewItem(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingDetail)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionsForBankStatementStagingDetailWithoutSavingNewItem(newTemporaryTransactions,idBankStatementStagingDetail,db);
                                }
                            }

							public List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementStagingDetailWithoutSavingNewItem(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingDetail, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransaction, bool>> expressionBuilder = p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail;
                                var oldTemporaryTransactions = DaoFactories.Instance.TemporaryTransactionDao.GetTemporaryTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactions.EntityList.Select(pc => pc.IdTemporaryTransaction).Except(newTemporaryTransactions.Where(pc => pc.IdTemporaryTransaction.HasValue).Select(pc => pc.IdTemporaryTransaction)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTemporaryTransactions;
                            }


                            public List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementStagingDetail(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingDetail)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionsForBankStatementStagingDetail(newTemporaryTransactions,idBankStatementStagingDetail,db);
                                }
                            }

                            public List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementStagingDetail(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingDetail, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransaction, bool>> expressionBuilder = p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail;
                                var oldTemporaryTransactions = DaoFactories.Instance.TemporaryTransactionDao.GetTemporaryTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactions.EntityList.Select(pc => pc.IdTemporaryTransaction).Except(newTemporaryTransactions.Where(pc => pc.IdTemporaryTransaction.HasValue).Select(pc => pc.IdTemporaryTransaction)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTemporaryTransactions.ForEach(pc =>
                                {
                                    pc.IdBankStatementStagingDetail = idBankStatementStagingDetail;
                                    DaoFactories.Instance.TemporaryTransactionDao.SaveOnlyTemporaryTransaction(pc, db);
                                });
                                return newTemporaryTransactions;
                            }

                        
							public List<Transaction_BankStatementStagingDetail> UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetailWithoutSavingNewItem(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idBankStatementStagingDetail)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetailWithoutSavingNewItem(newTransaction_BankStatementStagingDetail,idBankStatementStagingDetail,db);
                                }
                            }

							public List<Transaction_BankStatementStagingDetail> UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetailWithoutSavingNewItem(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idBankStatementStagingDetail, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction_BankStatementStagingDetail, bool>> expressionBuilder = p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail;
                                var oldTransaction_BankStatementStagingDetail = DaoFactories.Instance.Transaction_BankStatementStagingDetailDao.GetTransaction_BankStatementStagingDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransaction_BankStatementStagingDetail.EntityList.Select(pc => pc.IdTransaction_BankStatementStagingDetail).Except(newTransaction_BankStatementStagingDetail.Where(pc => pc.IdTransaction_BankStatementStagingDetail.HasValue).Select(pc => pc.IdTransaction_BankStatementStagingDetail)).ToList();
                                var itemsTobeDeleted = oldTransaction_BankStatementStagingDetail.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction_BankStatementStagingDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransaction_BankStatementStagingDetail;
                            }


                            public List<Transaction_BankStatementStagingDetail> UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetail(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idBankStatementStagingDetail)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetail(newTransaction_BankStatementStagingDetail,idBankStatementStagingDetail,db);
                                }
                            }

                            public List<Transaction_BankStatementStagingDetail> UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetail(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idBankStatementStagingDetail, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction_BankStatementStagingDetail, bool>> expressionBuilder = p => p.IdBankStatementStagingDetail == idBankStatementStagingDetail;
                                var oldTransaction_BankStatementStagingDetail = DaoFactories.Instance.Transaction_BankStatementStagingDetailDao.GetTransaction_BankStatementStagingDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransaction_BankStatementStagingDetail.EntityList.Select(pc => pc.IdTransaction_BankStatementStagingDetail).Except(newTransaction_BankStatementStagingDetail.Where(pc => pc.IdTransaction_BankStatementStagingDetail.HasValue).Select(pc => pc.IdTransaction_BankStatementStagingDetail)).ToList();
                                var itemsTobeDeleted = oldTransaction_BankStatementStagingDetail.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction_BankStatementStagingDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransaction_BankStatementStagingDetail.ForEach(pc =>
                                {
                                    pc.IdBankStatementStagingDetail = idBankStatementStagingDetail;
                                    DaoFactories.Instance.Transaction_BankStatementStagingDetailDao.SaveOnlyTransaction_BankStatementStagingDetail(pc, db);
                                });
                                return newTransaction_BankStatementStagingDetail;
                            }

                        


    



		}
			public partial class BankStatementStagingDetailBatchDao :IBankStatementStagingDetailBatchDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public BankStatementStagingDetailBatchDao(){
			
			}

			public BankStatementStagingDetailBatchDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatches(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingDetailBatches(db, shouldRemap);
                }
            }

            public List<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatches(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementStagingDetailBatchList(db.BankStatementStagingDetailBatches.Where(p => p.IsDeactivated != true).ToList());
				
				return db.BankStatementStagingDetailBatches.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetailBatch, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingDetailBatchesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementStagingDetailBatch, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementStagingDetailBatch> query =  db.BankStatementStagingDetailBatches;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingDetailBatch> baseListReturnType = new BaseListReturnType<BankStatementStagingDetailBatch>();

                IQueryable<BankStatementStagingDetailBatch> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementStagingDetailBatch" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementStagingDetailBatch, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingDetailBatchList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesWithBankStatementStagingDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetailBatch, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailBatchesByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetails"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesWithBankStatementStagingStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetailBatch, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailBatchesByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingState"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetailBatch, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingDetailBatchesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementStagingDetailBatch, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementStagingDetailBatch> query =  db.BankStatementStagingDetailBatches;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingDetailBatch> baseListReturnType = new BaseListReturnType<BankStatementStagingDetailBatch>();

                IQueryable<BankStatementStagingDetailBatch> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementStagingDetailBatch" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementStagingDetailBatch, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingDetailBatchList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesWithBankStatementStagingDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetailBatch, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailBatchesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetails"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesWithBankStatementStagingStateDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetailBatch, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailBatchesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingState"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesWithBankStatementStagingDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailBatchWitDetails(new List<string>(){"BankStatementStagingDetails"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesWithBankStatementStagingStateDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingDetailBatchWitDetails(new List<string>(){"BankStatementStagingState"},shouldRemap);
					}
				}
			

			public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingDetailBatchWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementStagingDetailBatch> query =  db.BankStatementStagingDetailBatches;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingDetailBatch> baseListReturnType = new BaseListReturnType<BankStatementStagingDetailBatch>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingDetailBatchList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public BankStatementStagingDetailBatch GetBankStatementStagingDetailBatch(long idBankStatementStagingDetailBatch,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingDetailBatch(idBankStatementStagingDetailBatch, db,shouldRemap);
                }
            }
                        public BankStatementStagingDetailBatch GetBankStatementStagingDetailBatch(long idBankStatementStagingDetailBatch, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementStagingDetailBatchSingle(db.BankStatementStagingDetailBatches.Where(p => p.IdBankStatementStagingDetailBatch == idBankStatementStagingDetailBatch && p.IsDeactivated != true).FirstOrDefault());

                return db.BankStatementStagingDetailBatches.Where(p => p.IdBankStatementStagingDetailBatch == idBankStatementStagingDetailBatch && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchCustom( Expression<Func<BankStatementStagingDetailBatch, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementStagingDetailBatchCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchCustom( SubscriptionEntities db , Expression<Func<BankStatementStagingDetailBatch, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<BankStatementStagingDetailBatch> query =  db.BankStatementStagingDetailBatches;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapBankStatementStagingDetailBatchSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<BankStatementStagingDetailBatch> GetBankStatementStagingDetailBatchCustomList( Expression<Func<BankStatementStagingDetailBatch, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementStagingDetailBatchCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<BankStatementStagingDetailBatch> GetBankStatementStagingDetailBatchCustomList(  SubscriptionEntities db , Expression<Func<BankStatementStagingDetailBatch, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
			{
				IQueryable<BankStatementStagingDetailBatch> query =  db.BankStatementStagingDetailBatches;
                BaseListReturnType<BankStatementStagingDetailBatch> baseListReturnType = new BaseListReturnType<BankStatementStagingDetailBatch>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingDetailBatchList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchWithBankStatementStagingDetailsDetails(long idBankStatementStagingDetailBatch,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingDetailBatchWithDetails(idBankStatementStagingDetailBatch,new List<string>(){"BankStatementStagingDetails"},shouldRemap);
					}
				}

            //IdBankStatementStagingDetailBatch -- Many


							public BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchWithBankStatementStagingStateDetails(long idBankStatementStagingDetailBatch,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingDetailBatchWithDetails(idBankStatementStagingDetailBatch,new List<string>(){"BankStatementStagingState"},shouldRemap);
					}
				}

            //IdBankStatementStagingState -- ZeroOrOne

                public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchListByBankStatementStagingState(long idBankStatementStagingState)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingDetailBatchListByBankStatementStagingState(idBankStatementStagingState, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchListByBankStatementStagingState(long idBankStatementStagingState, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingDetailBatch, bool>> expression = property=> property.IdBankStatementStagingState == idBankStatementStagingState && property.IsDeactivated !=true;
                    return GetBankStatementStagingDetailBatchCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchListByBankStatementStagingStateByPage(long idBankStatementStagingState, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingDetailBatchListByBankStatementStagingStateByPage(idBankStatementStagingState, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchListByBankStatementStagingStateByPage(long idBankStatementStagingState, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingDetailBatch, bool>> expression = property => property.IdBankStatementStagingState == idBankStatementStagingState && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingDetailBatchesByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchWithDetails(long idBankStatementStagingDetailBatch, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingDetailBatchWithDetails(idBankStatementStagingDetailBatch, db,includes,shouldRemap);
                }
            }

            public BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchWithDetails(long idBankStatementStagingDetailBatch, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementStagingDetailBatch> query =  db.BankStatementStagingDetailBatches;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapBankStatementStagingDetailBatchSingle(query
						.Where(p => p.IdBankStatementStagingDetailBatch == idBankStatementStagingDetailBatch && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdBankStatementStagingDetailBatch == idBankStatementStagingDetailBatch && p.IsDeactivated != true).FirstOrDefault();
            }

            public BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchWitDetails(long idBankStatementStagingDetailBatch,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingDetailBatchWitDetails(idBankStatementStagingDetailBatch, db,shouldRemap);
                }
            }

            public BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchWitDetails(long idBankStatementStagingDetailBatch, SubscriptionEntities db,bool shouldRemap = false)
            {
				BankStatementStagingDetailBatch _BankStatementStagingDetailBatch = db.BankStatementStagingDetailBatches

					.Include("BankStatementStagingDetails")
					.Include("BankStatementStagingState")
								.Where(p => p.IdBankStatementStagingDetailBatch == idBankStatementStagingDetailBatch && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapBankStatementStagingDetailBatchSingle(_BankStatementStagingDetailBatch);

				return  _BankStatementStagingDetailBatch;
            }

            public List<BankStatementStagingDetailBatch> GetBankStatementStagingDetailBatchListByIdList(List<long> bankStatementStagingDetailBatchIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingDetailBatchListByIdList(bankStatementStagingDetailBatchIds, db);
                }
            }
            public List<BankStatementStagingDetailBatch> GetBankStatementStagingDetailBatchListByIdList(List<long> bankStatementStagingDetailBatchIds, SubscriptionEntities db)
            {
                return db.BankStatementStagingDetailBatches.Where(p => p.IsDeactivated != true && bankStatementStagingDetailBatchIds.Contains(p.IdBankStatementStagingDetailBatch.Value)).ToList();
            }


            public void SaveBankStatementStagingDetailBatch(BankStatementStagingDetailBatch bankStatementStagingDetailBatch)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveBankStatementStagingDetailBatch(bankStatementStagingDetailBatch, db);
                }
            }

            public void SaveBankStatementStagingDetailBatch(BankStatementStagingDetailBatch bankStatementStagingDetailBatch, SubscriptionEntities db)
            {
									if (bankStatementStagingDetailBatch.BankStatementStagingState != null) 
						DaoFactories.Instance.BankStatementStagingStateDao.SaveBankStatementStagingState(bankStatementStagingDetailBatch.BankStatementStagingState, db);
				                
                if (bankStatementStagingDetailBatch.IdBankStatementStagingDetailBatch.HasValue){
					var bankStatementStagingDetailBatchFromDb = db.BankStatementStagingDetailBatches.Where(p => p.IdBankStatementStagingDetailBatch == bankStatementStagingDetailBatch.IdBankStatementStagingDetailBatch).FirstOrDefault();
													bankStatementStagingDetailBatchFromDb.IsDeactivated = bankStatementStagingDetailBatch.IsDeactivated;
													bankStatementStagingDetailBatchFromDb.IdBankStatementStagingState = bankStatementStagingDetailBatch.IdBankStatementStagingState;
													bankStatementStagingDetailBatchFromDb.BatchNumber = bankStatementStagingDetailBatch.BatchNumber;
									}
                else{
                                                //fix for saving without duplicating items in db
                              bankStatementStagingDetailBatch.BankStatementStagingState = null;
                                                db.BankStatementStagingDetailBatches.Add(bankStatementStagingDetailBatch);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyBankStatementStagingDetailBatch(BankStatementStagingDetailBatch bankStatementStagingDetailBatch)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyBankStatementStagingDetailBatch(bankStatementStagingDetailBatch, db);
                }
            }

            public void SaveOnlyBankStatementStagingDetailBatch(BankStatementStagingDetailBatch bankStatementStagingDetailBatch, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // bankStatementStagingDetailBatch.BankStatementStagingState = null;
                                            if (bankStatementStagingDetailBatch.IdBankStatementStagingDetailBatch.HasValue){
					var bankStatementStagingDetailBatchFromDb = db.BankStatementStagingDetailBatches.Where(p => p.IdBankStatementStagingDetailBatch == bankStatementStagingDetailBatch.IdBankStatementStagingDetailBatch).FirstOrDefault();
													bankStatementStagingDetailBatchFromDb.IsDeactivated = bankStatementStagingDetailBatch.IsDeactivated;
													bankStatementStagingDetailBatchFromDb.IdBankStatementStagingState = bankStatementStagingDetailBatch.IdBankStatementStagingState;
													bankStatementStagingDetailBatchFromDb.BatchNumber = bankStatementStagingDetailBatch.BatchNumber;
										 db.SaveChanges();

				}
                else{
					BankStatementStagingDetailBatch _bankStatementStagingDetailBatch = new BankStatementStagingDetailBatch();
																	_bankStatementStagingDetailBatch.IsDeactivated = bankStatementStagingDetailBatch.IsDeactivated;
													_bankStatementStagingDetailBatch.IdBankStatementStagingState = bankStatementStagingDetailBatch.IdBankStatementStagingState;
													_bankStatementStagingDetailBatch.BatchNumber = bankStatementStagingDetailBatch.BatchNumber;
					

                    db.BankStatementStagingDetailBatches.Add(_bankStatementStagingDetailBatch);
					db.SaveChanges();
					bankStatementStagingDetailBatch.IdBankStatementStagingDetailBatch =  _bankStatementStagingDetailBatch.IdBankStatementStagingDetailBatch;
                    
                }
            }

            public void DeleteBankStatementStagingDetailBatch(BankStatementStagingDetailBatch bankStatementStagingDetailBatch)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteBankStatementStagingDetailBatch(bankStatementStagingDetailBatch, db);
                }
            }

            public void DeleteBankStatementStagingDetailBatch(BankStatementStagingDetailBatch bankStatementStagingDetailBatch, SubscriptionEntities db)
            {
								var bankStatementStagingDetailBatchFromDb = GetBankStatementStagingDetailBatch(bankStatementStagingDetailBatch.IdBankStatementStagingDetailBatch.Value,db);
				bankStatementStagingDetailBatchFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyBankStatementStagingDetailBatch(BankStatementStagingDetailBatch bankStatementStagingDetailBatch)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyBankStatementStagingDetailBatch(bankStatementStagingDetailBatch, db);
                }
            }

            public void DeletePermanentlyBankStatementStagingDetailBatch(BankStatementStagingDetailBatch bankStatementStagingDetailBatch, SubscriptionEntities db)
            {
								var bankStatementStagingDetailBatchFromDb = GetBankStatementStagingDetailBatch(bankStatementStagingDetailBatch.IdBankStatementStagingDetailBatch.Value,db);
				
				db.BankStatementStagingDetailBatches.Remove(bankStatementStagingDetailBatchFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatchWithoutSavingNewItem(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStagingDetailBatch)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatchWithoutSavingNewItem(newBankStatementStagingDetails,idBankStatementStagingDetailBatch,db);
                                }
                            }

							public List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatchWithoutSavingNewItem(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStagingDetailBatch, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingDetail, bool>> expressionBuilder = p => p.IdBankStatementStagingDetailBatch == idBankStatementStagingDetailBatch;
                                var oldBankStatementStagingDetails = DaoFactories.Instance.BankStatementStagingDetailDao.GetBankStatementStagingDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingDetails.EntityList.Select(pc => pc.IdBankStatementStagingDetail).Except(newBankStatementStagingDetails.Where(pc => pc.IdBankStatementStagingDetail.HasValue).Select(pc => pc.IdBankStatementStagingDetail)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagingDetails;
                            }


                            public List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatch(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStagingDetailBatch)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatch(newBankStatementStagingDetails,idBankStatementStagingDetailBatch,db);
                                }
                            }

                            public List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatch(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStagingDetailBatch, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingDetail, bool>> expressionBuilder = p => p.IdBankStatementStagingDetailBatch == idBankStatementStagingDetailBatch;
                                var oldBankStatementStagingDetails = DaoFactories.Instance.BankStatementStagingDetailDao.GetBankStatementStagingDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingDetails.EntityList.Select(pc => pc.IdBankStatementStagingDetail).Except(newBankStatementStagingDetails.Where(pc => pc.IdBankStatementStagingDetail.HasValue).Select(pc => pc.IdBankStatementStagingDetail)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagingDetails.ForEach(pc =>
                                {
                                    pc.IdBankStatementStagingDetailBatch = idBankStatementStagingDetailBatch;
                                    DaoFactories.Instance.BankStatementStagingDetailDao.SaveOnlyBankStatementStagingDetail(pc, db);
                                });
                                return newBankStatementStagingDetails;
                            }

                        


    



		}
			public partial class BankStatementStagingHitDao :IBankStatementStagingHitDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public BankStatementStagingHitDao(){
			
			}

			public BankStatementStagingHitDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<BankStatementStagingHit> GetAllBankStatementStagingHits(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingHits(db, shouldRemap);
                }
            }

            public List<BankStatementStagingHit> GetAllBankStatementStagingHits(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementStagingHitList(db.BankStatementStagingHits.Where(p => p.IsDeactivated != true).ToList());
				
				return db.BankStatementStagingHits.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementStagingHit, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementStagingHit> query =  db.BankStatementStagingHits;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingHit> baseListReturnType = new BaseListReturnType<BankStatementStagingHit>();

                IQueryable<BankStatementStagingHit> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementStagingHit" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementStagingHit, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingHitList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankStatementHitListDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementHitList"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankStatementStagingDetailDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetail"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankReconHitTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankReconHitType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithOrderDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, db,expression,new List<string>(){"Order"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankStatementStagingHit_TransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHit_TransactionPreset"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithTemporaryTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactions"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingHitsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementStagingHit, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementStagingHit> query =  db.BankStatementStagingHits;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingHit> baseListReturnType = new BaseListReturnType<BankStatementStagingHit>();

                IQueryable<BankStatementStagingHit> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementStagingHit" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementStagingHit, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingHitList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankStatementHitListDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementHitList"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankStatementStagingDetailDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetail"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankReconHitTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankReconHitType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithOrderDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Order"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankStatementStagingHit_TransactionPresetDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHit_TransactionPreset"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithTemporaryTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactions"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankStatementHitListDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitWitDetails(new List<string>(){"BankStatementHitList"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankStatementStagingDetailDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitWitDetails(new List<string>(){"BankStatementStagingDetail"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankReconHitTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitWitDetails(new List<string>(){"BankReconHitType"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithOrderDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitWitDetails(new List<string>(){"Order"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankStatementStagingHit_TransactionPresetDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitWitDetails(new List<string>(){"BankStatementStagingHit_TransactionPreset"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithTemporaryTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHitWitDetails(new List<string>(){"TemporaryTransactions"},shouldRemap);
					}
				}
			

			public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingHitWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementStagingHit> query =  db.BankStatementStagingHits;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingHit> baseListReturnType = new BaseListReturnType<BankStatementStagingHit>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingHitList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public BankStatementStagingHit GetBankStatementStagingHit(long idBankStatementStagingHit,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingHit(idBankStatementStagingHit, db,shouldRemap);
                }
            }
                        public BankStatementStagingHit GetBankStatementStagingHit(long idBankStatementStagingHit, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementStagingHitSingle(db.BankStatementStagingHits.Where(p => p.IdBankStatementStagingHit == idBankStatementStagingHit && p.IsDeactivated != true).FirstOrDefault());

                return db.BankStatementStagingHits.Where(p => p.IdBankStatementStagingHit == idBankStatementStagingHit && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public BankStatementStagingHit GetBankStatementStagingHitCustom( Expression<Func<BankStatementStagingHit, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementStagingHitCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public BankStatementStagingHit GetBankStatementStagingHitCustom( SubscriptionEntities db , Expression<Func<BankStatementStagingHit, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<BankStatementStagingHit> query =  db.BankStatementStagingHits;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapBankStatementStagingHitSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<BankStatementStagingHit> GetBankStatementStagingHitCustomList( Expression<Func<BankStatementStagingHit, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementStagingHit, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementStagingHitCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<BankStatementStagingHit> GetBankStatementStagingHitCustomList(  SubscriptionEntities db , Expression<Func<BankStatementStagingHit, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementStagingHit, dynamic> orderExpression = null)
			{
				IQueryable<BankStatementStagingHit> query =  db.BankStatementStagingHits;
                BaseListReturnType<BankStatementStagingHit> baseListReturnType = new BaseListReturnType<BankStatementStagingHit>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingHitList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public BankStatementStagingHit GetBankStatementStagingHitWithBankStatementHitListDetails(long idBankStatementStagingHit,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingHitWithDetails(idBankStatementStagingHit,new List<string>(){"BankStatementHitList"},shouldRemap);
					}
				}

            //IdBankStatementHitList -- ZeroOrOne

                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankStatementHitList(long idBankStatementHitList)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingHitListByBankStatementHitList(idBankStatementHitList, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankStatementHitList(long idBankStatementHitList, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingHit, bool>> expression = property=> property.IdBankStatementHitList == idBankStatementHitList && property.IsDeactivated !=true;
                    return GetBankStatementStagingHitCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankStatementHitListByPage(long idBankStatementHitList, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingHitListByBankStatementHitListByPage(idBankStatementHitList, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankStatementHitListByPage(long idBankStatementHitList, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingHit, bool>> expression = property => property.IdBankStatementHitList == idBankStatementHitList && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStagingHit GetBankStatementStagingHitWithBankStatementStagingDetailDetails(long idBankStatementStagingHit,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingHitWithDetails(idBankStatementStagingHit,new List<string>(){"BankStatementStagingDetail"},shouldRemap);
					}
				}

            //IdBankStatementStagingDetail -- ZeroOrOne

                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankStatementStagingDetail(long idBankStatementStagingDetail)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingHitListByBankStatementStagingDetail(idBankStatementStagingDetail, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankStatementStagingDetail(long idBankStatementStagingDetail, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingHit, bool>> expression = property=> property.IdBankStatementStagingDetail == idBankStatementStagingDetail && property.IsDeactivated !=true;
                    return GetBankStatementStagingHitCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankStatementStagingDetailByPage(long idBankStatementStagingDetail, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingHitListByBankStatementStagingDetailByPage(idBankStatementStagingDetail, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankStatementStagingDetailByPage(long idBankStatementStagingDetail, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingHit, bool>> expression = property => property.IdBankStatementStagingDetail == idBankStatementStagingDetail && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStagingHit GetBankStatementStagingHitWithBankReconHitTypeDetails(long idBankStatementStagingHit,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingHitWithDetails(idBankStatementStagingHit,new List<string>(){"BankReconHitType"},shouldRemap);
					}
				}

            //IdBankReconHitType -- ZeroOrOne

                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankReconHitType(long idBankReconHitType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingHitListByBankReconHitType(idBankReconHitType, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankReconHitType(long idBankReconHitType, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingHit, bool>> expression = property=> property.IdBankReconHitType == idBankReconHitType && property.IsDeactivated !=true;
                    return GetBankStatementStagingHitCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankReconHitTypeByPage(long idBankReconHitType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingHitListByBankReconHitTypeByPage(idBankReconHitType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankReconHitTypeByPage(long idBankReconHitType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingHit, bool>> expression = property => property.IdBankReconHitType == idBankReconHitType && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStagingHit GetBankStatementStagingHitWithOrderDetails(long idBankStatementStagingHit,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingHitWithDetails(idBankStatementStagingHit,new List<string>(){"Order"},shouldRemap);
					}
				}

            //IdOrder -- ZeroOrOne

                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByOrder(long idOrder)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingHitListByOrder(idOrder, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByOrder(long idOrder, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingHit, bool>> expression = property=> property.IdOrder == idOrder && property.IsDeactivated !=true;
                    return GetBankStatementStagingHitCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByOrderByPage(long idOrder, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingHitListByOrderByPage(idOrder, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByOrderByPage(long idOrder, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingHit, bool>> expression = property => property.IdOrder == idOrder && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStagingHit GetBankStatementStagingHitWithBankStatementStagingHit_TransactionPresetDetails(long idBankStatementStagingHit,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingHitWithDetails(idBankStatementStagingHit,new List<string>(){"BankStatementStagingHit_TransactionPreset"},shouldRemap);
					}
				}

            //IdBankStatementStagingHit -- Many


							public BankStatementStagingHit GetBankStatementStagingHitWithTemporaryTransactionsDetails(long idBankStatementStagingHit,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingHitWithDetails(idBankStatementStagingHit,new List<string>(){"TemporaryTransactions"},shouldRemap);
					}
				}

            //IdBankStatementStagingHit -- Many


			


			public BankStatementStagingHit GetBankStatementStagingHitWithDetails(long idBankStatementStagingHit, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingHitWithDetails(idBankStatementStagingHit, db,includes,shouldRemap);
                }
            }

            public BankStatementStagingHit GetBankStatementStagingHitWithDetails(long idBankStatementStagingHit, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementStagingHit> query =  db.BankStatementStagingHits;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapBankStatementStagingHitSingle(query
						.Where(p => p.IdBankStatementStagingHit == idBankStatementStagingHit && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdBankStatementStagingHit == idBankStatementStagingHit && p.IsDeactivated != true).FirstOrDefault();
            }

            public BankStatementStagingHit GetBankStatementStagingHitWitDetails(long idBankStatementStagingHit,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingHitWitDetails(idBankStatementStagingHit, db,shouldRemap);
                }
            }

            public BankStatementStagingHit GetBankStatementStagingHitWitDetails(long idBankStatementStagingHit, SubscriptionEntities db,bool shouldRemap = false)
            {
				BankStatementStagingHit _BankStatementStagingHit = db.BankStatementStagingHits

					.Include("BankStatementHitList")
					.Include("BankStatementStagingDetail")
					.Include("BankReconHitType")
					.Include("Order")
					.Include("BankStatementStagingHit_TransactionPreset")
					.Include("TemporaryTransactions")
								.Where(p => p.IdBankStatementStagingHit == idBankStatementStagingHit && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapBankStatementStagingHitSingle(_BankStatementStagingHit);

				return  _BankStatementStagingHit;
            }

            public List<BankStatementStagingHit> GetBankStatementStagingHitListByIdList(List<long> bankStatementStagingHitIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingHitListByIdList(bankStatementStagingHitIds, db);
                }
            }
            public List<BankStatementStagingHit> GetBankStatementStagingHitListByIdList(List<long> bankStatementStagingHitIds, SubscriptionEntities db)
            {
                return db.BankStatementStagingHits.Where(p => p.IsDeactivated != true && bankStatementStagingHitIds.Contains(p.IdBankStatementStagingHit.Value)).ToList();
            }


            public void SaveBankStatementStagingHit(BankStatementStagingHit bankStatementStagingHit)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveBankStatementStagingHit(bankStatementStagingHit, db);
                }
            }

            public void SaveBankStatementStagingHit(BankStatementStagingHit bankStatementStagingHit, SubscriptionEntities db)
            {
									if (bankStatementStagingHit.BankStatementHitList != null) 
						DaoFactories.Instance.BankStatementHitListDao.SaveBankStatementHitList(bankStatementStagingHit.BankStatementHitList, db);
									if (bankStatementStagingHit.BankStatementStagingDetail != null) 
						DaoFactories.Instance.BankStatementStagingDetailDao.SaveBankStatementStagingDetail(bankStatementStagingHit.BankStatementStagingDetail, db);
									if (bankStatementStagingHit.BankReconHitType != null) 
						DaoFactories.Instance.BankReconHitTypeDao.SaveBankReconHitType(bankStatementStagingHit.BankReconHitType, db);
									if (bankStatementStagingHit.Order != null) 
						DaoFactories.Instance.OrderDao.SaveOrder(bankStatementStagingHit.Order, db);
				                
                if (bankStatementStagingHit.IdBankStatementStagingHit.HasValue){
					var bankStatementStagingHitFromDb = db.BankStatementStagingHits.Where(p => p.IdBankStatementStagingHit == bankStatementStagingHit.IdBankStatementStagingHit).FirstOrDefault();
													bankStatementStagingHitFromDb.IdBankStatementStagingDetail = bankStatementStagingHit.IdBankStatementStagingDetail;
													bankStatementStagingHitFromDb.HitCount = bankStatementStagingHit.HitCount;
													bankStatementStagingHitFromDb.IdBankReconHitType = bankStatementStagingHit.IdBankReconHitType;
													bankStatementStagingHitFromDb.IsDeactivated = bankStatementStagingHit.IsDeactivated;
													bankStatementStagingHitFromDb.IdBankStatementHitList = bankStatementStagingHit.IdBankStatementHitList;
													bankStatementStagingHitFromDb.IdOrder = bankStatementStagingHit.IdOrder;
									}
                else{
                                                //fix for saving without duplicating items in db
                              bankStatementStagingHit.BankStatementHitList = null;
                                                        //fix for saving without duplicating items in db
                              bankStatementStagingHit.BankStatementStagingDetail = null;
                                                        //fix for saving without duplicating items in db
                              bankStatementStagingHit.BankReconHitType = null;
                                                        //fix for saving without duplicating items in db
                              bankStatementStagingHit.Order = null;
                                                db.BankStatementStagingHits.Add(bankStatementStagingHit);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyBankStatementStagingHit(BankStatementStagingHit bankStatementStagingHit)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyBankStatementStagingHit(bankStatementStagingHit, db);
                }
            }

            public void SaveOnlyBankStatementStagingHit(BankStatementStagingHit bankStatementStagingHit, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // bankStatementStagingHit.BankStatementHitList = null;
                                                        //fix for saving without duplicating items in db
                             // bankStatementStagingHit.BankStatementStagingDetail = null;
                                                        //fix for saving without duplicating items in db
                             // bankStatementStagingHit.BankReconHitType = null;
                                                        //fix for saving without duplicating items in db
                             // bankStatementStagingHit.Order = null;
                                            if (bankStatementStagingHit.IdBankStatementStagingHit.HasValue){
					var bankStatementStagingHitFromDb = db.BankStatementStagingHits.Where(p => p.IdBankStatementStagingHit == bankStatementStagingHit.IdBankStatementStagingHit).FirstOrDefault();
													bankStatementStagingHitFromDb.IdBankStatementStagingDetail = bankStatementStagingHit.IdBankStatementStagingDetail;
													bankStatementStagingHitFromDb.HitCount = bankStatementStagingHit.HitCount;
													bankStatementStagingHitFromDb.IdBankReconHitType = bankStatementStagingHit.IdBankReconHitType;
													bankStatementStagingHitFromDb.IsDeactivated = bankStatementStagingHit.IsDeactivated;
													bankStatementStagingHitFromDb.IdBankStatementHitList = bankStatementStagingHit.IdBankStatementHitList;
													bankStatementStagingHitFromDb.IdOrder = bankStatementStagingHit.IdOrder;
										 db.SaveChanges();

				}
                else{
					BankStatementStagingHit _bankStatementStagingHit = new BankStatementStagingHit();
																	_bankStatementStagingHit.IdBankStatementStagingDetail = bankStatementStagingHit.IdBankStatementStagingDetail;
													_bankStatementStagingHit.HitCount = bankStatementStagingHit.HitCount;
													_bankStatementStagingHit.IdBankReconHitType = bankStatementStagingHit.IdBankReconHitType;
													_bankStatementStagingHit.IsDeactivated = bankStatementStagingHit.IsDeactivated;
													_bankStatementStagingHit.IdBankStatementHitList = bankStatementStagingHit.IdBankStatementHitList;
													_bankStatementStagingHit.IdOrder = bankStatementStagingHit.IdOrder;
					

                    db.BankStatementStagingHits.Add(_bankStatementStagingHit);
					db.SaveChanges();
					bankStatementStagingHit.IdBankStatementStagingHit =  _bankStatementStagingHit.IdBankStatementStagingHit;
                    
                }
            }

            public void DeleteBankStatementStagingHit(BankStatementStagingHit bankStatementStagingHit)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteBankStatementStagingHit(bankStatementStagingHit, db);
                }
            }

            public void DeleteBankStatementStagingHit(BankStatementStagingHit bankStatementStagingHit, SubscriptionEntities db)
            {
								var bankStatementStagingHitFromDb = GetBankStatementStagingHit(bankStatementStagingHit.IdBankStatementStagingHit.Value,db);
				bankStatementStagingHitFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyBankStatementStagingHit(BankStatementStagingHit bankStatementStagingHit)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyBankStatementStagingHit(bankStatementStagingHit, db);
                }
            }

            public void DeletePermanentlyBankStatementStagingHit(BankStatementStagingHit bankStatementStagingHit, SubscriptionEntities db)
            {
								var bankStatementStagingHitFromDb = GetBankStatementStagingHit(bankStatementStagingHit.IdBankStatementStagingHit.Value,db);
				
				db.BankStatementStagingHits.Remove(bankStatementStagingHitFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementStagingHit_TransactionPreset> UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHitWithoutSavingNewItem(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idBankStatementStagingHit)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHitWithoutSavingNewItem(newBankStatementStagingHit_TransactionPreset,idBankStatementStagingHit,db);
                                }
                            }

							public List<BankStatementStagingHit_TransactionPreset> UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHitWithoutSavingNewItem(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idBankStatementStagingHit, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expressionBuilder = p => p.IdBankStatementStagingHit == idBankStatementStagingHit;
                                var oldBankStatementStagingHit_TransactionPreset = DaoFactories.Instance.BankStatementStagingHit_TransactionPresetDao.GetBankStatementStagingHit_TransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingHit_TransactionPreset.EntityList.Select(pc => pc.IdBankStatementStagingHit_TransactionPreset).Except(newBankStatementStagingHit_TransactionPreset.Where(pc => pc.IdBankStatementStagingHit_TransactionPreset.HasValue).Select(pc => pc.IdBankStatementStagingHit_TransactionPreset)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingHit_TransactionPreset.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingHit_TransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagingHit_TransactionPreset;
                            }


                            public List<BankStatementStagingHit_TransactionPreset> UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHit(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idBankStatementStagingHit)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHit(newBankStatementStagingHit_TransactionPreset,idBankStatementStagingHit,db);
                                }
                            }

                            public List<BankStatementStagingHit_TransactionPreset> UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHit(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idBankStatementStagingHit, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expressionBuilder = p => p.IdBankStatementStagingHit == idBankStatementStagingHit;
                                var oldBankStatementStagingHit_TransactionPreset = DaoFactories.Instance.BankStatementStagingHit_TransactionPresetDao.GetBankStatementStagingHit_TransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingHit_TransactionPreset.EntityList.Select(pc => pc.IdBankStatementStagingHit_TransactionPreset).Except(newBankStatementStagingHit_TransactionPreset.Where(pc => pc.IdBankStatementStagingHit_TransactionPreset.HasValue).Select(pc => pc.IdBankStatementStagingHit_TransactionPreset)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingHit_TransactionPreset.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingHit_TransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagingHit_TransactionPreset.ForEach(pc =>
                                {
                                    pc.IdBankStatementStagingHit = idBankStatementStagingHit;
                                    DaoFactories.Instance.BankStatementStagingHit_TransactionPresetDao.SaveOnlyBankStatementStagingHit_TransactionPreset(pc, db);
                                });
                                return newBankStatementStagingHit_TransactionPreset;
                            }

                        
							public List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementStagingHitWithoutSavingNewItem(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingHit)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionsForBankStatementStagingHitWithoutSavingNewItem(newTemporaryTransactions,idBankStatementStagingHit,db);
                                }
                            }

							public List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementStagingHitWithoutSavingNewItem(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingHit, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransaction, bool>> expressionBuilder = p => p.IdBankStatementStagingHit == idBankStatementStagingHit;
                                var oldTemporaryTransactions = DaoFactories.Instance.TemporaryTransactionDao.GetTemporaryTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactions.EntityList.Select(pc => pc.IdTemporaryTransaction).Except(newTemporaryTransactions.Where(pc => pc.IdTemporaryTransaction.HasValue).Select(pc => pc.IdTemporaryTransaction)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTemporaryTransactions;
                            }


                            public List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementStagingHit(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingHit)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionsForBankStatementStagingHit(newTemporaryTransactions,idBankStatementStagingHit,db);
                                }
                            }

                            public List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementStagingHit(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingHit, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransaction, bool>> expressionBuilder = p => p.IdBankStatementStagingHit == idBankStatementStagingHit;
                                var oldTemporaryTransactions = DaoFactories.Instance.TemporaryTransactionDao.GetTemporaryTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactions.EntityList.Select(pc => pc.IdTemporaryTransaction).Except(newTemporaryTransactions.Where(pc => pc.IdTemporaryTransaction.HasValue).Select(pc => pc.IdTemporaryTransaction)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTemporaryTransactions.ForEach(pc =>
                                {
                                    pc.IdBankStatementStagingHit = idBankStatementStagingHit;
                                    DaoFactories.Instance.TemporaryTransactionDao.SaveOnlyTemporaryTransaction(pc, db);
                                });
                                return newTemporaryTransactions;
                            }

                        


    



		}
			public partial class BankStatementStagingHit_TransactionPresetDao :IBankStatementStagingHit_TransactionPresetDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public BankStatementStagingHit_TransactionPresetDao(){
			
			}

			public BankStatementStagingHit_TransactionPresetDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPreset(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingHit_TransactionPreset(db, shouldRemap);
                }
            }

            public List<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPreset(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementStagingHit_TransactionPresetList(db.BankStatementStagingHit_TransactionPreset.Where(p => p.IsDeactivated != true).ToList());
				
				return db.BankStatementStagingHit_TransactionPreset.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingHit_TransactionPresetByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementStagingHit_TransactionPreset> query =  db.BankStatementStagingHit_TransactionPreset;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingHit_TransactionPreset> baseListReturnType = new BaseListReturnType<BankStatementStagingHit_TransactionPreset>();

                IQueryable<BankStatementStagingHit_TransactionPreset> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementStagingHit_TransactionPreset" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingHit_TransactionPresetList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetWithBankStatementStagingHitDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHit_TransactionPresetByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHit"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetWithTransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHit_TransactionPresetByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionPreset"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingHit_TransactionPresetByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementStagingHit_TransactionPreset> query =  db.BankStatementStagingHit_TransactionPreset;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingHit_TransactionPreset> baseListReturnType = new BaseListReturnType<BankStatementStagingHit_TransactionPreset>();

                IQueryable<BankStatementStagingHit_TransactionPreset> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementStagingHit_TransactionPreset" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingHit_TransactionPresetList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetWithBankStatementStagingHitDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHit_TransactionPresetByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHit"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetWithTransactionPresetDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHit_TransactionPresetByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionPreset"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetWithBankStatementStagingHitDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHit_TransactionPresetWitDetails(new List<string>(){"BankStatementStagingHit"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetWithTransactionPresetDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingHit_TransactionPresetWitDetails(new List<string>(){"TransactionPreset"},shouldRemap);
					}
				}
			

			public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingHit_TransactionPresetWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementStagingHit_TransactionPreset> query =  db.BankStatementStagingHit_TransactionPreset;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingHit_TransactionPreset> baseListReturnType = new BaseListReturnType<BankStatementStagingHit_TransactionPreset>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingHit_TransactionPresetList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPreset(long idBankStatementStagingHit_TransactionPreset,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingHit_TransactionPreset(idBankStatementStagingHit_TransactionPreset, db,shouldRemap);
                }
            }
                        public BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPreset(long idBankStatementStagingHit_TransactionPreset, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementStagingHit_TransactionPresetSingle(db.BankStatementStagingHit_TransactionPreset.Where(p => p.IdBankStatementStagingHit_TransactionPreset == idBankStatementStagingHit_TransactionPreset && p.IsDeactivated != true).FirstOrDefault());

                return db.BankStatementStagingHit_TransactionPreset.Where(p => p.IdBankStatementStagingHit_TransactionPreset == idBankStatementStagingHit_TransactionPreset && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetCustom( Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementStagingHit_TransactionPresetCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetCustom( SubscriptionEntities db , Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<BankStatementStagingHit_TransactionPreset> query =  db.BankStatementStagingHit_TransactionPreset;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapBankStatementStagingHit_TransactionPresetSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetBankStatementStagingHit_TransactionPresetCustomList( Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementStagingHit_TransactionPresetCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetBankStatementStagingHit_TransactionPresetCustomList(  SubscriptionEntities db , Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
			{
				IQueryable<BankStatementStagingHit_TransactionPreset> query =  db.BankStatementStagingHit_TransactionPreset;
                BaseListReturnType<BankStatementStagingHit_TransactionPreset> baseListReturnType = new BaseListReturnType<BankStatementStagingHit_TransactionPreset>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingHit_TransactionPresetList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetWithBankStatementStagingHitDetails(long idBankStatementStagingHit_TransactionPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingHit_TransactionPresetWithDetails(idBankStatementStagingHit_TransactionPreset,new List<string>(){"BankStatementStagingHit"},shouldRemap);
					}
				}

            //IdBankStatementStagingHit -- ZeroOrOne

                public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHit(long idBankStatementStagingHit)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHit(idBankStatementStagingHit, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHit(long idBankStatementStagingHit, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = property=> property.IdBankStatementStagingHit == idBankStatementStagingHit && property.IsDeactivated !=true;
                    return GetBankStatementStagingHit_TransactionPresetCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHitByPage(long idBankStatementStagingHit, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHitByPage(idBankStatementStagingHit, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHitByPage(long idBankStatementStagingHit, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = property => property.IdBankStatementStagingHit == idBankStatementStagingHit && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingHit_TransactionPresetByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetWithTransactionPresetDetails(long idBankStatementStagingHit_TransactionPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingHit_TransactionPresetWithDetails(idBankStatementStagingHit_TransactionPreset,new List<string>(){"TransactionPreset"},shouldRemap);
					}
				}

            //IdTransactionPreset -- ZeroOrOne

                public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetListByTransactionPreset(long idTransactionPreset)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingHit_TransactionPresetListByTransactionPreset(idTransactionPreset, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetListByTransactionPreset(long idTransactionPreset, SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = property=> property.IdTransactionPreset == idTransactionPreset && property.IsDeactivated !=true;
                    return GetBankStatementStagingHit_TransactionPresetCustomList(db, expression, null, true);
                }
                public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetListByTransactionPresetByPage(long idTransactionPreset, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllBankStatementStagingHit_TransactionPresetListByTransactionPresetByPage(idTransactionPreset, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetListByTransactionPresetByPage(long idTransactionPreset, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = property => property.IdTransactionPreset == idTransactionPreset && property.IsDeactivated !=true;
                    return GetAllBankStatementStagingHit_TransactionPresetByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetWithDetails(long idBankStatementStagingHit_TransactionPreset, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingHit_TransactionPresetWithDetails(idBankStatementStagingHit_TransactionPreset, db,includes,shouldRemap);
                }
            }

            public BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetWithDetails(long idBankStatementStagingHit_TransactionPreset, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementStagingHit_TransactionPreset> query =  db.BankStatementStagingHit_TransactionPreset;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapBankStatementStagingHit_TransactionPresetSingle(query
						.Where(p => p.IdBankStatementStagingHit_TransactionPreset == idBankStatementStagingHit_TransactionPreset && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdBankStatementStagingHit_TransactionPreset == idBankStatementStagingHit_TransactionPreset && p.IsDeactivated != true).FirstOrDefault();
            }

            public BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetWitDetails(long idBankStatementStagingHit_TransactionPreset,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingHit_TransactionPresetWitDetails(idBankStatementStagingHit_TransactionPreset, db,shouldRemap);
                }
            }

            public BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetWitDetails(long idBankStatementStagingHit_TransactionPreset, SubscriptionEntities db,bool shouldRemap = false)
            {
				BankStatementStagingHit_TransactionPreset _BankStatementStagingHit_TransactionPreset = db.BankStatementStagingHit_TransactionPreset

					.Include("BankStatementStagingHit")
					.Include("TransactionPreset")
								.Where(p => p.IdBankStatementStagingHit_TransactionPreset == idBankStatementStagingHit_TransactionPreset && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapBankStatementStagingHit_TransactionPresetSingle(_BankStatementStagingHit_TransactionPreset);

				return  _BankStatementStagingHit_TransactionPreset;
            }

            public List<BankStatementStagingHit_TransactionPreset> GetBankStatementStagingHit_TransactionPresetListByIdList(List<long> bankStatementStagingHit_TransactionPresetIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingHit_TransactionPresetListByIdList(bankStatementStagingHit_TransactionPresetIds, db);
                }
            }
            public List<BankStatementStagingHit_TransactionPreset> GetBankStatementStagingHit_TransactionPresetListByIdList(List<long> bankStatementStagingHit_TransactionPresetIds, SubscriptionEntities db)
            {
                return db.BankStatementStagingHit_TransactionPreset.Where(p => p.IsDeactivated != true && bankStatementStagingHit_TransactionPresetIds.Contains(p.IdBankStatementStagingHit_TransactionPreset.Value)).ToList();
            }


            public void SaveBankStatementStagingHit_TransactionPreset(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveBankStatementStagingHit_TransactionPreset(bankStatementStagingHit_TransactionPreset, db);
                }
            }

            public void SaveBankStatementStagingHit_TransactionPreset(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset, SubscriptionEntities db)
            {
									if (bankStatementStagingHit_TransactionPreset.BankStatementStagingHit != null) 
						DaoFactories.Instance.BankStatementStagingHitDao.SaveBankStatementStagingHit(bankStatementStagingHit_TransactionPreset.BankStatementStagingHit, db);
									if (bankStatementStagingHit_TransactionPreset.TransactionPreset != null) 
						DaoFactories.Instance.TransactionPresetDao.SaveTransactionPreset(bankStatementStagingHit_TransactionPreset.TransactionPreset, db);
				                
                if (bankStatementStagingHit_TransactionPreset.IdBankStatementStagingHit_TransactionPreset.HasValue){
					var bankStatementStagingHit_TransactionPresetFromDb = db.BankStatementStagingHit_TransactionPreset.Where(p => p.IdBankStatementStagingHit_TransactionPreset == bankStatementStagingHit_TransactionPreset.IdBankStatementStagingHit_TransactionPreset).FirstOrDefault();
													bankStatementStagingHit_TransactionPresetFromDb.IdBankStatementStagingHit = bankStatementStagingHit_TransactionPreset.IdBankStatementStagingHit;
													bankStatementStagingHit_TransactionPresetFromDb.IdTransactionPreset = bankStatementStagingHit_TransactionPreset.IdTransactionPreset;
													bankStatementStagingHit_TransactionPresetFromDb.IsDeactivated = bankStatementStagingHit_TransactionPreset.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              bankStatementStagingHit_TransactionPreset.BankStatementStagingHit = null;
                                                        //fix for saving without duplicating items in db
                              bankStatementStagingHit_TransactionPreset.TransactionPreset = null;
                                                db.BankStatementStagingHit_TransactionPreset.Add(bankStatementStagingHit_TransactionPreset);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyBankStatementStagingHit_TransactionPreset(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyBankStatementStagingHit_TransactionPreset(bankStatementStagingHit_TransactionPreset, db);
                }
            }

            public void SaveOnlyBankStatementStagingHit_TransactionPreset(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // bankStatementStagingHit_TransactionPreset.BankStatementStagingHit = null;
                                                        //fix for saving without duplicating items in db
                             // bankStatementStagingHit_TransactionPreset.TransactionPreset = null;
                                            if (bankStatementStagingHit_TransactionPreset.IdBankStatementStagingHit_TransactionPreset.HasValue){
					var bankStatementStagingHit_TransactionPresetFromDb = db.BankStatementStagingHit_TransactionPreset.Where(p => p.IdBankStatementStagingHit_TransactionPreset == bankStatementStagingHit_TransactionPreset.IdBankStatementStagingHit_TransactionPreset).FirstOrDefault();
													bankStatementStagingHit_TransactionPresetFromDb.IdBankStatementStagingHit = bankStatementStagingHit_TransactionPreset.IdBankStatementStagingHit;
													bankStatementStagingHit_TransactionPresetFromDb.IdTransactionPreset = bankStatementStagingHit_TransactionPreset.IdTransactionPreset;
													bankStatementStagingHit_TransactionPresetFromDb.IsDeactivated = bankStatementStagingHit_TransactionPreset.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					BankStatementStagingHit_TransactionPreset _bankStatementStagingHit_TransactionPreset = new BankStatementStagingHit_TransactionPreset();
																	_bankStatementStagingHit_TransactionPreset.IdBankStatementStagingHit = bankStatementStagingHit_TransactionPreset.IdBankStatementStagingHit;
													_bankStatementStagingHit_TransactionPreset.IdTransactionPreset = bankStatementStagingHit_TransactionPreset.IdTransactionPreset;
													_bankStatementStagingHit_TransactionPreset.IsDeactivated = bankStatementStagingHit_TransactionPreset.IsDeactivated;
					

                    db.BankStatementStagingHit_TransactionPreset.Add(_bankStatementStagingHit_TransactionPreset);
					db.SaveChanges();
					bankStatementStagingHit_TransactionPreset.IdBankStatementStagingHit_TransactionPreset =  _bankStatementStagingHit_TransactionPreset.IdBankStatementStagingHit_TransactionPreset;
                    
                }
            }

            public void DeleteBankStatementStagingHit_TransactionPreset(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteBankStatementStagingHit_TransactionPreset(bankStatementStagingHit_TransactionPreset, db);
                }
            }

            public void DeleteBankStatementStagingHit_TransactionPreset(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset, SubscriptionEntities db)
            {
								var bankStatementStagingHit_TransactionPresetFromDb = GetBankStatementStagingHit_TransactionPreset(bankStatementStagingHit_TransactionPreset.IdBankStatementStagingHit_TransactionPreset.Value,db);
				bankStatementStagingHit_TransactionPresetFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyBankStatementStagingHit_TransactionPreset(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyBankStatementStagingHit_TransactionPreset(bankStatementStagingHit_TransactionPreset, db);
                }
            }

            public void DeletePermanentlyBankStatementStagingHit_TransactionPreset(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset, SubscriptionEntities db)
            {
								var bankStatementStagingHit_TransactionPresetFromDb = GetBankStatementStagingHit_TransactionPreset(bankStatementStagingHit_TransactionPreset.IdBankStatementStagingHit_TransactionPreset.Value,db);
				
				db.BankStatementStagingHit_TransactionPreset.Remove(bankStatementStagingHit_TransactionPresetFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class BankStatementStagingStateDao :IBankStatementStagingStateDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public BankStatementStagingStateDao(){
			
			}

			public BankStatementStagingStateDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<BankStatementStagingState> GetAllBankStatementStagingStates(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingStates(db, shouldRemap);
                }
            }

            public List<BankStatementStagingState> GetAllBankStatementStagingStates(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementStagingStateList(db.BankStatementStagingStates.Where(p => p.IsDeactivated != true).ToList());
				
				return db.BankStatementStagingStates.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingStatesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementStagingState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingState, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementStagingState> query =  db.BankStatementStagingStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingState> baseListReturnType = new BaseListReturnType<BankStatementStagingState>();

                IQueryable<BankStatementStagingState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementStagingState" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementStagingState, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesWithBankStatementStagingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingState, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingStatesByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesWithBankStatementStagingDetailBatchesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingState, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingStatesByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetailBatches"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingStatesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<BankStatementStagingState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<BankStatementStagingState, dynamic> orderExpression = null)
            {
				IQueryable<BankStatementStagingState> query =  db.BankStatementStagingStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingState> baseListReturnType = new BaseListReturnType<BankStatementStagingState>();

                IQueryable<BankStatementStagingState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdBankStatementStagingState" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<BankStatementStagingState, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesWithBankStatementStagingsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingState, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingStatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesWithBankStatementStagingDetailBatchesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingState, bool>> expression = null,bool shouldRemap = false, Func<BankStatementStagingState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingStatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetailBatches"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesWithBankStatementStagingsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingStateWitDetails(new List<string>(){"BankStatementStagings"},shouldRemap);
					}
				}
							public BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesWithBankStatementStagingDetailBatchesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllBankStatementStagingStateWitDetails(new List<string>(){"BankStatementStagingDetailBatches"},shouldRemap);
					}
				}
			

			public BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStateWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllBankStatementStagingStateWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStateWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementStagingState> query =  db.BankStatementStagingStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<BankStatementStagingState> baseListReturnType = new BaseListReturnType<BankStatementStagingState>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public BankStatementStagingState GetBankStatementStagingState(long idBankStatementStagingState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingState(idBankStatementStagingState, db,shouldRemap);
                }
            }
                        public BankStatementStagingState GetBankStatementStagingState(long idBankStatementStagingState, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapBankStatementStagingStateSingle(db.BankStatementStagingStates.Where(p => p.IdBankStatementStagingState == idBankStatementStagingState && p.IsDeactivated != true).FirstOrDefault());

                return db.BankStatementStagingStates.Where(p => p.IdBankStatementStagingState == idBankStatementStagingState && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public BankStatementStagingState GetBankStatementStagingStateCustom( Expression<Func<BankStatementStagingState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementStagingStateCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public BankStatementStagingState GetBankStatementStagingStateCustom( SubscriptionEntities db , Expression<Func<BankStatementStagingState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<BankStatementStagingState> query =  db.BankStatementStagingStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapBankStatementStagingStateSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<BankStatementStagingState> GetBankStatementStagingStateCustomList( Expression<Func<BankStatementStagingState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementStagingState, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetBankStatementStagingStateCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<BankStatementStagingState> GetBankStatementStagingStateCustomList(  SubscriptionEntities db , Expression<Func<BankStatementStagingState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<BankStatementStagingState, dynamic> orderExpression = null)
			{
				IQueryable<BankStatementStagingState> query =  db.BankStatementStagingStates;
                BaseListReturnType<BankStatementStagingState> baseListReturnType = new BaseListReturnType<BankStatementStagingState>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapBankStatementStagingStateList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public BankStatementStagingState GetBankStatementStagingStateWithBankStatementStagingsDetails(long idBankStatementStagingState,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingStateWithDetails(idBankStatementStagingState,new List<string>(){"BankStatementStagings"},shouldRemap);
					}
				}

            //IdBankStatementStagingState -- Many


							public BankStatementStagingState GetBankStatementStagingStateWithBankStatementStagingDetailBatchesDetails(long idBankStatementStagingState,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetBankStatementStagingStateWithDetails(idBankStatementStagingState,new List<string>(){"BankStatementStagingDetailBatches"},shouldRemap);
					}
				}

            //IdBankStatementStagingState -- Many


			


			public BankStatementStagingState GetBankStatementStagingStateWithDetails(long idBankStatementStagingState, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingStateWithDetails(idBankStatementStagingState, db,includes,shouldRemap);
                }
            }

            public BankStatementStagingState GetBankStatementStagingStateWithDetails(long idBankStatementStagingState, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<BankStatementStagingState> query =  db.BankStatementStagingStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapBankStatementStagingStateSingle(query
						.Where(p => p.IdBankStatementStagingState == idBankStatementStagingState && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdBankStatementStagingState == idBankStatementStagingState && p.IsDeactivated != true).FirstOrDefault();
            }

            public BankStatementStagingState GetBankStatementStagingStateWitDetails(long idBankStatementStagingState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingStateWitDetails(idBankStatementStagingState, db,shouldRemap);
                }
            }

            public BankStatementStagingState GetBankStatementStagingStateWitDetails(long idBankStatementStagingState, SubscriptionEntities db,bool shouldRemap = false)
            {
				BankStatementStagingState _BankStatementStagingState = db.BankStatementStagingStates

					.Include("BankStatementStagings")
					.Include("BankStatementStagingDetailBatches")
								.Where(p => p.IdBankStatementStagingState == idBankStatementStagingState && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapBankStatementStagingStateSingle(_BankStatementStagingState);

				return  _BankStatementStagingState;
            }

            public List<BankStatementStagingState> GetBankStatementStagingStateListByIdList(List<long> bankStatementStagingStateIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetBankStatementStagingStateListByIdList(bankStatementStagingStateIds, db);
                }
            }
            public List<BankStatementStagingState> GetBankStatementStagingStateListByIdList(List<long> bankStatementStagingStateIds, SubscriptionEntities db)
            {
                return db.BankStatementStagingStates.Where(p => p.IsDeactivated != true && bankStatementStagingStateIds.Contains(p.IdBankStatementStagingState.Value)).ToList();
            }


            public void SaveBankStatementStagingState(BankStatementStagingState bankStatementStagingState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveBankStatementStagingState(bankStatementStagingState, db);
                }
            }

            public void SaveBankStatementStagingState(BankStatementStagingState bankStatementStagingState, SubscriptionEntities db)
            {
				                
                if (bankStatementStagingState.IdBankStatementStagingState.HasValue){
					var bankStatementStagingStateFromDb = db.BankStatementStagingStates.Where(p => p.IdBankStatementStagingState == bankStatementStagingState.IdBankStatementStagingState).FirstOrDefault();
													bankStatementStagingStateFromDb.IsDeactivated = bankStatementStagingState.IsDeactivated;
													bankStatementStagingStateFromDb.Description = bankStatementStagingState.Description;
									}
                else{
                                        db.BankStatementStagingStates.Add(bankStatementStagingState);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyBankStatementStagingState(BankStatementStagingState bankStatementStagingState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyBankStatementStagingState(bankStatementStagingState, db);
                }
            }

            public void SaveOnlyBankStatementStagingState(BankStatementStagingState bankStatementStagingState, SubscriptionEntities db)
            {
			                    if (bankStatementStagingState.IdBankStatementStagingState.HasValue){
					var bankStatementStagingStateFromDb = db.BankStatementStagingStates.Where(p => p.IdBankStatementStagingState == bankStatementStagingState.IdBankStatementStagingState).FirstOrDefault();
													bankStatementStagingStateFromDb.IsDeactivated = bankStatementStagingState.IsDeactivated;
													bankStatementStagingStateFromDb.Description = bankStatementStagingState.Description;
										 db.SaveChanges();

				}
                else{
					BankStatementStagingState _bankStatementStagingState = new BankStatementStagingState();
																	_bankStatementStagingState.IsDeactivated = bankStatementStagingState.IsDeactivated;
													_bankStatementStagingState.Description = bankStatementStagingState.Description;
					

                    db.BankStatementStagingStates.Add(_bankStatementStagingState);
					db.SaveChanges();
					bankStatementStagingState.IdBankStatementStagingState =  _bankStatementStagingState.IdBankStatementStagingState;
                    
                }
            }

            public void DeleteBankStatementStagingState(BankStatementStagingState bankStatementStagingState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteBankStatementStagingState(bankStatementStagingState, db);
                }
            }

            public void DeleteBankStatementStagingState(BankStatementStagingState bankStatementStagingState, SubscriptionEntities db)
            {
								var bankStatementStagingStateFromDb = GetBankStatementStagingState(bankStatementStagingState.IdBankStatementStagingState.Value,db);
				bankStatementStagingStateFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyBankStatementStagingState(BankStatementStagingState bankStatementStagingState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyBankStatementStagingState(bankStatementStagingState, db);
                }
            }

            public void DeletePermanentlyBankStatementStagingState(BankStatementStagingState bankStatementStagingState, SubscriptionEntities db)
            {
								var bankStatementStagingStateFromDb = GetBankStatementStagingState(bankStatementStagingState.IdBankStatementStagingState.Value,db);
				
				db.BankStatementStagingStates.Remove(bankStatementStagingStateFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementStaging> UpdateBankStatementStagingsForBankStatementStagingStateWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idBankStatementStagingState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingsForBankStatementStagingStateWithoutSavingNewItem(newBankStatementStagings,idBankStatementStagingState,db);
                                }
                            }

							public List<BankStatementStaging> UpdateBankStatementStagingsForBankStatementStagingStateWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idBankStatementStagingState, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStaging, bool>> expressionBuilder = p => p.IdBankStatementStagingState == idBankStatementStagingState;
                                var oldBankStatementStagings = DaoFactories.Instance.BankStatementStagingDao.GetBankStatementStagingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagings.EntityList.Select(pc => pc.IdBankStatementStaging).Except(newBankStatementStagings.Where(pc => pc.IdBankStatementStaging.HasValue).Select(pc => pc.IdBankStatementStaging)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStaging)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagings;
                            }


                            public List<BankStatementStaging> UpdateBankStatementStagingsForBankStatementStagingState(List<BankStatementStaging> newBankStatementStagings,long idBankStatementStagingState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingsForBankStatementStagingState(newBankStatementStagings,idBankStatementStagingState,db);
                                }
                            }

                            public List<BankStatementStaging> UpdateBankStatementStagingsForBankStatementStagingState(List<BankStatementStaging> newBankStatementStagings,long idBankStatementStagingState, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStaging, bool>> expressionBuilder = p => p.IdBankStatementStagingState == idBankStatementStagingState;
                                var oldBankStatementStagings = DaoFactories.Instance.BankStatementStagingDao.GetBankStatementStagingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagings.EntityList.Select(pc => pc.IdBankStatementStaging).Except(newBankStatementStagings.Where(pc => pc.IdBankStatementStaging.HasValue).Select(pc => pc.IdBankStatementStaging)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStaging)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagings.ForEach(pc =>
                                {
                                    pc.IdBankStatementStagingState = idBankStatementStagingState;
                                    DaoFactories.Instance.BankStatementStagingDao.SaveOnlyBankStatementStaging(pc, db);
                                });
                                return newBankStatementStagings;
                            }

                        
							public List<BankStatementStagingDetailBatch> UpdateBankStatementStagingDetailBatchesForBankStatementStagingStateWithoutSavingNewItem(List<BankStatementStagingDetailBatch> newBankStatementStagingDetailBatches,long idBankStatementStagingState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingDetailBatchesForBankStatementStagingStateWithoutSavingNewItem(newBankStatementStagingDetailBatches,idBankStatementStagingState,db);
                                }
                            }

							public List<BankStatementStagingDetailBatch> UpdateBankStatementStagingDetailBatchesForBankStatementStagingStateWithoutSavingNewItem(List<BankStatementStagingDetailBatch> newBankStatementStagingDetailBatches,long idBankStatementStagingState, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingDetailBatch, bool>> expressionBuilder = p => p.IdBankStatementStagingState == idBankStatementStagingState;
                                var oldBankStatementStagingDetailBatches = DaoFactories.Instance.BankStatementStagingDetailBatchDao.GetBankStatementStagingDetailBatchCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingDetailBatches.EntityList.Select(pc => pc.IdBankStatementStagingDetailBatch).Except(newBankStatementStagingDetailBatches.Where(pc => pc.IdBankStatementStagingDetailBatch.HasValue).Select(pc => pc.IdBankStatementStagingDetailBatch)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingDetailBatches.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingDetailBatch)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagingDetailBatches;
                            }


                            public List<BankStatementStagingDetailBatch> UpdateBankStatementStagingDetailBatchesForBankStatementStagingState(List<BankStatementStagingDetailBatch> newBankStatementStagingDetailBatches,long idBankStatementStagingState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingDetailBatchesForBankStatementStagingState(newBankStatementStagingDetailBatches,idBankStatementStagingState,db);
                                }
                            }

                            public List<BankStatementStagingDetailBatch> UpdateBankStatementStagingDetailBatchesForBankStatementStagingState(List<BankStatementStagingDetailBatch> newBankStatementStagingDetailBatches,long idBankStatementStagingState, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingDetailBatch, bool>> expressionBuilder = p => p.IdBankStatementStagingState == idBankStatementStagingState;
                                var oldBankStatementStagingDetailBatches = DaoFactories.Instance.BankStatementStagingDetailBatchDao.GetBankStatementStagingDetailBatchCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingDetailBatches.EntityList.Select(pc => pc.IdBankStatementStagingDetailBatch).Except(newBankStatementStagingDetailBatches.Where(pc => pc.IdBankStatementStagingDetailBatch.HasValue).Select(pc => pc.IdBankStatementStagingDetailBatch)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingDetailBatches.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingDetailBatch)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagingDetailBatches.ForEach(pc =>
                                {
                                    pc.IdBankStatementStagingState = idBankStatementStagingState;
                                    DaoFactories.Instance.BankStatementStagingDetailBatchDao.SaveOnlyBankStatementStagingDetailBatch(pc, db);
                                });
                                return newBankStatementStagingDetailBatches;
                            }

                        


    



		}
			public partial class CityDao :ICityDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public CityDao(){
			
			}

			public CityDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<City> GetAllCities(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCities(db, shouldRemap);
                }
            }

            public List<City> GetAllCities(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCityList(db.Cities.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Cities.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<City> GetAllCitiesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<City, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<City, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCitiesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<City> GetAllCitiesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<City, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<City, dynamic> orderExpression = null)
            {
				IQueryable<City> query =  db.Cities;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<City> baseListReturnType = new BaseListReturnType<City>();

                IQueryable<City> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCity" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<City, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCityList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<City> GetAllCitiesWithAddressesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<City, bool>> expression = null,bool shouldRemap = false, Func<City, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCitiesByPage(sortingPagingInfo, db,expression,new List<string>(){"Addresses"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<City> GetAllCitiesWithCountryDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<City, bool>> expression = null,bool shouldRemap = false, Func<City, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCitiesByPage(sortingPagingInfo, db,expression,new List<string>(){"Country"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<City> GetAllCitiesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<City, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<City, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCitiesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<City> GetAllCitiesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<City, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<City, dynamic> orderExpression = null)
            {
				IQueryable<City> query =  db.Cities;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<City> baseListReturnType = new BaseListReturnType<City>();

                IQueryable<City> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCity" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<City, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCityList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<City> GetAllCitiesWithAddressesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<City, bool>> expression = null,bool shouldRemap = false, Func<City, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCitiesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Addresses"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<City> GetAllCitiesWithCountryDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<City, bool>> expression = null,bool shouldRemap = false, Func<City, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCitiesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Country"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<City> GetAllCitiesWithAddressesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCityWitDetails(new List<string>(){"Addresses"},shouldRemap);
					}
				}
							public BaseListReturnType<City> GetAllCitiesWithCountryDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCityWitDetails(new List<string>(){"Country"},shouldRemap);
					}
				}
			

			public BaseListReturnType<City> GetAllCityWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCityWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<City> GetAllCityWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<City> query =  db.Cities;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<City> baseListReturnType = new BaseListReturnType<City>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCityList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public City GetCity(long idCity,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCity(idCity, db,shouldRemap);
                }
            }
                        public City GetCity(long idCity, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCitySingle(db.Cities.Where(p => p.IdCity == idCity && p.IsDeactivated != true).FirstOrDefault());

                return db.Cities.Where(p => p.IdCity == idCity && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public City GetCityCustom( Expression<Func<City, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCityCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public City GetCityCustom( SubscriptionEntities db , Expression<Func<City, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<City> query =  db.Cities;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapCitySingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<City> GetCityCustomList( Expression<Func<City, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<City, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCityCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<City> GetCityCustomList(  SubscriptionEntities db , Expression<Func<City, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<City, dynamic> orderExpression = null)
			{
				IQueryable<City> query =  db.Cities;
                BaseListReturnType<City> baseListReturnType = new BaseListReturnType<City>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCityList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public City GetCityWithAddressesDetails(long idCity,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCityWithDetails(idCity,new List<string>(){"Addresses"},shouldRemap);
					}
				}

            //IdCity -- Many


							public City GetCityWithCountryDetails(long idCity,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCityWithDetails(idCity,new List<string>(){"Country"},shouldRemap);
					}
				}

            //IdCountry -- ZeroOrOne

                public BaseListReturnType<City> GetAllCityListByCountry(long idCountry)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCityListByCountry(idCountry, db);
                    }
                }
                public BaseListReturnType<City> GetAllCityListByCountry(long idCountry, SubscriptionEntities db)
                {
                    Expression<Func<City, bool>> expression = property=> property.IdCountry == idCountry && property.IsDeactivated !=true;
                    return GetCityCustomList(db, expression, null, true);
                }
                public BaseListReturnType<City> GetAllCityListByCountryByPage(long idCountry, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCityListByCountryByPage(idCountry, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<City> GetAllCityListByCountryByPage(long idCountry, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<City, bool>> expression = property => property.IdCountry == idCountry && property.IsDeactivated !=true;
                    return GetAllCitiesByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public City GetCityWithDetails(long idCity, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCityWithDetails(idCity, db,includes,shouldRemap);
                }
            }

            public City GetCityWithDetails(long idCity, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<City> query =  db.Cities;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapCitySingle(query
						.Where(p => p.IdCity == idCity && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdCity == idCity && p.IsDeactivated != true).FirstOrDefault();
            }

            public City GetCityWitDetails(long idCity,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCityWitDetails(idCity, db,shouldRemap);
                }
            }

            public City GetCityWitDetails(long idCity, SubscriptionEntities db,bool shouldRemap = false)
            {
				City _City = db.Cities

					.Include("Addresses")
					.Include("Country")
								.Where(p => p.IdCity == idCity && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapCitySingle(_City);

				return  _City;
            }

            public List<City> GetCityListByIdList(List<long> cityIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCityListByIdList(cityIds, db);
                }
            }
            public List<City> GetCityListByIdList(List<long> cityIds, SubscriptionEntities db)
            {
                return db.Cities.Where(p => p.IsDeactivated != true && cityIds.Contains(p.IdCity.Value)).ToList();
            }


            public void SaveCity(City city)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveCity(city, db);
                }
            }

            public void SaveCity(City city, SubscriptionEntities db)
            {
									if (city.Country != null) 
						DaoFactories.Instance.CountryDao.SaveCountry(city.Country, db);
				                
                if (city.IdCity.HasValue){
					var cityFromDb = db.Cities.Where(p => p.IdCity == city.IdCity).FirstOrDefault();
													cityFromDb.Description = city.Description;
													cityFromDb.IsDeactivated = city.IsDeactivated;
													cityFromDb.IdCountry = city.IdCountry;
									}
                else{
                                                //fix for saving without duplicating items in db
                              city.Country = null;
                                                db.Cities.Add(city);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyCity(City city)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyCity(city, db);
                }
            }

            public void SaveOnlyCity(City city, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // city.Country = null;
                                            if (city.IdCity.HasValue){
					var cityFromDb = db.Cities.Where(p => p.IdCity == city.IdCity).FirstOrDefault();
													cityFromDb.Description = city.Description;
													cityFromDb.IsDeactivated = city.IsDeactivated;
													cityFromDb.IdCountry = city.IdCountry;
										 db.SaveChanges();

				}
                else{
					City _city = new City();
																	_city.Description = city.Description;
													_city.IsDeactivated = city.IsDeactivated;
													_city.IdCountry = city.IdCountry;
					

                    db.Cities.Add(_city);
					db.SaveChanges();
					city.IdCity =  _city.IdCity;
                    
                }
            }

            public void DeleteCity(City city)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteCity(city, db);
                }
            }

            public void DeleteCity(City city, SubscriptionEntities db)
            {
								var cityFromDb = GetCity(city.IdCity.Value,db);
				cityFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyCity(City city)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyCity(city, db);
                }
            }

            public void DeletePermanentlyCity(City city, SubscriptionEntities db)
            {
								var cityFromDb = GetCity(city.IdCity.Value,db);
				
				db.Cities.Remove(cityFromDb);
                db.SaveChanges();
            }


            
							public List<Address> UpdateAddressesForCityWithoutSavingNewItem(List<Address> newAddresses,long idCity)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateAddressesForCityWithoutSavingNewItem(newAddresses,idCity,db);
                                }
                            }

							public List<Address> UpdateAddressesForCityWithoutSavingNewItem(List<Address> newAddresses,long idCity, SubscriptionEntities  db)
                            {
                                Expression<Func<Address, bool>> expressionBuilder = p => p.IdCity == idCity;
                                var oldAddresses = DaoFactories.Instance.AddressDao.GetAddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldAddresses.EntityList.Select(pc => pc.IdAddress).Except(newAddresses.Where(pc => pc.IdAddress.HasValue).Select(pc => pc.IdAddress)).ToList();
                                var itemsTobeDeleted = oldAddresses.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdAddress)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newAddresses;
                            }


                            public List<Address> UpdateAddressesForCity(List<Address> newAddresses,long idCity)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateAddressesForCity(newAddresses,idCity,db);
                                }
                            }

                            public List<Address> UpdateAddressesForCity(List<Address> newAddresses,long idCity, SubscriptionEntities  db)
                            {
                                Expression<Func<Address, bool>> expressionBuilder = p => p.IdCity == idCity;
                                var oldAddresses = DaoFactories.Instance.AddressDao.GetAddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldAddresses.EntityList.Select(pc => pc.IdAddress).Except(newAddresses.Where(pc => pc.IdAddress.HasValue).Select(pc => pc.IdAddress)).ToList();
                                var itemsTobeDeleted = oldAddresses.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdAddress)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newAddresses.ForEach(pc =>
                                {
                                    pc.IdCity = idCity;
                                    DaoFactories.Instance.AddressDao.SaveOnlyAddress(pc, db);
                                });
                                return newAddresses;
                            }

                        


    



		}
			public partial class CompanyDao :ICompanyDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public CompanyDao(){
			
			}

			public CompanyDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Company> GetAllCompanies(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCompanies(db, shouldRemap);
                }
            }

            public List<Company> GetAllCompanies(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCompanyList(db.Companies.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Companies.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Company> GetAllCompaniesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCompaniesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Company> GetAllCompaniesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Company, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
            {
				IQueryable<Company> query =  db.Companies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Company> baseListReturnType = new BaseListReturnType<Company>();

                IQueryable<Company> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCompany" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Company, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Name.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Name.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.RegistrationCode.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.VatRegistrationNo.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCompanyList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Company> GetAllCompaniesWithCompany_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompaniesByPage(sortingPagingInfo, db,expression,new List<string>(){"Company_ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithCustomersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompaniesByPage(sortingPagingInfo, db,expression,new List<string>(){"Customers"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompaniesByPage(sortingPagingInfo, db,expression,new List<string>(){"Concept"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithDocumentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompaniesByPage(sortingPagingInfo, db,expression,new List<string>(){"Document"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithCompanyLocationsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompaniesByPage(sortingPagingInfo, db,expression,new List<string>(){"CompanyLocations"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithConceptsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompaniesByPage(sortingPagingInfo, db,expression,new List<string>(){"Concepts"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Company> GetAllCompaniesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCompaniesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Company> GetAllCompaniesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Company, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
            {
				IQueryable<Company> query =  db.Companies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Company> baseListReturnType = new BaseListReturnType<Company>();

                IQueryable<Company> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCompany" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Company, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCompanyList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Company> GetAllCompaniesWithCompany_ContactTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompaniesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Company_ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithCustomersDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompaniesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Customers"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithConceptDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompaniesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Concept"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithDocumentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompaniesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Document"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithCompanyLocationsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompaniesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"CompanyLocations"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithConceptsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap = false, Func<Company, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompaniesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Concepts"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Company> GetAllCompaniesWithCompany_ContactTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompanyWitDetails(new List<string>(){"Company_ContactType"},shouldRemap);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithCustomersDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompanyWitDetails(new List<string>(){"Customers"},shouldRemap);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithConceptDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompanyWitDetails(new List<string>(){"Concept"},shouldRemap);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithDocumentDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompanyWitDetails(new List<string>(){"Document"},shouldRemap);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithCompanyLocationsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompanyWitDetails(new List<string>(){"CompanyLocations"},shouldRemap);
					}
				}
							public BaseListReturnType<Company> GetAllCompaniesWithConceptsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompanyWitDetails(new List<string>(){"Concepts"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Company> GetAllCompanyWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCompanyWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Company> GetAllCompanyWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Company> query =  db.Companies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Company> baseListReturnType = new BaseListReturnType<Company>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCompanyList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Company GetCompany(long idCompany,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCompany(idCompany, db,shouldRemap);
                }
            }
                        public Company GetCompany(long idCompany, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCompanySingle(db.Companies.Where(p => p.IdCompany == idCompany && p.IsDeactivated != true).FirstOrDefault());

                return db.Companies.Where(p => p.IdCompany == idCompany && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Company GetCompanyCustom( Expression<Func<Company, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCompanyCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Company GetCompanyCustom( SubscriptionEntities db , Expression<Func<Company, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Company> query =  db.Companies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapCompanySingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Company> GetCompanyCustomList( Expression<Func<Company, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Company, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCompanyCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Company> GetCompanyCustomList(  SubscriptionEntities db , Expression<Func<Company, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Company, dynamic> orderExpression = null)
			{
				IQueryable<Company> query =  db.Companies;
                BaseListReturnType<Company> baseListReturnType = new BaseListReturnType<Company>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCompanyList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Company GetCompanyWithCompany_ContactTypeDetails(long idCompany,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCompanyWithDetails(idCompany,new List<string>(){"Company_ContactType"},shouldRemap);
					}
				}

            //IdCompany -- Many


							public Company GetCompanyWithCustomersDetails(long idCompany,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCompanyWithDetails(idCompany,new List<string>(){"Customers"},shouldRemap);
					}
				}

            //IdCompany -- Many


							public Company GetCompanyWithConceptDetails(long idCompany,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCompanyWithDetails(idCompany,new List<string>(){"Concept"},shouldRemap);
					}
				}

            //IdConcept -- ZeroOrOne

                public BaseListReturnType<Company> GetAllCompanyListByConcept(long idConcept)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCompanyListByConcept(idConcept, db);
                    }
                }
                public BaseListReturnType<Company> GetAllCompanyListByConcept(long idConcept, SubscriptionEntities db)
                {
                    Expression<Func<Company, bool>> expression = property=> property.IdConcept == idConcept && property.IsDeactivated !=true;
                    return GetCompanyCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Company> GetAllCompanyListByConceptByPage(long idConcept, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCompanyListByConceptByPage(idConcept, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Company> GetAllCompanyListByConceptByPage(long idConcept, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Company, bool>> expression = property => property.IdConcept == idConcept && property.IsDeactivated !=true;
                    return GetAllCompaniesByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Company GetCompanyWithDocumentDetails(long idCompany,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCompanyWithDetails(idCompany,new List<string>(){"Document"},shouldRemap);
					}
				}

            //IdCompanyLogo -- ZeroOrOne

                public BaseListReturnType<Company> GetAllCompanyListByDocument(long idDocument)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCompanyListByDocument(idDocument, db);
                    }
                }
                public BaseListReturnType<Company> GetAllCompanyListByDocument(long idDocument, SubscriptionEntities db)
                {
                    Expression<Func<Company, bool>> expression = property=> property.IdCompanyLogo == idDocument && property.IsDeactivated !=true;
                    return GetCompanyCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Company> GetAllCompanyListByDocumentByPage(long idDocument, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCompanyListByDocumentByPage(idDocument, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Company> GetAllCompanyListByDocumentByPage(long idDocument, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Company, bool>> expression = property => property.IdCompanyLogo == idDocument && property.IsDeactivated !=true;
                    return GetAllCompaniesByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Company GetCompanyWithCompanyLocationsDetails(long idCompany,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCompanyWithDetails(idCompany,new List<string>(){"CompanyLocations"},shouldRemap);
					}
				}

            //IdCompany -- Many


							public Company GetCompanyWithConceptsDetails(long idCompany,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCompanyWithDetails(idCompany,new List<string>(){"Concepts"},shouldRemap);
					}
				}

            //IdCompany -- Many


			


			public Company GetCompanyWithDetails(long idCompany, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCompanyWithDetails(idCompany, db,includes,shouldRemap);
                }
            }

            public Company GetCompanyWithDetails(long idCompany, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Company> query =  db.Companies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapCompanySingle(query
						.Where(p => p.IdCompany == idCompany && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdCompany == idCompany && p.IsDeactivated != true).FirstOrDefault();
            }

            public Company GetCompanyWitDetails(long idCompany,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCompanyWitDetails(idCompany, db,shouldRemap);
                }
            }

            public Company GetCompanyWitDetails(long idCompany, SubscriptionEntities db,bool shouldRemap = false)
            {
				Company _Company = db.Companies

					.Include("Company_ContactType")
					.Include("Customers")
					.Include("Concept")
					.Include("Document")
					.Include("CompanyLocations")
					.Include("Concepts")
								.Where(p => p.IdCompany == idCompany && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapCompanySingle(_Company);

				return  _Company;
            }

            public List<Company> GetCompanyListByIdList(List<long> companyIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCompanyListByIdList(companyIds, db);
                }
            }
            public List<Company> GetCompanyListByIdList(List<long> companyIds, SubscriptionEntities db)
            {
                return db.Companies.Where(p => p.IsDeactivated != true && companyIds.Contains(p.IdCompany.Value)).ToList();
            }


            public void SaveCompany(Company company)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveCompany(company, db);
                }
            }

            public void SaveCompany(Company company, SubscriptionEntities db)
            {
									if (company.Concept != null) 
						DaoFactories.Instance.ConceptDao.SaveConcept(company.Concept, db);
									if (company.Document != null) 
						DaoFactories.Instance.DocumentDao.SaveDocument(company.Document, db);
				                
                if (company.IdCompany.HasValue){
					var companyFromDb = db.Companies.Where(p => p.IdCompany == company.IdCompany).FirstOrDefault();
													companyFromDb.Name = company.Name;
													companyFromDb.IsDeactivated = company.IsDeactivated;
													companyFromDb.Description = company.Description;
													companyFromDb.EstablishmentDate = company.EstablishmentDate;
													companyFromDb.IdEmployeeNoRange = company.IdEmployeeNoRange;
													companyFromDb.IdParentCompany = company.IdParentCompany;
													companyFromDb.RegistrationCode = company.RegistrationCode;
													companyFromDb.VatRegistrationNo = company.VatRegistrationNo;
													companyFromDb.IdCompanyLogo = company.IdCompanyLogo;
													companyFromDb.IdHostedDomain = company.IdHostedDomain;
													companyFromDb.IdOpeningHourType = company.IdOpeningHourType;
													companyFromDb.IdConcept = company.IdConcept;
									}
                else{
                                                //fix for saving without duplicating items in db
                              company.Concept = null;
                                                        //fix for saving without duplicating items in db
                              company.Document = null;
                                                db.Companies.Add(company);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyCompany(Company company)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyCompany(company, db);
                }
            }

            public void SaveOnlyCompany(Company company, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // company.Concept = null;
                                                        //fix for saving without duplicating items in db
                             // company.Document = null;
                                            if (company.IdCompany.HasValue){
					var companyFromDb = db.Companies.Where(p => p.IdCompany == company.IdCompany).FirstOrDefault();
													companyFromDb.Name = company.Name;
													companyFromDb.IsDeactivated = company.IsDeactivated;
													companyFromDb.Description = company.Description;
													companyFromDb.EstablishmentDate = company.EstablishmentDate;
													companyFromDb.IdEmployeeNoRange = company.IdEmployeeNoRange;
													companyFromDb.IdParentCompany = company.IdParentCompany;
													companyFromDb.RegistrationCode = company.RegistrationCode;
													companyFromDb.VatRegistrationNo = company.VatRegistrationNo;
													companyFromDb.IdCompanyLogo = company.IdCompanyLogo;
													companyFromDb.IdHostedDomain = company.IdHostedDomain;
													companyFromDb.IdOpeningHourType = company.IdOpeningHourType;
													companyFromDb.IdConcept = company.IdConcept;
										 db.SaveChanges();

				}
                else{
					Company _company = new Company();
																	_company.Name = company.Name;
													_company.IsDeactivated = company.IsDeactivated;
													_company.Description = company.Description;
													_company.EstablishmentDate = company.EstablishmentDate;
													_company.IdEmployeeNoRange = company.IdEmployeeNoRange;
													_company.IdParentCompany = company.IdParentCompany;
													_company.RegistrationCode = company.RegistrationCode;
													_company.VatRegistrationNo = company.VatRegistrationNo;
													_company.IdCompanyLogo = company.IdCompanyLogo;
													_company.IdHostedDomain = company.IdHostedDomain;
													_company.IdOpeningHourType = company.IdOpeningHourType;
													_company.IdConcept = company.IdConcept;
					

                    db.Companies.Add(_company);
					db.SaveChanges();
					company.IdCompany =  _company.IdCompany;
                    
                }
            }

            public void DeleteCompany(Company company)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteCompany(company, db);
                }
            }

            public void DeleteCompany(Company company, SubscriptionEntities db)
            {
								var companyFromDb = GetCompany(company.IdCompany.Value,db);
				companyFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyCompany(Company company)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyCompany(company, db);
                }
            }

            public void DeletePermanentlyCompany(Company company, SubscriptionEntities db)
            {
								var companyFromDb = GetCompany(company.IdCompany.Value,db);
				
				db.Companies.Remove(companyFromDb);
                db.SaveChanges();
            }


            
							public List<Company_ContactType> UpdateCompany_ContactTypeForCompanyWithoutSavingNewItem(List<Company_ContactType> newCompany_ContactType,long idCompany)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCompany_ContactTypeForCompanyWithoutSavingNewItem(newCompany_ContactType,idCompany,db);
                                }
                            }

							public List<Company_ContactType> UpdateCompany_ContactTypeForCompanyWithoutSavingNewItem(List<Company_ContactType> newCompany_ContactType,long idCompany, SubscriptionEntities  db)
                            {
                                Expression<Func<Company_ContactType, bool>> expressionBuilder = p => p.IdCompany == idCompany;
                                var oldCompany_ContactType = DaoFactories.Instance.Company_ContactTypeDao.GetCompany_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCompany_ContactType.EntityList.Select(pc => pc.IdCompany_ContactType).Except(newCompany_ContactType.Where(pc => pc.IdCompany_ContactType.HasValue).Select(pc => pc.IdCompany_ContactType)).ToList();
                                var itemsTobeDeleted = oldCompany_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCompany_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newCompany_ContactType;
                            }


                            public List<Company_ContactType> UpdateCompany_ContactTypeForCompany(List<Company_ContactType> newCompany_ContactType,long idCompany)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCompany_ContactTypeForCompany(newCompany_ContactType,idCompany,db);
                                }
                            }

                            public List<Company_ContactType> UpdateCompany_ContactTypeForCompany(List<Company_ContactType> newCompany_ContactType,long idCompany, SubscriptionEntities  db)
                            {
                                Expression<Func<Company_ContactType, bool>> expressionBuilder = p => p.IdCompany == idCompany;
                                var oldCompany_ContactType = DaoFactories.Instance.Company_ContactTypeDao.GetCompany_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCompany_ContactType.EntityList.Select(pc => pc.IdCompany_ContactType).Except(newCompany_ContactType.Where(pc => pc.IdCompany_ContactType.HasValue).Select(pc => pc.IdCompany_ContactType)).ToList();
                                var itemsTobeDeleted = oldCompany_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCompany_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newCompany_ContactType.ForEach(pc =>
                                {
                                    pc.IdCompany = idCompany;
                                    DaoFactories.Instance.Company_ContactTypeDao.SaveOnlyCompany_ContactType(pc, db);
                                });
                                return newCompany_ContactType;
                            }

                        
							public List<Customer> UpdateCustomersForCompanyWithoutSavingNewItem(List<Customer> newCustomers,long idCompany)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCustomersForCompanyWithoutSavingNewItem(newCustomers,idCompany,db);
                                }
                            }

							public List<Customer> UpdateCustomersForCompanyWithoutSavingNewItem(List<Customer> newCustomers,long idCompany, SubscriptionEntities  db)
                            {
                                Expression<Func<Customer, bool>> expressionBuilder = p => p.IdCompany == idCompany;
                                var oldCustomers = DaoFactories.Instance.CustomerDao.GetCustomerCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCustomers.EntityList.Select(pc => pc.IdCustomer).Except(newCustomers.Where(pc => pc.IdCustomer.HasValue).Select(pc => pc.IdCustomer)).ToList();
                                var itemsTobeDeleted = oldCustomers.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCustomer)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newCustomers;
                            }


                            public List<Customer> UpdateCustomersForCompany(List<Customer> newCustomers,long idCompany)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCustomersForCompany(newCustomers,idCompany,db);
                                }
                            }

                            public List<Customer> UpdateCustomersForCompany(List<Customer> newCustomers,long idCompany, SubscriptionEntities  db)
                            {
                                Expression<Func<Customer, bool>> expressionBuilder = p => p.IdCompany == idCompany;
                                var oldCustomers = DaoFactories.Instance.CustomerDao.GetCustomerCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCustomers.EntityList.Select(pc => pc.IdCustomer).Except(newCustomers.Where(pc => pc.IdCustomer.HasValue).Select(pc => pc.IdCustomer)).ToList();
                                var itemsTobeDeleted = oldCustomers.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCustomer)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newCustomers.ForEach(pc =>
                                {
                                    pc.IdCompany = idCompany;
                                    DaoFactories.Instance.CustomerDao.SaveOnlyCustomer(pc, db);
                                });
                                return newCustomers;
                            }

                        
							public List<CompanyLocation> UpdateCompanyLocationsForCompanyWithoutSavingNewItem(List<CompanyLocation> newCompanyLocations,long idCompany)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCompanyLocationsForCompanyWithoutSavingNewItem(newCompanyLocations,idCompany,db);
                                }
                            }

							public List<CompanyLocation> UpdateCompanyLocationsForCompanyWithoutSavingNewItem(List<CompanyLocation> newCompanyLocations,long idCompany, SubscriptionEntities  db)
                            {
                                Expression<Func<CompanyLocation, bool>> expressionBuilder = p => p.IdCompany == idCompany;
                                var oldCompanyLocations = DaoFactories.Instance.CompanyLocationDao.GetCompanyLocationCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCompanyLocations.EntityList.Select(pc => pc.IdCompanyLocation).Except(newCompanyLocations.Where(pc => pc.IdCompanyLocation.HasValue).Select(pc => pc.IdCompanyLocation)).ToList();
                                var itemsTobeDeleted = oldCompanyLocations.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCompanyLocation)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newCompanyLocations;
                            }


                            public List<CompanyLocation> UpdateCompanyLocationsForCompany(List<CompanyLocation> newCompanyLocations,long idCompany)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCompanyLocationsForCompany(newCompanyLocations,idCompany,db);
                                }
                            }

                            public List<CompanyLocation> UpdateCompanyLocationsForCompany(List<CompanyLocation> newCompanyLocations,long idCompany, SubscriptionEntities  db)
                            {
                                Expression<Func<CompanyLocation, bool>> expressionBuilder = p => p.IdCompany == idCompany;
                                var oldCompanyLocations = DaoFactories.Instance.CompanyLocationDao.GetCompanyLocationCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCompanyLocations.EntityList.Select(pc => pc.IdCompanyLocation).Except(newCompanyLocations.Where(pc => pc.IdCompanyLocation.HasValue).Select(pc => pc.IdCompanyLocation)).ToList();
                                var itemsTobeDeleted = oldCompanyLocations.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCompanyLocation)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newCompanyLocations.ForEach(pc =>
                                {
                                    pc.IdCompany = idCompany;
                                    DaoFactories.Instance.CompanyLocationDao.SaveOnlyCompanyLocation(pc, db);
                                });
                                return newCompanyLocations;
                            }

                        
							public List<Concept> UpdateConceptsForCompanyWithoutSavingNewItem(List<Concept> newConcepts,long idCompany)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateConceptsForCompanyWithoutSavingNewItem(newConcepts,idCompany,db);
                                }
                            }

							public List<Concept> UpdateConceptsForCompanyWithoutSavingNewItem(List<Concept> newConcepts,long idCompany, SubscriptionEntities  db)
                            {
                                Expression<Func<Concept, bool>> expressionBuilder = p => p.IdCompany == idCompany;
                                var oldConcepts = DaoFactories.Instance.ConceptDao.GetConceptCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldConcepts.EntityList.Select(pc => pc.IdConcept).Except(newConcepts.Where(pc => pc.IdConcept.HasValue).Select(pc => pc.IdConcept)).ToList();
                                var itemsTobeDeleted = oldConcepts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdConcept)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newConcepts;
                            }


                            public List<Concept> UpdateConceptsForCompany(List<Concept> newConcepts,long idCompany)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateConceptsForCompany(newConcepts,idCompany,db);
                                }
                            }

                            public List<Concept> UpdateConceptsForCompany(List<Concept> newConcepts,long idCompany, SubscriptionEntities  db)
                            {
                                Expression<Func<Concept, bool>> expressionBuilder = p => p.IdCompany == idCompany;
                                var oldConcepts = DaoFactories.Instance.ConceptDao.GetConceptCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldConcepts.EntityList.Select(pc => pc.IdConcept).Except(newConcepts.Where(pc => pc.IdConcept.HasValue).Select(pc => pc.IdConcept)).ToList();
                                var itemsTobeDeleted = oldConcepts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdConcept)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newConcepts.ForEach(pc =>
                                {
                                    pc.IdCompany = idCompany;
                                    DaoFactories.Instance.ConceptDao.SaveOnlyConcept(pc, db);
                                });
                                return newConcepts;
                            }

                        


    



		}
			public partial class Company_ContactTypeDao :ICompany_ContactTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public Company_ContactTypeDao(){
			
			}

			public Company_ContactTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Company_ContactType> GetAllCompany_ContactType(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCompany_ContactType(db, shouldRemap);
                }
            }

            public List<Company_ContactType> GetAllCompany_ContactType(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCompany_ContactTypeList(db.Company_ContactType.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Company_ContactType.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Company_ContactType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCompany_ContactTypeByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Company_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Company_ContactType, dynamic> orderExpression = null)
            {
				IQueryable<Company_ContactType> query =  db.Company_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Company_ContactType> baseListReturnType = new BaseListReturnType<Company_ContactType>();

                IQueryable<Company_ContactType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCompany_ContactType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Company_ContactType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCompany_ContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeWithCompanyDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company_ContactType, bool>> expression = null,bool shouldRemap = false, Func<Company_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompany_ContactTypeByPage(sortingPagingInfo, db,expression,new List<string>(){"Company"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeWithContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company_ContactType, bool>> expression = null,bool shouldRemap = false, Func<Company_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompany_ContactTypeByPage(sortingPagingInfo, db,expression,new List<string>(){"ContactType"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Company_ContactType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCompany_ContactTypeByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Company_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Company_ContactType, dynamic> orderExpression = null)
            {
				IQueryable<Company_ContactType> query =  db.Company_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Company_ContactType> baseListReturnType = new BaseListReturnType<Company_ContactType>();

                IQueryable<Company_ContactType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCompany_ContactType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Company_ContactType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCompany_ContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeWithCompanyDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company_ContactType, bool>> expression = null,bool shouldRemap = false, Func<Company_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompany_ContactTypeByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Company"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeWithContactTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company_ContactType, bool>> expression = null,bool shouldRemap = false, Func<Company_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompany_ContactTypeByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"ContactType"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeWithCompanyDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompany_ContactTypeWitDetails(new List<string>(){"Company"},shouldRemap);
					}
				}
							public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeWithContactTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompany_ContactTypeWitDetails(new List<string>(){"ContactType"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCompany_ContactTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Company_ContactType> query =  db.Company_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Company_ContactType> baseListReturnType = new BaseListReturnType<Company_ContactType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCompany_ContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Company_ContactType GetCompany_ContactType(long idCompany_ContactType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCompany_ContactType(idCompany_ContactType, db,shouldRemap);
                }
            }
                        public Company_ContactType GetCompany_ContactType(long idCompany_ContactType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCompany_ContactTypeSingle(db.Company_ContactType.Where(p => p.IdCompany_ContactType == idCompany_ContactType && p.IsDeactivated != true).FirstOrDefault());

                return db.Company_ContactType.Where(p => p.IdCompany_ContactType == idCompany_ContactType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Company_ContactType GetCompany_ContactTypeCustom( Expression<Func<Company_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCompany_ContactTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Company_ContactType GetCompany_ContactTypeCustom( SubscriptionEntities db , Expression<Func<Company_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Company_ContactType> query =  db.Company_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapCompany_ContactTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Company_ContactType> GetCompany_ContactTypeCustomList( Expression<Func<Company_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Company_ContactType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCompany_ContactTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Company_ContactType> GetCompany_ContactTypeCustomList(  SubscriptionEntities db , Expression<Func<Company_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Company_ContactType, dynamic> orderExpression = null)
			{
				IQueryable<Company_ContactType> query =  db.Company_ContactType;
                BaseListReturnType<Company_ContactType> baseListReturnType = new BaseListReturnType<Company_ContactType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCompany_ContactTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Company_ContactType GetCompany_ContactTypeWithCompanyDetails(long idCompany_ContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCompany_ContactTypeWithDetails(idCompany_ContactType,new List<string>(){"Company"},shouldRemap);
					}
				}

            //IdCompany -- ZeroOrOne

                public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeListByCompany(long idCompany)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCompany_ContactTypeListByCompany(idCompany, db);
                    }
                }
                public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeListByCompany(long idCompany, SubscriptionEntities db)
                {
                    Expression<Func<Company_ContactType, bool>> expression = property=> property.IdCompany == idCompany && property.IsDeactivated !=true;
                    return GetCompany_ContactTypeCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeListByCompanyByPage(long idCompany, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCompany_ContactTypeListByCompanyByPage(idCompany, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeListByCompanyByPage(long idCompany, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Company_ContactType, bool>> expression = property => property.IdCompany == idCompany && property.IsDeactivated !=true;
                    return GetAllCompany_ContactTypeByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Company_ContactType GetCompany_ContactTypeWithContactTypeDetails(long idCompany_ContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCompany_ContactTypeWithDetails(idCompany_ContactType,new List<string>(){"ContactType"},shouldRemap);
					}
				}

            //IdContactType -- ZeroOrOne

                public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeListByContactType(long idContactType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCompany_ContactTypeListByContactType(idContactType, db);
                    }
                }
                public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeListByContactType(long idContactType, SubscriptionEntities db)
                {
                    Expression<Func<Company_ContactType, bool>> expression = property=> property.IdContactType == idContactType && property.IsDeactivated !=true;
                    return GetCompany_ContactTypeCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeListByContactTypeByPage(long idContactType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCompany_ContactTypeListByContactTypeByPage(idContactType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeListByContactTypeByPage(long idContactType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Company_ContactType, bool>> expression = property => property.IdContactType == idContactType && property.IsDeactivated !=true;
                    return GetAllCompany_ContactTypeByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public Company_ContactType GetCompany_ContactTypeWithDetails(long idCompany_ContactType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCompany_ContactTypeWithDetails(idCompany_ContactType, db,includes,shouldRemap);
                }
            }

            public Company_ContactType GetCompany_ContactTypeWithDetails(long idCompany_ContactType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Company_ContactType> query =  db.Company_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapCompany_ContactTypeSingle(query
						.Where(p => p.IdCompany_ContactType == idCompany_ContactType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdCompany_ContactType == idCompany_ContactType && p.IsDeactivated != true).FirstOrDefault();
            }

            public Company_ContactType GetCompany_ContactTypeWitDetails(long idCompany_ContactType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCompany_ContactTypeWitDetails(idCompany_ContactType, db,shouldRemap);
                }
            }

            public Company_ContactType GetCompany_ContactTypeWitDetails(long idCompany_ContactType, SubscriptionEntities db,bool shouldRemap = false)
            {
				Company_ContactType _Company_ContactType = db.Company_ContactType

					.Include("Company")
					.Include("ContactType")
								.Where(p => p.IdCompany_ContactType == idCompany_ContactType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapCompany_ContactTypeSingle(_Company_ContactType);

				return  _Company_ContactType;
            }

            public List<Company_ContactType> GetCompany_ContactTypeListByIdList(List<long> company_ContactTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCompany_ContactTypeListByIdList(company_ContactTypeIds, db);
                }
            }
            public List<Company_ContactType> GetCompany_ContactTypeListByIdList(List<long> company_ContactTypeIds, SubscriptionEntities db)
            {
                return db.Company_ContactType.Where(p => p.IsDeactivated != true && company_ContactTypeIds.Contains(p.IdCompany_ContactType.Value)).ToList();
            }


            public void SaveCompany_ContactType(Company_ContactType company_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveCompany_ContactType(company_ContactType, db);
                }
            }

            public void SaveCompany_ContactType(Company_ContactType company_ContactType, SubscriptionEntities db)
            {
									if (company_ContactType.Company != null) 
						DaoFactories.Instance.CompanyDao.SaveCompany(company_ContactType.Company, db);
									if (company_ContactType.ContactType != null) 
						DaoFactories.Instance.ContactTypeDao.SaveContactType(company_ContactType.ContactType, db);
				                
                if (company_ContactType.IdCompany_ContactType.HasValue){
					var company_ContactTypeFromDb = db.Company_ContactType.Where(p => p.IdCompany_ContactType == company_ContactType.IdCompany_ContactType).FirstOrDefault();
													company_ContactTypeFromDb.IdCompany = company_ContactType.IdCompany;
													company_ContactTypeFromDb.IdContactType = company_ContactType.IdContactType;
													company_ContactTypeFromDb.IsDeactivated = company_ContactType.IsDeactivated;
													company_ContactTypeFromDb.Description = company_ContactType.Description;
									}
                else{
                                                //fix for saving without duplicating items in db
                              company_ContactType.Company = null;
                                                        //fix for saving without duplicating items in db
                              company_ContactType.ContactType = null;
                                                db.Company_ContactType.Add(company_ContactType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyCompany_ContactType(Company_ContactType company_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyCompany_ContactType(company_ContactType, db);
                }
            }

            public void SaveOnlyCompany_ContactType(Company_ContactType company_ContactType, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // company_ContactType.Company = null;
                                                        //fix for saving without duplicating items in db
                             // company_ContactType.ContactType = null;
                                            if (company_ContactType.IdCompany_ContactType.HasValue){
					var company_ContactTypeFromDb = db.Company_ContactType.Where(p => p.IdCompany_ContactType == company_ContactType.IdCompany_ContactType).FirstOrDefault();
													company_ContactTypeFromDb.IdCompany = company_ContactType.IdCompany;
													company_ContactTypeFromDb.IdContactType = company_ContactType.IdContactType;
													company_ContactTypeFromDb.IsDeactivated = company_ContactType.IsDeactivated;
													company_ContactTypeFromDb.Description = company_ContactType.Description;
										 db.SaveChanges();

				}
                else{
					Company_ContactType _company_ContactType = new Company_ContactType();
																	_company_ContactType.IdCompany = company_ContactType.IdCompany;
													_company_ContactType.IdContactType = company_ContactType.IdContactType;
													_company_ContactType.IsDeactivated = company_ContactType.IsDeactivated;
													_company_ContactType.Description = company_ContactType.Description;
					

                    db.Company_ContactType.Add(_company_ContactType);
					db.SaveChanges();
					company_ContactType.IdCompany_ContactType =  _company_ContactType.IdCompany_ContactType;
                    
                }
            }

            public void DeleteCompany_ContactType(Company_ContactType company_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteCompany_ContactType(company_ContactType, db);
                }
            }

            public void DeleteCompany_ContactType(Company_ContactType company_ContactType, SubscriptionEntities db)
            {
								var company_ContactTypeFromDb = GetCompany_ContactType(company_ContactType.IdCompany_ContactType.Value,db);
				company_ContactTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyCompany_ContactType(Company_ContactType company_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyCompany_ContactType(company_ContactType, db);
                }
            }

            public void DeletePermanentlyCompany_ContactType(Company_ContactType company_ContactType, SubscriptionEntities db)
            {
								var company_ContactTypeFromDb = GetCompany_ContactType(company_ContactType.IdCompany_ContactType.Value,db);
				
				db.Company_ContactType.Remove(company_ContactTypeFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class CompanyLocationDao :ICompanyLocationDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public CompanyLocationDao(){
			
			}

			public CompanyLocationDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<CompanyLocation> GetAllCompanyLocations(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCompanyLocations(db, shouldRemap);
                }
            }

            public List<CompanyLocation> GetAllCompanyLocations(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCompanyLocationList(db.CompanyLocations.Where(p => p.IsDeactivated != true).ToList());
				
				return db.CompanyLocations.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<CompanyLocation> GetAllCompanyLocationsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CompanyLocation, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<CompanyLocation, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCompanyLocationsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<CompanyLocation> GetAllCompanyLocationsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<CompanyLocation, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<CompanyLocation, dynamic> orderExpression = null)
            {
				IQueryable<CompanyLocation> query =  db.CompanyLocations;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<CompanyLocation> baseListReturnType = new BaseListReturnType<CompanyLocation>();

                IQueryable<CompanyLocation> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCompanyLocation" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<CompanyLocation, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Detail.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Detail.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ColorCode.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCompanyLocationList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<CompanyLocation> GetAllCompanyLocationsWithCompanyDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CompanyLocation, bool>> expression = null,bool shouldRemap = false, Func<CompanyLocation, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompanyLocationsByPage(sortingPagingInfo, db,expression,new List<string>(){"Company"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<CompanyLocation> GetAllCompanyLocationsWithAddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CompanyLocation, bool>> expression = null,bool shouldRemap = false, Func<CompanyLocation, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompanyLocationsByPage(sortingPagingInfo, db,expression,new List<string>(){"Address"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<CompanyLocation> GetAllCompanyLocationsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CompanyLocation, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<CompanyLocation, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCompanyLocationsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<CompanyLocation> GetAllCompanyLocationsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<CompanyLocation, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<CompanyLocation, dynamic> orderExpression = null)
            {
				IQueryable<CompanyLocation> query =  db.CompanyLocations;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<CompanyLocation> baseListReturnType = new BaseListReturnType<CompanyLocation>();

                IQueryable<CompanyLocation> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCompanyLocation" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<CompanyLocation, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCompanyLocationList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<CompanyLocation> GetAllCompanyLocationsWithCompanyDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CompanyLocation, bool>> expression = null,bool shouldRemap = false, Func<CompanyLocation, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompanyLocationsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Company"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<CompanyLocation> GetAllCompanyLocationsWithAddressDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CompanyLocation, bool>> expression = null,bool shouldRemap = false, Func<CompanyLocation, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompanyLocationsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Address"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<CompanyLocation> GetAllCompanyLocationsWithCompanyDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompanyLocationWitDetails(new List<string>(){"Company"},shouldRemap);
					}
				}
							public BaseListReturnType<CompanyLocation> GetAllCompanyLocationsWithAddressDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCompanyLocationWitDetails(new List<string>(){"Address"},shouldRemap);
					}
				}
			

			public BaseListReturnType<CompanyLocation> GetAllCompanyLocationWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCompanyLocationWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<CompanyLocation> GetAllCompanyLocationWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<CompanyLocation> query =  db.CompanyLocations;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<CompanyLocation> baseListReturnType = new BaseListReturnType<CompanyLocation>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCompanyLocationList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public CompanyLocation GetCompanyLocation(long idCompanyLocation,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCompanyLocation(idCompanyLocation, db,shouldRemap);
                }
            }
                        public CompanyLocation GetCompanyLocation(long idCompanyLocation, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCompanyLocationSingle(db.CompanyLocations.Where(p => p.IdCompanyLocation == idCompanyLocation && p.IsDeactivated != true).FirstOrDefault());

                return db.CompanyLocations.Where(p => p.IdCompanyLocation == idCompanyLocation && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public CompanyLocation GetCompanyLocationCustom( Expression<Func<CompanyLocation, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCompanyLocationCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public CompanyLocation GetCompanyLocationCustom( SubscriptionEntities db , Expression<Func<CompanyLocation, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<CompanyLocation> query =  db.CompanyLocations;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapCompanyLocationSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<CompanyLocation> GetCompanyLocationCustomList( Expression<Func<CompanyLocation, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<CompanyLocation, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCompanyLocationCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<CompanyLocation> GetCompanyLocationCustomList(  SubscriptionEntities db , Expression<Func<CompanyLocation, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<CompanyLocation, dynamic> orderExpression = null)
			{
				IQueryable<CompanyLocation> query =  db.CompanyLocations;
                BaseListReturnType<CompanyLocation> baseListReturnType = new BaseListReturnType<CompanyLocation>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCompanyLocationList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public CompanyLocation GetCompanyLocationWithCompanyDetails(long idCompanyLocation,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCompanyLocationWithDetails(idCompanyLocation,new List<string>(){"Company"},shouldRemap);
					}
				}

            //IdCompany -- ZeroOrOne

                public BaseListReturnType<CompanyLocation> GetAllCompanyLocationListByCompany(long idCompany)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCompanyLocationListByCompany(idCompany, db);
                    }
                }
                public BaseListReturnType<CompanyLocation> GetAllCompanyLocationListByCompany(long idCompany, SubscriptionEntities db)
                {
                    Expression<Func<CompanyLocation, bool>> expression = property=> property.IdCompany == idCompany && property.IsDeactivated !=true;
                    return GetCompanyLocationCustomList(db, expression, null, true);
                }
                public BaseListReturnType<CompanyLocation> GetAllCompanyLocationListByCompanyByPage(long idCompany, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCompanyLocationListByCompanyByPage(idCompany, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<CompanyLocation> GetAllCompanyLocationListByCompanyByPage(long idCompany, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<CompanyLocation, bool>> expression = property => property.IdCompany == idCompany && property.IsDeactivated !=true;
                    return GetAllCompanyLocationsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public CompanyLocation GetCompanyLocationWithAddressDetails(long idCompanyLocation,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCompanyLocationWithDetails(idCompanyLocation,new List<string>(){"Address"},shouldRemap);
					}
				}

            //IdAddress -- ZeroOrOne

                public BaseListReturnType<CompanyLocation> GetAllCompanyLocationListByAddress(long idAddress)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCompanyLocationListByAddress(idAddress, db);
                    }
                }
                public BaseListReturnType<CompanyLocation> GetAllCompanyLocationListByAddress(long idAddress, SubscriptionEntities db)
                {
                    Expression<Func<CompanyLocation, bool>> expression = property=> property.IdAddress == idAddress && property.IsDeactivated !=true;
                    return GetCompanyLocationCustomList(db, expression, null, true);
                }
                public BaseListReturnType<CompanyLocation> GetAllCompanyLocationListByAddressByPage(long idAddress, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCompanyLocationListByAddressByPage(idAddress, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<CompanyLocation> GetAllCompanyLocationListByAddressByPage(long idAddress, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<CompanyLocation, bool>> expression = property => property.IdAddress == idAddress && property.IsDeactivated !=true;
                    return GetAllCompanyLocationsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public CompanyLocation GetCompanyLocationWithDetails(long idCompanyLocation, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCompanyLocationWithDetails(idCompanyLocation, db,includes,shouldRemap);
                }
            }

            public CompanyLocation GetCompanyLocationWithDetails(long idCompanyLocation, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<CompanyLocation> query =  db.CompanyLocations;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapCompanyLocationSingle(query
						.Where(p => p.IdCompanyLocation == idCompanyLocation && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdCompanyLocation == idCompanyLocation && p.IsDeactivated != true).FirstOrDefault();
            }

            public CompanyLocation GetCompanyLocationWitDetails(long idCompanyLocation,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCompanyLocationWitDetails(idCompanyLocation, db,shouldRemap);
                }
            }

            public CompanyLocation GetCompanyLocationWitDetails(long idCompanyLocation, SubscriptionEntities db,bool shouldRemap = false)
            {
				CompanyLocation _CompanyLocation = db.CompanyLocations

					.Include("Company")
					.Include("Address")
								.Where(p => p.IdCompanyLocation == idCompanyLocation && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapCompanyLocationSingle(_CompanyLocation);

				return  _CompanyLocation;
            }

            public List<CompanyLocation> GetCompanyLocationListByIdList(List<long> companyLocationIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCompanyLocationListByIdList(companyLocationIds, db);
                }
            }
            public List<CompanyLocation> GetCompanyLocationListByIdList(List<long> companyLocationIds, SubscriptionEntities db)
            {
                return db.CompanyLocations.Where(p => p.IsDeactivated != true && companyLocationIds.Contains(p.IdCompanyLocation.Value)).ToList();
            }


            public void SaveCompanyLocation(CompanyLocation companyLocation)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveCompanyLocation(companyLocation, db);
                }
            }

            public void SaveCompanyLocation(CompanyLocation companyLocation, SubscriptionEntities db)
            {
									if (companyLocation.Company != null) 
						DaoFactories.Instance.CompanyDao.SaveCompany(companyLocation.Company, db);
									if (companyLocation.Address != null) 
						DaoFactories.Instance.AddressDao.SaveAddress(companyLocation.Address, db);
				                
                if (companyLocation.IdCompanyLocation.HasValue){
					var companyLocationFromDb = db.CompanyLocations.Where(p => p.IdCompanyLocation == companyLocation.IdCompanyLocation).FirstOrDefault();
													companyLocationFromDb.IdCompany = companyLocation.IdCompany;
													companyLocationFromDb.IdAddress = companyLocation.IdAddress;
													companyLocationFromDb.Detail = companyLocation.Detail;
													companyLocationFromDb.IsDeactivated = companyLocation.IsDeactivated;
													companyLocationFromDb.ColorCode = companyLocation.ColorCode;
									}
                else{
                                                //fix for saving without duplicating items in db
                              companyLocation.Company = null;
                                                        //fix for saving without duplicating items in db
                              companyLocation.Address = null;
                                                db.CompanyLocations.Add(companyLocation);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyCompanyLocation(CompanyLocation companyLocation)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyCompanyLocation(companyLocation, db);
                }
            }

            public void SaveOnlyCompanyLocation(CompanyLocation companyLocation, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // companyLocation.Company = null;
                                                        //fix for saving without duplicating items in db
                             // companyLocation.Address = null;
                                            if (companyLocation.IdCompanyLocation.HasValue){
					var companyLocationFromDb = db.CompanyLocations.Where(p => p.IdCompanyLocation == companyLocation.IdCompanyLocation).FirstOrDefault();
													companyLocationFromDb.IdCompany = companyLocation.IdCompany;
													companyLocationFromDb.IdAddress = companyLocation.IdAddress;
													companyLocationFromDb.Detail = companyLocation.Detail;
													companyLocationFromDb.IsDeactivated = companyLocation.IsDeactivated;
													companyLocationFromDb.ColorCode = companyLocation.ColorCode;
										 db.SaveChanges();

				}
                else{
					CompanyLocation _companyLocation = new CompanyLocation();
																	_companyLocation.IdCompany = companyLocation.IdCompany;
													_companyLocation.IdAddress = companyLocation.IdAddress;
													_companyLocation.Detail = companyLocation.Detail;
													_companyLocation.IsDeactivated = companyLocation.IsDeactivated;
													_companyLocation.ColorCode = companyLocation.ColorCode;
					

                    db.CompanyLocations.Add(_companyLocation);
					db.SaveChanges();
					companyLocation.IdCompanyLocation =  _companyLocation.IdCompanyLocation;
                    
                }
            }

            public void DeleteCompanyLocation(CompanyLocation companyLocation)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteCompanyLocation(companyLocation, db);
                }
            }

            public void DeleteCompanyLocation(CompanyLocation companyLocation, SubscriptionEntities db)
            {
								var companyLocationFromDb = GetCompanyLocation(companyLocation.IdCompanyLocation.Value,db);
				companyLocationFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyCompanyLocation(CompanyLocation companyLocation)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyCompanyLocation(companyLocation, db);
                }
            }

            public void DeletePermanentlyCompanyLocation(CompanyLocation companyLocation, SubscriptionEntities db)
            {
								var companyLocationFromDb = GetCompanyLocation(companyLocation.IdCompanyLocation.Value,db);
				
				db.CompanyLocations.Remove(companyLocationFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class ConceptDao :IConceptDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public ConceptDao(){
			
			}

			public ConceptDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Concept> GetAllConcepts(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllConcepts(db, shouldRemap);
                }
            }

            public List<Concept> GetAllConcepts(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapConceptList(db.Concepts.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Concepts.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Concept> GetAllConceptsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllConceptsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Concept> GetAllConceptsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Concept, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
            {
				IQueryable<Concept> query =  db.Concepts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Concept> baseListReturnType = new BaseListReturnType<Concept>();

                IQueryable<Concept> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdConcept" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Concept, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapConceptList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Concept> GetAllConceptsWithCompaniesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"Companies"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithCompanyDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"Company"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithConcept_AddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"Concept_Address"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithConcept_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"Concept_ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithConcept1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"Concept1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithConcept2DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"Concept2"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithPersonDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"Person"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithCustomersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"Customers"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Concept> GetAllConceptsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Concept> GetAllConceptsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Concept, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
            {
				IQueryable<Concept> query =  db.Concepts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Concept> baseListReturnType = new BaseListReturnType<Concept>();

                IQueryable<Concept> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdConcept" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Concept, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapConceptList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Concept> GetAllConceptsWithCompaniesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Companies"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithCompanyDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Company"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithConcept_AddressDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Concept_Address"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithConcept_ContactTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Concept_ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithConcept1DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Concept1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithConcept2DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Concept2"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithPersonDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Person"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithCustomersDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap = false, Func<Concept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Customers"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Concept> GetAllConceptsWithCompaniesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptWitDetails(new List<string>(){"Companies"},shouldRemap);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithCompanyDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptWitDetails(new List<string>(){"Company"},shouldRemap);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithConcept_AddressDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptWitDetails(new List<string>(){"Concept_Address"},shouldRemap);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithConcept_ContactTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptWitDetails(new List<string>(){"Concept_ContactType"},shouldRemap);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithConcept1Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptWitDetails(new List<string>(){"Concept1"},shouldRemap);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithConcept2Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptWitDetails(new List<string>(){"Concept2"},shouldRemap);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithPersonDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptWitDetails(new List<string>(){"Person"},shouldRemap);
					}
				}
							public BaseListReturnType<Concept> GetAllConceptsWithCustomersDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConceptWitDetails(new List<string>(){"Customers"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Concept> GetAllConceptWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllConceptWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Concept> GetAllConceptWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Concept> query =  db.Concepts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Concept> baseListReturnType = new BaseListReturnType<Concept>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapConceptList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Concept GetConcept(long idConcept,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetConcept(idConcept, db,shouldRemap);
                }
            }
                        public Concept GetConcept(long idConcept, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapConceptSingle(db.Concepts.Where(p => p.IdConcept == idConcept && p.IsDeactivated != true).FirstOrDefault());

                return db.Concepts.Where(p => p.IdConcept == idConcept && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Concept GetConceptCustom( Expression<Func<Concept, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetConceptCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Concept GetConceptCustom( SubscriptionEntities db , Expression<Func<Concept, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Concept> query =  db.Concepts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapConceptSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Concept> GetConceptCustomList( Expression<Func<Concept, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Concept, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetConceptCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Concept> GetConceptCustomList(  SubscriptionEntities db , Expression<Func<Concept, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Concept, dynamic> orderExpression = null)
			{
				IQueryable<Concept> query =  db.Concepts;
                BaseListReturnType<Concept> baseListReturnType = new BaseListReturnType<Concept>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapConceptList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Concept GetConceptWithCompaniesDetails(long idConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetConceptWithDetails(idConcept,new List<string>(){"Companies"},shouldRemap);
					}
				}

            //IdConcept -- Many


							public Concept GetConceptWithCompanyDetails(long idConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetConceptWithDetails(idConcept,new List<string>(){"Company"},shouldRemap);
					}
				}

            //IdCompany -- ZeroOrOne

                public BaseListReturnType<Concept> GetAllConceptListByCompany(long idCompany)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllConceptListByCompany(idCompany, db);
                    }
                }
                public BaseListReturnType<Concept> GetAllConceptListByCompany(long idCompany, SubscriptionEntities db)
                {
                    Expression<Func<Concept, bool>> expression = property=> property.IdCompany == idCompany && property.IsDeactivated !=true;
                    return GetConceptCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Concept> GetAllConceptListByCompanyByPage(long idCompany, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllConceptListByCompanyByPage(idCompany, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Concept> GetAllConceptListByCompanyByPage(long idCompany, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Concept, bool>> expression = property => property.IdCompany == idCompany && property.IsDeactivated !=true;
                    return GetAllConceptsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Concept GetConceptWithConcept_AddressDetails(long idConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetConceptWithDetails(idConcept,new List<string>(){"Concept_Address"},shouldRemap);
					}
				}

            //IdConcept -- Many


							public Concept GetConceptWithConcept_ContactTypeDetails(long idConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetConceptWithDetails(idConcept,new List<string>(){"Concept_ContactType"},shouldRemap);
					}
				}

            //IdConcept -- Many


							public Concept GetConceptWithConcept1Details(long idConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetConceptWithDetails(idConcept,new List<string>(){"Concept1"},shouldRemap);
					}
				}

            //IdConcept -- ZeroOrOne

                public BaseListReturnType<Concept> GetAllConceptListByConcept1(long idConcept1)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllConceptListByConcept1(idConcept1, db);
                    }
                }
                public BaseListReturnType<Concept> GetAllConceptListByConcept1(long idConcept1, SubscriptionEntities db)
                {
                    Expression<Func<Concept, bool>> expression = property=> property.IdConcept == idConcept1 && property.IsDeactivated !=true;
                    return GetConceptCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Concept> GetAllConceptListByConcept1ByPage(long idConcept1, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllConceptListByConcept1ByPage(idConcept1, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Concept> GetAllConceptListByConcept1ByPage(long idConcept1, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Concept, bool>> expression = property => property.IdConcept == idConcept1 && property.IsDeactivated !=true;
                    return GetAllConceptsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Concept GetConceptWithConcept2Details(long idConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetConceptWithDetails(idConcept,new List<string>(){"Concept2"},shouldRemap);
					}
				}

            //IdConcept -- One


							public Concept GetConceptWithPersonDetails(long idConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetConceptWithDetails(idConcept,new List<string>(){"Person"},shouldRemap);
					}
				}

            //IdPerson -- ZeroOrOne

                public BaseListReturnType<Concept> GetAllConceptListByPerson(long idPerson)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllConceptListByPerson(idPerson, db);
                    }
                }
                public BaseListReturnType<Concept> GetAllConceptListByPerson(long idPerson, SubscriptionEntities db)
                {
                    Expression<Func<Concept, bool>> expression = property=> property.IdPerson == idPerson && property.IsDeactivated !=true;
                    return GetConceptCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Concept> GetAllConceptListByPersonByPage(long idPerson, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllConceptListByPersonByPage(idPerson, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Concept> GetAllConceptListByPersonByPage(long idPerson, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Concept, bool>> expression = property => property.IdPerson == idPerson && property.IsDeactivated !=true;
                    return GetAllConceptsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Concept GetConceptWithCustomersDetails(long idConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetConceptWithDetails(idConcept,new List<string>(){"Customers"},shouldRemap);
					}
				}

            //IdConcept -- Many


			


			public Concept GetConceptWithDetails(long idConcept, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetConceptWithDetails(idConcept, db,includes,shouldRemap);
                }
            }

            public Concept GetConceptWithDetails(long idConcept, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Concept> query =  db.Concepts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapConceptSingle(query
						.Where(p => p.IdConcept == idConcept && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdConcept == idConcept && p.IsDeactivated != true).FirstOrDefault();
            }

            public Concept GetConceptWitDetails(long idConcept,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetConceptWitDetails(idConcept, db,shouldRemap);
                }
            }

            public Concept GetConceptWitDetails(long idConcept, SubscriptionEntities db,bool shouldRemap = false)
            {
				Concept _Concept = db.Concepts

					.Include("Companies")
					.Include("Company")
					.Include("Concept_Address")
					.Include("Concept_ContactType")
					.Include("Concept1")
					.Include("Concept2")
					.Include("Person")
					.Include("Customers")
								.Where(p => p.IdConcept == idConcept && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapConceptSingle(_Concept);

				return  _Concept;
            }

            public List<Concept> GetConceptListByIdList(List<long> conceptIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetConceptListByIdList(conceptIds, db);
                }
            }
            public List<Concept> GetConceptListByIdList(List<long> conceptIds, SubscriptionEntities db)
            {
                return db.Concepts.Where(p => p.IsDeactivated != true && conceptIds.Contains(p.IdConcept.Value)).ToList();
            }


            public void SaveConcept(Concept concept)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveConcept(concept, db);
                }
            }

            public void SaveConcept(Concept concept, SubscriptionEntities db)
            {
									if (concept.Company != null) 
						DaoFactories.Instance.CompanyDao.SaveCompany(concept.Company, db);
									if (concept.Concept1 != null) 
						DaoFactories.Instance.ConceptDao.SaveConcept(concept.Concept1, db);
									if (concept.Concept2 != null) 
						DaoFactories.Instance.ConceptDao.SaveConcept(concept.Concept2, db);
									if (concept.Person != null) 
						DaoFactories.Instance.PersonDao.SavePerson(concept.Person, db);
				                
                if (concept.IdConcept.HasValue){
					var conceptFromDb = db.Concepts.Where(p => p.IdConcept == concept.IdConcept).FirstOrDefault();
													conceptFromDb.IsDeactivated = concept.IsDeactivated;
													conceptFromDb.IdConceptType = concept.IdConceptType;
													conceptFromDb.IdCompany = concept.IdCompany;
													conceptFromDb.IdPerson = concept.IdPerson;
									}
                else{
                                                //fix for saving without duplicating items in db
                              concept.Company = null;
                                                        //fix for saving without duplicating items in db
                              concept.Concept1 = null;
                                                        //fix for saving without duplicating items in db
                              concept.Concept2 = null;
                                                        //fix for saving without duplicating items in db
                              concept.Person = null;
                                                db.Concepts.Add(concept);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyConcept(Concept concept)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyConcept(concept, db);
                }
            }

            public void SaveOnlyConcept(Concept concept, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // concept.Company = null;
                                                        //fix for saving without duplicating items in db
                             // concept.Concept1 = null;
                                                        //fix for saving without duplicating items in db
                             // concept.Concept2 = null;
                                                        //fix for saving without duplicating items in db
                             // concept.Person = null;
                                            if (concept.IdConcept.HasValue){
					var conceptFromDb = db.Concepts.Where(p => p.IdConcept == concept.IdConcept).FirstOrDefault();
													conceptFromDb.IsDeactivated = concept.IsDeactivated;
													conceptFromDb.IdConceptType = concept.IdConceptType;
													conceptFromDb.IdCompany = concept.IdCompany;
													conceptFromDb.IdPerson = concept.IdPerson;
										 db.SaveChanges();

				}
                else{
					Concept _concept = new Concept();
																	_concept.IsDeactivated = concept.IsDeactivated;
													_concept.IdConceptType = concept.IdConceptType;
													_concept.IdCompany = concept.IdCompany;
													_concept.IdPerson = concept.IdPerson;
					

                    db.Concepts.Add(_concept);
					db.SaveChanges();
					concept.IdConcept =  _concept.IdConcept;
                    
                }
            }

            public void DeleteConcept(Concept concept)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteConcept(concept, db);
                }
            }

            public void DeleteConcept(Concept concept, SubscriptionEntities db)
            {
								var conceptFromDb = GetConcept(concept.IdConcept.Value,db);
				conceptFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyConcept(Concept concept)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyConcept(concept, db);
                }
            }

            public void DeletePermanentlyConcept(Concept concept, SubscriptionEntities db)
            {
								var conceptFromDb = GetConcept(concept.IdConcept.Value,db);
				
				db.Concepts.Remove(conceptFromDb);
                db.SaveChanges();
            }


            
							public List<Company> UpdateCompaniesForConceptWithoutSavingNewItem(List<Company> newCompanies,long idConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCompaniesForConceptWithoutSavingNewItem(newCompanies,idConcept,db);
                                }
                            }

							public List<Company> UpdateCompaniesForConceptWithoutSavingNewItem(List<Company> newCompanies,long idConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<Company, bool>> expressionBuilder = p => p.IdConcept == idConcept;
                                var oldCompanies = DaoFactories.Instance.CompanyDao.GetCompanyCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCompanies.EntityList.Select(pc => pc.IdCompany).Except(newCompanies.Where(pc => pc.IdCompany.HasValue).Select(pc => pc.IdCompany)).ToList();
                                var itemsTobeDeleted = oldCompanies.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCompany)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newCompanies;
                            }


                            public List<Company> UpdateCompaniesForConcept(List<Company> newCompanies,long idConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCompaniesForConcept(newCompanies,idConcept,db);
                                }
                            }

                            public List<Company> UpdateCompaniesForConcept(List<Company> newCompanies,long idConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<Company, bool>> expressionBuilder = p => p.IdConcept == idConcept;
                                var oldCompanies = DaoFactories.Instance.CompanyDao.GetCompanyCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCompanies.EntityList.Select(pc => pc.IdCompany).Except(newCompanies.Where(pc => pc.IdCompany.HasValue).Select(pc => pc.IdCompany)).ToList();
                                var itemsTobeDeleted = oldCompanies.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCompany)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newCompanies.ForEach(pc =>
                                {
                                    pc.IdConcept = idConcept;
                                    DaoFactories.Instance.CompanyDao.SaveOnlyCompany(pc, db);
                                });
                                return newCompanies;
                            }

                        
							public List<Concept_Address> UpdateConcept_AddressForConceptWithoutSavingNewItem(List<Concept_Address> newConcept_Address,long idConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateConcept_AddressForConceptWithoutSavingNewItem(newConcept_Address,idConcept,db);
                                }
                            }

							public List<Concept_Address> UpdateConcept_AddressForConceptWithoutSavingNewItem(List<Concept_Address> newConcept_Address,long idConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<Concept_Address, bool>> expressionBuilder = p => p.IdConcept == idConcept;
                                var oldConcept_Address = DaoFactories.Instance.Concept_AddressDao.GetConcept_AddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldConcept_Address.EntityList.Select(pc => pc.IdConcept_Address).Except(newConcept_Address.Where(pc => pc.IdConcept_Address.HasValue).Select(pc => pc.IdConcept_Address)).ToList();
                                var itemsTobeDeleted = oldConcept_Address.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdConcept_Address)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newConcept_Address;
                            }


                            public List<Concept_Address> UpdateConcept_AddressForConcept(List<Concept_Address> newConcept_Address,long idConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateConcept_AddressForConcept(newConcept_Address,idConcept,db);
                                }
                            }

                            public List<Concept_Address> UpdateConcept_AddressForConcept(List<Concept_Address> newConcept_Address,long idConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<Concept_Address, bool>> expressionBuilder = p => p.IdConcept == idConcept;
                                var oldConcept_Address = DaoFactories.Instance.Concept_AddressDao.GetConcept_AddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldConcept_Address.EntityList.Select(pc => pc.IdConcept_Address).Except(newConcept_Address.Where(pc => pc.IdConcept_Address.HasValue).Select(pc => pc.IdConcept_Address)).ToList();
                                var itemsTobeDeleted = oldConcept_Address.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdConcept_Address)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newConcept_Address.ForEach(pc =>
                                {
                                    pc.IdConcept = idConcept;
                                    DaoFactories.Instance.Concept_AddressDao.SaveOnlyConcept_Address(pc, db);
                                });
                                return newConcept_Address;
                            }

                        
							public List<Concept_ContactType> UpdateConcept_ContactTypeForConceptWithoutSavingNewItem(List<Concept_ContactType> newConcept_ContactType,long idConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateConcept_ContactTypeForConceptWithoutSavingNewItem(newConcept_ContactType,idConcept,db);
                                }
                            }

							public List<Concept_ContactType> UpdateConcept_ContactTypeForConceptWithoutSavingNewItem(List<Concept_ContactType> newConcept_ContactType,long idConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<Concept_ContactType, bool>> expressionBuilder = p => p.IdConcept == idConcept;
                                var oldConcept_ContactType = DaoFactories.Instance.Concept_ContactTypeDao.GetConcept_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldConcept_ContactType.EntityList.Select(pc => pc.IdConcept_ContactType).Except(newConcept_ContactType.Where(pc => pc.IdConcept_ContactType.HasValue).Select(pc => pc.IdConcept_ContactType)).ToList();
                                var itemsTobeDeleted = oldConcept_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdConcept_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newConcept_ContactType;
                            }


                            public List<Concept_ContactType> UpdateConcept_ContactTypeForConcept(List<Concept_ContactType> newConcept_ContactType,long idConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateConcept_ContactTypeForConcept(newConcept_ContactType,idConcept,db);
                                }
                            }

                            public List<Concept_ContactType> UpdateConcept_ContactTypeForConcept(List<Concept_ContactType> newConcept_ContactType,long idConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<Concept_ContactType, bool>> expressionBuilder = p => p.IdConcept == idConcept;
                                var oldConcept_ContactType = DaoFactories.Instance.Concept_ContactTypeDao.GetConcept_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldConcept_ContactType.EntityList.Select(pc => pc.IdConcept_ContactType).Except(newConcept_ContactType.Where(pc => pc.IdConcept_ContactType.HasValue).Select(pc => pc.IdConcept_ContactType)).ToList();
                                var itemsTobeDeleted = oldConcept_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdConcept_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newConcept_ContactType.ForEach(pc =>
                                {
                                    pc.IdConcept = idConcept;
                                    DaoFactories.Instance.Concept_ContactTypeDao.SaveOnlyConcept_ContactType(pc, db);
                                });
                                return newConcept_ContactType;
                            }

                        
							public List<Customer> UpdateCustomersForConceptWithoutSavingNewItem(List<Customer> newCustomers,long idConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCustomersForConceptWithoutSavingNewItem(newCustomers,idConcept,db);
                                }
                            }

							public List<Customer> UpdateCustomersForConceptWithoutSavingNewItem(List<Customer> newCustomers,long idConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<Customer, bool>> expressionBuilder = p => p.IdConcept == idConcept;
                                var oldCustomers = DaoFactories.Instance.CustomerDao.GetCustomerCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCustomers.EntityList.Select(pc => pc.IdCustomer).Except(newCustomers.Where(pc => pc.IdCustomer.HasValue).Select(pc => pc.IdCustomer)).ToList();
                                var itemsTobeDeleted = oldCustomers.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCustomer)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newCustomers;
                            }


                            public List<Customer> UpdateCustomersForConcept(List<Customer> newCustomers,long idConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCustomersForConcept(newCustomers,idConcept,db);
                                }
                            }

                            public List<Customer> UpdateCustomersForConcept(List<Customer> newCustomers,long idConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<Customer, bool>> expressionBuilder = p => p.IdConcept == idConcept;
                                var oldCustomers = DaoFactories.Instance.CustomerDao.GetCustomerCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCustomers.EntityList.Select(pc => pc.IdCustomer).Except(newCustomers.Where(pc => pc.IdCustomer.HasValue).Select(pc => pc.IdCustomer)).ToList();
                                var itemsTobeDeleted = oldCustomers.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCustomer)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newCustomers.ForEach(pc =>
                                {
                                    pc.IdConcept = idConcept;
                                    DaoFactories.Instance.CustomerDao.SaveOnlyCustomer(pc, db);
                                });
                                return newCustomers;
                            }

                        


    



		}
			public partial class Concept_AddressDao :IConcept_AddressDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public Concept_AddressDao(){
			
			}

			public Concept_AddressDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Concept_Address> GetAllConcept_Address(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllConcept_Address(db, shouldRemap);
                }
            }

            public List<Concept_Address> GetAllConcept_Address(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapConcept_AddressList(db.Concept_Address.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Concept_Address.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Concept_Address> GetAllConcept_AddressByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_Address, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Concept_Address, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllConcept_AddressByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Concept_Address> GetAllConcept_AddressByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Concept_Address, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Concept_Address, dynamic> orderExpression = null)
            {
				IQueryable<Concept_Address> query =  db.Concept_Address;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Concept_Address> baseListReturnType = new BaseListReturnType<Concept_Address>();

                IQueryable<Concept_Address> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdConcept_Address" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Concept_Address, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapConcept_AddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Concept_Address> GetAllConcept_AddressWithConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_Address, bool>> expression = null,bool shouldRemap = false, Func<Concept_Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConcept_AddressByPage(sortingPagingInfo, db,expression,new List<string>(){"Concept"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Concept_Address> GetAllConcept_AddressByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_Address, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Concept_Address, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllConcept_AddressByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Concept_Address> GetAllConcept_AddressByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Concept_Address, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Concept_Address, dynamic> orderExpression = null)
            {
				IQueryable<Concept_Address> query =  db.Concept_Address;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Concept_Address> baseListReturnType = new BaseListReturnType<Concept_Address>();

                IQueryable<Concept_Address> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdConcept_Address" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Concept_Address, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapConcept_AddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Concept_Address> GetAllConcept_AddressWithConceptDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_Address, bool>> expression = null,bool shouldRemap = false, Func<Concept_Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConcept_AddressByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Concept"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Concept_Address> GetAllConcept_AddressWithConceptDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConcept_AddressWitDetails(new List<string>(){"Concept"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Concept_Address> GetAllConcept_AddressWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllConcept_AddressWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Concept_Address> GetAllConcept_AddressWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Concept_Address> query =  db.Concept_Address;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Concept_Address> baseListReturnType = new BaseListReturnType<Concept_Address>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapConcept_AddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Concept_Address GetConcept_Address(long idConcept_Address,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetConcept_Address(idConcept_Address, db,shouldRemap);
                }
            }
                        public Concept_Address GetConcept_Address(long idConcept_Address, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapConcept_AddressSingle(db.Concept_Address.Where(p => p.IdConcept_Address == idConcept_Address && p.IsDeactivated != true).FirstOrDefault());

                return db.Concept_Address.Where(p => p.IdConcept_Address == idConcept_Address && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Concept_Address GetConcept_AddressCustom( Expression<Func<Concept_Address, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetConcept_AddressCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Concept_Address GetConcept_AddressCustom( SubscriptionEntities db , Expression<Func<Concept_Address, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Concept_Address> query =  db.Concept_Address;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapConcept_AddressSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Concept_Address> GetConcept_AddressCustomList( Expression<Func<Concept_Address, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Concept_Address, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetConcept_AddressCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Concept_Address> GetConcept_AddressCustomList(  SubscriptionEntities db , Expression<Func<Concept_Address, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Concept_Address, dynamic> orderExpression = null)
			{
				IQueryable<Concept_Address> query =  db.Concept_Address;
                BaseListReturnType<Concept_Address> baseListReturnType = new BaseListReturnType<Concept_Address>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapConcept_AddressList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Concept_Address GetConcept_AddressWithConceptDetails(long idConcept_Address,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetConcept_AddressWithDetails(idConcept_Address,new List<string>(){"Concept"},shouldRemap);
					}
				}

            //IdConcept -- ZeroOrOne

                public BaseListReturnType<Concept_Address> GetAllConcept_AddressListByConcept(long idConcept)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllConcept_AddressListByConcept(idConcept, db);
                    }
                }
                public BaseListReturnType<Concept_Address> GetAllConcept_AddressListByConcept(long idConcept, SubscriptionEntities db)
                {
                    Expression<Func<Concept_Address, bool>> expression = property=> property.IdConcept == idConcept && property.IsDeactivated !=true;
                    return GetConcept_AddressCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Concept_Address> GetAllConcept_AddressListByConceptByPage(long idConcept, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllConcept_AddressListByConceptByPage(idConcept, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Concept_Address> GetAllConcept_AddressListByConceptByPage(long idConcept, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Concept_Address, bool>> expression = property => property.IdConcept == idConcept && property.IsDeactivated !=true;
                    return GetAllConcept_AddressByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public Concept_Address GetConcept_AddressWithDetails(long idConcept_Address, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetConcept_AddressWithDetails(idConcept_Address, db,includes,shouldRemap);
                }
            }

            public Concept_Address GetConcept_AddressWithDetails(long idConcept_Address, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Concept_Address> query =  db.Concept_Address;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapConcept_AddressSingle(query
						.Where(p => p.IdConcept_Address == idConcept_Address && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdConcept_Address == idConcept_Address && p.IsDeactivated != true).FirstOrDefault();
            }

            public Concept_Address GetConcept_AddressWitDetails(long idConcept_Address,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetConcept_AddressWitDetails(idConcept_Address, db,shouldRemap);
                }
            }

            public Concept_Address GetConcept_AddressWitDetails(long idConcept_Address, SubscriptionEntities db,bool shouldRemap = false)
            {
				Concept_Address _Concept_Address = db.Concept_Address

					.Include("Concept")
								.Where(p => p.IdConcept_Address == idConcept_Address && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapConcept_AddressSingle(_Concept_Address);

				return  _Concept_Address;
            }

            public List<Concept_Address> GetConcept_AddressListByIdList(List<long> concept_AddressIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetConcept_AddressListByIdList(concept_AddressIds, db);
                }
            }
            public List<Concept_Address> GetConcept_AddressListByIdList(List<long> concept_AddressIds, SubscriptionEntities db)
            {
                return db.Concept_Address.Where(p => p.IsDeactivated != true && concept_AddressIds.Contains(p.IdConcept_Address.Value)).ToList();
            }


            public void SaveConcept_Address(Concept_Address concept_Address)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveConcept_Address(concept_Address, db);
                }
            }

            public void SaveConcept_Address(Concept_Address concept_Address, SubscriptionEntities db)
            {
									if (concept_Address.Concept != null) 
						DaoFactories.Instance.ConceptDao.SaveConcept(concept_Address.Concept, db);
				                
                if (concept_Address.IdConcept_Address.HasValue){
					var concept_AddressFromDb = db.Concept_Address.Where(p => p.IdConcept_Address == concept_Address.IdConcept_Address).FirstOrDefault();
													concept_AddressFromDb.IdConcept = concept_Address.IdConcept;
													concept_AddressFromDb.IdAddress = concept_Address.IdAddress;
													concept_AddressFromDb.IsDeactivated = concept_Address.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              concept_Address.Concept = null;
                                                db.Concept_Address.Add(concept_Address);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyConcept_Address(Concept_Address concept_Address)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyConcept_Address(concept_Address, db);
                }
            }

            public void SaveOnlyConcept_Address(Concept_Address concept_Address, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // concept_Address.Concept = null;
                                            if (concept_Address.IdConcept_Address.HasValue){
					var concept_AddressFromDb = db.Concept_Address.Where(p => p.IdConcept_Address == concept_Address.IdConcept_Address).FirstOrDefault();
													concept_AddressFromDb.IdConcept = concept_Address.IdConcept;
													concept_AddressFromDb.IdAddress = concept_Address.IdAddress;
													concept_AddressFromDb.IsDeactivated = concept_Address.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Concept_Address _concept_Address = new Concept_Address();
																	_concept_Address.IdConcept = concept_Address.IdConcept;
													_concept_Address.IdAddress = concept_Address.IdAddress;
													_concept_Address.IsDeactivated = concept_Address.IsDeactivated;
					

                    db.Concept_Address.Add(_concept_Address);
					db.SaveChanges();
					concept_Address.IdConcept_Address =  _concept_Address.IdConcept_Address;
                    
                }
            }

            public void DeleteConcept_Address(Concept_Address concept_Address)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteConcept_Address(concept_Address, db);
                }
            }

            public void DeleteConcept_Address(Concept_Address concept_Address, SubscriptionEntities db)
            {
								var concept_AddressFromDb = GetConcept_Address(concept_Address.IdConcept_Address.Value,db);
				concept_AddressFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyConcept_Address(Concept_Address concept_Address)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyConcept_Address(concept_Address, db);
                }
            }

            public void DeletePermanentlyConcept_Address(Concept_Address concept_Address, SubscriptionEntities db)
            {
								var concept_AddressFromDb = GetConcept_Address(concept_Address.IdConcept_Address.Value,db);
				
				db.Concept_Address.Remove(concept_AddressFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class Concept_ContactTypeDao :IConcept_ContactTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public Concept_ContactTypeDao(){
			
			}

			public Concept_ContactTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Concept_ContactType> GetAllConcept_ContactType(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllConcept_ContactType(db, shouldRemap);
                }
            }

            public List<Concept_ContactType> GetAllConcept_ContactType(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapConcept_ContactTypeList(db.Concept_ContactType.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Concept_ContactType.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Concept_ContactType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllConcept_ContactTypeByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Concept_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Concept_ContactType, dynamic> orderExpression = null)
            {
				IQueryable<Concept_ContactType> query =  db.Concept_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Concept_ContactType> baseListReturnType = new BaseListReturnType<Concept_ContactType>();

                IQueryable<Concept_ContactType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdConcept_ContactType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Concept_ContactType, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapConcept_ContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeWithContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_ContactType, bool>> expression = null,bool shouldRemap = false, Func<Concept_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConcept_ContactTypeByPage(sortingPagingInfo, db,expression,new List<string>(){"ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeWithConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_ContactType, bool>> expression = null,bool shouldRemap = false, Func<Concept_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConcept_ContactTypeByPage(sortingPagingInfo, db,expression,new List<string>(){"Concept"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Concept_ContactType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllConcept_ContactTypeByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Concept_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Concept_ContactType, dynamic> orderExpression = null)
            {
				IQueryable<Concept_ContactType> query =  db.Concept_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Concept_ContactType> baseListReturnType = new BaseListReturnType<Concept_ContactType>();

                IQueryable<Concept_ContactType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdConcept_ContactType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Concept_ContactType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapConcept_ContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeWithContactTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_ContactType, bool>> expression = null,bool shouldRemap = false, Func<Concept_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConcept_ContactTypeByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeWithConceptDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_ContactType, bool>> expression = null,bool shouldRemap = false, Func<Concept_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConcept_ContactTypeByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Concept"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeWithContactTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConcept_ContactTypeWitDetails(new List<string>(){"ContactType"},shouldRemap);
					}
				}
							public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeWithConceptDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllConcept_ContactTypeWitDetails(new List<string>(){"Concept"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllConcept_ContactTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Concept_ContactType> query =  db.Concept_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Concept_ContactType> baseListReturnType = new BaseListReturnType<Concept_ContactType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapConcept_ContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Concept_ContactType GetConcept_ContactType(long idConcept_ContactType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetConcept_ContactType(idConcept_ContactType, db,shouldRemap);
                }
            }
                        public Concept_ContactType GetConcept_ContactType(long idConcept_ContactType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapConcept_ContactTypeSingle(db.Concept_ContactType.Where(p => p.IdConcept_ContactType == idConcept_ContactType && p.IsDeactivated != true).FirstOrDefault());

                return db.Concept_ContactType.Where(p => p.IdConcept_ContactType == idConcept_ContactType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Concept_ContactType GetConcept_ContactTypeCustom( Expression<Func<Concept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetConcept_ContactTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Concept_ContactType GetConcept_ContactTypeCustom( SubscriptionEntities db , Expression<Func<Concept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Concept_ContactType> query =  db.Concept_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapConcept_ContactTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Concept_ContactType> GetConcept_ContactTypeCustomList( Expression<Func<Concept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Concept_ContactType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetConcept_ContactTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Concept_ContactType> GetConcept_ContactTypeCustomList(  SubscriptionEntities db , Expression<Func<Concept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Concept_ContactType, dynamic> orderExpression = null)
			{
				IQueryable<Concept_ContactType> query =  db.Concept_ContactType;
                BaseListReturnType<Concept_ContactType> baseListReturnType = new BaseListReturnType<Concept_ContactType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapConcept_ContactTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Concept_ContactType GetConcept_ContactTypeWithContactTypeDetails(long idConcept_ContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetConcept_ContactTypeWithDetails(idConcept_ContactType,new List<string>(){"ContactType"},shouldRemap);
					}
				}

            //IdContactType -- ZeroOrOne

                public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeListByContactType(long idContactType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllConcept_ContactTypeListByContactType(idContactType, db);
                    }
                }
                public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeListByContactType(long idContactType, SubscriptionEntities db)
                {
                    Expression<Func<Concept_ContactType, bool>> expression = property=> property.IdContactType == idContactType && property.IsDeactivated !=true;
                    return GetConcept_ContactTypeCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeListByContactTypeByPage(long idContactType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllConcept_ContactTypeListByContactTypeByPage(idContactType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeListByContactTypeByPage(long idContactType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Concept_ContactType, bool>> expression = property => property.IdContactType == idContactType && property.IsDeactivated !=true;
                    return GetAllConcept_ContactTypeByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Concept_ContactType GetConcept_ContactTypeWithConceptDetails(long idConcept_ContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetConcept_ContactTypeWithDetails(idConcept_ContactType,new List<string>(){"Concept"},shouldRemap);
					}
				}

            //IdConcept -- ZeroOrOne

                public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeListByConcept(long idConcept)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllConcept_ContactTypeListByConcept(idConcept, db);
                    }
                }
                public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeListByConcept(long idConcept, SubscriptionEntities db)
                {
                    Expression<Func<Concept_ContactType, bool>> expression = property=> property.IdConcept == idConcept && property.IsDeactivated !=true;
                    return GetConcept_ContactTypeCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeListByConceptByPage(long idConcept, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllConcept_ContactTypeListByConceptByPage(idConcept, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeListByConceptByPage(long idConcept, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Concept_ContactType, bool>> expression = property => property.IdConcept == idConcept && property.IsDeactivated !=true;
                    return GetAllConcept_ContactTypeByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public Concept_ContactType GetConcept_ContactTypeWithDetails(long idConcept_ContactType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetConcept_ContactTypeWithDetails(idConcept_ContactType, db,includes,shouldRemap);
                }
            }

            public Concept_ContactType GetConcept_ContactTypeWithDetails(long idConcept_ContactType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Concept_ContactType> query =  db.Concept_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapConcept_ContactTypeSingle(query
						.Where(p => p.IdConcept_ContactType == idConcept_ContactType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdConcept_ContactType == idConcept_ContactType && p.IsDeactivated != true).FirstOrDefault();
            }

            public Concept_ContactType GetConcept_ContactTypeWitDetails(long idConcept_ContactType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetConcept_ContactTypeWitDetails(idConcept_ContactType, db,shouldRemap);
                }
            }

            public Concept_ContactType GetConcept_ContactTypeWitDetails(long idConcept_ContactType, SubscriptionEntities db,bool shouldRemap = false)
            {
				Concept_ContactType _Concept_ContactType = db.Concept_ContactType

					.Include("ContactType")
					.Include("Concept")
								.Where(p => p.IdConcept_ContactType == idConcept_ContactType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapConcept_ContactTypeSingle(_Concept_ContactType);

				return  _Concept_ContactType;
            }

            public List<Concept_ContactType> GetConcept_ContactTypeListByIdList(List<long> concept_ContactTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetConcept_ContactTypeListByIdList(concept_ContactTypeIds, db);
                }
            }
            public List<Concept_ContactType> GetConcept_ContactTypeListByIdList(List<long> concept_ContactTypeIds, SubscriptionEntities db)
            {
                return db.Concept_ContactType.Where(p => p.IsDeactivated != true && concept_ContactTypeIds.Contains(p.IdConcept_ContactType.Value)).ToList();
            }


            public void SaveConcept_ContactType(Concept_ContactType concept_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveConcept_ContactType(concept_ContactType, db);
                }
            }

            public void SaveConcept_ContactType(Concept_ContactType concept_ContactType, SubscriptionEntities db)
            {
									if (concept_ContactType.ContactType != null) 
						DaoFactories.Instance.ContactTypeDao.SaveContactType(concept_ContactType.ContactType, db);
									if (concept_ContactType.Concept != null) 
						DaoFactories.Instance.ConceptDao.SaveConcept(concept_ContactType.Concept, db);
				                
                if (concept_ContactType.IdConcept_ContactType.HasValue){
					var concept_ContactTypeFromDb = db.Concept_ContactType.Where(p => p.IdConcept_ContactType == concept_ContactType.IdConcept_ContactType).FirstOrDefault();
													concept_ContactTypeFromDb.IdConcept = concept_ContactType.IdConcept;
													concept_ContactTypeFromDb.IdContactType = concept_ContactType.IdContactType;
													concept_ContactTypeFromDb.IsDeactivated = concept_ContactType.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              concept_ContactType.ContactType = null;
                                                        //fix for saving without duplicating items in db
                              concept_ContactType.Concept = null;
                                                db.Concept_ContactType.Add(concept_ContactType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyConcept_ContactType(Concept_ContactType concept_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyConcept_ContactType(concept_ContactType, db);
                }
            }

            public void SaveOnlyConcept_ContactType(Concept_ContactType concept_ContactType, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // concept_ContactType.ContactType = null;
                                                        //fix for saving without duplicating items in db
                             // concept_ContactType.Concept = null;
                                            if (concept_ContactType.IdConcept_ContactType.HasValue){
					var concept_ContactTypeFromDb = db.Concept_ContactType.Where(p => p.IdConcept_ContactType == concept_ContactType.IdConcept_ContactType).FirstOrDefault();
													concept_ContactTypeFromDb.IdConcept = concept_ContactType.IdConcept;
													concept_ContactTypeFromDb.IdContactType = concept_ContactType.IdContactType;
													concept_ContactTypeFromDb.IsDeactivated = concept_ContactType.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Concept_ContactType _concept_ContactType = new Concept_ContactType();
																	_concept_ContactType.IdConcept = concept_ContactType.IdConcept;
													_concept_ContactType.IdContactType = concept_ContactType.IdContactType;
													_concept_ContactType.IsDeactivated = concept_ContactType.IsDeactivated;
					

                    db.Concept_ContactType.Add(_concept_ContactType);
					db.SaveChanges();
					concept_ContactType.IdConcept_ContactType =  _concept_ContactType.IdConcept_ContactType;
                    
                }
            }

            public void DeleteConcept_ContactType(Concept_ContactType concept_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteConcept_ContactType(concept_ContactType, db);
                }
            }

            public void DeleteConcept_ContactType(Concept_ContactType concept_ContactType, SubscriptionEntities db)
            {
								var concept_ContactTypeFromDb = GetConcept_ContactType(concept_ContactType.IdConcept_ContactType.Value,db);
				concept_ContactTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyConcept_ContactType(Concept_ContactType concept_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyConcept_ContactType(concept_ContactType, db);
                }
            }

            public void DeletePermanentlyConcept_ContactType(Concept_ContactType concept_ContactType, SubscriptionEntities db)
            {
								var concept_ContactTypeFromDb = GetConcept_ContactType(concept_ContactType.IdConcept_ContactType.Value,db);
				
				db.Concept_ContactType.Remove(concept_ContactTypeFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class ContactDao :IContactDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public ContactDao(){
			
			}

			public ContactDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Contact> GetAllContacts(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllContacts(db, shouldRemap);
                }
            }

            public List<Contact> GetAllContacts(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapContactList(db.Contacts.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Contacts.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Contact> GetAllContactsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Contact, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Contact, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllContactsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Contact> GetAllContactsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Contact, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Contact, dynamic> orderExpression = null)
            {
				IQueryable<Contact> query =  db.Contacts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Contact> baseListReturnType = new BaseListReturnType<Contact>();

                IQueryable<Contact> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdContact" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Contact, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Firstname.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Firstname.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Lastname.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Phone.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Fax.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Email.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapContactList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Contact> GetAllContactsWithAddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Contact, bool>> expression = null,bool shouldRemap = false, Func<Contact, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactsByPage(sortingPagingInfo, db,expression,new List<string>(){"Address"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Contact> GetAllContactsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Contact, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Contact, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllContactsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Contact> GetAllContactsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Contact, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Contact, dynamic> orderExpression = null)
            {
				IQueryable<Contact> query =  db.Contacts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Contact> baseListReturnType = new BaseListReturnType<Contact>();

                IQueryable<Contact> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdContact" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Contact, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapContactList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Contact> GetAllContactsWithAddressDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Contact, bool>> expression = null,bool shouldRemap = false, Func<Contact, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Address"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Contact> GetAllContactsWithAddressDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactWitDetails(new List<string>(){"Address"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Contact> GetAllContactWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllContactWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Contact> GetAllContactWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Contact> query =  db.Contacts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Contact> baseListReturnType = new BaseListReturnType<Contact>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapContactList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Contact GetContact(long idContact,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetContact(idContact, db,shouldRemap);
                }
            }
                        public Contact GetContact(long idContact, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapContactSingle(db.Contacts.Where(p => p.IdContact == idContact && p.IsDeactivated != true).FirstOrDefault());

                return db.Contacts.Where(p => p.IdContact == idContact && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Contact GetContactCustom( Expression<Func<Contact, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetContactCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Contact GetContactCustom( SubscriptionEntities db , Expression<Func<Contact, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Contact> query =  db.Contacts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapContactSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Contact> GetContactCustomList( Expression<Func<Contact, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Contact, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetContactCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Contact> GetContactCustomList(  SubscriptionEntities db , Expression<Func<Contact, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Contact, dynamic> orderExpression = null)
			{
				IQueryable<Contact> query =  db.Contacts;
                BaseListReturnType<Contact> baseListReturnType = new BaseListReturnType<Contact>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapContactList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Contact GetContactWithAddressDetails(long idContact,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetContactWithDetails(idContact,new List<string>(){"Address"},shouldRemap);
					}
				}

            //IdAddress -- ZeroOrOne

                public BaseListReturnType<Contact> GetAllContactListByAddress(long idAddress)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllContactListByAddress(idAddress, db);
                    }
                }
                public BaseListReturnType<Contact> GetAllContactListByAddress(long idAddress, SubscriptionEntities db)
                {
                    Expression<Func<Contact, bool>> expression = property=> property.IdAddress == idAddress && property.IsDeactivated !=true;
                    return GetContactCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Contact> GetAllContactListByAddressByPage(long idAddress, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllContactListByAddressByPage(idAddress, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Contact> GetAllContactListByAddressByPage(long idAddress, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Contact, bool>> expression = property => property.IdAddress == idAddress && property.IsDeactivated !=true;
                    return GetAllContactsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public Contact GetContactWithDetails(long idContact, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetContactWithDetails(idContact, db,includes,shouldRemap);
                }
            }

            public Contact GetContactWithDetails(long idContact, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Contact> query =  db.Contacts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapContactSingle(query
						.Where(p => p.IdContact == idContact && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdContact == idContact && p.IsDeactivated != true).FirstOrDefault();
            }

            public Contact GetContactWitDetails(long idContact,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetContactWitDetails(idContact, db,shouldRemap);
                }
            }

            public Contact GetContactWitDetails(long idContact, SubscriptionEntities db,bool shouldRemap = false)
            {
				Contact _Contact = db.Contacts

					.Include("Address")
								.Where(p => p.IdContact == idContact && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapContactSingle(_Contact);

				return  _Contact;
            }

            public List<Contact> GetContactListByIdList(List<long> contactIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetContactListByIdList(contactIds, db);
                }
            }
            public List<Contact> GetContactListByIdList(List<long> contactIds, SubscriptionEntities db)
            {
                return db.Contacts.Where(p => p.IsDeactivated != true && contactIds.Contains(p.IdContact.Value)).ToList();
            }


            public void SaveContact(Contact contact)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveContact(contact, db);
                }
            }

            public void SaveContact(Contact contact, SubscriptionEntities db)
            {
									if (contact.Address != null) 
						DaoFactories.Instance.AddressDao.SaveAddress(contact.Address, db);
				                
                if (contact.IdContact.HasValue){
					var contactFromDb = db.Contacts.Where(p => p.IdContact == contact.IdContact).FirstOrDefault();
													contactFromDb.Firstname = contact.Firstname;
													contactFromDb.Lastname = contact.Lastname;
													contactFromDb.Phone = contact.Phone;
													contactFromDb.Fax = contact.Fax;
													contactFromDb.Email = contact.Email;
													contactFromDb.IdAddress = contact.IdAddress;
													contactFromDb.IsDeactivated = contact.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              contact.Address = null;
                                                db.Contacts.Add(contact);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyContact(Contact contact)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyContact(contact, db);
                }
            }

            public void SaveOnlyContact(Contact contact, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // contact.Address = null;
                                            if (contact.IdContact.HasValue){
					var contactFromDb = db.Contacts.Where(p => p.IdContact == contact.IdContact).FirstOrDefault();
													contactFromDb.Firstname = contact.Firstname;
													contactFromDb.Lastname = contact.Lastname;
													contactFromDb.Phone = contact.Phone;
													contactFromDb.Fax = contact.Fax;
													contactFromDb.Email = contact.Email;
													contactFromDb.IdAddress = contact.IdAddress;
													contactFromDb.IsDeactivated = contact.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Contact _contact = new Contact();
																	_contact.Firstname = contact.Firstname;
													_contact.Lastname = contact.Lastname;
													_contact.Phone = contact.Phone;
													_contact.Fax = contact.Fax;
													_contact.Email = contact.Email;
													_contact.IdAddress = contact.IdAddress;
													_contact.IsDeactivated = contact.IsDeactivated;
					

                    db.Contacts.Add(_contact);
					db.SaveChanges();
					contact.IdContact =  _contact.IdContact;
                    
                }
            }

            public void DeleteContact(Contact contact)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteContact(contact, db);
                }
            }

            public void DeleteContact(Contact contact, SubscriptionEntities db)
            {
								var contactFromDb = GetContact(contact.IdContact.Value,db);
				contactFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyContact(Contact contact)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyContact(contact, db);
                }
            }

            public void DeletePermanentlyContact(Contact contact, SubscriptionEntities db)
            {
								var contactFromDb = GetContact(contact.IdContact.Value,db);
				
				db.Contacts.Remove(contactFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class ContactTypeDao :IContactTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public ContactTypeDao(){
			
			}

			public ContactTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<ContactType> GetAllContactTypes(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllContactTypes(db, shouldRemap);
                }
            }

            public List<ContactType> GetAllContactTypes(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapContactTypeList(db.ContactTypes.Where(p => p.IsDeactivated != true).ToList());
				
				return db.ContactTypes.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<ContactType> GetAllContactTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllContactTypesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<ContactType> GetAllContactTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
            {
				IQueryable<ContactType> query =  db.ContactTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<ContactType> baseListReturnType = new BaseListReturnType<ContactType>();

                IQueryable<ContactType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdContactType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<ContactType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.IconClass.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Action.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<ContactType> GetAllContactTypesWithCompany_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"Company_ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithConcept_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"Concept_ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithContactType1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"ContactType1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithContactType2DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"ContactType2"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithOrderConcept_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept_ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithPerson_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"Person_ContactType"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<ContactType> GetAllContactTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllContactTypesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<ContactType> GetAllContactTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
            {
				IQueryable<ContactType> query =  db.ContactTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<ContactType> baseListReturnType = new BaseListReturnType<ContactType>();

                IQueryable<ContactType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdContactType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<ContactType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<ContactType> GetAllContactTypesWithCompany_ContactTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Company_ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithConcept_ContactTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Concept_ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithContactType1DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"ContactType1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithContactType2DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"ContactType2"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithOrderConcept_ContactTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept_ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithPerson_ContactTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap = false, Func<ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Person_ContactType"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<ContactType> GetAllContactTypesWithCompany_ContactTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypeWitDetails(new List<string>(){"Company_ContactType"},shouldRemap);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithConcept_ContactTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypeWitDetails(new List<string>(){"Concept_ContactType"},shouldRemap);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithContactType1Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypeWitDetails(new List<string>(){"ContactType1"},shouldRemap);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithContactType2Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypeWitDetails(new List<string>(){"ContactType2"},shouldRemap);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithOrderConcept_ContactTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypeWitDetails(new List<string>(){"OrderConcept_ContactType"},shouldRemap);
					}
				}
							public BaseListReturnType<ContactType> GetAllContactTypesWithPerson_ContactTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllContactTypeWitDetails(new List<string>(){"Person_ContactType"},shouldRemap);
					}
				}
			

			public BaseListReturnType<ContactType> GetAllContactTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllContactTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<ContactType> GetAllContactTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<ContactType> query =  db.ContactTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<ContactType> baseListReturnType = new BaseListReturnType<ContactType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public ContactType GetContactType(long idContactType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetContactType(idContactType, db,shouldRemap);
                }
            }
                        public ContactType GetContactType(long idContactType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapContactTypeSingle(db.ContactTypes.Where(p => p.IdContactType == idContactType && p.IsDeactivated != true).FirstOrDefault());

                return db.ContactTypes.Where(p => p.IdContactType == idContactType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public ContactType GetContactTypeCustom( Expression<Func<ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetContactTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public ContactType GetContactTypeCustom( SubscriptionEntities db , Expression<Func<ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<ContactType> query =  db.ContactTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapContactTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<ContactType> GetContactTypeCustomList( Expression<Func<ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<ContactType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetContactTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<ContactType> GetContactTypeCustomList(  SubscriptionEntities db , Expression<Func<ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<ContactType, dynamic> orderExpression = null)
			{
				IQueryable<ContactType> query =  db.ContactTypes;
                BaseListReturnType<ContactType> baseListReturnType = new BaseListReturnType<ContactType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapContactTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public ContactType GetContactTypeWithCompany_ContactTypeDetails(long idContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetContactTypeWithDetails(idContactType,new List<string>(){"Company_ContactType"},shouldRemap);
					}
				}

            //IdContactType -- Many


							public ContactType GetContactTypeWithConcept_ContactTypeDetails(long idContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetContactTypeWithDetails(idContactType,new List<string>(){"Concept_ContactType"},shouldRemap);
					}
				}

            //IdContactType -- Many


							public ContactType GetContactTypeWithContactType1Details(long idContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetContactTypeWithDetails(idContactType,new List<string>(){"ContactType1"},shouldRemap);
					}
				}

            //IdParentContactType -- Many


							public ContactType GetContactTypeWithContactType2Details(long idContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetContactTypeWithDetails(idContactType,new List<string>(){"ContactType2"},shouldRemap);
					}
				}

            //IdParentContactType -- ZeroOrOne

                public BaseListReturnType<ContactType> GetAllContactTypeListByContactType2(long idContactType2)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllContactTypeListByContactType2(idContactType2, db);
                    }
                }
                public BaseListReturnType<ContactType> GetAllContactTypeListByContactType2(long idContactType2, SubscriptionEntities db)
                {
                    Expression<Func<ContactType, bool>> expression = property=> property.IdParentContactType == idContactType2 && property.IsDeactivated !=true;
                    return GetContactTypeCustomList(db, expression, null, true);
                }
                public BaseListReturnType<ContactType> GetAllContactTypeListByContactType2ByPage(long idContactType2, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllContactTypeListByContactType2ByPage(idContactType2, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<ContactType> GetAllContactTypeListByContactType2ByPage(long idContactType2, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<ContactType, bool>> expression = property => property.IdParentContactType == idContactType2 && property.IsDeactivated !=true;
                    return GetAllContactTypesByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public ContactType GetContactTypeWithOrderConcept_ContactTypeDetails(long idContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetContactTypeWithDetails(idContactType,new List<string>(){"OrderConcept_ContactType"},shouldRemap);
					}
				}

            //IdContactType -- Many


							public ContactType GetContactTypeWithPerson_ContactTypeDetails(long idContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetContactTypeWithDetails(idContactType,new List<string>(){"Person_ContactType"},shouldRemap);
					}
				}

            //IdContactType -- Many


			


			public ContactType GetContactTypeWithDetails(long idContactType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetContactTypeWithDetails(idContactType, db,includes,shouldRemap);
                }
            }

            public ContactType GetContactTypeWithDetails(long idContactType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<ContactType> query =  db.ContactTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapContactTypeSingle(query
						.Where(p => p.IdContactType == idContactType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdContactType == idContactType && p.IsDeactivated != true).FirstOrDefault();
            }

            public ContactType GetContactTypeWitDetails(long idContactType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetContactTypeWitDetails(idContactType, db,shouldRemap);
                }
            }

            public ContactType GetContactTypeWitDetails(long idContactType, SubscriptionEntities db,bool shouldRemap = false)
            {
				ContactType _ContactType = db.ContactTypes

					.Include("Company_ContactType")
					.Include("Concept_ContactType")
					.Include("ContactType1")
					.Include("ContactType2")
					.Include("OrderConcept_ContactType")
					.Include("Person_ContactType")
								.Where(p => p.IdContactType == idContactType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapContactTypeSingle(_ContactType);

				return  _ContactType;
            }

            public List<ContactType> GetContactTypeListByIdList(List<long> contactTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetContactTypeListByIdList(contactTypeIds, db);
                }
            }
            public List<ContactType> GetContactTypeListByIdList(List<long> contactTypeIds, SubscriptionEntities db)
            {
                return db.ContactTypes.Where(p => p.IsDeactivated != true && contactTypeIds.Contains(p.IdContactType.Value)).ToList();
            }


            public void SaveContactType(ContactType contactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveContactType(contactType, db);
                }
            }

            public void SaveContactType(ContactType contactType, SubscriptionEntities db)
            {
									if (contactType.ContactType2 != null) 
						DaoFactories.Instance.ContactTypeDao.SaveContactType(contactType.ContactType2, db);
				                
                if (contactType.IdContactType.HasValue){
					var contactTypeFromDb = db.ContactTypes.Where(p => p.IdContactType == contactType.IdContactType).FirstOrDefault();
													contactTypeFromDb.Description = contactType.Description;
													contactTypeFromDb.IsDeactivated = contactType.IsDeactivated;
													contactTypeFromDb.IdParentContactType = contactType.IdParentContactType;
													contactTypeFromDb.DisplayOrder = contactType.DisplayOrder;
													contactTypeFromDb.IconClass = contactType.IconClass;
													contactTypeFromDb.Action = contactType.Action;
									}
                else{
                                                //fix for saving without duplicating items in db
                              contactType.ContactType2 = null;
                                                db.ContactTypes.Add(contactType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyContactType(ContactType contactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyContactType(contactType, db);
                }
            }

            public void SaveOnlyContactType(ContactType contactType, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // contactType.ContactType2 = null;
                                            if (contactType.IdContactType.HasValue){
					var contactTypeFromDb = db.ContactTypes.Where(p => p.IdContactType == contactType.IdContactType).FirstOrDefault();
													contactTypeFromDb.Description = contactType.Description;
													contactTypeFromDb.IsDeactivated = contactType.IsDeactivated;
													contactTypeFromDb.IdParentContactType = contactType.IdParentContactType;
													contactTypeFromDb.DisplayOrder = contactType.DisplayOrder;
													contactTypeFromDb.IconClass = contactType.IconClass;
													contactTypeFromDb.Action = contactType.Action;
										 db.SaveChanges();

				}
                else{
					ContactType _contactType = new ContactType();
																	_contactType.Description = contactType.Description;
													_contactType.IsDeactivated = contactType.IsDeactivated;
													_contactType.IdParentContactType = contactType.IdParentContactType;
													_contactType.DisplayOrder = contactType.DisplayOrder;
													_contactType.IconClass = contactType.IconClass;
													_contactType.Action = contactType.Action;
					

                    db.ContactTypes.Add(_contactType);
					db.SaveChanges();
					contactType.IdContactType =  _contactType.IdContactType;
                    
                }
            }

            public void DeleteContactType(ContactType contactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteContactType(contactType, db);
                }
            }

            public void DeleteContactType(ContactType contactType, SubscriptionEntities db)
            {
								var contactTypeFromDb = GetContactType(contactType.IdContactType.Value,db);
				contactTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyContactType(ContactType contactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyContactType(contactType, db);
                }
            }

            public void DeletePermanentlyContactType(ContactType contactType, SubscriptionEntities db)
            {
								var contactTypeFromDb = GetContactType(contactType.IdContactType.Value,db);
				
				db.ContactTypes.Remove(contactTypeFromDb);
                db.SaveChanges();
            }


            
							public List<Company_ContactType> UpdateCompany_ContactTypeForContactTypeWithoutSavingNewItem(List<Company_ContactType> newCompany_ContactType,long idContactType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCompany_ContactTypeForContactTypeWithoutSavingNewItem(newCompany_ContactType,idContactType,db);
                                }
                            }

							public List<Company_ContactType> UpdateCompany_ContactTypeForContactTypeWithoutSavingNewItem(List<Company_ContactType> newCompany_ContactType,long idContactType, SubscriptionEntities  db)
                            {
                                Expression<Func<Company_ContactType, bool>> expressionBuilder = p => p.IdContactType == idContactType;
                                var oldCompany_ContactType = DaoFactories.Instance.Company_ContactTypeDao.GetCompany_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCompany_ContactType.EntityList.Select(pc => pc.IdCompany_ContactType).Except(newCompany_ContactType.Where(pc => pc.IdCompany_ContactType.HasValue).Select(pc => pc.IdCompany_ContactType)).ToList();
                                var itemsTobeDeleted = oldCompany_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCompany_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newCompany_ContactType;
                            }


                            public List<Company_ContactType> UpdateCompany_ContactTypeForContactType(List<Company_ContactType> newCompany_ContactType,long idContactType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCompany_ContactTypeForContactType(newCompany_ContactType,idContactType,db);
                                }
                            }

                            public List<Company_ContactType> UpdateCompany_ContactTypeForContactType(List<Company_ContactType> newCompany_ContactType,long idContactType, SubscriptionEntities  db)
                            {
                                Expression<Func<Company_ContactType, bool>> expressionBuilder = p => p.IdContactType == idContactType;
                                var oldCompany_ContactType = DaoFactories.Instance.Company_ContactTypeDao.GetCompany_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCompany_ContactType.EntityList.Select(pc => pc.IdCompany_ContactType).Except(newCompany_ContactType.Where(pc => pc.IdCompany_ContactType.HasValue).Select(pc => pc.IdCompany_ContactType)).ToList();
                                var itemsTobeDeleted = oldCompany_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCompany_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newCompany_ContactType.ForEach(pc =>
                                {
                                    pc.IdContactType = idContactType;
                                    DaoFactories.Instance.Company_ContactTypeDao.SaveOnlyCompany_ContactType(pc, db);
                                });
                                return newCompany_ContactType;
                            }

                        
							public List<Concept_ContactType> UpdateConcept_ContactTypeForContactTypeWithoutSavingNewItem(List<Concept_ContactType> newConcept_ContactType,long idContactType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateConcept_ContactTypeForContactTypeWithoutSavingNewItem(newConcept_ContactType,idContactType,db);
                                }
                            }

							public List<Concept_ContactType> UpdateConcept_ContactTypeForContactTypeWithoutSavingNewItem(List<Concept_ContactType> newConcept_ContactType,long idContactType, SubscriptionEntities  db)
                            {
                                Expression<Func<Concept_ContactType, bool>> expressionBuilder = p => p.IdContactType == idContactType;
                                var oldConcept_ContactType = DaoFactories.Instance.Concept_ContactTypeDao.GetConcept_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldConcept_ContactType.EntityList.Select(pc => pc.IdConcept_ContactType).Except(newConcept_ContactType.Where(pc => pc.IdConcept_ContactType.HasValue).Select(pc => pc.IdConcept_ContactType)).ToList();
                                var itemsTobeDeleted = oldConcept_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdConcept_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newConcept_ContactType;
                            }


                            public List<Concept_ContactType> UpdateConcept_ContactTypeForContactType(List<Concept_ContactType> newConcept_ContactType,long idContactType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateConcept_ContactTypeForContactType(newConcept_ContactType,idContactType,db);
                                }
                            }

                            public List<Concept_ContactType> UpdateConcept_ContactTypeForContactType(List<Concept_ContactType> newConcept_ContactType,long idContactType, SubscriptionEntities  db)
                            {
                                Expression<Func<Concept_ContactType, bool>> expressionBuilder = p => p.IdContactType == idContactType;
                                var oldConcept_ContactType = DaoFactories.Instance.Concept_ContactTypeDao.GetConcept_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldConcept_ContactType.EntityList.Select(pc => pc.IdConcept_ContactType).Except(newConcept_ContactType.Where(pc => pc.IdConcept_ContactType.HasValue).Select(pc => pc.IdConcept_ContactType)).ToList();
                                var itemsTobeDeleted = oldConcept_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdConcept_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newConcept_ContactType.ForEach(pc =>
                                {
                                    pc.IdContactType = idContactType;
                                    DaoFactories.Instance.Concept_ContactTypeDao.SaveOnlyConcept_ContactType(pc, db);
                                });
                                return newConcept_ContactType;
                            }

                        
							public List<ContactType> UpdateContactType1ForContactTypeWithoutSavingNewItem(List<ContactType> newContactType1,long idContactType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateContactType1ForContactTypeWithoutSavingNewItem(newContactType1,idContactType,db);
                                }
                            }

							public List<ContactType> UpdateContactType1ForContactTypeWithoutSavingNewItem(List<ContactType> newContactType1,long idContactType, SubscriptionEntities  db)
                            {
                                Expression<Func<ContactType, bool>> expressionBuilder = p => p.IdParentContactType == idContactType;
                                var oldContactType1 = DaoFactories.Instance.ContactTypeDao.GetContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldContactType1.EntityList.Select(pc => pc.IdContactType).Except(newContactType1.Where(pc => pc.IdContactType.HasValue).Select(pc => pc.IdContactType)).ToList();
                                var itemsTobeDeleted = oldContactType1.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newContactType1;
                            }


                            public List<ContactType> UpdateContactType1ForContactType(List<ContactType> newContactType1,long idContactType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateContactType1ForContactType(newContactType1,idContactType,db);
                                }
                            }

                            public List<ContactType> UpdateContactType1ForContactType(List<ContactType> newContactType1,long idContactType, SubscriptionEntities  db)
                            {
                                Expression<Func<ContactType, bool>> expressionBuilder = p => p.IdParentContactType == idContactType;
                                var oldContactType1 = DaoFactories.Instance.ContactTypeDao.GetContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldContactType1.EntityList.Select(pc => pc.IdContactType).Except(newContactType1.Where(pc => pc.IdContactType.HasValue).Select(pc => pc.IdContactType)).ToList();
                                var itemsTobeDeleted = oldContactType1.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newContactType1.ForEach(pc =>
                                {
                                    pc.IdParentContactType = idContactType;
                                    DaoFactories.Instance.ContactTypeDao.SaveOnlyContactType(pc, db);
                                });
                                return newContactType1;
                            }

                        
							public List<OrderConcept_ContactType> UpdateOrderConcept_ContactTypeForContactTypeWithoutSavingNewItem(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idContactType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderConcept_ContactTypeForContactTypeWithoutSavingNewItem(newOrderConcept_ContactType,idContactType,db);
                                }
                            }

							public List<OrderConcept_ContactType> UpdateOrderConcept_ContactTypeForContactTypeWithoutSavingNewItem(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idContactType, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderConcept_ContactType, bool>> expressionBuilder = p => p.IdContactType == idContactType;
                                var oldOrderConcept_ContactType = DaoFactories.Instance.OrderConcept_ContactTypeDao.GetOrderConcept_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderConcept_ContactType.EntityList.Select(pc => pc.IdOrderConcept_ContactType).Except(newOrderConcept_ContactType.Where(pc => pc.IdOrderConcept_ContactType.HasValue).Select(pc => pc.IdOrderConcept_ContactType)).ToList();
                                var itemsTobeDeleted = oldOrderConcept_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderConcept_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newOrderConcept_ContactType;
                            }


                            public List<OrderConcept_ContactType> UpdateOrderConcept_ContactTypeForContactType(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idContactType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderConcept_ContactTypeForContactType(newOrderConcept_ContactType,idContactType,db);
                                }
                            }

                            public List<OrderConcept_ContactType> UpdateOrderConcept_ContactTypeForContactType(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idContactType, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderConcept_ContactType, bool>> expressionBuilder = p => p.IdContactType == idContactType;
                                var oldOrderConcept_ContactType = DaoFactories.Instance.OrderConcept_ContactTypeDao.GetOrderConcept_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderConcept_ContactType.EntityList.Select(pc => pc.IdOrderConcept_ContactType).Except(newOrderConcept_ContactType.Where(pc => pc.IdOrderConcept_ContactType.HasValue).Select(pc => pc.IdOrderConcept_ContactType)).ToList();
                                var itemsTobeDeleted = oldOrderConcept_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderConcept_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newOrderConcept_ContactType.ForEach(pc =>
                                {
                                    pc.IdContactType = idContactType;
                                    DaoFactories.Instance.OrderConcept_ContactTypeDao.SaveOnlyOrderConcept_ContactType(pc, db);
                                });
                                return newOrderConcept_ContactType;
                            }

                        
							public List<Person_ContactType> UpdatePerson_ContactTypeForContactTypeWithoutSavingNewItem(List<Person_ContactType> newPerson_ContactType,long idContactType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePerson_ContactTypeForContactTypeWithoutSavingNewItem(newPerson_ContactType,idContactType,db);
                                }
                            }

							public List<Person_ContactType> UpdatePerson_ContactTypeForContactTypeWithoutSavingNewItem(List<Person_ContactType> newPerson_ContactType,long idContactType, SubscriptionEntities  db)
                            {
                                Expression<Func<Person_ContactType, bool>> expressionBuilder = p => p.IdContactType == idContactType;
                                var oldPerson_ContactType = DaoFactories.Instance.Person_ContactTypeDao.GetPerson_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPerson_ContactType.EntityList.Select(pc => pc.IdPerson_ContactType).Except(newPerson_ContactType.Where(pc => pc.IdPerson_ContactType.HasValue).Select(pc => pc.IdPerson_ContactType)).ToList();
                                var itemsTobeDeleted = oldPerson_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPerson_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newPerson_ContactType;
                            }


                            public List<Person_ContactType> UpdatePerson_ContactTypeForContactType(List<Person_ContactType> newPerson_ContactType,long idContactType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePerson_ContactTypeForContactType(newPerson_ContactType,idContactType,db);
                                }
                            }

                            public List<Person_ContactType> UpdatePerson_ContactTypeForContactType(List<Person_ContactType> newPerson_ContactType,long idContactType, SubscriptionEntities  db)
                            {
                                Expression<Func<Person_ContactType, bool>> expressionBuilder = p => p.IdContactType == idContactType;
                                var oldPerson_ContactType = DaoFactories.Instance.Person_ContactTypeDao.GetPerson_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPerson_ContactType.EntityList.Select(pc => pc.IdPerson_ContactType).Except(newPerson_ContactType.Where(pc => pc.IdPerson_ContactType.HasValue).Select(pc => pc.IdPerson_ContactType)).ToList();
                                var itemsTobeDeleted = oldPerson_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPerson_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newPerson_ContactType.ForEach(pc =>
                                {
                                    pc.IdContactType = idContactType;
                                    DaoFactories.Instance.Person_ContactTypeDao.SaveOnlyPerson_ContactType(pc, db);
                                });
                                return newPerson_ContactType;
                            }

                        


    



		}
			public partial class CountryDao :ICountryDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public CountryDao(){
			
			}

			public CountryDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Country> GetAllCountries(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCountries(db, shouldRemap);
                }
            }

            public List<Country> GetAllCountries(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCountryList(db.Countries.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Countries.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Country> GetAllCountriesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Country, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Country, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCountriesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Country> GetAllCountriesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Country, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Country, dynamic> orderExpression = null)
            {
				IQueryable<Country> query =  db.Countries;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Country> baseListReturnType = new BaseListReturnType<Country>();

                IQueryable<Country> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCountry" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Country, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCountryList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Country> GetAllCountriesWithAddressesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Country, bool>> expression = null,bool shouldRemap = false, Func<Country, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCountriesByPage(sortingPagingInfo, db,expression,new List<string>(){"Addresses"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Country> GetAllCountriesWithCitiesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Country, bool>> expression = null,bool shouldRemap = false, Func<Country, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCountriesByPage(sortingPagingInfo, db,expression,new List<string>(){"Cities"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Country> GetAllCountriesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Country, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Country, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCountriesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Country> GetAllCountriesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Country, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Country, dynamic> orderExpression = null)
            {
				IQueryable<Country> query =  db.Countries;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Country> baseListReturnType = new BaseListReturnType<Country>();

                IQueryable<Country> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCountry" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Country, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCountryList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Country> GetAllCountriesWithAddressesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Country, bool>> expression = null,bool shouldRemap = false, Func<Country, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCountriesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Addresses"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Country> GetAllCountriesWithCitiesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Country, bool>> expression = null,bool shouldRemap = false, Func<Country, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCountriesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Cities"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Country> GetAllCountriesWithAddressesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCountryWitDetails(new List<string>(){"Addresses"},shouldRemap);
					}
				}
							public BaseListReturnType<Country> GetAllCountriesWithCitiesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCountryWitDetails(new List<string>(){"Cities"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Country> GetAllCountryWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCountryWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Country> GetAllCountryWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Country> query =  db.Countries;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Country> baseListReturnType = new BaseListReturnType<Country>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCountryList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Country GetCountry(long idCountry,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCountry(idCountry, db,shouldRemap);
                }
            }
                        public Country GetCountry(long idCountry, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCountrySingle(db.Countries.Where(p => p.IdCountry == idCountry && p.IsDeactivated != true).FirstOrDefault());

                return db.Countries.Where(p => p.IdCountry == idCountry && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Country GetCountryCustom( Expression<Func<Country, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCountryCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Country GetCountryCustom( SubscriptionEntities db , Expression<Func<Country, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Country> query =  db.Countries;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapCountrySingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Country> GetCountryCustomList( Expression<Func<Country, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Country, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCountryCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Country> GetCountryCustomList(  SubscriptionEntities db , Expression<Func<Country, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Country, dynamic> orderExpression = null)
			{
				IQueryable<Country> query =  db.Countries;
                BaseListReturnType<Country> baseListReturnType = new BaseListReturnType<Country>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCountryList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Country GetCountryWithAddressesDetails(long idCountry,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCountryWithDetails(idCountry,new List<string>(){"Addresses"},shouldRemap);
					}
				}

            //IdCountry -- Many


							public Country GetCountryWithCitiesDetails(long idCountry,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCountryWithDetails(idCountry,new List<string>(){"Cities"},shouldRemap);
					}
				}

            //IdCountry -- Many


			


			public Country GetCountryWithDetails(long idCountry, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCountryWithDetails(idCountry, db,includes,shouldRemap);
                }
            }

            public Country GetCountryWithDetails(long idCountry, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Country> query =  db.Countries;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapCountrySingle(query
						.Where(p => p.IdCountry == idCountry && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdCountry == idCountry && p.IsDeactivated != true).FirstOrDefault();
            }

            public Country GetCountryWitDetails(long idCountry,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCountryWitDetails(idCountry, db,shouldRemap);
                }
            }

            public Country GetCountryWitDetails(long idCountry, SubscriptionEntities db,bool shouldRemap = false)
            {
				Country _Country = db.Countries

					.Include("Addresses")
					.Include("Cities")
								.Where(p => p.IdCountry == idCountry && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapCountrySingle(_Country);

				return  _Country;
            }

            public List<Country> GetCountryListByIdList(List<long> countryIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCountryListByIdList(countryIds, db);
                }
            }
            public List<Country> GetCountryListByIdList(List<long> countryIds, SubscriptionEntities db)
            {
                return db.Countries.Where(p => p.IsDeactivated != true && countryIds.Contains(p.IdCountry.Value)).ToList();
            }


            public void SaveCountry(Country country)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveCountry(country, db);
                }
            }

            public void SaveCountry(Country country, SubscriptionEntities db)
            {
				                
                if (country.IdCountry.HasValue){
					var countryFromDb = db.Countries.Where(p => p.IdCountry == country.IdCountry).FirstOrDefault();
													countryFromDb.Description = country.Description;
													countryFromDb.IsDeactivated = country.IsDeactivated;
									}
                else{
                                        db.Countries.Add(country);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyCountry(Country country)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyCountry(country, db);
                }
            }

            public void SaveOnlyCountry(Country country, SubscriptionEntities db)
            {
			                    if (country.IdCountry.HasValue){
					var countryFromDb = db.Countries.Where(p => p.IdCountry == country.IdCountry).FirstOrDefault();
													countryFromDb.Description = country.Description;
													countryFromDb.IsDeactivated = country.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Country _country = new Country();
																	_country.Description = country.Description;
													_country.IsDeactivated = country.IsDeactivated;
					

                    db.Countries.Add(_country);
					db.SaveChanges();
					country.IdCountry =  _country.IdCountry;
                    
                }
            }

            public void DeleteCountry(Country country)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteCountry(country, db);
                }
            }

            public void DeleteCountry(Country country, SubscriptionEntities db)
            {
								var countryFromDb = GetCountry(country.IdCountry.Value,db);
				countryFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyCountry(Country country)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyCountry(country, db);
                }
            }

            public void DeletePermanentlyCountry(Country country, SubscriptionEntities db)
            {
								var countryFromDb = GetCountry(country.IdCountry.Value,db);
				
				db.Countries.Remove(countryFromDb);
                db.SaveChanges();
            }


            
							public List<Address> UpdateAddressesForCountryWithoutSavingNewItem(List<Address> newAddresses,long idCountry)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateAddressesForCountryWithoutSavingNewItem(newAddresses,idCountry,db);
                                }
                            }

							public List<Address> UpdateAddressesForCountryWithoutSavingNewItem(List<Address> newAddresses,long idCountry, SubscriptionEntities  db)
                            {
                                Expression<Func<Address, bool>> expressionBuilder = p => p.IdCountry == idCountry;
                                var oldAddresses = DaoFactories.Instance.AddressDao.GetAddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldAddresses.EntityList.Select(pc => pc.IdAddress).Except(newAddresses.Where(pc => pc.IdAddress.HasValue).Select(pc => pc.IdAddress)).ToList();
                                var itemsTobeDeleted = oldAddresses.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdAddress)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newAddresses;
                            }


                            public List<Address> UpdateAddressesForCountry(List<Address> newAddresses,long idCountry)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateAddressesForCountry(newAddresses,idCountry,db);
                                }
                            }

                            public List<Address> UpdateAddressesForCountry(List<Address> newAddresses,long idCountry, SubscriptionEntities  db)
                            {
                                Expression<Func<Address, bool>> expressionBuilder = p => p.IdCountry == idCountry;
                                var oldAddresses = DaoFactories.Instance.AddressDao.GetAddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldAddresses.EntityList.Select(pc => pc.IdAddress).Except(newAddresses.Where(pc => pc.IdAddress.HasValue).Select(pc => pc.IdAddress)).ToList();
                                var itemsTobeDeleted = oldAddresses.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdAddress)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newAddresses.ForEach(pc =>
                                {
                                    pc.IdCountry = idCountry;
                                    DaoFactories.Instance.AddressDao.SaveOnlyAddress(pc, db);
                                });
                                return newAddresses;
                            }

                        
							public List<City> UpdateCitiesForCountryWithoutSavingNewItem(List<City> newCities,long idCountry)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCitiesForCountryWithoutSavingNewItem(newCities,idCountry,db);
                                }
                            }

							public List<City> UpdateCitiesForCountryWithoutSavingNewItem(List<City> newCities,long idCountry, SubscriptionEntities  db)
                            {
                                Expression<Func<City, bool>> expressionBuilder = p => p.IdCountry == idCountry;
                                var oldCities = DaoFactories.Instance.CityDao.GetCityCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCities.EntityList.Select(pc => pc.IdCity).Except(newCities.Where(pc => pc.IdCity.HasValue).Select(pc => pc.IdCity)).ToList();
                                var itemsTobeDeleted = oldCities.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCity)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newCities;
                            }


                            public List<City> UpdateCitiesForCountry(List<City> newCities,long idCountry)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCitiesForCountry(newCities,idCountry,db);
                                }
                            }

                            public List<City> UpdateCitiesForCountry(List<City> newCities,long idCountry, SubscriptionEntities  db)
                            {
                                Expression<Func<City, bool>> expressionBuilder = p => p.IdCountry == idCountry;
                                var oldCities = DaoFactories.Instance.CityDao.GetCityCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCities.EntityList.Select(pc => pc.IdCity).Except(newCities.Where(pc => pc.IdCity.HasValue).Select(pc => pc.IdCity)).ToList();
                                var itemsTobeDeleted = oldCities.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCity)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newCities.ForEach(pc =>
                                {
                                    pc.IdCountry = idCountry;
                                    DaoFactories.Instance.CityDao.SaveOnlyCity(pc, db);
                                });
                                return newCities;
                            }

                        


    



		}
			public partial class CustomerDao :ICustomerDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public CustomerDao(){
			
			}

			public CustomerDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Customer> GetAllCustomers(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCustomers(db, shouldRemap);
                }
            }

            public List<Customer> GetAllCustomers(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCustomerList(db.Customers.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Customers.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Customer> GetAllCustomersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCustomersByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Customer> GetAllCustomersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Customer, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
            {
				IQueryable<Customer> query =  db.Customers;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Customer> baseListReturnType = new BaseListReturnType<Customer>();

                IQueryable<Customer> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCustomer" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Customer, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.FullName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.FullName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.AccountNumber.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCustomerList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Customer> GetAllCustomersWithTransactionPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomersByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithCompanyDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomersByPage(sortingPagingInfo, db,expression,new List<string>(){"Company"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithCustomerTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomersByPage(sortingPagingInfo, db,expression,new List<string>(){"CustomerType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomersByPage(sortingPagingInfo, db,expression,new List<string>(){"Concept"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithPersonDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomersByPage(sortingPagingInfo, db,expression,new List<string>(){"Person"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomersByPage(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Customer> GetAllCustomersByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCustomersByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Customer> GetAllCustomersByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Customer, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
            {
				IQueryable<Customer> query =  db.Customers;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Customer> baseListReturnType = new BaseListReturnType<Customer>();

                IQueryable<Customer> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCustomer" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Customer, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCustomerList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Customer> GetAllCustomersWithTransactionPresetsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithCompanyDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Company"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithCustomerTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"CustomerType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithConceptDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Concept"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithPersonDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Person"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap = false, Func<Customer, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Customer> GetAllCustomersWithTransactionPresetsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomerWitDetails(new List<string>(){"TransactionPresets"},shouldRemap);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithCompanyDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomerWitDetails(new List<string>(){"Company"},shouldRemap);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithCustomerTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomerWitDetails(new List<string>(){"CustomerType"},shouldRemap);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithConceptDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomerWitDetails(new List<string>(){"Concept"},shouldRemap);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithPersonDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomerWitDetails(new List<string>(){"Person"},shouldRemap);
					}
				}
							public BaseListReturnType<Customer> GetAllCustomersWithTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomerWitDetails(new List<string>(){"Transactions"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Customer> GetAllCustomerWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCustomerWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Customer> GetAllCustomerWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Customer> query =  db.Customers;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Customer> baseListReturnType = new BaseListReturnType<Customer>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCustomerList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Customer GetCustomer(long idCustomer,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCustomer(idCustomer, db,shouldRemap);
                }
            }
                        public Customer GetCustomer(long idCustomer, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCustomerSingle(db.Customers.Where(p => p.IdCustomer == idCustomer && p.IsDeactivated != true).FirstOrDefault());

                return db.Customers.Where(p => p.IdCustomer == idCustomer && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Customer GetCustomerCustom( Expression<Func<Customer, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCustomerCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Customer GetCustomerCustom( SubscriptionEntities db , Expression<Func<Customer, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Customer> query =  db.Customers;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapCustomerSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Customer> GetCustomerCustomList( Expression<Func<Customer, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Customer, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCustomerCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Customer> GetCustomerCustomList(  SubscriptionEntities db , Expression<Func<Customer, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Customer, dynamic> orderExpression = null)
			{
				IQueryable<Customer> query =  db.Customers;
                BaseListReturnType<Customer> baseListReturnType = new BaseListReturnType<Customer>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCustomerList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Customer GetCustomerWithTransactionPresetsDetails(long idCustomer,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCustomerWithDetails(idCustomer,new List<string>(){"TransactionPresets"},shouldRemap);
					}
				}

            //IdCustomer -- Many


							public Customer GetCustomerWithCompanyDetails(long idCustomer,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCustomerWithDetails(idCustomer,new List<string>(){"Company"},shouldRemap);
					}
				}

            //IdCompany -- ZeroOrOne

                public BaseListReturnType<Customer> GetAllCustomerListByCompany(long idCompany)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCustomerListByCompany(idCompany, db);
                    }
                }
                public BaseListReturnType<Customer> GetAllCustomerListByCompany(long idCompany, SubscriptionEntities db)
                {
                    Expression<Func<Customer, bool>> expression = property=> property.IdCompany == idCompany && property.IsDeactivated !=true;
                    return GetCustomerCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Customer> GetAllCustomerListByCompanyByPage(long idCompany, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCustomerListByCompanyByPage(idCompany, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Customer> GetAllCustomerListByCompanyByPage(long idCompany, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Customer, bool>> expression = property => property.IdCompany == idCompany && property.IsDeactivated !=true;
                    return GetAllCustomersByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Customer GetCustomerWithCustomerTypeDetails(long idCustomer,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCustomerWithDetails(idCustomer,new List<string>(){"CustomerType"},shouldRemap);
					}
				}

            //IdCustomerType -- ZeroOrOne

                public BaseListReturnType<Customer> GetAllCustomerListByCustomerType(long idCustomerType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCustomerListByCustomerType(idCustomerType, db);
                    }
                }
                public BaseListReturnType<Customer> GetAllCustomerListByCustomerType(long idCustomerType, SubscriptionEntities db)
                {
                    Expression<Func<Customer, bool>> expression = property=> property.IdCustomerType == idCustomerType && property.IsDeactivated !=true;
                    return GetCustomerCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Customer> GetAllCustomerListByCustomerTypeByPage(long idCustomerType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCustomerListByCustomerTypeByPage(idCustomerType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Customer> GetAllCustomerListByCustomerTypeByPage(long idCustomerType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Customer, bool>> expression = property => property.IdCustomerType == idCustomerType && property.IsDeactivated !=true;
                    return GetAllCustomersByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Customer GetCustomerWithConceptDetails(long idCustomer,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCustomerWithDetails(idCustomer,new List<string>(){"Concept"},shouldRemap);
					}
				}

            //IdConcept -- ZeroOrOne

                public BaseListReturnType<Customer> GetAllCustomerListByConcept(long idConcept)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCustomerListByConcept(idConcept, db);
                    }
                }
                public BaseListReturnType<Customer> GetAllCustomerListByConcept(long idConcept, SubscriptionEntities db)
                {
                    Expression<Func<Customer, bool>> expression = property=> property.IdConcept == idConcept && property.IsDeactivated !=true;
                    return GetCustomerCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Customer> GetAllCustomerListByConceptByPage(long idConcept, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCustomerListByConceptByPage(idConcept, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Customer> GetAllCustomerListByConceptByPage(long idConcept, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Customer, bool>> expression = property => property.IdConcept == idConcept && property.IsDeactivated !=true;
                    return GetAllCustomersByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Customer GetCustomerWithPersonDetails(long idCustomer,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCustomerWithDetails(idCustomer,new List<string>(){"Person"},shouldRemap);
					}
				}

            //IdPerson -- ZeroOrOne

                public BaseListReturnType<Customer> GetAllCustomerListByPerson(long idPerson)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCustomerListByPerson(idPerson, db);
                    }
                }
                public BaseListReturnType<Customer> GetAllCustomerListByPerson(long idPerson, SubscriptionEntities db)
                {
                    Expression<Func<Customer, bool>> expression = property=> property.IdPerson == idPerson && property.IsDeactivated !=true;
                    return GetCustomerCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Customer> GetAllCustomerListByPersonByPage(long idPerson, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllCustomerListByPersonByPage(idPerson, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Customer> GetAllCustomerListByPersonByPage(long idPerson, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Customer, bool>> expression = property => property.IdPerson == idPerson && property.IsDeactivated !=true;
                    return GetAllCustomersByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Customer GetCustomerWithTransactionsDetails(long idCustomer,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCustomerWithDetails(idCustomer,new List<string>(){"Transactions"},shouldRemap);
					}
				}

            //IdCustomer -- Many


			


			public Customer GetCustomerWithDetails(long idCustomer, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCustomerWithDetails(idCustomer, db,includes,shouldRemap);
                }
            }

            public Customer GetCustomerWithDetails(long idCustomer, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Customer> query =  db.Customers;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapCustomerSingle(query
						.Where(p => p.IdCustomer == idCustomer && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdCustomer == idCustomer && p.IsDeactivated != true).FirstOrDefault();
            }

            public Customer GetCustomerWitDetails(long idCustomer,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCustomerWitDetails(idCustomer, db,shouldRemap);
                }
            }

            public Customer GetCustomerWitDetails(long idCustomer, SubscriptionEntities db,bool shouldRemap = false)
            {
				Customer _Customer = db.Customers

					.Include("TransactionPresets")
					.Include("Company")
					.Include("CustomerType")
					.Include("Concept")
					.Include("Person")
					.Include("Transactions")
								.Where(p => p.IdCustomer == idCustomer && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapCustomerSingle(_Customer);

				return  _Customer;
            }

            public List<Customer> GetCustomerListByIdList(List<long> customerIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCustomerListByIdList(customerIds, db);
                }
            }
            public List<Customer> GetCustomerListByIdList(List<long> customerIds, SubscriptionEntities db)
            {
                return db.Customers.Where(p => p.IsDeactivated != true && customerIds.Contains(p.IdCustomer.Value)).ToList();
            }


            public void SaveCustomer(Customer customer)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveCustomer(customer, db);
                }
            }

            public void SaveCustomer(Customer customer, SubscriptionEntities db)
            {
									if (customer.Company != null) 
						DaoFactories.Instance.CompanyDao.SaveCompany(customer.Company, db);
									if (customer.CustomerType != null) 
						DaoFactories.Instance.CustomerTypeDao.SaveCustomerType(customer.CustomerType, db);
									if (customer.Concept != null) 
						DaoFactories.Instance.ConceptDao.SaveConcept(customer.Concept, db);
									if (customer.Person != null) 
						DaoFactories.Instance.PersonDao.SavePerson(customer.Person, db);
				                
                if (customer.IdCustomer.HasValue){
					var customerFromDb = db.Customers.Where(p => p.IdCustomer == customer.IdCustomer).FirstOrDefault();
													customerFromDb.IsDeactivated = customer.IsDeactivated;
													customerFromDb.FullName = customer.FullName;
													customerFromDb.IdConcept = customer.IdConcept;
													customerFromDb.IdPerson = customer.IdPerson;
													customerFromDb.IdCompany = customer.IdCompany;
													customerFromDb.IdCustomerType = customer.IdCustomerType;
													customerFromDb.AccountNumber = customer.AccountNumber;
									}
                else{
                                                //fix for saving without duplicating items in db
                              customer.Company = null;
                                                        //fix for saving without duplicating items in db
                              customer.CustomerType = null;
                                                        //fix for saving without duplicating items in db
                              customer.Concept = null;
                                                        //fix for saving without duplicating items in db
                              customer.Person = null;
                                                db.Customers.Add(customer);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyCustomer(Customer customer)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyCustomer(customer, db);
                }
            }

            public void SaveOnlyCustomer(Customer customer, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // customer.Company = null;
                                                        //fix for saving without duplicating items in db
                             // customer.CustomerType = null;
                                                        //fix for saving without duplicating items in db
                             // customer.Concept = null;
                                                        //fix for saving without duplicating items in db
                             // customer.Person = null;
                                            if (customer.IdCustomer.HasValue){
					var customerFromDb = db.Customers.Where(p => p.IdCustomer == customer.IdCustomer).FirstOrDefault();
													customerFromDb.IsDeactivated = customer.IsDeactivated;
													customerFromDb.FullName = customer.FullName;
													customerFromDb.IdConcept = customer.IdConcept;
													customerFromDb.IdPerson = customer.IdPerson;
													customerFromDb.IdCompany = customer.IdCompany;
													customerFromDb.IdCustomerType = customer.IdCustomerType;
													customerFromDb.AccountNumber = customer.AccountNumber;
										 db.SaveChanges();

				}
                else{
					Customer _customer = new Customer();
																	_customer.IsDeactivated = customer.IsDeactivated;
													_customer.FullName = customer.FullName;
													_customer.IdConcept = customer.IdConcept;
													_customer.IdPerson = customer.IdPerson;
													_customer.IdCompany = customer.IdCompany;
													_customer.IdCustomerType = customer.IdCustomerType;
													_customer.AccountNumber = customer.AccountNumber;
					

                    db.Customers.Add(_customer);
					db.SaveChanges();
					customer.IdCustomer =  _customer.IdCustomer;
                    
                }
            }

            public void DeleteCustomer(Customer customer)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteCustomer(customer, db);
                }
            }

            public void DeleteCustomer(Customer customer, SubscriptionEntities db)
            {
								var customerFromDb = GetCustomer(customer.IdCustomer.Value,db);
				customerFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyCustomer(Customer customer)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyCustomer(customer, db);
                }
            }

            public void DeletePermanentlyCustomer(Customer customer, SubscriptionEntities db)
            {
								var customerFromDb = GetCustomer(customer.IdCustomer.Value,db);
				
				db.Customers.Remove(customerFromDb);
                db.SaveChanges();
            }


            
							public List<TransactionPreset> UpdateTransactionPresetsForCustomerWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idCustomer)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionPresetsForCustomerWithoutSavingNewItem(newTransactionPresets,idCustomer,db);
                                }
                            }

							public List<TransactionPreset> UpdateTransactionPresetsForCustomerWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idCustomer, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionPreset, bool>> expressionBuilder = p => p.IdCustomer == idCustomer;
                                var oldTransactionPresets = DaoFactories.Instance.TransactionPresetDao.GetTransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionPresets.EntityList.Select(pc => pc.IdTransactionPreset).Except(newTransactionPresets.Where(pc => pc.IdTransactionPreset.HasValue).Select(pc => pc.IdTransactionPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionPresets;
                            }


                            public List<TransactionPreset> UpdateTransactionPresetsForCustomer(List<TransactionPreset> newTransactionPresets,long idCustomer)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionPresetsForCustomer(newTransactionPresets,idCustomer,db);
                                }
                            }

                            public List<TransactionPreset> UpdateTransactionPresetsForCustomer(List<TransactionPreset> newTransactionPresets,long idCustomer, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionPreset, bool>> expressionBuilder = p => p.IdCustomer == idCustomer;
                                var oldTransactionPresets = DaoFactories.Instance.TransactionPresetDao.GetTransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionPresets.EntityList.Select(pc => pc.IdTransactionPreset).Except(newTransactionPresets.Where(pc => pc.IdTransactionPreset.HasValue).Select(pc => pc.IdTransactionPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionPresets.ForEach(pc =>
                                {
                                    pc.IdCustomer = idCustomer;
                                    DaoFactories.Instance.TransactionPresetDao.SaveOnlyTransactionPreset(pc, db);
                                });
                                return newTransactionPresets;
                            }

                        
							public List<Transaction> UpdateTransactionsForCustomerWithoutSavingNewItem(List<Transaction> newTransactions,long idCustomer)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForCustomerWithoutSavingNewItem(newTransactions,idCustomer,db);
                                }
                            }

							public List<Transaction> UpdateTransactionsForCustomerWithoutSavingNewItem(List<Transaction> newTransactions,long idCustomer, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdCustomer == idCustomer;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactions;
                            }


                            public List<Transaction> UpdateTransactionsForCustomer(List<Transaction> newTransactions,long idCustomer)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForCustomer(newTransactions,idCustomer,db);
                                }
                            }

                            public List<Transaction> UpdateTransactionsForCustomer(List<Transaction> newTransactions,long idCustomer, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdCustomer == idCustomer;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactions.ForEach(pc =>
                                {
                                    pc.IdCustomer = idCustomer;
                                    DaoFactories.Instance.TransactionDao.SaveOnlyTransaction(pc, db);
                                });
                                return newTransactions;
                            }

                        


    



		}
			public partial class CustomerTypeDao :ICustomerTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public CustomerTypeDao(){
			
			}

			public CustomerTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<CustomerType> GetAllCustomerTypes(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCustomerTypes(db, shouldRemap);
                }
            }

            public List<CustomerType> GetAllCustomerTypes(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCustomerTypeList(db.CustomerTypes.Where(p => p.IsDeactivated != true).ToList());
				
				return db.CustomerTypes.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<CustomerType> GetAllCustomerTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CustomerType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<CustomerType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCustomerTypesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<CustomerType> GetAllCustomerTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<CustomerType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<CustomerType, dynamic> orderExpression = null)
            {
				IQueryable<CustomerType> query =  db.CustomerTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<CustomerType> baseListReturnType = new BaseListReturnType<CustomerType>();

                IQueryable<CustomerType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCustomerType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<CustomerType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCustomerTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<CustomerType> GetAllCustomerTypesWithCustomersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CustomerType, bool>> expression = null,bool shouldRemap = false, Func<CustomerType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomerTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"Customers"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<CustomerType> GetAllCustomerTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CustomerType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<CustomerType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCustomerTypesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<CustomerType> GetAllCustomerTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<CustomerType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<CustomerType, dynamic> orderExpression = null)
            {
				IQueryable<CustomerType> query =  db.CustomerTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<CustomerType> baseListReturnType = new BaseListReturnType<CustomerType>();

                IQueryable<CustomerType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdCustomerType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<CustomerType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCustomerTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<CustomerType> GetAllCustomerTypesWithCustomersDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CustomerType, bool>> expression = null,bool shouldRemap = false, Func<CustomerType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomerTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Customers"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<CustomerType> GetAllCustomerTypesWithCustomersDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllCustomerTypeWitDetails(new List<string>(){"Customers"},shouldRemap);
					}
				}
			

			public BaseListReturnType<CustomerType> GetAllCustomerTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllCustomerTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<CustomerType> GetAllCustomerTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<CustomerType> query =  db.CustomerTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<CustomerType> baseListReturnType = new BaseListReturnType<CustomerType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCustomerTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public CustomerType GetCustomerType(long idCustomerType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCustomerType(idCustomerType, db,shouldRemap);
                }
            }
                        public CustomerType GetCustomerType(long idCustomerType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapCustomerTypeSingle(db.CustomerTypes.Where(p => p.IdCustomerType == idCustomerType && p.IsDeactivated != true).FirstOrDefault());

                return db.CustomerTypes.Where(p => p.IdCustomerType == idCustomerType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public CustomerType GetCustomerTypeCustom( Expression<Func<CustomerType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCustomerTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public CustomerType GetCustomerTypeCustom( SubscriptionEntities db , Expression<Func<CustomerType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<CustomerType> query =  db.CustomerTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapCustomerTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<CustomerType> GetCustomerTypeCustomList( Expression<Func<CustomerType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<CustomerType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetCustomerTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<CustomerType> GetCustomerTypeCustomList(  SubscriptionEntities db , Expression<Func<CustomerType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<CustomerType, dynamic> orderExpression = null)
			{
				IQueryable<CustomerType> query =  db.CustomerTypes;
                BaseListReturnType<CustomerType> baseListReturnType = new BaseListReturnType<CustomerType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapCustomerTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public CustomerType GetCustomerTypeWithCustomersDetails(long idCustomerType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetCustomerTypeWithDetails(idCustomerType,new List<string>(){"Customers"},shouldRemap);
					}
				}

            //IdCustomerType -- Many


			


			public CustomerType GetCustomerTypeWithDetails(long idCustomerType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCustomerTypeWithDetails(idCustomerType, db,includes,shouldRemap);
                }
            }

            public CustomerType GetCustomerTypeWithDetails(long idCustomerType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<CustomerType> query =  db.CustomerTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapCustomerTypeSingle(query
						.Where(p => p.IdCustomerType == idCustomerType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdCustomerType == idCustomerType && p.IsDeactivated != true).FirstOrDefault();
            }

            public CustomerType GetCustomerTypeWitDetails(long idCustomerType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCustomerTypeWitDetails(idCustomerType, db,shouldRemap);
                }
            }

            public CustomerType GetCustomerTypeWitDetails(long idCustomerType, SubscriptionEntities db,bool shouldRemap = false)
            {
				CustomerType _CustomerType = db.CustomerTypes

					.Include("Customers")
								.Where(p => p.IdCustomerType == idCustomerType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapCustomerTypeSingle(_CustomerType);

				return  _CustomerType;
            }

            public List<CustomerType> GetCustomerTypeListByIdList(List<long> customerTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetCustomerTypeListByIdList(customerTypeIds, db);
                }
            }
            public List<CustomerType> GetCustomerTypeListByIdList(List<long> customerTypeIds, SubscriptionEntities db)
            {
                return db.CustomerTypes.Where(p => p.IsDeactivated != true && customerTypeIds.Contains(p.IdCustomerType.Value)).ToList();
            }


            public void SaveCustomerType(CustomerType customerType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveCustomerType(customerType, db);
                }
            }

            public void SaveCustomerType(CustomerType customerType, SubscriptionEntities db)
            {
				                
                if (customerType.IdCustomerType.HasValue){
					var customerTypeFromDb = db.CustomerTypes.Where(p => p.IdCustomerType == customerType.IdCustomerType).FirstOrDefault();
													customerTypeFromDb.Description = customerType.Description;
													customerTypeFromDb.IsDeactivated = customerType.IsDeactivated;
									}
                else{
                                        db.CustomerTypes.Add(customerType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyCustomerType(CustomerType customerType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyCustomerType(customerType, db);
                }
            }

            public void SaveOnlyCustomerType(CustomerType customerType, SubscriptionEntities db)
            {
			                    if (customerType.IdCustomerType.HasValue){
					var customerTypeFromDb = db.CustomerTypes.Where(p => p.IdCustomerType == customerType.IdCustomerType).FirstOrDefault();
													customerTypeFromDb.Description = customerType.Description;
													customerTypeFromDb.IsDeactivated = customerType.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					CustomerType _customerType = new CustomerType();
																	_customerType.Description = customerType.Description;
													_customerType.IsDeactivated = customerType.IsDeactivated;
					

                    db.CustomerTypes.Add(_customerType);
					db.SaveChanges();
					customerType.IdCustomerType =  _customerType.IdCustomerType;
                    
                }
            }

            public void DeleteCustomerType(CustomerType customerType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteCustomerType(customerType, db);
                }
            }

            public void DeleteCustomerType(CustomerType customerType, SubscriptionEntities db)
            {
								var customerTypeFromDb = GetCustomerType(customerType.IdCustomerType.Value,db);
				customerTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyCustomerType(CustomerType customerType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyCustomerType(customerType, db);
                }
            }

            public void DeletePermanentlyCustomerType(CustomerType customerType, SubscriptionEntities db)
            {
								var customerTypeFromDb = GetCustomerType(customerType.IdCustomerType.Value,db);
				
				db.CustomerTypes.Remove(customerTypeFromDb);
                db.SaveChanges();
            }


            
							public List<Customer> UpdateCustomersForCustomerTypeWithoutSavingNewItem(List<Customer> newCustomers,long idCustomerType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCustomersForCustomerTypeWithoutSavingNewItem(newCustomers,idCustomerType,db);
                                }
                            }

							public List<Customer> UpdateCustomersForCustomerTypeWithoutSavingNewItem(List<Customer> newCustomers,long idCustomerType, SubscriptionEntities  db)
                            {
                                Expression<Func<Customer, bool>> expressionBuilder = p => p.IdCustomerType == idCustomerType;
                                var oldCustomers = DaoFactories.Instance.CustomerDao.GetCustomerCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCustomers.EntityList.Select(pc => pc.IdCustomer).Except(newCustomers.Where(pc => pc.IdCustomer.HasValue).Select(pc => pc.IdCustomer)).ToList();
                                var itemsTobeDeleted = oldCustomers.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCustomer)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newCustomers;
                            }


                            public List<Customer> UpdateCustomersForCustomerType(List<Customer> newCustomers,long idCustomerType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCustomersForCustomerType(newCustomers,idCustomerType,db);
                                }
                            }

                            public List<Customer> UpdateCustomersForCustomerType(List<Customer> newCustomers,long idCustomerType, SubscriptionEntities  db)
                            {
                                Expression<Func<Customer, bool>> expressionBuilder = p => p.IdCustomerType == idCustomerType;
                                var oldCustomers = DaoFactories.Instance.CustomerDao.GetCustomerCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCustomers.EntityList.Select(pc => pc.IdCustomer).Except(newCustomers.Where(pc => pc.IdCustomer.HasValue).Select(pc => pc.IdCustomer)).ToList();
                                var itemsTobeDeleted = oldCustomers.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCustomer)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newCustomers.ForEach(pc =>
                                {
                                    pc.IdCustomerType = idCustomerType;
                                    DaoFactories.Instance.CustomerDao.SaveOnlyCustomer(pc, db);
                                });
                                return newCustomers;
                            }

                        


    



		}
			public partial class DocumentDao :IDocumentDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public DocumentDao(){
			
			}

			public DocumentDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Document> GetAllDocuments(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllDocuments(db, shouldRemap);
                }
            }

            public List<Document> GetAllDocuments(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapDocumentList(db.Documents.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Documents.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Document> GetAllDocumentsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllDocumentsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Document> GetAllDocumentsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Document, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
            {
				IQueryable<Document> query =  db.Documents;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Document> baseListReturnType = new BaseListReturnType<Document>();

                IQueryable<Document> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdDocument" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Document, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.FileName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.FileName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.FileExtension.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.PhysicalFilePath.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ServerFilePath.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapDocumentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Document> GetAllDocumentsWithBankStatementStagingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithCompaniesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPage(sortingPagingInfo, db,expression,new List<string>(){"Companies"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithDocumentTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPage(sortingPagingInfo, db,expression,new List<string>(){"DocumentType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithParameterDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPage(sortingPagingInfo, db,expression,new List<string>(){"Parameter"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithParameter1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPage(sortingPagingInfo, db,expression,new List<string>(){"Parameter1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithTemporaryTransactionOrdersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPage(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactionOrders"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Document> GetAllDocumentsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllDocumentsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Document> GetAllDocumentsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Document, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
            {
				IQueryable<Document> query =  db.Documents;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Document> baseListReturnType = new BaseListReturnType<Document>();

                IQueryable<Document> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdDocument" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Document, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapDocumentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Document> GetAllDocumentsWithBankStatementStagingsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithCompaniesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Companies"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithDocumentTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"DocumentType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithParameterDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Parameter"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithParameter1DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Parameter1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithTemporaryTransactionOrdersDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactionOrders"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap = false, Func<Document, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Document> GetAllDocumentsWithBankStatementStagingsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentWitDetails(new List<string>(){"BankStatementStagings"},shouldRemap);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithCompaniesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentWitDetails(new List<string>(){"Companies"},shouldRemap);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithDocumentTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentWitDetails(new List<string>(){"DocumentType"},shouldRemap);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithParameterDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentWitDetails(new List<string>(){"Parameter"},shouldRemap);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithParameter1Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentWitDetails(new List<string>(){"Parameter1"},shouldRemap);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithTemporaryTransactionOrdersDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentWitDetails(new List<string>(){"TemporaryTransactionOrders"},shouldRemap);
					}
				}
							public BaseListReturnType<Document> GetAllDocumentsWithTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentWitDetails(new List<string>(){"Transactions"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Document> GetAllDocumentWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllDocumentWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Document> GetAllDocumentWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Document> query =  db.Documents;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Document> baseListReturnType = new BaseListReturnType<Document>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapDocumentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Document GetDocument(long idDocument,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetDocument(idDocument, db,shouldRemap);
                }
            }
                        public Document GetDocument(long idDocument, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapDocumentSingle(db.Documents.Where(p => p.IdDocument == idDocument && p.IsDeactivated != true).FirstOrDefault());

                return db.Documents.Where(p => p.IdDocument == idDocument && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Document GetDocumentCustom( Expression<Func<Document, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetDocumentCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Document GetDocumentCustom( SubscriptionEntities db , Expression<Func<Document, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Document> query =  db.Documents;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapDocumentSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Document> GetDocumentCustomList( Expression<Func<Document, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Document, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetDocumentCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Document> GetDocumentCustomList(  SubscriptionEntities db , Expression<Func<Document, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Document, dynamic> orderExpression = null)
			{
				IQueryable<Document> query =  db.Documents;
                BaseListReturnType<Document> baseListReturnType = new BaseListReturnType<Document>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapDocumentList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Document GetDocumentWithBankStatementStagingsDetails(long idDocument,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetDocumentWithDetails(idDocument,new List<string>(){"BankStatementStagings"},shouldRemap);
					}
				}

            //IdDocument -- Many


							public Document GetDocumentWithCompaniesDetails(long idDocument,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetDocumentWithDetails(idDocument,new List<string>(){"Companies"},shouldRemap);
					}
				}

            //IdCompanyLogo -- Many


							public Document GetDocumentWithDocumentTypeDetails(long idDocument,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetDocumentWithDetails(idDocument,new List<string>(){"DocumentType"},shouldRemap);
					}
				}

            //IdDocumentType -- ZeroOrOne

                public BaseListReturnType<Document> GetAllDocumentListByDocumentType(long idDocumentType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllDocumentListByDocumentType(idDocumentType, db);
                    }
                }
                public BaseListReturnType<Document> GetAllDocumentListByDocumentType(long idDocumentType, SubscriptionEntities db)
                {
                    Expression<Func<Document, bool>> expression = property=> property.IdDocumentType == idDocumentType && property.IsDeactivated !=true;
                    return GetDocumentCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Document> GetAllDocumentListByDocumentTypeByPage(long idDocumentType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllDocumentListByDocumentTypeByPage(idDocumentType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Document> GetAllDocumentListByDocumentTypeByPage(long idDocumentType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Document, bool>> expression = property => property.IdDocumentType == idDocumentType && property.IsDeactivated !=true;
                    return GetAllDocumentsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Document GetDocumentWithParameterDetails(long idDocument,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetDocumentWithDetails(idDocument,new List<string>(){"Parameter"},shouldRemap);
					}
				}

            //IdParameterBasePhysicalFilePath -- ZeroOrOne

                public BaseListReturnType<Document> GetAllDocumentListByParameter(long idParameter)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllDocumentListByParameter(idParameter, db);
                    }
                }
                public BaseListReturnType<Document> GetAllDocumentListByParameter(long idParameter, SubscriptionEntities db)
                {
                    Expression<Func<Document, bool>> expression = property=> property.IdParameterBasePhysicalFilePath == idParameter && property.IsDeactivated !=true;
                    return GetDocumentCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Document> GetAllDocumentListByParameterByPage(long idParameter, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllDocumentListByParameterByPage(idParameter, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Document> GetAllDocumentListByParameterByPage(long idParameter, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Document, bool>> expression = property => property.IdParameterBasePhysicalFilePath == idParameter && property.IsDeactivated !=true;
                    return GetAllDocumentsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Document GetDocumentWithParameter1Details(long idDocument,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetDocumentWithDetails(idDocument,new List<string>(){"Parameter1"},shouldRemap);
					}
				}

            //IdParameterBaseServerUrl -- ZeroOrOne

                public BaseListReturnType<Document> GetAllDocumentListByParameter1(long idParameter1)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllDocumentListByParameter1(idParameter1, db);
                    }
                }
                public BaseListReturnType<Document> GetAllDocumentListByParameter1(long idParameter1, SubscriptionEntities db)
                {
                    Expression<Func<Document, bool>> expression = property=> property.IdParameterBaseServerUrl == idParameter1 && property.IsDeactivated !=true;
                    return GetDocumentCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Document> GetAllDocumentListByParameter1ByPage(long idParameter1, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllDocumentListByParameter1ByPage(idParameter1, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Document> GetAllDocumentListByParameter1ByPage(long idParameter1, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Document, bool>> expression = property => property.IdParameterBaseServerUrl == idParameter1 && property.IsDeactivated !=true;
                    return GetAllDocumentsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Document GetDocumentWithTemporaryTransactionOrdersDetails(long idDocument,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetDocumentWithDetails(idDocument,new List<string>(){"TemporaryTransactionOrders"},shouldRemap);
					}
				}

            //IdSignatureDocument -- Many


							public Document GetDocumentWithTransactionsDetails(long idDocument,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetDocumentWithDetails(idDocument,new List<string>(){"Transactions"},shouldRemap);
					}
				}

            //IdSignatureDocument -- Many


			


			public Document GetDocumentWithDetails(long idDocument, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetDocumentWithDetails(idDocument, db,includes,shouldRemap);
                }
            }

            public Document GetDocumentWithDetails(long idDocument, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Document> query =  db.Documents;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapDocumentSingle(query
						.Where(p => p.IdDocument == idDocument && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdDocument == idDocument && p.IsDeactivated != true).FirstOrDefault();
            }

            public Document GetDocumentWitDetails(long idDocument,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetDocumentWitDetails(idDocument, db,shouldRemap);
                }
            }

            public Document GetDocumentWitDetails(long idDocument, SubscriptionEntities db,bool shouldRemap = false)
            {
				Document _Document = db.Documents

					.Include("BankStatementStagings")
					.Include("Companies")
					.Include("DocumentType")
					.Include("Parameter")
					.Include("Parameter1")
					.Include("TemporaryTransactionOrders")
					.Include("Transactions")
								.Where(p => p.IdDocument == idDocument && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapDocumentSingle(_Document);

				return  _Document;
            }

            public List<Document> GetDocumentListByIdList(List<long> documentIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetDocumentListByIdList(documentIds, db);
                }
            }
            public List<Document> GetDocumentListByIdList(List<long> documentIds, SubscriptionEntities db)
            {
                return db.Documents.Where(p => p.IsDeactivated != true && documentIds.Contains(p.IdDocument.Value)).ToList();
            }


            public void SaveDocument(Document document)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveDocument(document, db);
                }
            }

            public void SaveDocument(Document document, SubscriptionEntities db)
            {
									if (document.DocumentType != null) 
						DaoFactories.Instance.DocumentTypeDao.SaveDocumentType(document.DocumentType, db);
									if (document.Parameter != null) 
						DaoFactories.Instance.ParameterDao.SaveParameter(document.Parameter, db);
									if (document.Parameter1 != null) 
						DaoFactories.Instance.ParameterDao.SaveParameter(document.Parameter1, db);
				                
                if (document.IdDocument.HasValue){
					var documentFromDb = db.Documents.Where(p => p.IdDocument == document.IdDocument).FirstOrDefault();
													documentFromDb.FileName = document.FileName;
													documentFromDb.FileExtension = document.FileExtension;
													documentFromDb.PhysicalFilePath = document.PhysicalFilePath;
													documentFromDb.DocumentOrder = document.DocumentOrder;
													documentFromDb.IsDeactivated = document.IsDeactivated;
													documentFromDb.IdDocumentType = document.IdDocumentType;
													documentFromDb.IdParameterBasePhysicalFilePath = document.IdParameterBasePhysicalFilePath;
													documentFromDb.IdParameterBaseServerUrl = document.IdParameterBaseServerUrl;
													documentFromDb.ServerFilePath = document.ServerFilePath;
									}
                else{
                                                //fix for saving without duplicating items in db
                              document.DocumentType = null;
                                                        //fix for saving without duplicating items in db
                              document.Parameter = null;
                                                        //fix for saving without duplicating items in db
                              document.Parameter1 = null;
                                                db.Documents.Add(document);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyDocument(Document document)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyDocument(document, db);
                }
            }

            public void SaveOnlyDocument(Document document, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // document.DocumentType = null;
                                                        //fix for saving without duplicating items in db
                             // document.Parameter = null;
                                                        //fix for saving without duplicating items in db
                             // document.Parameter1 = null;
                                            if (document.IdDocument.HasValue){
					var documentFromDb = db.Documents.Where(p => p.IdDocument == document.IdDocument).FirstOrDefault();
													documentFromDb.FileName = document.FileName;
													documentFromDb.FileExtension = document.FileExtension;
													documentFromDb.PhysicalFilePath = document.PhysicalFilePath;
													documentFromDb.DocumentOrder = document.DocumentOrder;
													documentFromDb.IsDeactivated = document.IsDeactivated;
													documentFromDb.IdDocumentType = document.IdDocumentType;
													documentFromDb.IdParameterBasePhysicalFilePath = document.IdParameterBasePhysicalFilePath;
													documentFromDb.IdParameterBaseServerUrl = document.IdParameterBaseServerUrl;
													documentFromDb.ServerFilePath = document.ServerFilePath;
										 db.SaveChanges();

				}
                else{
					Document _document = new Document();
																	_document.FileName = document.FileName;
													_document.FileExtension = document.FileExtension;
													_document.PhysicalFilePath = document.PhysicalFilePath;
													_document.DocumentOrder = document.DocumentOrder;
													_document.IsDeactivated = document.IsDeactivated;
													_document.IdDocumentType = document.IdDocumentType;
													_document.IdParameterBasePhysicalFilePath = document.IdParameterBasePhysicalFilePath;
													_document.IdParameterBaseServerUrl = document.IdParameterBaseServerUrl;
													_document.ServerFilePath = document.ServerFilePath;
					

                    db.Documents.Add(_document);
					db.SaveChanges();
					document.IdDocument =  _document.IdDocument;
                    
                }
            }

            public void DeleteDocument(Document document)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteDocument(document, db);
                }
            }

            public void DeleteDocument(Document document, SubscriptionEntities db)
            {
								var documentFromDb = GetDocument(document.IdDocument.Value,db);
				documentFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyDocument(Document document)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyDocument(document, db);
                }
            }

            public void DeletePermanentlyDocument(Document document, SubscriptionEntities db)
            {
								var documentFromDb = GetDocument(document.IdDocument.Value,db);
				
				db.Documents.Remove(documentFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementStaging> UpdateBankStatementStagingsForDocumentWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idDocument)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingsForDocumentWithoutSavingNewItem(newBankStatementStagings,idDocument,db);
                                }
                            }

							public List<BankStatementStaging> UpdateBankStatementStagingsForDocumentWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idDocument, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStaging, bool>> expressionBuilder = p => p.IdDocument == idDocument;
                                var oldBankStatementStagings = DaoFactories.Instance.BankStatementStagingDao.GetBankStatementStagingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagings.EntityList.Select(pc => pc.IdBankStatementStaging).Except(newBankStatementStagings.Where(pc => pc.IdBankStatementStaging.HasValue).Select(pc => pc.IdBankStatementStaging)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStaging)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagings;
                            }


                            public List<BankStatementStaging> UpdateBankStatementStagingsForDocument(List<BankStatementStaging> newBankStatementStagings,long idDocument)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingsForDocument(newBankStatementStagings,idDocument,db);
                                }
                            }

                            public List<BankStatementStaging> UpdateBankStatementStagingsForDocument(List<BankStatementStaging> newBankStatementStagings,long idDocument, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStaging, bool>> expressionBuilder = p => p.IdDocument == idDocument;
                                var oldBankStatementStagings = DaoFactories.Instance.BankStatementStagingDao.GetBankStatementStagingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagings.EntityList.Select(pc => pc.IdBankStatementStaging).Except(newBankStatementStagings.Where(pc => pc.IdBankStatementStaging.HasValue).Select(pc => pc.IdBankStatementStaging)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStaging)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagings.ForEach(pc =>
                                {
                                    pc.IdDocument = idDocument;
                                    DaoFactories.Instance.BankStatementStagingDao.SaveOnlyBankStatementStaging(pc, db);
                                });
                                return newBankStatementStagings;
                            }

                        
							public List<Company> UpdateCompaniesForDocumentWithoutSavingNewItem(List<Company> newCompanies,long idDocument)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCompaniesForDocumentWithoutSavingNewItem(newCompanies,idDocument,db);
                                }
                            }

							public List<Company> UpdateCompaniesForDocumentWithoutSavingNewItem(List<Company> newCompanies,long idDocument, SubscriptionEntities  db)
                            {
                                Expression<Func<Company, bool>> expressionBuilder = p => p.IdCompanyLogo == idDocument;
                                var oldCompanies = DaoFactories.Instance.CompanyDao.GetCompanyCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCompanies.EntityList.Select(pc => pc.IdCompany).Except(newCompanies.Where(pc => pc.IdCompany.HasValue).Select(pc => pc.IdCompany)).ToList();
                                var itemsTobeDeleted = oldCompanies.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCompany)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newCompanies;
                            }


                            public List<Company> UpdateCompaniesForDocument(List<Company> newCompanies,long idDocument)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCompaniesForDocument(newCompanies,idDocument,db);
                                }
                            }

                            public List<Company> UpdateCompaniesForDocument(List<Company> newCompanies,long idDocument, SubscriptionEntities  db)
                            {
                                Expression<Func<Company, bool>> expressionBuilder = p => p.IdCompanyLogo == idDocument;
                                var oldCompanies = DaoFactories.Instance.CompanyDao.GetCompanyCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCompanies.EntityList.Select(pc => pc.IdCompany).Except(newCompanies.Where(pc => pc.IdCompany.HasValue).Select(pc => pc.IdCompany)).ToList();
                                var itemsTobeDeleted = oldCompanies.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCompany)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newCompanies.ForEach(pc =>
                                {
                                    pc.IdCompanyLogo = idDocument;
                                    DaoFactories.Instance.CompanyDao.SaveOnlyCompany(pc, db);
                                });
                                return newCompanies;
                            }

                        
							public List<TemporaryTransactionOrder> UpdateTemporaryTransactionOrdersForDocumentWithoutSavingNewItem(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idDocument)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionOrdersForDocumentWithoutSavingNewItem(newTemporaryTransactionOrders,idDocument,db);
                                }
                            }

							public List<TemporaryTransactionOrder> UpdateTemporaryTransactionOrdersForDocumentWithoutSavingNewItem(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idDocument, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransactionOrder, bool>> expressionBuilder = p => p.IdSignatureDocument == idDocument;
                                var oldTemporaryTransactionOrders = DaoFactories.Instance.TemporaryTransactionOrderDao.GetTemporaryTransactionOrderCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactionOrders.EntityList.Select(pc => pc.IdTemporaryTransactionOrder).Except(newTemporaryTransactionOrders.Where(pc => pc.IdTemporaryTransactionOrder.HasValue).Select(pc => pc.IdTemporaryTransactionOrder)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactionOrders.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransactionOrder)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTemporaryTransactionOrders;
                            }


                            public List<TemporaryTransactionOrder> UpdateTemporaryTransactionOrdersForDocument(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idDocument)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionOrdersForDocument(newTemporaryTransactionOrders,idDocument,db);
                                }
                            }

                            public List<TemporaryTransactionOrder> UpdateTemporaryTransactionOrdersForDocument(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idDocument, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransactionOrder, bool>> expressionBuilder = p => p.IdSignatureDocument == idDocument;
                                var oldTemporaryTransactionOrders = DaoFactories.Instance.TemporaryTransactionOrderDao.GetTemporaryTransactionOrderCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactionOrders.EntityList.Select(pc => pc.IdTemporaryTransactionOrder).Except(newTemporaryTransactionOrders.Where(pc => pc.IdTemporaryTransactionOrder.HasValue).Select(pc => pc.IdTemporaryTransactionOrder)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactionOrders.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransactionOrder)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTemporaryTransactionOrders.ForEach(pc =>
                                {
                                    pc.IdSignatureDocument = idDocument;
                                    DaoFactories.Instance.TemporaryTransactionOrderDao.SaveOnlyTemporaryTransactionOrder(pc, db);
                                });
                                return newTemporaryTransactionOrders;
                            }

                        
							public List<Transaction> UpdateTransactionsForDocumentWithoutSavingNewItem(List<Transaction> newTransactions,long idDocument)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForDocumentWithoutSavingNewItem(newTransactions,idDocument,db);
                                }
                            }

							public List<Transaction> UpdateTransactionsForDocumentWithoutSavingNewItem(List<Transaction> newTransactions,long idDocument, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdSignatureDocument == idDocument;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactions;
                            }


                            public List<Transaction> UpdateTransactionsForDocument(List<Transaction> newTransactions,long idDocument)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForDocument(newTransactions,idDocument,db);
                                }
                            }

                            public List<Transaction> UpdateTransactionsForDocument(List<Transaction> newTransactions,long idDocument, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdSignatureDocument == idDocument;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactions.ForEach(pc =>
                                {
                                    pc.IdSignatureDocument = idDocument;
                                    DaoFactories.Instance.TransactionDao.SaveOnlyTransaction(pc, db);
                                });
                                return newTransactions;
                            }

                        


    



		}
			public partial class DocumentTypeDao :IDocumentTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public DocumentTypeDao(){
			
			}

			public DocumentTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<DocumentType> GetAllDocumentTypes(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllDocumentTypes(db, shouldRemap);
                }
            }

            public List<DocumentType> GetAllDocumentTypes(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapDocumentTypeList(db.DocumentTypes.Where(p => p.IsDeactivated != true).ToList());
				
				return db.DocumentTypes.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<DocumentType> GetAllDocumentTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<DocumentType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<DocumentType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllDocumentTypesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<DocumentType> GetAllDocumentTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<DocumentType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<DocumentType, dynamic> orderExpression = null)
            {
				IQueryable<DocumentType> query =  db.DocumentTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<DocumentType> baseListReturnType = new BaseListReturnType<DocumentType>();

                IQueryable<DocumentType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdDocumentType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<DocumentType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapDocumentTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<DocumentType> GetAllDocumentTypesWithDocumentsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<DocumentType, bool>> expression = null,bool shouldRemap = false, Func<DocumentType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"Documents"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<DocumentType> GetAllDocumentTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<DocumentType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<DocumentType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllDocumentTypesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<DocumentType> GetAllDocumentTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<DocumentType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<DocumentType, dynamic> orderExpression = null)
            {
				IQueryable<DocumentType> query =  db.DocumentTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<DocumentType> baseListReturnType = new BaseListReturnType<DocumentType>();

                IQueryable<DocumentType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdDocumentType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<DocumentType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapDocumentTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<DocumentType> GetAllDocumentTypesWithDocumentsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<DocumentType, bool>> expression = null,bool shouldRemap = false, Func<DocumentType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Documents"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<DocumentType> GetAllDocumentTypesWithDocumentsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllDocumentTypeWitDetails(new List<string>(){"Documents"},shouldRemap);
					}
				}
			

			public BaseListReturnType<DocumentType> GetAllDocumentTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllDocumentTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<DocumentType> GetAllDocumentTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<DocumentType> query =  db.DocumentTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<DocumentType> baseListReturnType = new BaseListReturnType<DocumentType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapDocumentTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public DocumentType GetDocumentType(long idDocumentType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetDocumentType(idDocumentType, db,shouldRemap);
                }
            }
                        public DocumentType GetDocumentType(long idDocumentType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapDocumentTypeSingle(db.DocumentTypes.Where(p => p.IdDocumentType == idDocumentType && p.IsDeactivated != true).FirstOrDefault());

                return db.DocumentTypes.Where(p => p.IdDocumentType == idDocumentType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public DocumentType GetDocumentTypeCustom( Expression<Func<DocumentType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetDocumentTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public DocumentType GetDocumentTypeCustom( SubscriptionEntities db , Expression<Func<DocumentType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<DocumentType> query =  db.DocumentTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapDocumentTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<DocumentType> GetDocumentTypeCustomList( Expression<Func<DocumentType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<DocumentType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetDocumentTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<DocumentType> GetDocumentTypeCustomList(  SubscriptionEntities db , Expression<Func<DocumentType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<DocumentType, dynamic> orderExpression = null)
			{
				IQueryable<DocumentType> query =  db.DocumentTypes;
                BaseListReturnType<DocumentType> baseListReturnType = new BaseListReturnType<DocumentType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapDocumentTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public DocumentType GetDocumentTypeWithDocumentsDetails(long idDocumentType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetDocumentTypeWithDetails(idDocumentType,new List<string>(){"Documents"},shouldRemap);
					}
				}

            //IdDocumentType -- Many


			


			public DocumentType GetDocumentTypeWithDetails(long idDocumentType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetDocumentTypeWithDetails(idDocumentType, db,includes,shouldRemap);
                }
            }

            public DocumentType GetDocumentTypeWithDetails(long idDocumentType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<DocumentType> query =  db.DocumentTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapDocumentTypeSingle(query
						.Where(p => p.IdDocumentType == idDocumentType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdDocumentType == idDocumentType && p.IsDeactivated != true).FirstOrDefault();
            }

            public DocumentType GetDocumentTypeWitDetails(long idDocumentType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetDocumentTypeWitDetails(idDocumentType, db,shouldRemap);
                }
            }

            public DocumentType GetDocumentTypeWitDetails(long idDocumentType, SubscriptionEntities db,bool shouldRemap = false)
            {
				DocumentType _DocumentType = db.DocumentTypes

					.Include("Documents")
								.Where(p => p.IdDocumentType == idDocumentType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapDocumentTypeSingle(_DocumentType);

				return  _DocumentType;
            }

            public List<DocumentType> GetDocumentTypeListByIdList(List<long> documentTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetDocumentTypeListByIdList(documentTypeIds, db);
                }
            }
            public List<DocumentType> GetDocumentTypeListByIdList(List<long> documentTypeIds, SubscriptionEntities db)
            {
                return db.DocumentTypes.Where(p => p.IsDeactivated != true && documentTypeIds.Contains(p.IdDocumentType.Value)).ToList();
            }


            public void SaveDocumentType(DocumentType documentType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveDocumentType(documentType, db);
                }
            }

            public void SaveDocumentType(DocumentType documentType, SubscriptionEntities db)
            {
				                
                if (documentType.IdDocumentType.HasValue){
					var documentTypeFromDb = db.DocumentTypes.Where(p => p.IdDocumentType == documentType.IdDocumentType).FirstOrDefault();
													documentTypeFromDb.Description = documentType.Description;
													documentTypeFromDb.IsDeactivated = documentType.IsDeactivated;
									}
                else{
                                        db.DocumentTypes.Add(documentType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyDocumentType(DocumentType documentType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyDocumentType(documentType, db);
                }
            }

            public void SaveOnlyDocumentType(DocumentType documentType, SubscriptionEntities db)
            {
			                    if (documentType.IdDocumentType.HasValue){
					var documentTypeFromDb = db.DocumentTypes.Where(p => p.IdDocumentType == documentType.IdDocumentType).FirstOrDefault();
													documentTypeFromDb.Description = documentType.Description;
													documentTypeFromDb.IsDeactivated = documentType.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					DocumentType _documentType = new DocumentType();
																	_documentType.Description = documentType.Description;
													_documentType.IsDeactivated = documentType.IsDeactivated;
					

                    db.DocumentTypes.Add(_documentType);
					db.SaveChanges();
					documentType.IdDocumentType =  _documentType.IdDocumentType;
                    
                }
            }

            public void DeleteDocumentType(DocumentType documentType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteDocumentType(documentType, db);
                }
            }

            public void DeleteDocumentType(DocumentType documentType, SubscriptionEntities db)
            {
								var documentTypeFromDb = GetDocumentType(documentType.IdDocumentType.Value,db);
				documentTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyDocumentType(DocumentType documentType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyDocumentType(documentType, db);
                }
            }

            public void DeletePermanentlyDocumentType(DocumentType documentType, SubscriptionEntities db)
            {
								var documentTypeFromDb = GetDocumentType(documentType.IdDocumentType.Value,db);
				
				db.DocumentTypes.Remove(documentTypeFromDb);
                db.SaveChanges();
            }


            
							public List<Document> UpdateDocumentsForDocumentTypeWithoutSavingNewItem(List<Document> newDocuments,long idDocumentType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateDocumentsForDocumentTypeWithoutSavingNewItem(newDocuments,idDocumentType,db);
                                }
                            }

							public List<Document> UpdateDocumentsForDocumentTypeWithoutSavingNewItem(List<Document> newDocuments,long idDocumentType, SubscriptionEntities  db)
                            {
                                Expression<Func<Document, bool>> expressionBuilder = p => p.IdDocumentType == idDocumentType;
                                var oldDocuments = DaoFactories.Instance.DocumentDao.GetDocumentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldDocuments.EntityList.Select(pc => pc.IdDocument).Except(newDocuments.Where(pc => pc.IdDocument.HasValue).Select(pc => pc.IdDocument)).ToList();
                                var itemsTobeDeleted = oldDocuments.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdDocument)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newDocuments;
                            }


                            public List<Document> UpdateDocumentsForDocumentType(List<Document> newDocuments,long idDocumentType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateDocumentsForDocumentType(newDocuments,idDocumentType,db);
                                }
                            }

                            public List<Document> UpdateDocumentsForDocumentType(List<Document> newDocuments,long idDocumentType, SubscriptionEntities  db)
                            {
                                Expression<Func<Document, bool>> expressionBuilder = p => p.IdDocumentType == idDocumentType;
                                var oldDocuments = DaoFactories.Instance.DocumentDao.GetDocumentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldDocuments.EntityList.Select(pc => pc.IdDocument).Except(newDocuments.Where(pc => pc.IdDocument.HasValue).Select(pc => pc.IdDocument)).ToList();
                                var itemsTobeDeleted = oldDocuments.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdDocument)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newDocuments.ForEach(pc =>
                                {
                                    pc.IdDocumentType = idDocumentType;
                                    DaoFactories.Instance.DocumentDao.SaveOnlyDocument(pc, db);
                                });
                                return newDocuments;
                            }

                        


    



		}
			public partial class EndTypeDao :IEndTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public EndTypeDao(){
			
			}

			public EndTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<EndType> GetAllEndTypes(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllEndTypes(db, shouldRemap);
                }
            }

            public List<EndType> GetAllEndTypes(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapEndTypeList(db.EndTypes.Where(p => p.IsDeactivated != true).ToList());
				
				return db.EndTypes.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<EndType> GetAllEndTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<EndType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<EndType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllEndTypesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<EndType> GetAllEndTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<EndType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<EndType, dynamic> orderExpression = null)
            {
				IQueryable<EndType> query =  db.EndTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<EndType> baseListReturnType = new BaseListReturnType<EndType>();

                IQueryable<EndType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdEndType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<EndType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapEndTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

			



            public BaseListReturnType<EndType> GetAllEndTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<EndType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<EndType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllEndTypesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<EndType> GetAllEndTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<EndType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<EndType, dynamic> orderExpression = null)
            {
				IQueryable<EndType> query =  db.EndTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<EndType> baseListReturnType = new BaseListReturnType<EndType>();

                IQueryable<EndType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdEndType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<EndType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapEndTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

			






			

			public BaseListReturnType<EndType> GetAllEndTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllEndTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<EndType> GetAllEndTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<EndType> query =  db.EndTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<EndType> baseListReturnType = new BaseListReturnType<EndType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapEndTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public EndType GetEndType(long idEndType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetEndType(idEndType, db,shouldRemap);
                }
            }
                        public EndType GetEndType(long idEndType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapEndTypeSingle(db.EndTypes.Where(p => p.IdEndType == idEndType && p.IsDeactivated != true).FirstOrDefault());

                return db.EndTypes.Where(p => p.IdEndType == idEndType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public EndType GetEndTypeCustom( Expression<Func<EndType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetEndTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public EndType GetEndTypeCustom( SubscriptionEntities db , Expression<Func<EndType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<EndType> query =  db.EndTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapEndTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<EndType> GetEndTypeCustomList( Expression<Func<EndType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<EndType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetEndTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<EndType> GetEndTypeCustomList(  SubscriptionEntities db , Expression<Func<EndType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<EndType, dynamic> orderExpression = null)
			{
				IQueryable<EndType> query =  db.EndTypes;
                BaseListReturnType<EndType> baseListReturnType = new BaseListReturnType<EndType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapEndTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
			


			public EndType GetEndTypeWithDetails(long idEndType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetEndTypeWithDetails(idEndType, db,includes,shouldRemap);
                }
            }

            public EndType GetEndTypeWithDetails(long idEndType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<EndType> query =  db.EndTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapEndTypeSingle(query
						.Where(p => p.IdEndType == idEndType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdEndType == idEndType && p.IsDeactivated != true).FirstOrDefault();
            }

            public EndType GetEndTypeWitDetails(long idEndType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetEndTypeWitDetails(idEndType, db,shouldRemap);
                }
            }

            public EndType GetEndTypeWitDetails(long idEndType, SubscriptionEntities db,bool shouldRemap = false)
            {
				EndType _EndType = db.EndTypes

								.Where(p => p.IdEndType == idEndType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapEndTypeSingle(_EndType);

				return  _EndType;
            }

            public List<EndType> GetEndTypeListByIdList(List<long> endTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetEndTypeListByIdList(endTypeIds, db);
                }
            }
            public List<EndType> GetEndTypeListByIdList(List<long> endTypeIds, SubscriptionEntities db)
            {
                return db.EndTypes.Where(p => p.IsDeactivated != true && endTypeIds.Contains(p.IdEndType.Value)).ToList();
            }


            public void SaveEndType(EndType endType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveEndType(endType, db);
                }
            }

            public void SaveEndType(EndType endType, SubscriptionEntities db)
            {
				                
                if (endType.IdEndType.HasValue){
					var endTypeFromDb = db.EndTypes.Where(p => p.IdEndType == endType.IdEndType).FirstOrDefault();
													endTypeFromDb.IsDeactivated = endType.IsDeactivated;
													endTypeFromDb.Description = endType.Description;
									}
                else{
                                        db.EndTypes.Add(endType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyEndType(EndType endType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyEndType(endType, db);
                }
            }

            public void SaveOnlyEndType(EndType endType, SubscriptionEntities db)
            {
			                    if (endType.IdEndType.HasValue){
					var endTypeFromDb = db.EndTypes.Where(p => p.IdEndType == endType.IdEndType).FirstOrDefault();
													endTypeFromDb.IsDeactivated = endType.IsDeactivated;
													endTypeFromDb.Description = endType.Description;
										 db.SaveChanges();

				}
                else{
					EndType _endType = new EndType();
																	_endType.IsDeactivated = endType.IsDeactivated;
													_endType.Description = endType.Description;
					

                    db.EndTypes.Add(_endType);
					db.SaveChanges();
					endType.IdEndType =  _endType.IdEndType;
                    
                }
            }

            public void DeleteEndType(EndType endType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteEndType(endType, db);
                }
            }

            public void DeleteEndType(EndType endType, SubscriptionEntities db)
            {
								var endTypeFromDb = GetEndType(endType.IdEndType.Value,db);
				endTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyEndType(EndType endType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyEndType(endType, db);
                }
            }

            public void DeletePermanentlyEndType(EndType endType, SubscriptionEntities db)
            {
								var endTypeFromDb = GetEndType(endType.IdEndType.Value,db);
				
				db.EndTypes.Remove(endTypeFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class FrequencyDao :IFrequencyDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public FrequencyDao(){
			
			}

			public FrequencyDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Frequency> GetAllFrequencies(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllFrequencies(db, shouldRemap);
                }
            }

            public List<Frequency> GetAllFrequencies(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapFrequencyList(db.Frequencies.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Frequencies.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Frequency> GetAllFrequenciesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Frequency, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Frequency, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllFrequenciesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Frequency> GetAllFrequenciesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Frequency, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Frequency, dynamic> orderExpression = null)
            {
				IQueryable<Frequency> query =  db.Frequencies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Frequency> baseListReturnType = new BaseListReturnType<Frequency>();

                IQueryable<Frequency> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdFrequency" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Frequency, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapFrequencyList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Frequency> GetAllFrequenciesWithScheduleSettingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Frequency, bool>> expression = null,bool shouldRemap = false, Func<Frequency, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllFrequenciesByPage(sortingPagingInfo, db,expression,new List<string>(){"ScheduleSettings"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Frequency> GetAllFrequenciesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Frequency, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Frequency, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllFrequenciesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Frequency> GetAllFrequenciesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Frequency, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Frequency, dynamic> orderExpression = null)
            {
				IQueryable<Frequency> query =  db.Frequencies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Frequency> baseListReturnType = new BaseListReturnType<Frequency>();

                IQueryable<Frequency> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdFrequency" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Frequency, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapFrequencyList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Frequency> GetAllFrequenciesWithScheduleSettingsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Frequency, bool>> expression = null,bool shouldRemap = false, Func<Frequency, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllFrequenciesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"ScheduleSettings"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Frequency> GetAllFrequenciesWithScheduleSettingsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllFrequencyWitDetails(new List<string>(){"ScheduleSettings"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Frequency> GetAllFrequencyWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllFrequencyWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Frequency> GetAllFrequencyWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Frequency> query =  db.Frequencies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Frequency> baseListReturnType = new BaseListReturnType<Frequency>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapFrequencyList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Frequency GetFrequency(long idFrequency,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetFrequency(idFrequency, db,shouldRemap);
                }
            }
                        public Frequency GetFrequency(long idFrequency, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapFrequencySingle(db.Frequencies.Where(p => p.IdFrequency == idFrequency && p.IsDeactivated != true).FirstOrDefault());

                return db.Frequencies.Where(p => p.IdFrequency == idFrequency && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Frequency GetFrequencyCustom( Expression<Func<Frequency, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetFrequencyCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Frequency GetFrequencyCustom( SubscriptionEntities db , Expression<Func<Frequency, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Frequency> query =  db.Frequencies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapFrequencySingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Frequency> GetFrequencyCustomList( Expression<Func<Frequency, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Frequency, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetFrequencyCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Frequency> GetFrequencyCustomList(  SubscriptionEntities db , Expression<Func<Frequency, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Frequency, dynamic> orderExpression = null)
			{
				IQueryable<Frequency> query =  db.Frequencies;
                BaseListReturnType<Frequency> baseListReturnType = new BaseListReturnType<Frequency>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapFrequencyList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Frequency GetFrequencyWithScheduleSettingsDetails(long idFrequency,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetFrequencyWithDetails(idFrequency,new List<string>(){"ScheduleSettings"},shouldRemap);
					}
				}

            //IdFrequency -- Many


			


			public Frequency GetFrequencyWithDetails(long idFrequency, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetFrequencyWithDetails(idFrequency, db,includes,shouldRemap);
                }
            }

            public Frequency GetFrequencyWithDetails(long idFrequency, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Frequency> query =  db.Frequencies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapFrequencySingle(query
						.Where(p => p.IdFrequency == idFrequency && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdFrequency == idFrequency && p.IsDeactivated != true).FirstOrDefault();
            }

            public Frequency GetFrequencyWitDetails(long idFrequency,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetFrequencyWitDetails(idFrequency, db,shouldRemap);
                }
            }

            public Frequency GetFrequencyWitDetails(long idFrequency, SubscriptionEntities db,bool shouldRemap = false)
            {
				Frequency _Frequency = db.Frequencies

					.Include("ScheduleSettings")
								.Where(p => p.IdFrequency == idFrequency && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapFrequencySingle(_Frequency);

				return  _Frequency;
            }

            public List<Frequency> GetFrequencyListByIdList(List<long> frequencyIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetFrequencyListByIdList(frequencyIds, db);
                }
            }
            public List<Frequency> GetFrequencyListByIdList(List<long> frequencyIds, SubscriptionEntities db)
            {
                return db.Frequencies.Where(p => p.IsDeactivated != true && frequencyIds.Contains(p.IdFrequency.Value)).ToList();
            }


            public void SaveFrequency(Frequency frequency)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveFrequency(frequency, db);
                }
            }

            public void SaveFrequency(Frequency frequency, SubscriptionEntities db)
            {
				                
                if (frequency.IdFrequency.HasValue){
					var frequencyFromDb = db.Frequencies.Where(p => p.IdFrequency == frequency.IdFrequency).FirstOrDefault();
													frequencyFromDb.Description = frequency.Description;
													frequencyFromDb.IsDeactivated = frequency.IsDeactivated;
									}
                else{
                                        db.Frequencies.Add(frequency);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyFrequency(Frequency frequency)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyFrequency(frequency, db);
                }
            }

            public void SaveOnlyFrequency(Frequency frequency, SubscriptionEntities db)
            {
			                    if (frequency.IdFrequency.HasValue){
					var frequencyFromDb = db.Frequencies.Where(p => p.IdFrequency == frequency.IdFrequency).FirstOrDefault();
													frequencyFromDb.Description = frequency.Description;
													frequencyFromDb.IsDeactivated = frequency.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Frequency _frequency = new Frequency();
																	_frequency.Description = frequency.Description;
													_frequency.IsDeactivated = frequency.IsDeactivated;
					

                    db.Frequencies.Add(_frequency);
					db.SaveChanges();
					frequency.IdFrequency =  _frequency.IdFrequency;
                    
                }
            }

            public void DeleteFrequency(Frequency frequency)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteFrequency(frequency, db);
                }
            }

            public void DeleteFrequency(Frequency frequency, SubscriptionEntities db)
            {
								var frequencyFromDb = GetFrequency(frequency.IdFrequency.Value,db);
				frequencyFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyFrequency(Frequency frequency)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyFrequency(frequency, db);
                }
            }

            public void DeletePermanentlyFrequency(Frequency frequency, SubscriptionEntities db)
            {
								var frequencyFromDb = GetFrequency(frequency.IdFrequency.Value,db);
				
				db.Frequencies.Remove(frequencyFromDb);
                db.SaveChanges();
            }


            
							public List<ScheduleSetting> UpdateScheduleSettingsForFrequencyWithoutSavingNewItem(List<ScheduleSetting> newScheduleSettings,long idFrequency)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateScheduleSettingsForFrequencyWithoutSavingNewItem(newScheduleSettings,idFrequency,db);
                                }
                            }

							public List<ScheduleSetting> UpdateScheduleSettingsForFrequencyWithoutSavingNewItem(List<ScheduleSetting> newScheduleSettings,long idFrequency, SubscriptionEntities  db)
                            {
                                Expression<Func<ScheduleSetting, bool>> expressionBuilder = p => p.IdFrequency == idFrequency;
                                var oldScheduleSettings = DaoFactories.Instance.ScheduleSettingDao.GetScheduleSettingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldScheduleSettings.EntityList.Select(pc => pc.IdScheduleSetting).Except(newScheduleSettings.Where(pc => pc.IdScheduleSetting.HasValue).Select(pc => pc.IdScheduleSetting)).ToList();
                                var itemsTobeDeleted = oldScheduleSettings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdScheduleSetting)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newScheduleSettings;
                            }


                            public List<ScheduleSetting> UpdateScheduleSettingsForFrequency(List<ScheduleSetting> newScheduleSettings,long idFrequency)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateScheduleSettingsForFrequency(newScheduleSettings,idFrequency,db);
                                }
                            }

                            public List<ScheduleSetting> UpdateScheduleSettingsForFrequency(List<ScheduleSetting> newScheduleSettings,long idFrequency, SubscriptionEntities  db)
                            {
                                Expression<Func<ScheduleSetting, bool>> expressionBuilder = p => p.IdFrequency == idFrequency;
                                var oldScheduleSettings = DaoFactories.Instance.ScheduleSettingDao.GetScheduleSettingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldScheduleSettings.EntityList.Select(pc => pc.IdScheduleSetting).Except(newScheduleSettings.Where(pc => pc.IdScheduleSetting.HasValue).Select(pc => pc.IdScheduleSetting)).ToList();
                                var itemsTobeDeleted = oldScheduleSettings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdScheduleSetting)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newScheduleSettings.ForEach(pc =>
                                {
                                    pc.IdFrequency = idFrequency;
                                    DaoFactories.Instance.ScheduleSettingDao.SaveOnlyScheduleSetting(pc, db);
                                });
                                return newScheduleSettings;
                            }

                        


    



		}
			public partial class MailRecipientDao :IMailRecipientDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public MailRecipientDao(){
			
			}

			public MailRecipientDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<MailRecipient> GetAllMailRecipients(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailRecipients(db, shouldRemap);
                }
            }

            public List<MailRecipient> GetAllMailRecipients(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapMailRecipientList(db.MailRecipients.Where(p => p.IsDeactivated != true).ToList());
				
				return db.MailRecipients.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<MailRecipient> GetAllMailRecipientsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailRecipient, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailRecipientsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<MailRecipient> GetAllMailRecipientsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<MailRecipient, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailRecipient, dynamic> orderExpression = null)
            {
				IQueryable<MailRecipient> query =  db.MailRecipients;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailRecipient> baseListReturnType = new BaseListReturnType<MailRecipient>();

                IQueryable<MailRecipient> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdMailRecipient" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<MailRecipient, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Name.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Name.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.EmailAddress.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailRecipientList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<MailRecipient> GetAllMailRecipientsWithMailRecipientTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null,bool shouldRemap = false, Func<MailRecipient, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailRecipientsByPage(sortingPagingInfo, db,expression,new List<string>(){"MailRecipientType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailRecipient> GetAllMailRecipientsWithMailStatuDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null,bool shouldRemap = false, Func<MailRecipient, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailRecipientsByPage(sortingPagingInfo, db,expression,new List<string>(){"MailStatu"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailRecipient> GetAllMailRecipientsWithMailToSendDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null,bool shouldRemap = false, Func<MailRecipient, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailRecipientsByPage(sortingPagingInfo, db,expression,new List<string>(){"MailToSend"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<MailRecipient> GetAllMailRecipientsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailRecipient, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailRecipientsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<MailRecipient> GetAllMailRecipientsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<MailRecipient, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailRecipient, dynamic> orderExpression = null)
            {
				IQueryable<MailRecipient> query =  db.MailRecipients;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailRecipient> baseListReturnType = new BaseListReturnType<MailRecipient>();

                IQueryable<MailRecipient> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdMailRecipient" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<MailRecipient, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailRecipientList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<MailRecipient> GetAllMailRecipientsWithMailRecipientTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null,bool shouldRemap = false, Func<MailRecipient, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailRecipientsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailRecipientType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailRecipient> GetAllMailRecipientsWithMailStatuDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null,bool shouldRemap = false, Func<MailRecipient, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailRecipientsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailStatu"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailRecipient> GetAllMailRecipientsWithMailToSendDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null,bool shouldRemap = false, Func<MailRecipient, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailRecipientsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailToSend"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<MailRecipient> GetAllMailRecipientsWithMailRecipientTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailRecipientWitDetails(new List<string>(){"MailRecipientType"},shouldRemap);
					}
				}
							public BaseListReturnType<MailRecipient> GetAllMailRecipientsWithMailStatuDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailRecipientWitDetails(new List<string>(){"MailStatu"},shouldRemap);
					}
				}
							public BaseListReturnType<MailRecipient> GetAllMailRecipientsWithMailToSendDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailRecipientWitDetails(new List<string>(){"MailToSend"},shouldRemap);
					}
				}
			

			public BaseListReturnType<MailRecipient> GetAllMailRecipientWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailRecipientWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<MailRecipient> GetAllMailRecipientWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<MailRecipient> query =  db.MailRecipients;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailRecipient> baseListReturnType = new BaseListReturnType<MailRecipient>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailRecipientList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public MailRecipient GetMailRecipient(long idMailRecipient,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailRecipient(idMailRecipient, db,shouldRemap);
                }
            }
                        public MailRecipient GetMailRecipient(long idMailRecipient, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapMailRecipientSingle(db.MailRecipients.Where(p => p.IdMailRecipient == idMailRecipient && p.IsDeactivated != true).FirstOrDefault());

                return db.MailRecipients.Where(p => p.IdMailRecipient == idMailRecipient && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public MailRecipient GetMailRecipientCustom( Expression<Func<MailRecipient, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetMailRecipientCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public MailRecipient GetMailRecipientCustom( SubscriptionEntities db , Expression<Func<MailRecipient, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<MailRecipient> query =  db.MailRecipients;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapMailRecipientSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<MailRecipient> GetMailRecipientCustomList( Expression<Func<MailRecipient, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<MailRecipient, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetMailRecipientCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<MailRecipient> GetMailRecipientCustomList(  SubscriptionEntities db , Expression<Func<MailRecipient, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<MailRecipient, dynamic> orderExpression = null)
			{
				IQueryable<MailRecipient> query =  db.MailRecipients;
                BaseListReturnType<MailRecipient> baseListReturnType = new BaseListReturnType<MailRecipient>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailRecipientList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public MailRecipient GetMailRecipientWithMailRecipientTypeDetails(long idMailRecipient,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailRecipientWithDetails(idMailRecipient,new List<string>(){"MailRecipientType"},shouldRemap);
					}
				}

            //IdMailRecipientType -- ZeroOrOne

                public BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailRecipientType(long idMailRecipientType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllMailRecipientListByMailRecipientType(idMailRecipientType, db);
                    }
                }
                public BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailRecipientType(long idMailRecipientType, SubscriptionEntities db)
                {
                    Expression<Func<MailRecipient, bool>> expression = property=> property.IdMailRecipientType == idMailRecipientType && property.IsDeactivated !=true;
                    return GetMailRecipientCustomList(db, expression, null, true);
                }
                public BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailRecipientTypeByPage(long idMailRecipientType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllMailRecipientListByMailRecipientTypeByPage(idMailRecipientType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailRecipientTypeByPage(long idMailRecipientType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<MailRecipient, bool>> expression = property => property.IdMailRecipientType == idMailRecipientType && property.IsDeactivated !=true;
                    return GetAllMailRecipientsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public MailRecipient GetMailRecipientWithMailStatuDetails(long idMailRecipient,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailRecipientWithDetails(idMailRecipient,new List<string>(){"MailStatu"},shouldRemap);
					}
				}

            //IdMailStatus -- ZeroOrOne

                public BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailStatu(long idMailStatu)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllMailRecipientListByMailStatu(idMailStatu, db);
                    }
                }
                public BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailStatu(long idMailStatu, SubscriptionEntities db)
                {
                    Expression<Func<MailRecipient, bool>> expression = property=> property.IdMailStatus == idMailStatu && property.IsDeactivated !=true;
                    return GetMailRecipientCustomList(db, expression, null, true);
                }
                public BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailStatuByPage(long idMailStatu, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllMailRecipientListByMailStatuByPage(idMailStatu, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailStatuByPage(long idMailStatu, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<MailRecipient, bool>> expression = property => property.IdMailStatus == idMailStatu && property.IsDeactivated !=true;
                    return GetAllMailRecipientsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public MailRecipient GetMailRecipientWithMailToSendDetails(long idMailRecipient,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailRecipientWithDetails(idMailRecipient,new List<string>(){"MailToSend"},shouldRemap);
					}
				}

            //IdMailToSend -- ZeroOrOne

                public BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailToSend(long idMailToSend)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllMailRecipientListByMailToSend(idMailToSend, db);
                    }
                }
                public BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailToSend(long idMailToSend, SubscriptionEntities db)
                {
                    Expression<Func<MailRecipient, bool>> expression = property=> property.IdMailToSend == idMailToSend && property.IsDeactivated !=true;
                    return GetMailRecipientCustomList(db, expression, null, true);
                }
                public BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailToSendByPage(long idMailToSend, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllMailRecipientListByMailToSendByPage(idMailToSend, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailToSendByPage(long idMailToSend, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<MailRecipient, bool>> expression = property => property.IdMailToSend == idMailToSend && property.IsDeactivated !=true;
                    return GetAllMailRecipientsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public MailRecipient GetMailRecipientWithDetails(long idMailRecipient, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailRecipientWithDetails(idMailRecipient, db,includes,shouldRemap);
                }
            }

            public MailRecipient GetMailRecipientWithDetails(long idMailRecipient, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<MailRecipient> query =  db.MailRecipients;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapMailRecipientSingle(query
						.Where(p => p.IdMailRecipient == idMailRecipient && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdMailRecipient == idMailRecipient && p.IsDeactivated != true).FirstOrDefault();
            }

            public MailRecipient GetMailRecipientWitDetails(long idMailRecipient,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailRecipientWitDetails(idMailRecipient, db,shouldRemap);
                }
            }

            public MailRecipient GetMailRecipientWitDetails(long idMailRecipient, SubscriptionEntities db,bool shouldRemap = false)
            {
				MailRecipient _MailRecipient = db.MailRecipients

					.Include("MailRecipientType")
					.Include("MailStatu")
					.Include("MailToSend")
								.Where(p => p.IdMailRecipient == idMailRecipient && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapMailRecipientSingle(_MailRecipient);

				return  _MailRecipient;
            }

            public List<MailRecipient> GetMailRecipientListByIdList(List<long> mailRecipientIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailRecipientListByIdList(mailRecipientIds, db);
                }
            }
            public List<MailRecipient> GetMailRecipientListByIdList(List<long> mailRecipientIds, SubscriptionEntities db)
            {
                return db.MailRecipients.Where(p => p.IsDeactivated != true && mailRecipientIds.Contains(p.IdMailRecipient.Value)).ToList();
            }


            public void SaveMailRecipient(MailRecipient mailRecipient)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveMailRecipient(mailRecipient, db);
                }
            }

            public void SaveMailRecipient(MailRecipient mailRecipient, SubscriptionEntities db)
            {
									if (mailRecipient.MailRecipientType != null) 
						DaoFactories.Instance.MailRecipientTypeDao.SaveMailRecipientType(mailRecipient.MailRecipientType, db);
									if (mailRecipient.MailStatu != null) 
						DaoFactories.Instance.MailStatuDao.SaveMailStatu(mailRecipient.MailStatu, db);
									if (mailRecipient.MailToSend != null) 
						DaoFactories.Instance.MailToSendDao.SaveMailToSend(mailRecipient.MailToSend, db);
				                
                if (mailRecipient.IdMailRecipient.HasValue){
					var mailRecipientFromDb = db.MailRecipients.Where(p => p.IdMailRecipient == mailRecipient.IdMailRecipient).FirstOrDefault();
													mailRecipientFromDb.Name = mailRecipient.Name;
													mailRecipientFromDb.EmailAddress = mailRecipient.EmailAddress;
													mailRecipientFromDb.IsDeactivated = mailRecipient.IsDeactivated;
													mailRecipientFromDb.IdMailToSend = mailRecipient.IdMailToSend;
													mailRecipientFromDb.IdMailStatus = mailRecipient.IdMailStatus;
													mailRecipientFromDb.IdMailRecipientType = mailRecipient.IdMailRecipientType;
									}
                else{
                                                //fix for saving without duplicating items in db
                              mailRecipient.MailRecipientType = null;
                                                        //fix for saving without duplicating items in db
                              mailRecipient.MailStatu = null;
                                                        //fix for saving without duplicating items in db
                              mailRecipient.MailToSend = null;
                                                db.MailRecipients.Add(mailRecipient);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyMailRecipient(MailRecipient mailRecipient)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyMailRecipient(mailRecipient, db);
                }
            }

            public void SaveOnlyMailRecipient(MailRecipient mailRecipient, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // mailRecipient.MailRecipientType = null;
                                                        //fix for saving without duplicating items in db
                             // mailRecipient.MailStatu = null;
                                                        //fix for saving without duplicating items in db
                             // mailRecipient.MailToSend = null;
                                            if (mailRecipient.IdMailRecipient.HasValue){
					var mailRecipientFromDb = db.MailRecipients.Where(p => p.IdMailRecipient == mailRecipient.IdMailRecipient).FirstOrDefault();
													mailRecipientFromDb.Name = mailRecipient.Name;
													mailRecipientFromDb.EmailAddress = mailRecipient.EmailAddress;
													mailRecipientFromDb.IsDeactivated = mailRecipient.IsDeactivated;
													mailRecipientFromDb.IdMailToSend = mailRecipient.IdMailToSend;
													mailRecipientFromDb.IdMailStatus = mailRecipient.IdMailStatus;
													mailRecipientFromDb.IdMailRecipientType = mailRecipient.IdMailRecipientType;
										 db.SaveChanges();

				}
                else{
					MailRecipient _mailRecipient = new MailRecipient();
																	_mailRecipient.Name = mailRecipient.Name;
													_mailRecipient.EmailAddress = mailRecipient.EmailAddress;
													_mailRecipient.IsDeactivated = mailRecipient.IsDeactivated;
													_mailRecipient.IdMailToSend = mailRecipient.IdMailToSend;
													_mailRecipient.IdMailStatus = mailRecipient.IdMailStatus;
													_mailRecipient.IdMailRecipientType = mailRecipient.IdMailRecipientType;
					

                    db.MailRecipients.Add(_mailRecipient);
					db.SaveChanges();
					mailRecipient.IdMailRecipient =  _mailRecipient.IdMailRecipient;
                    
                }
            }

            public void DeleteMailRecipient(MailRecipient mailRecipient)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteMailRecipient(mailRecipient, db);
                }
            }

            public void DeleteMailRecipient(MailRecipient mailRecipient, SubscriptionEntities db)
            {
								var mailRecipientFromDb = GetMailRecipient(mailRecipient.IdMailRecipient.Value,db);
				mailRecipientFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyMailRecipient(MailRecipient mailRecipient)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyMailRecipient(mailRecipient, db);
                }
            }

            public void DeletePermanentlyMailRecipient(MailRecipient mailRecipient, SubscriptionEntities db)
            {
								var mailRecipientFromDb = GetMailRecipient(mailRecipient.IdMailRecipient.Value,db);
				
				db.MailRecipients.Remove(mailRecipientFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class MailRecipientTypeDao :IMailRecipientTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public MailRecipientTypeDao(){
			
			}

			public MailRecipientTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<MailRecipientType> GetAllMailRecipientTypes(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailRecipientTypes(db, shouldRemap);
                }
            }

            public List<MailRecipientType> GetAllMailRecipientTypes(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapMailRecipientTypeList(db.MailRecipientTypes.Where(p => p.IsDeactivated != true).ToList());
				
				return db.MailRecipientTypes.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<MailRecipientType> GetAllMailRecipientTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipientType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailRecipientType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailRecipientTypesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<MailRecipientType> GetAllMailRecipientTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<MailRecipientType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailRecipientType, dynamic> orderExpression = null)
            {
				IQueryable<MailRecipientType> query =  db.MailRecipientTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailRecipientType> baseListReturnType = new BaseListReturnType<MailRecipientType>();

                IQueryable<MailRecipientType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdMailRecipientType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<MailRecipientType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailRecipientTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<MailRecipientType> GetAllMailRecipientTypesWithMailRecipientsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipientType, bool>> expression = null,bool shouldRemap = false, Func<MailRecipientType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailRecipientTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"MailRecipients"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<MailRecipientType> GetAllMailRecipientTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipientType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailRecipientType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailRecipientTypesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<MailRecipientType> GetAllMailRecipientTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<MailRecipientType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailRecipientType, dynamic> orderExpression = null)
            {
				IQueryable<MailRecipientType> query =  db.MailRecipientTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailRecipientType> baseListReturnType = new BaseListReturnType<MailRecipientType>();

                IQueryable<MailRecipientType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdMailRecipientType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<MailRecipientType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailRecipientTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<MailRecipientType> GetAllMailRecipientTypesWithMailRecipientsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipientType, bool>> expression = null,bool shouldRemap = false, Func<MailRecipientType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailRecipientTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailRecipients"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<MailRecipientType> GetAllMailRecipientTypesWithMailRecipientsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailRecipientTypeWitDetails(new List<string>(){"MailRecipients"},shouldRemap);
					}
				}
			

			public BaseListReturnType<MailRecipientType> GetAllMailRecipientTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailRecipientTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<MailRecipientType> GetAllMailRecipientTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<MailRecipientType> query =  db.MailRecipientTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailRecipientType> baseListReturnType = new BaseListReturnType<MailRecipientType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailRecipientTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public MailRecipientType GetMailRecipientType(long idMailRecipientType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailRecipientType(idMailRecipientType, db,shouldRemap);
                }
            }
                        public MailRecipientType GetMailRecipientType(long idMailRecipientType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapMailRecipientTypeSingle(db.MailRecipientTypes.Where(p => p.IdMailRecipientType == idMailRecipientType && p.IsDeactivated != true).FirstOrDefault());

                return db.MailRecipientTypes.Where(p => p.IdMailRecipientType == idMailRecipientType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public MailRecipientType GetMailRecipientTypeCustom( Expression<Func<MailRecipientType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetMailRecipientTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public MailRecipientType GetMailRecipientTypeCustom( SubscriptionEntities db , Expression<Func<MailRecipientType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<MailRecipientType> query =  db.MailRecipientTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapMailRecipientTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<MailRecipientType> GetMailRecipientTypeCustomList( Expression<Func<MailRecipientType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<MailRecipientType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetMailRecipientTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<MailRecipientType> GetMailRecipientTypeCustomList(  SubscriptionEntities db , Expression<Func<MailRecipientType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<MailRecipientType, dynamic> orderExpression = null)
			{
				IQueryable<MailRecipientType> query =  db.MailRecipientTypes;
                BaseListReturnType<MailRecipientType> baseListReturnType = new BaseListReturnType<MailRecipientType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailRecipientTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public MailRecipientType GetMailRecipientTypeWithMailRecipientsDetails(long idMailRecipientType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailRecipientTypeWithDetails(idMailRecipientType,new List<string>(){"MailRecipients"},shouldRemap);
					}
				}

            //IdMailRecipientType -- Many


			


			public MailRecipientType GetMailRecipientTypeWithDetails(long idMailRecipientType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailRecipientTypeWithDetails(idMailRecipientType, db,includes,shouldRemap);
                }
            }

            public MailRecipientType GetMailRecipientTypeWithDetails(long idMailRecipientType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<MailRecipientType> query =  db.MailRecipientTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapMailRecipientTypeSingle(query
						.Where(p => p.IdMailRecipientType == idMailRecipientType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdMailRecipientType == idMailRecipientType && p.IsDeactivated != true).FirstOrDefault();
            }

            public MailRecipientType GetMailRecipientTypeWitDetails(long idMailRecipientType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailRecipientTypeWitDetails(idMailRecipientType, db,shouldRemap);
                }
            }

            public MailRecipientType GetMailRecipientTypeWitDetails(long idMailRecipientType, SubscriptionEntities db,bool shouldRemap = false)
            {
				MailRecipientType _MailRecipientType = db.MailRecipientTypes

					.Include("MailRecipients")
								.Where(p => p.IdMailRecipientType == idMailRecipientType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapMailRecipientTypeSingle(_MailRecipientType);

				return  _MailRecipientType;
            }

            public List<MailRecipientType> GetMailRecipientTypeListByIdList(List<long> mailRecipientTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailRecipientTypeListByIdList(mailRecipientTypeIds, db);
                }
            }
            public List<MailRecipientType> GetMailRecipientTypeListByIdList(List<long> mailRecipientTypeIds, SubscriptionEntities db)
            {
                return db.MailRecipientTypes.Where(p => p.IsDeactivated != true && mailRecipientTypeIds.Contains(p.IdMailRecipientType.Value)).ToList();
            }


            public void SaveMailRecipientType(MailRecipientType mailRecipientType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveMailRecipientType(mailRecipientType, db);
                }
            }

            public void SaveMailRecipientType(MailRecipientType mailRecipientType, SubscriptionEntities db)
            {
				                
                if (mailRecipientType.IdMailRecipientType.HasValue){
					var mailRecipientTypeFromDb = db.MailRecipientTypes.Where(p => p.IdMailRecipientType == mailRecipientType.IdMailRecipientType).FirstOrDefault();
													mailRecipientTypeFromDb.Description = mailRecipientType.Description;
													mailRecipientTypeFromDb.IsDeactivated = mailRecipientType.IsDeactivated;
									}
                else{
                                        db.MailRecipientTypes.Add(mailRecipientType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyMailRecipientType(MailRecipientType mailRecipientType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyMailRecipientType(mailRecipientType, db);
                }
            }

            public void SaveOnlyMailRecipientType(MailRecipientType mailRecipientType, SubscriptionEntities db)
            {
			                    if (mailRecipientType.IdMailRecipientType.HasValue){
					var mailRecipientTypeFromDb = db.MailRecipientTypes.Where(p => p.IdMailRecipientType == mailRecipientType.IdMailRecipientType).FirstOrDefault();
													mailRecipientTypeFromDb.Description = mailRecipientType.Description;
													mailRecipientTypeFromDb.IsDeactivated = mailRecipientType.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					MailRecipientType _mailRecipientType = new MailRecipientType();
																	_mailRecipientType.Description = mailRecipientType.Description;
													_mailRecipientType.IsDeactivated = mailRecipientType.IsDeactivated;
					

                    db.MailRecipientTypes.Add(_mailRecipientType);
					db.SaveChanges();
					mailRecipientType.IdMailRecipientType =  _mailRecipientType.IdMailRecipientType;
                    
                }
            }

            public void DeleteMailRecipientType(MailRecipientType mailRecipientType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteMailRecipientType(mailRecipientType, db);
                }
            }

            public void DeleteMailRecipientType(MailRecipientType mailRecipientType, SubscriptionEntities db)
            {
								var mailRecipientTypeFromDb = GetMailRecipientType(mailRecipientType.IdMailRecipientType.Value,db);
				mailRecipientTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyMailRecipientType(MailRecipientType mailRecipientType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyMailRecipientType(mailRecipientType, db);
                }
            }

            public void DeletePermanentlyMailRecipientType(MailRecipientType mailRecipientType, SubscriptionEntities db)
            {
								var mailRecipientTypeFromDb = GetMailRecipientType(mailRecipientType.IdMailRecipientType.Value,db);
				
				db.MailRecipientTypes.Remove(mailRecipientTypeFromDb);
                db.SaveChanges();
            }


            
							public List<MailRecipient> UpdateMailRecipientsForMailRecipientTypeWithoutSavingNewItem(List<MailRecipient> newMailRecipients,long idMailRecipientType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateMailRecipientsForMailRecipientTypeWithoutSavingNewItem(newMailRecipients,idMailRecipientType,db);
                                }
                            }

							public List<MailRecipient> UpdateMailRecipientsForMailRecipientTypeWithoutSavingNewItem(List<MailRecipient> newMailRecipients,long idMailRecipientType, SubscriptionEntities  db)
                            {
                                Expression<Func<MailRecipient, bool>> expressionBuilder = p => p.IdMailRecipientType == idMailRecipientType;
                                var oldMailRecipients = DaoFactories.Instance.MailRecipientDao.GetMailRecipientCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldMailRecipients.EntityList.Select(pc => pc.IdMailRecipient).Except(newMailRecipients.Where(pc => pc.IdMailRecipient.HasValue).Select(pc => pc.IdMailRecipient)).ToList();
                                var itemsTobeDeleted = oldMailRecipients.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdMailRecipient)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newMailRecipients;
                            }


                            public List<MailRecipient> UpdateMailRecipientsForMailRecipientType(List<MailRecipient> newMailRecipients,long idMailRecipientType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateMailRecipientsForMailRecipientType(newMailRecipients,idMailRecipientType,db);
                                }
                            }

                            public List<MailRecipient> UpdateMailRecipientsForMailRecipientType(List<MailRecipient> newMailRecipients,long idMailRecipientType, SubscriptionEntities  db)
                            {
                                Expression<Func<MailRecipient, bool>> expressionBuilder = p => p.IdMailRecipientType == idMailRecipientType;
                                var oldMailRecipients = DaoFactories.Instance.MailRecipientDao.GetMailRecipientCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldMailRecipients.EntityList.Select(pc => pc.IdMailRecipient).Except(newMailRecipients.Where(pc => pc.IdMailRecipient.HasValue).Select(pc => pc.IdMailRecipient)).ToList();
                                var itemsTobeDeleted = oldMailRecipients.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdMailRecipient)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newMailRecipients.ForEach(pc =>
                                {
                                    pc.IdMailRecipientType = idMailRecipientType;
                                    DaoFactories.Instance.MailRecipientDao.SaveOnlyMailRecipient(pc, db);
                                });
                                return newMailRecipients;
                            }

                        


    



		}
			public partial class MailServerSettingDao :IMailServerSettingDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public MailServerSettingDao(){
			
			}

			public MailServerSettingDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<MailServerSetting> GetAllMailServerSettings(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailServerSettings(db, shouldRemap);
                }
            }

            public List<MailServerSetting> GetAllMailServerSettings(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapMailServerSettingList(db.MailServerSettings.Where(p => p.IsDeactivated != true).ToList());
				
				return db.MailServerSettings.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<MailServerSetting> GetAllMailServerSettingsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailServerSetting, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailServerSetting, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailServerSettingsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<MailServerSetting> GetAllMailServerSettingsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<MailServerSetting, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailServerSetting, dynamic> orderExpression = null)
            {
				IQueryable<MailServerSetting> query =  db.MailServerSettings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailServerSetting> baseListReturnType = new BaseListReturnType<MailServerSetting>();

                IQueryable<MailServerSetting> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdMailServerSetting" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<MailServerSetting, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Host.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Host.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Username.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Password.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.DefaultName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailServerSettingList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<MailServerSetting> GetAllMailServerSettingsWithMailToSendsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailServerSetting, bool>> expression = null,bool shouldRemap = false, Func<MailServerSetting, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailServerSettingsByPage(sortingPagingInfo, db,expression,new List<string>(){"MailToSends"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<MailServerSetting> GetAllMailServerSettingsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailServerSetting, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailServerSetting, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailServerSettingsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<MailServerSetting> GetAllMailServerSettingsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<MailServerSetting, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailServerSetting, dynamic> orderExpression = null)
            {
				IQueryable<MailServerSetting> query =  db.MailServerSettings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailServerSetting> baseListReturnType = new BaseListReturnType<MailServerSetting>();

                IQueryable<MailServerSetting> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdMailServerSetting" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<MailServerSetting, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailServerSettingList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<MailServerSetting> GetAllMailServerSettingsWithMailToSendsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailServerSetting, bool>> expression = null,bool shouldRemap = false, Func<MailServerSetting, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailServerSettingsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailToSends"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<MailServerSetting> GetAllMailServerSettingsWithMailToSendsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailServerSettingWitDetails(new List<string>(){"MailToSends"},shouldRemap);
					}
				}
			

			public BaseListReturnType<MailServerSetting> GetAllMailServerSettingWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailServerSettingWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<MailServerSetting> GetAllMailServerSettingWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<MailServerSetting> query =  db.MailServerSettings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailServerSetting> baseListReturnType = new BaseListReturnType<MailServerSetting>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailServerSettingList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public MailServerSetting GetMailServerSetting(long idMailServerSetting,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailServerSetting(idMailServerSetting, db,shouldRemap);
                }
            }
                        public MailServerSetting GetMailServerSetting(long idMailServerSetting, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapMailServerSettingSingle(db.MailServerSettings.Where(p => p.IdMailServerSetting == idMailServerSetting && p.IsDeactivated != true).FirstOrDefault());

                return db.MailServerSettings.Where(p => p.IdMailServerSetting == idMailServerSetting && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public MailServerSetting GetMailServerSettingCustom( Expression<Func<MailServerSetting, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetMailServerSettingCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public MailServerSetting GetMailServerSettingCustom( SubscriptionEntities db , Expression<Func<MailServerSetting, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<MailServerSetting> query =  db.MailServerSettings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapMailServerSettingSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<MailServerSetting> GetMailServerSettingCustomList( Expression<Func<MailServerSetting, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<MailServerSetting, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetMailServerSettingCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<MailServerSetting> GetMailServerSettingCustomList(  SubscriptionEntities db , Expression<Func<MailServerSetting, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<MailServerSetting, dynamic> orderExpression = null)
			{
				IQueryable<MailServerSetting> query =  db.MailServerSettings;
                BaseListReturnType<MailServerSetting> baseListReturnType = new BaseListReturnType<MailServerSetting>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailServerSettingList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public MailServerSetting GetMailServerSettingWithMailToSendsDetails(long idMailServerSetting,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailServerSettingWithDetails(idMailServerSetting,new List<string>(){"MailToSends"},shouldRemap);
					}
				}

            //IdMailServerSetting -- Many


			


			public MailServerSetting GetMailServerSettingWithDetails(long idMailServerSetting, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailServerSettingWithDetails(idMailServerSetting, db,includes,shouldRemap);
                }
            }

            public MailServerSetting GetMailServerSettingWithDetails(long idMailServerSetting, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<MailServerSetting> query =  db.MailServerSettings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapMailServerSettingSingle(query
						.Where(p => p.IdMailServerSetting == idMailServerSetting && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdMailServerSetting == idMailServerSetting && p.IsDeactivated != true).FirstOrDefault();
            }

            public MailServerSetting GetMailServerSettingWitDetails(long idMailServerSetting,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailServerSettingWitDetails(idMailServerSetting, db,shouldRemap);
                }
            }

            public MailServerSetting GetMailServerSettingWitDetails(long idMailServerSetting, SubscriptionEntities db,bool shouldRemap = false)
            {
				MailServerSetting _MailServerSetting = db.MailServerSettings

					.Include("MailToSends")
								.Where(p => p.IdMailServerSetting == idMailServerSetting && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapMailServerSettingSingle(_MailServerSetting);

				return  _MailServerSetting;
            }

            public List<MailServerSetting> GetMailServerSettingListByIdList(List<long> mailServerSettingIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailServerSettingListByIdList(mailServerSettingIds, db);
                }
            }
            public List<MailServerSetting> GetMailServerSettingListByIdList(List<long> mailServerSettingIds, SubscriptionEntities db)
            {
                return db.MailServerSettings.Where(p => p.IsDeactivated != true && mailServerSettingIds.Contains(p.IdMailServerSetting.Value)).ToList();
            }


            public void SaveMailServerSetting(MailServerSetting mailServerSetting)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveMailServerSetting(mailServerSetting, db);
                }
            }

            public void SaveMailServerSetting(MailServerSetting mailServerSetting, SubscriptionEntities db)
            {
				                
                if (mailServerSetting.IdMailServerSetting.HasValue){
					var mailServerSettingFromDb = db.MailServerSettings.Where(p => p.IdMailServerSetting == mailServerSetting.IdMailServerSetting).FirstOrDefault();
													mailServerSettingFromDb.UseSSL = mailServerSetting.UseSSL;
													mailServerSettingFromDb.ClientPort = mailServerSetting.ClientPort;
													mailServerSettingFromDb.Host = mailServerSetting.Host;
													mailServerSettingFromDb.Username = mailServerSetting.Username;
													mailServerSettingFromDb.Password = mailServerSetting.Password;
													mailServerSettingFromDb.IsDeactivated = mailServerSetting.IsDeactivated;
													mailServerSettingFromDb.Priority = mailServerSetting.Priority;
													mailServerSettingFromDb.DefaultName = mailServerSetting.DefaultName;
									}
                else{
                                        db.MailServerSettings.Add(mailServerSetting);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyMailServerSetting(MailServerSetting mailServerSetting)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyMailServerSetting(mailServerSetting, db);
                }
            }

            public void SaveOnlyMailServerSetting(MailServerSetting mailServerSetting, SubscriptionEntities db)
            {
			                    if (mailServerSetting.IdMailServerSetting.HasValue){
					var mailServerSettingFromDb = db.MailServerSettings.Where(p => p.IdMailServerSetting == mailServerSetting.IdMailServerSetting).FirstOrDefault();
													mailServerSettingFromDb.UseSSL = mailServerSetting.UseSSL;
													mailServerSettingFromDb.ClientPort = mailServerSetting.ClientPort;
													mailServerSettingFromDb.Host = mailServerSetting.Host;
													mailServerSettingFromDb.Username = mailServerSetting.Username;
													mailServerSettingFromDb.Password = mailServerSetting.Password;
													mailServerSettingFromDb.IsDeactivated = mailServerSetting.IsDeactivated;
													mailServerSettingFromDb.Priority = mailServerSetting.Priority;
													mailServerSettingFromDb.DefaultName = mailServerSetting.DefaultName;
										 db.SaveChanges();

				}
                else{
					MailServerSetting _mailServerSetting = new MailServerSetting();
																	_mailServerSetting.UseSSL = mailServerSetting.UseSSL;
													_mailServerSetting.ClientPort = mailServerSetting.ClientPort;
													_mailServerSetting.Host = mailServerSetting.Host;
													_mailServerSetting.Username = mailServerSetting.Username;
													_mailServerSetting.Password = mailServerSetting.Password;
													_mailServerSetting.IsDeactivated = mailServerSetting.IsDeactivated;
													_mailServerSetting.Priority = mailServerSetting.Priority;
													_mailServerSetting.DefaultName = mailServerSetting.DefaultName;
					

                    db.MailServerSettings.Add(_mailServerSetting);
					db.SaveChanges();
					mailServerSetting.IdMailServerSetting =  _mailServerSetting.IdMailServerSetting;
                    
                }
            }

            public void DeleteMailServerSetting(MailServerSetting mailServerSetting)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteMailServerSetting(mailServerSetting, db);
                }
            }

            public void DeleteMailServerSetting(MailServerSetting mailServerSetting, SubscriptionEntities db)
            {
								var mailServerSettingFromDb = GetMailServerSetting(mailServerSetting.IdMailServerSetting.Value,db);
				mailServerSettingFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyMailServerSetting(MailServerSetting mailServerSetting)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyMailServerSetting(mailServerSetting, db);
                }
            }

            public void DeletePermanentlyMailServerSetting(MailServerSetting mailServerSetting, SubscriptionEntities db)
            {
								var mailServerSettingFromDb = GetMailServerSetting(mailServerSetting.IdMailServerSetting.Value,db);
				
				db.MailServerSettings.Remove(mailServerSettingFromDb);
                db.SaveChanges();
            }


            
							public List<MailToSend> UpdateMailToSendsForMailServerSettingWithoutSavingNewItem(List<MailToSend> newMailToSends,long idMailServerSetting)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateMailToSendsForMailServerSettingWithoutSavingNewItem(newMailToSends,idMailServerSetting,db);
                                }
                            }

							public List<MailToSend> UpdateMailToSendsForMailServerSettingWithoutSavingNewItem(List<MailToSend> newMailToSends,long idMailServerSetting, SubscriptionEntities  db)
                            {
                                Expression<Func<MailToSend, bool>> expressionBuilder = p => p.IdMailServerSetting == idMailServerSetting;
                                var oldMailToSends = DaoFactories.Instance.MailToSendDao.GetMailToSendCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldMailToSends.EntityList.Select(pc => pc.IdMailToSend).Except(newMailToSends.Where(pc => pc.IdMailToSend.HasValue).Select(pc => pc.IdMailToSend)).ToList();
                                var itemsTobeDeleted = oldMailToSends.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdMailToSend)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newMailToSends;
                            }


                            public List<MailToSend> UpdateMailToSendsForMailServerSetting(List<MailToSend> newMailToSends,long idMailServerSetting)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateMailToSendsForMailServerSetting(newMailToSends,idMailServerSetting,db);
                                }
                            }

                            public List<MailToSend> UpdateMailToSendsForMailServerSetting(List<MailToSend> newMailToSends,long idMailServerSetting, SubscriptionEntities  db)
                            {
                                Expression<Func<MailToSend, bool>> expressionBuilder = p => p.IdMailServerSetting == idMailServerSetting;
                                var oldMailToSends = DaoFactories.Instance.MailToSendDao.GetMailToSendCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldMailToSends.EntityList.Select(pc => pc.IdMailToSend).Except(newMailToSends.Where(pc => pc.IdMailToSend.HasValue).Select(pc => pc.IdMailToSend)).ToList();
                                var itemsTobeDeleted = oldMailToSends.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdMailToSend)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newMailToSends.ForEach(pc =>
                                {
                                    pc.IdMailServerSetting = idMailServerSetting;
                                    DaoFactories.Instance.MailToSendDao.SaveOnlyMailToSend(pc, db);
                                });
                                return newMailToSends;
                            }

                        


    



		}
			public partial class MailStatuDao :IMailStatuDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public MailStatuDao(){
			
			}

			public MailStatuDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<MailStatu> GetAllMailStatus(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailStatus(db, shouldRemap);
                }
            }

            public List<MailStatu> GetAllMailStatus(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapMailStatuList(db.MailStatus.Where(p => p.IsDeactivated != true).ToList());
				
				return db.MailStatus.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<MailStatu> GetAllMailStatusByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailStatu, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailStatu, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailStatusByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<MailStatu> GetAllMailStatusByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<MailStatu, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailStatu, dynamic> orderExpression = null)
            {
				IQueryable<MailStatu> query =  db.MailStatus;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailStatu> baseListReturnType = new BaseListReturnType<MailStatu>();

                IQueryable<MailStatu> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdMailStatus" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<MailStatu, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailStatuList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<MailStatu> GetAllMailStatusWithMailRecipientsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailStatu, bool>> expression = null,bool shouldRemap = false, Func<MailStatu, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailStatusByPage(sortingPagingInfo, db,expression,new List<string>(){"MailRecipients"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailStatu> GetAllMailStatusWithMailToSendsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailStatu, bool>> expression = null,bool shouldRemap = false, Func<MailStatu, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailStatusByPage(sortingPagingInfo, db,expression,new List<string>(){"MailToSends"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<MailStatu> GetAllMailStatusByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailStatu, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailStatu, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailStatusByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<MailStatu> GetAllMailStatusByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<MailStatu, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailStatu, dynamic> orderExpression = null)
            {
				IQueryable<MailStatu> query =  db.MailStatus;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailStatu> baseListReturnType = new BaseListReturnType<MailStatu>();

                IQueryable<MailStatu> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdMailStatus" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<MailStatu, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailStatuList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<MailStatu> GetAllMailStatusWithMailRecipientsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailStatu, bool>> expression = null,bool shouldRemap = false, Func<MailStatu, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailStatusByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailRecipients"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailStatu> GetAllMailStatusWithMailToSendsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailStatu, bool>> expression = null,bool shouldRemap = false, Func<MailStatu, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailStatusByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailToSends"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<MailStatu> GetAllMailStatusWithMailRecipientsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailStatuWitDetails(new List<string>(){"MailRecipients"},shouldRemap);
					}
				}
							public BaseListReturnType<MailStatu> GetAllMailStatusWithMailToSendsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailStatuWitDetails(new List<string>(){"MailToSends"},shouldRemap);
					}
				}
			

			public BaseListReturnType<MailStatu> GetAllMailStatuWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailStatuWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<MailStatu> GetAllMailStatuWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<MailStatu> query =  db.MailStatus;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailStatu> baseListReturnType = new BaseListReturnType<MailStatu>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailStatuList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public MailStatu GetMailStatu(long idMailStatu,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailStatu(idMailStatu, db,shouldRemap);
                }
            }
                        public MailStatu GetMailStatu(long idMailStatu, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapMailStatuSingle(db.MailStatus.Where(p => p.IdMailStatus == idMailStatu && p.IsDeactivated != true).FirstOrDefault());

                return db.MailStatus.Where(p => p.IdMailStatus == idMailStatu && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public MailStatu GetMailStatuCustom( Expression<Func<MailStatu, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetMailStatuCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public MailStatu GetMailStatuCustom( SubscriptionEntities db , Expression<Func<MailStatu, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<MailStatu> query =  db.MailStatus;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapMailStatuSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<MailStatu> GetMailStatuCustomList( Expression<Func<MailStatu, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<MailStatu, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetMailStatuCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<MailStatu> GetMailStatuCustomList(  SubscriptionEntities db , Expression<Func<MailStatu, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<MailStatu, dynamic> orderExpression = null)
			{
				IQueryable<MailStatu> query =  db.MailStatus;
                BaseListReturnType<MailStatu> baseListReturnType = new BaseListReturnType<MailStatu>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailStatuList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public MailStatu GetMailStatuWithMailRecipientsDetails(long idMailStatu,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailStatuWithDetails(idMailStatu,new List<string>(){"MailRecipients"},shouldRemap);
					}
				}

            //IdMailStatus -- Many


							public MailStatu GetMailStatuWithMailToSendsDetails(long idMailStatu,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailStatuWithDetails(idMailStatu,new List<string>(){"MailToSends"},shouldRemap);
					}
				}

            //IdEmailStatus -- Many


			


			public MailStatu GetMailStatuWithDetails(long idMailStatu, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailStatuWithDetails(idMailStatu, db,includes,shouldRemap);
                }
            }

            public MailStatu GetMailStatuWithDetails(long idMailStatu, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<MailStatu> query =  db.MailStatus;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapMailStatuSingle(query
						.Where(p => p.IdMailStatus == idMailStatu && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdMailStatus == idMailStatu && p.IsDeactivated != true).FirstOrDefault();
            }

            public MailStatu GetMailStatuWitDetails(long idMailStatu,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailStatuWitDetails(idMailStatu, db,shouldRemap);
                }
            }

            public MailStatu GetMailStatuWitDetails(long idMailStatu, SubscriptionEntities db,bool shouldRemap = false)
            {
				MailStatu _MailStatu = db.MailStatus

					.Include("MailRecipients")
					.Include("MailToSends")
								.Where(p => p.IdMailStatus == idMailStatu && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapMailStatuSingle(_MailStatu);

				return  _MailStatu;
            }

            public List<MailStatu> GetMailStatuListByIdList(List<long> mailStatuIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailStatuListByIdList(mailStatuIds, db);
                }
            }
            public List<MailStatu> GetMailStatuListByIdList(List<long> mailStatuIds, SubscriptionEntities db)
            {
                return db.MailStatus.Where(p => p.IsDeactivated != true && mailStatuIds.Contains(p.IdMailStatus.Value)).ToList();
            }


            public void SaveMailStatu(MailStatu mailStatu)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveMailStatu(mailStatu, db);
                }
            }

            public void SaveMailStatu(MailStatu mailStatu, SubscriptionEntities db)
            {
				                
                if (mailStatu.IdMailStatus.HasValue){
					var mailStatuFromDb = db.MailStatus.Where(p => p.IdMailStatus == mailStatu.IdMailStatus).FirstOrDefault();
													mailStatuFromDb.Description = mailStatu.Description;
													mailStatuFromDb.IsDeactivated = mailStatu.IsDeactivated;
									}
                else{
                                        db.MailStatus.Add(mailStatu);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyMailStatu(MailStatu mailStatu)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyMailStatu(mailStatu, db);
                }
            }

            public void SaveOnlyMailStatu(MailStatu mailStatu, SubscriptionEntities db)
            {
			                    if (mailStatu.IdMailStatus.HasValue){
					var mailStatuFromDb = db.MailStatus.Where(p => p.IdMailStatus == mailStatu.IdMailStatus).FirstOrDefault();
													mailStatuFromDb.Description = mailStatu.Description;
													mailStatuFromDb.IsDeactivated = mailStatu.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					MailStatu _mailStatu = new MailStatu();
																	_mailStatu.Description = mailStatu.Description;
													_mailStatu.IsDeactivated = mailStatu.IsDeactivated;
					

                    db.MailStatus.Add(_mailStatu);
					db.SaveChanges();
					mailStatu.IdMailStatus =  _mailStatu.IdMailStatus;
                    
                }
            }

            public void DeleteMailStatu(MailStatu mailStatu)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteMailStatu(mailStatu, db);
                }
            }

            public void DeleteMailStatu(MailStatu mailStatu, SubscriptionEntities db)
            {
								var mailStatuFromDb = GetMailStatu(mailStatu.IdMailStatus.Value,db);
				mailStatuFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyMailStatu(MailStatu mailStatu)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyMailStatu(mailStatu, db);
                }
            }

            public void DeletePermanentlyMailStatu(MailStatu mailStatu, SubscriptionEntities db)
            {
								var mailStatuFromDb = GetMailStatu(mailStatu.IdMailStatus.Value,db);
				
				db.MailStatus.Remove(mailStatuFromDb);
                db.SaveChanges();
            }


            
							public List<MailRecipient> UpdateMailRecipientsForMailStatuWithoutSavingNewItem(List<MailRecipient> newMailRecipients,long idMailStatu)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateMailRecipientsForMailStatuWithoutSavingNewItem(newMailRecipients,idMailStatu,db);
                                }
                            }

							public List<MailRecipient> UpdateMailRecipientsForMailStatuWithoutSavingNewItem(List<MailRecipient> newMailRecipients,long idMailStatu, SubscriptionEntities  db)
                            {
                                Expression<Func<MailRecipient, bool>> expressionBuilder = p => p.IdMailStatus == idMailStatu;
                                var oldMailRecipients = DaoFactories.Instance.MailRecipientDao.GetMailRecipientCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldMailRecipients.EntityList.Select(pc => pc.IdMailRecipient).Except(newMailRecipients.Where(pc => pc.IdMailRecipient.HasValue).Select(pc => pc.IdMailRecipient)).ToList();
                                var itemsTobeDeleted = oldMailRecipients.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdMailRecipient)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newMailRecipients;
                            }


                            public List<MailRecipient> UpdateMailRecipientsForMailStatu(List<MailRecipient> newMailRecipients,long idMailStatu)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateMailRecipientsForMailStatu(newMailRecipients,idMailStatu,db);
                                }
                            }

                            public List<MailRecipient> UpdateMailRecipientsForMailStatu(List<MailRecipient> newMailRecipients,long idMailStatu, SubscriptionEntities  db)
                            {
                                Expression<Func<MailRecipient, bool>> expressionBuilder = p => p.IdMailStatus == idMailStatu;
                                var oldMailRecipients = DaoFactories.Instance.MailRecipientDao.GetMailRecipientCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldMailRecipients.EntityList.Select(pc => pc.IdMailRecipient).Except(newMailRecipients.Where(pc => pc.IdMailRecipient.HasValue).Select(pc => pc.IdMailRecipient)).ToList();
                                var itemsTobeDeleted = oldMailRecipients.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdMailRecipient)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newMailRecipients.ForEach(pc =>
                                {
                                    pc.IdMailStatus = idMailStatu;
                                    DaoFactories.Instance.MailRecipientDao.SaveOnlyMailRecipient(pc, db);
                                });
                                return newMailRecipients;
                            }

                        
							public List<MailToSend> UpdateMailToSendsForMailStatuWithoutSavingNewItem(List<MailToSend> newMailToSends,long idMailStatu)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateMailToSendsForMailStatuWithoutSavingNewItem(newMailToSends,idMailStatu,db);
                                }
                            }

							public List<MailToSend> UpdateMailToSendsForMailStatuWithoutSavingNewItem(List<MailToSend> newMailToSends,long idMailStatu, SubscriptionEntities  db)
                            {
                                Expression<Func<MailToSend, bool>> expressionBuilder = p => p.IdEmailStatus == idMailStatu;
                                var oldMailToSends = DaoFactories.Instance.MailToSendDao.GetMailToSendCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldMailToSends.EntityList.Select(pc => pc.IdMailToSend).Except(newMailToSends.Where(pc => pc.IdMailToSend.HasValue).Select(pc => pc.IdMailToSend)).ToList();
                                var itemsTobeDeleted = oldMailToSends.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdMailToSend)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newMailToSends;
                            }


                            public List<MailToSend> UpdateMailToSendsForMailStatu(List<MailToSend> newMailToSends,long idMailStatu)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateMailToSendsForMailStatu(newMailToSends,idMailStatu,db);
                                }
                            }

                            public List<MailToSend> UpdateMailToSendsForMailStatu(List<MailToSend> newMailToSends,long idMailStatu, SubscriptionEntities  db)
                            {
                                Expression<Func<MailToSend, bool>> expressionBuilder = p => p.IdEmailStatus == idMailStatu;
                                var oldMailToSends = DaoFactories.Instance.MailToSendDao.GetMailToSendCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldMailToSends.EntityList.Select(pc => pc.IdMailToSend).Except(newMailToSends.Where(pc => pc.IdMailToSend.HasValue).Select(pc => pc.IdMailToSend)).ToList();
                                var itemsTobeDeleted = oldMailToSends.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdMailToSend)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newMailToSends.ForEach(pc =>
                                {
                                    pc.IdEmailStatus = idMailStatu;
                                    DaoFactories.Instance.MailToSendDao.SaveOnlyMailToSend(pc, db);
                                });
                                return newMailToSends;
                            }

                        


    



		}
			public partial class MailToSendDao :IMailToSendDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public MailToSendDao(){
			
			}

			public MailToSendDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<MailToSend> GetAllMailToSends(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailToSends(db, shouldRemap);
                }
            }

            public List<MailToSend> GetAllMailToSends(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapMailToSendList(db.MailToSends.Where(p => p.IsDeactivated != true).ToList());
				
				return db.MailToSends.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<MailToSend> GetAllMailToSendsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailToSendsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<MailToSend> GetAllMailToSendsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<MailToSend, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
            {
				IQueryable<MailToSend> query =  db.MailToSends;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailToSend> baseListReturnType = new BaseListReturnType<MailToSend>();

                IQueryable<MailToSend> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdMailToSend" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<MailToSend, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.EmailSubject.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.EmailSubject.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ErrorMessage.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.EmailBody.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailToSendList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<MailToSend> GetAllMailToSendsWithMailRecipientsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendsByPage(sortingPagingInfo, db,expression,new List<string>(){"MailRecipients"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailToSend> GetAllMailToSendsWithMailServerSettingDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendsByPage(sortingPagingInfo, db,expression,new List<string>(){"MailServerSetting"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailToSend> GetAllMailToSendsWithMailStatuDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendsByPage(sortingPagingInfo, db,expression,new List<string>(){"MailStatu"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailToSend> GetAllMailToSendsWithMailToSendDocumentsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendsByPage(sortingPagingInfo, db,expression,new List<string>(){"MailToSendDocuments"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailToSend> GetAllMailToSendsWithTransaction_MailToSendDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction_MailToSend"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<MailToSend> GetAllMailToSendsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailToSendsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<MailToSend> GetAllMailToSendsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<MailToSend, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
            {
				IQueryable<MailToSend> query =  db.MailToSends;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailToSend> baseListReturnType = new BaseListReturnType<MailToSend>();

                IQueryable<MailToSend> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdMailToSend" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<MailToSend, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailToSendList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<MailToSend> GetAllMailToSendsWithMailRecipientsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailRecipients"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailToSend> GetAllMailToSendsWithMailServerSettingDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailServerSetting"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailToSend> GetAllMailToSendsWithMailStatuDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailStatu"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailToSend> GetAllMailToSendsWithMailToSendDocumentsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailToSendDocuments"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<MailToSend> GetAllMailToSendsWithTransaction_MailToSendDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap = false, Func<MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction_MailToSend"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<MailToSend> GetAllMailToSendsWithMailRecipientsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendWitDetails(new List<string>(){"MailRecipients"},shouldRemap);
					}
				}
							public BaseListReturnType<MailToSend> GetAllMailToSendsWithMailServerSettingDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendWitDetails(new List<string>(){"MailServerSetting"},shouldRemap);
					}
				}
							public BaseListReturnType<MailToSend> GetAllMailToSendsWithMailStatuDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendWitDetails(new List<string>(){"MailStatu"},shouldRemap);
					}
				}
							public BaseListReturnType<MailToSend> GetAllMailToSendsWithMailToSendDocumentsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendWitDetails(new List<string>(){"MailToSendDocuments"},shouldRemap);
					}
				}
							public BaseListReturnType<MailToSend> GetAllMailToSendsWithTransaction_MailToSendDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendWitDetails(new List<string>(){"Transaction_MailToSend"},shouldRemap);
					}
				}
			

			public BaseListReturnType<MailToSend> GetAllMailToSendWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailToSendWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<MailToSend> GetAllMailToSendWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<MailToSend> query =  db.MailToSends;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailToSend> baseListReturnType = new BaseListReturnType<MailToSend>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailToSendList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public MailToSend GetMailToSend(long idMailToSend,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailToSend(idMailToSend, db,shouldRemap);
                }
            }
                        public MailToSend GetMailToSend(long idMailToSend, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapMailToSendSingle(db.MailToSends.Where(p => p.IdMailToSend == idMailToSend && p.IsDeactivated != true).FirstOrDefault());

                return db.MailToSends.Where(p => p.IdMailToSend == idMailToSend && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public MailToSend GetMailToSendCustom( Expression<Func<MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetMailToSendCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public MailToSend GetMailToSendCustom( SubscriptionEntities db , Expression<Func<MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<MailToSend> query =  db.MailToSends;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapMailToSendSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<MailToSend> GetMailToSendCustomList( Expression<Func<MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<MailToSend, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetMailToSendCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<MailToSend> GetMailToSendCustomList(  SubscriptionEntities db , Expression<Func<MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<MailToSend, dynamic> orderExpression = null)
			{
				IQueryable<MailToSend> query =  db.MailToSends;
                BaseListReturnType<MailToSend> baseListReturnType = new BaseListReturnType<MailToSend>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailToSendList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public MailToSend GetMailToSendWithMailRecipientsDetails(long idMailToSend,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailToSendWithDetails(idMailToSend,new List<string>(){"MailRecipients"},shouldRemap);
					}
				}

            //IdMailToSend -- Many


							public MailToSend GetMailToSendWithMailServerSettingDetails(long idMailToSend,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailToSendWithDetails(idMailToSend,new List<string>(){"MailServerSetting"},shouldRemap);
					}
				}

            //IdMailServerSetting -- ZeroOrOne

                public BaseListReturnType<MailToSend> GetAllMailToSendListByMailServerSetting(long idMailServerSetting)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllMailToSendListByMailServerSetting(idMailServerSetting, db);
                    }
                }
                public BaseListReturnType<MailToSend> GetAllMailToSendListByMailServerSetting(long idMailServerSetting, SubscriptionEntities db)
                {
                    Expression<Func<MailToSend, bool>> expression = property=> property.IdMailServerSetting == idMailServerSetting && property.IsDeactivated !=true;
                    return GetMailToSendCustomList(db, expression, null, true);
                }
                public BaseListReturnType<MailToSend> GetAllMailToSendListByMailServerSettingByPage(long idMailServerSetting, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllMailToSendListByMailServerSettingByPage(idMailServerSetting, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<MailToSend> GetAllMailToSendListByMailServerSettingByPage(long idMailServerSetting, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<MailToSend, bool>> expression = property => property.IdMailServerSetting == idMailServerSetting && property.IsDeactivated !=true;
                    return GetAllMailToSendsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public MailToSend GetMailToSendWithMailStatuDetails(long idMailToSend,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailToSendWithDetails(idMailToSend,new List<string>(){"MailStatu"},shouldRemap);
					}
				}

            //IdEmailStatus -- ZeroOrOne

                public BaseListReturnType<MailToSend> GetAllMailToSendListByMailStatu(long idMailStatu)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllMailToSendListByMailStatu(idMailStatu, db);
                    }
                }
                public BaseListReturnType<MailToSend> GetAllMailToSendListByMailStatu(long idMailStatu, SubscriptionEntities db)
                {
                    Expression<Func<MailToSend, bool>> expression = property=> property.IdEmailStatus == idMailStatu && property.IsDeactivated !=true;
                    return GetMailToSendCustomList(db, expression, null, true);
                }
                public BaseListReturnType<MailToSend> GetAllMailToSendListByMailStatuByPage(long idMailStatu, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllMailToSendListByMailStatuByPage(idMailStatu, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<MailToSend> GetAllMailToSendListByMailStatuByPage(long idMailStatu, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<MailToSend, bool>> expression = property => property.IdEmailStatus == idMailStatu && property.IsDeactivated !=true;
                    return GetAllMailToSendsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public MailToSend GetMailToSendWithMailToSendDocumentsDetails(long idMailToSend,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailToSendWithDetails(idMailToSend,new List<string>(){"MailToSendDocuments"},shouldRemap);
					}
				}

            //IdMailToSend -- Many


							public MailToSend GetMailToSendWithTransaction_MailToSendDetails(long idMailToSend,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailToSendWithDetails(idMailToSend,new List<string>(){"Transaction_MailToSend"},shouldRemap);
					}
				}

            //IdMailToSend -- Many


			


			public MailToSend GetMailToSendWithDetails(long idMailToSend, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailToSendWithDetails(idMailToSend, db,includes,shouldRemap);
                }
            }

            public MailToSend GetMailToSendWithDetails(long idMailToSend, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<MailToSend> query =  db.MailToSends;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapMailToSendSingle(query
						.Where(p => p.IdMailToSend == idMailToSend && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdMailToSend == idMailToSend && p.IsDeactivated != true).FirstOrDefault();
            }

            public MailToSend GetMailToSendWitDetails(long idMailToSend,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailToSendWitDetails(idMailToSend, db,shouldRemap);
                }
            }

            public MailToSend GetMailToSendWitDetails(long idMailToSend, SubscriptionEntities db,bool shouldRemap = false)
            {
				MailToSend _MailToSend = db.MailToSends

					.Include("MailRecipients")
					.Include("MailServerSetting")
					.Include("MailStatu")
					.Include("MailToSendDocuments")
					.Include("Transaction_MailToSend")
								.Where(p => p.IdMailToSend == idMailToSend && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapMailToSendSingle(_MailToSend);

				return  _MailToSend;
            }

            public List<MailToSend> GetMailToSendListByIdList(List<long> mailToSendIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailToSendListByIdList(mailToSendIds, db);
                }
            }
            public List<MailToSend> GetMailToSendListByIdList(List<long> mailToSendIds, SubscriptionEntities db)
            {
                return db.MailToSends.Where(p => p.IsDeactivated != true && mailToSendIds.Contains(p.IdMailToSend.Value)).ToList();
            }


            public void SaveMailToSend(MailToSend mailToSend)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveMailToSend(mailToSend, db);
                }
            }

            public void SaveMailToSend(MailToSend mailToSend, SubscriptionEntities db)
            {
									if (mailToSend.MailServerSetting != null) 
						DaoFactories.Instance.MailServerSettingDao.SaveMailServerSetting(mailToSend.MailServerSetting, db);
									if (mailToSend.MailStatu != null) 
						DaoFactories.Instance.MailStatuDao.SaveMailStatu(mailToSend.MailStatu, db);
				                
                if (mailToSend.IdMailToSend.HasValue){
					var mailToSendFromDb = db.MailToSends.Where(p => p.IdMailToSend == mailToSend.IdMailToSend).FirstOrDefault();
													mailToSendFromDb.IdMailServerSetting = mailToSend.IdMailServerSetting;
													mailToSendFromDb.IdEmailStatus = mailToSend.IdEmailStatus;
													mailToSendFromDb.FailureCount = mailToSend.FailureCount;
													mailToSendFromDb.EmailSubject = mailToSend.EmailSubject;
													mailToSendFromDb.ErrorMessage = mailToSend.ErrorMessage;
													mailToSendFromDb.EmailBody = mailToSend.EmailBody;
													mailToSendFromDb.IsDeactivated = mailToSend.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              mailToSend.MailServerSetting = null;
                                                        //fix for saving without duplicating items in db
                              mailToSend.MailStatu = null;
                                                db.MailToSends.Add(mailToSend);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyMailToSend(MailToSend mailToSend)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyMailToSend(mailToSend, db);
                }
            }

            public void SaveOnlyMailToSend(MailToSend mailToSend, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // mailToSend.MailServerSetting = null;
                                                        //fix for saving without duplicating items in db
                             // mailToSend.MailStatu = null;
                                            if (mailToSend.IdMailToSend.HasValue){
					var mailToSendFromDb = db.MailToSends.Where(p => p.IdMailToSend == mailToSend.IdMailToSend).FirstOrDefault();
													mailToSendFromDb.IdMailServerSetting = mailToSend.IdMailServerSetting;
													mailToSendFromDb.IdEmailStatus = mailToSend.IdEmailStatus;
													mailToSendFromDb.FailureCount = mailToSend.FailureCount;
													mailToSendFromDb.EmailSubject = mailToSend.EmailSubject;
													mailToSendFromDb.ErrorMessage = mailToSend.ErrorMessage;
													mailToSendFromDb.EmailBody = mailToSend.EmailBody;
													mailToSendFromDb.IsDeactivated = mailToSend.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					MailToSend _mailToSend = new MailToSend();
																	_mailToSend.IdMailServerSetting = mailToSend.IdMailServerSetting;
													_mailToSend.IdEmailStatus = mailToSend.IdEmailStatus;
													_mailToSend.FailureCount = mailToSend.FailureCount;
													_mailToSend.EmailSubject = mailToSend.EmailSubject;
													_mailToSend.ErrorMessage = mailToSend.ErrorMessage;
													_mailToSend.EmailBody = mailToSend.EmailBody;
													_mailToSend.IsDeactivated = mailToSend.IsDeactivated;
					

                    db.MailToSends.Add(_mailToSend);
					db.SaveChanges();
					mailToSend.IdMailToSend =  _mailToSend.IdMailToSend;
                    
                }
            }

            public void DeleteMailToSend(MailToSend mailToSend)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteMailToSend(mailToSend, db);
                }
            }

            public void DeleteMailToSend(MailToSend mailToSend, SubscriptionEntities db)
            {
								var mailToSendFromDb = GetMailToSend(mailToSend.IdMailToSend.Value,db);
				mailToSendFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyMailToSend(MailToSend mailToSend)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyMailToSend(mailToSend, db);
                }
            }

            public void DeletePermanentlyMailToSend(MailToSend mailToSend, SubscriptionEntities db)
            {
								var mailToSendFromDb = GetMailToSend(mailToSend.IdMailToSend.Value,db);
				
				db.MailToSends.Remove(mailToSendFromDb);
                db.SaveChanges();
            }


            
							public List<MailRecipient> UpdateMailRecipientsForMailToSendWithoutSavingNewItem(List<MailRecipient> newMailRecipients,long idMailToSend)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateMailRecipientsForMailToSendWithoutSavingNewItem(newMailRecipients,idMailToSend,db);
                                }
                            }

							public List<MailRecipient> UpdateMailRecipientsForMailToSendWithoutSavingNewItem(List<MailRecipient> newMailRecipients,long idMailToSend, SubscriptionEntities  db)
                            {
                                Expression<Func<MailRecipient, bool>> expressionBuilder = p => p.IdMailToSend == idMailToSend;
                                var oldMailRecipients = DaoFactories.Instance.MailRecipientDao.GetMailRecipientCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldMailRecipients.EntityList.Select(pc => pc.IdMailRecipient).Except(newMailRecipients.Where(pc => pc.IdMailRecipient.HasValue).Select(pc => pc.IdMailRecipient)).ToList();
                                var itemsTobeDeleted = oldMailRecipients.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdMailRecipient)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newMailRecipients;
                            }


                            public List<MailRecipient> UpdateMailRecipientsForMailToSend(List<MailRecipient> newMailRecipients,long idMailToSend)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateMailRecipientsForMailToSend(newMailRecipients,idMailToSend,db);
                                }
                            }

                            public List<MailRecipient> UpdateMailRecipientsForMailToSend(List<MailRecipient> newMailRecipients,long idMailToSend, SubscriptionEntities  db)
                            {
                                Expression<Func<MailRecipient, bool>> expressionBuilder = p => p.IdMailToSend == idMailToSend;
                                var oldMailRecipients = DaoFactories.Instance.MailRecipientDao.GetMailRecipientCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldMailRecipients.EntityList.Select(pc => pc.IdMailRecipient).Except(newMailRecipients.Where(pc => pc.IdMailRecipient.HasValue).Select(pc => pc.IdMailRecipient)).ToList();
                                var itemsTobeDeleted = oldMailRecipients.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdMailRecipient)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newMailRecipients.ForEach(pc =>
                                {
                                    pc.IdMailToSend = idMailToSend;
                                    DaoFactories.Instance.MailRecipientDao.SaveOnlyMailRecipient(pc, db);
                                });
                                return newMailRecipients;
                            }

                        
							public List<MailToSendDocument> UpdateMailToSendDocumentsForMailToSendWithoutSavingNewItem(List<MailToSendDocument> newMailToSendDocuments,long idMailToSend)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateMailToSendDocumentsForMailToSendWithoutSavingNewItem(newMailToSendDocuments,idMailToSend,db);
                                }
                            }

							public List<MailToSendDocument> UpdateMailToSendDocumentsForMailToSendWithoutSavingNewItem(List<MailToSendDocument> newMailToSendDocuments,long idMailToSend, SubscriptionEntities  db)
                            {
                                Expression<Func<MailToSendDocument, bool>> expressionBuilder = p => p.IdMailToSend == idMailToSend;
                                var oldMailToSendDocuments = DaoFactories.Instance.MailToSendDocumentDao.GetMailToSendDocumentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldMailToSendDocuments.EntityList.Select(pc => pc.IdMailToSendDocument).Except(newMailToSendDocuments.Where(pc => pc.IdMailToSendDocument.HasValue).Select(pc => pc.IdMailToSendDocument)).ToList();
                                var itemsTobeDeleted = oldMailToSendDocuments.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdMailToSendDocument)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newMailToSendDocuments;
                            }


                            public List<MailToSendDocument> UpdateMailToSendDocumentsForMailToSend(List<MailToSendDocument> newMailToSendDocuments,long idMailToSend)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateMailToSendDocumentsForMailToSend(newMailToSendDocuments,idMailToSend,db);
                                }
                            }

                            public List<MailToSendDocument> UpdateMailToSendDocumentsForMailToSend(List<MailToSendDocument> newMailToSendDocuments,long idMailToSend, SubscriptionEntities  db)
                            {
                                Expression<Func<MailToSendDocument, bool>> expressionBuilder = p => p.IdMailToSend == idMailToSend;
                                var oldMailToSendDocuments = DaoFactories.Instance.MailToSendDocumentDao.GetMailToSendDocumentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldMailToSendDocuments.EntityList.Select(pc => pc.IdMailToSendDocument).Except(newMailToSendDocuments.Where(pc => pc.IdMailToSendDocument.HasValue).Select(pc => pc.IdMailToSendDocument)).ToList();
                                var itemsTobeDeleted = oldMailToSendDocuments.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdMailToSendDocument)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newMailToSendDocuments.ForEach(pc =>
                                {
                                    pc.IdMailToSend = idMailToSend;
                                    DaoFactories.Instance.MailToSendDocumentDao.SaveOnlyMailToSendDocument(pc, db);
                                });
                                return newMailToSendDocuments;
                            }

                        
							public List<Transaction_MailToSend> UpdateTransaction_MailToSendForMailToSendWithoutSavingNewItem(List<Transaction_MailToSend> newTransaction_MailToSend,long idMailToSend)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransaction_MailToSendForMailToSendWithoutSavingNewItem(newTransaction_MailToSend,idMailToSend,db);
                                }
                            }

							public List<Transaction_MailToSend> UpdateTransaction_MailToSendForMailToSendWithoutSavingNewItem(List<Transaction_MailToSend> newTransaction_MailToSend,long idMailToSend, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction_MailToSend, bool>> expressionBuilder = p => p.IdMailToSend == idMailToSend;
                                var oldTransaction_MailToSend = DaoFactories.Instance.Transaction_MailToSendDao.GetTransaction_MailToSendCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransaction_MailToSend.EntityList.Select(pc => pc.IdTransaction_MailToSend).Except(newTransaction_MailToSend.Where(pc => pc.IdTransaction_MailToSend.HasValue).Select(pc => pc.IdTransaction_MailToSend)).ToList();
                                var itemsTobeDeleted = oldTransaction_MailToSend.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction_MailToSend)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransaction_MailToSend;
                            }


                            public List<Transaction_MailToSend> UpdateTransaction_MailToSendForMailToSend(List<Transaction_MailToSend> newTransaction_MailToSend,long idMailToSend)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransaction_MailToSendForMailToSend(newTransaction_MailToSend,idMailToSend,db);
                                }
                            }

                            public List<Transaction_MailToSend> UpdateTransaction_MailToSendForMailToSend(List<Transaction_MailToSend> newTransaction_MailToSend,long idMailToSend, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction_MailToSend, bool>> expressionBuilder = p => p.IdMailToSend == idMailToSend;
                                var oldTransaction_MailToSend = DaoFactories.Instance.Transaction_MailToSendDao.GetTransaction_MailToSendCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransaction_MailToSend.EntityList.Select(pc => pc.IdTransaction_MailToSend).Except(newTransaction_MailToSend.Where(pc => pc.IdTransaction_MailToSend.HasValue).Select(pc => pc.IdTransaction_MailToSend)).ToList();
                                var itemsTobeDeleted = oldTransaction_MailToSend.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction_MailToSend)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransaction_MailToSend.ForEach(pc =>
                                {
                                    pc.IdMailToSend = idMailToSend;
                                    DaoFactories.Instance.Transaction_MailToSendDao.SaveOnlyTransaction_MailToSend(pc, db);
                                });
                                return newTransaction_MailToSend;
                            }

                        


    



		}
			public partial class MailToSendDocumentDao :IMailToSendDocumentDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public MailToSendDocumentDao(){
			
			}

			public MailToSendDocumentDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<MailToSendDocument> GetAllMailToSendDocuments(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailToSendDocuments(db, shouldRemap);
                }
            }

            public List<MailToSendDocument> GetAllMailToSendDocuments(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapMailToSendDocumentList(db.MailToSendDocuments.Where(p => p.IsDeactivated != true).ToList());
				
				return db.MailToSendDocuments.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSendDocument, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailToSendDocument, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailToSendDocumentsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<MailToSendDocument, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailToSendDocument, dynamic> orderExpression = null)
            {
				IQueryable<MailToSendDocument> query =  db.MailToSendDocuments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailToSendDocument> baseListReturnType = new BaseListReturnType<MailToSendDocument>();

                IQueryable<MailToSendDocument> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdMailToSendDocument" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<MailToSendDocument, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.RelativeDocumentPath.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.RelativeDocumentPath.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.DocumentName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailToSendDocumentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentsWithMailToSendDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSendDocument, bool>> expression = null,bool shouldRemap = false, Func<MailToSendDocument, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendDocumentsByPage(sortingPagingInfo, db,expression,new List<string>(){"MailToSend"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSendDocument, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailToSendDocument, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailToSendDocumentsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<MailToSendDocument, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<MailToSendDocument, dynamic> orderExpression = null)
            {
				IQueryable<MailToSendDocument> query =  db.MailToSendDocuments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailToSendDocument> baseListReturnType = new BaseListReturnType<MailToSendDocument>();

                IQueryable<MailToSendDocument> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdMailToSendDocument" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<MailToSendDocument, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailToSendDocumentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentsWithMailToSendDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSendDocument, bool>> expression = null,bool shouldRemap = false, Func<MailToSendDocument, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendDocumentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailToSend"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentsWithMailToSendDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllMailToSendDocumentWitDetails(new List<string>(){"MailToSend"},shouldRemap);
					}
				}
			

			public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllMailToSendDocumentWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<MailToSendDocument> query =  db.MailToSendDocuments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<MailToSendDocument> baseListReturnType = new BaseListReturnType<MailToSendDocument>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailToSendDocumentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public MailToSendDocument GetMailToSendDocument(long idMailToSendDocument,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailToSendDocument(idMailToSendDocument, db,shouldRemap);
                }
            }
                        public MailToSendDocument GetMailToSendDocument(long idMailToSendDocument, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapMailToSendDocumentSingle(db.MailToSendDocuments.Where(p => p.IdMailToSendDocument == idMailToSendDocument && p.IsDeactivated != true).FirstOrDefault());

                return db.MailToSendDocuments.Where(p => p.IdMailToSendDocument == idMailToSendDocument && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public MailToSendDocument GetMailToSendDocumentCustom( Expression<Func<MailToSendDocument, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetMailToSendDocumentCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public MailToSendDocument GetMailToSendDocumentCustom( SubscriptionEntities db , Expression<Func<MailToSendDocument, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<MailToSendDocument> query =  db.MailToSendDocuments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapMailToSendDocumentSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<MailToSendDocument> GetMailToSendDocumentCustomList( Expression<Func<MailToSendDocument, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<MailToSendDocument, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetMailToSendDocumentCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<MailToSendDocument> GetMailToSendDocumentCustomList(  SubscriptionEntities db , Expression<Func<MailToSendDocument, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<MailToSendDocument, dynamic> orderExpression = null)
			{
				IQueryable<MailToSendDocument> query =  db.MailToSendDocuments;
                BaseListReturnType<MailToSendDocument> baseListReturnType = new BaseListReturnType<MailToSendDocument>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapMailToSendDocumentList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public MailToSendDocument GetMailToSendDocumentWithMailToSendDetails(long idMailToSendDocument,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetMailToSendDocumentWithDetails(idMailToSendDocument,new List<string>(){"MailToSend"},shouldRemap);
					}
				}

            //IdMailToSend -- ZeroOrOne

                public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentListByMailToSend(long idMailToSend)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllMailToSendDocumentListByMailToSend(idMailToSend, db);
                    }
                }
                public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentListByMailToSend(long idMailToSend, SubscriptionEntities db)
                {
                    Expression<Func<MailToSendDocument, bool>> expression = property=> property.IdMailToSend == idMailToSend && property.IsDeactivated !=true;
                    return GetMailToSendDocumentCustomList(db, expression, null, true);
                }
                public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentListByMailToSendByPage(long idMailToSend, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllMailToSendDocumentListByMailToSendByPage(idMailToSend, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentListByMailToSendByPage(long idMailToSend, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<MailToSendDocument, bool>> expression = property => property.IdMailToSend == idMailToSend && property.IsDeactivated !=true;
                    return GetAllMailToSendDocumentsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public MailToSendDocument GetMailToSendDocumentWithDetails(long idMailToSendDocument, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailToSendDocumentWithDetails(idMailToSendDocument, db,includes,shouldRemap);
                }
            }

            public MailToSendDocument GetMailToSendDocumentWithDetails(long idMailToSendDocument, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<MailToSendDocument> query =  db.MailToSendDocuments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapMailToSendDocumentSingle(query
						.Where(p => p.IdMailToSendDocument == idMailToSendDocument && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdMailToSendDocument == idMailToSendDocument && p.IsDeactivated != true).FirstOrDefault();
            }

            public MailToSendDocument GetMailToSendDocumentWitDetails(long idMailToSendDocument,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailToSendDocumentWitDetails(idMailToSendDocument, db,shouldRemap);
                }
            }

            public MailToSendDocument GetMailToSendDocumentWitDetails(long idMailToSendDocument, SubscriptionEntities db,bool shouldRemap = false)
            {
				MailToSendDocument _MailToSendDocument = db.MailToSendDocuments

					.Include("MailToSend")
								.Where(p => p.IdMailToSendDocument == idMailToSendDocument && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapMailToSendDocumentSingle(_MailToSendDocument);

				return  _MailToSendDocument;
            }

            public List<MailToSendDocument> GetMailToSendDocumentListByIdList(List<long> mailToSendDocumentIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetMailToSendDocumentListByIdList(mailToSendDocumentIds, db);
                }
            }
            public List<MailToSendDocument> GetMailToSendDocumentListByIdList(List<long> mailToSendDocumentIds, SubscriptionEntities db)
            {
                return db.MailToSendDocuments.Where(p => p.IsDeactivated != true && mailToSendDocumentIds.Contains(p.IdMailToSendDocument.Value)).ToList();
            }


            public void SaveMailToSendDocument(MailToSendDocument mailToSendDocument)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveMailToSendDocument(mailToSendDocument, db);
                }
            }

            public void SaveMailToSendDocument(MailToSendDocument mailToSendDocument, SubscriptionEntities db)
            {
									if (mailToSendDocument.MailToSend != null) 
						DaoFactories.Instance.MailToSendDao.SaveMailToSend(mailToSendDocument.MailToSend, db);
				                
                if (mailToSendDocument.IdMailToSendDocument.HasValue){
					var mailToSendDocumentFromDb = db.MailToSendDocuments.Where(p => p.IdMailToSendDocument == mailToSendDocument.IdMailToSendDocument).FirstOrDefault();
													mailToSendDocumentFromDb.IdMailToSend = mailToSendDocument.IdMailToSend;
													mailToSendDocumentFromDb.IsDeactivated = mailToSendDocument.IsDeactivated;
													mailToSendDocumentFromDb.RelativeDocumentPath = mailToSendDocument.RelativeDocumentPath;
													mailToSendDocumentFromDb.DocumentName = mailToSendDocument.DocumentName;
									}
                else{
                                                //fix for saving without duplicating items in db
                              mailToSendDocument.MailToSend = null;
                                                db.MailToSendDocuments.Add(mailToSendDocument);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyMailToSendDocument(MailToSendDocument mailToSendDocument)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyMailToSendDocument(mailToSendDocument, db);
                }
            }

            public void SaveOnlyMailToSendDocument(MailToSendDocument mailToSendDocument, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // mailToSendDocument.MailToSend = null;
                                            if (mailToSendDocument.IdMailToSendDocument.HasValue){
					var mailToSendDocumentFromDb = db.MailToSendDocuments.Where(p => p.IdMailToSendDocument == mailToSendDocument.IdMailToSendDocument).FirstOrDefault();
													mailToSendDocumentFromDb.IdMailToSend = mailToSendDocument.IdMailToSend;
													mailToSendDocumentFromDb.IsDeactivated = mailToSendDocument.IsDeactivated;
													mailToSendDocumentFromDb.RelativeDocumentPath = mailToSendDocument.RelativeDocumentPath;
													mailToSendDocumentFromDb.DocumentName = mailToSendDocument.DocumentName;
										 db.SaveChanges();

				}
                else{
					MailToSendDocument _mailToSendDocument = new MailToSendDocument();
																	_mailToSendDocument.IdMailToSend = mailToSendDocument.IdMailToSend;
													_mailToSendDocument.IsDeactivated = mailToSendDocument.IsDeactivated;
													_mailToSendDocument.RelativeDocumentPath = mailToSendDocument.RelativeDocumentPath;
													_mailToSendDocument.DocumentName = mailToSendDocument.DocumentName;
					

                    db.MailToSendDocuments.Add(_mailToSendDocument);
					db.SaveChanges();
					mailToSendDocument.IdMailToSendDocument =  _mailToSendDocument.IdMailToSendDocument;
                    
                }
            }

            public void DeleteMailToSendDocument(MailToSendDocument mailToSendDocument)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteMailToSendDocument(mailToSendDocument, db);
                }
            }

            public void DeleteMailToSendDocument(MailToSendDocument mailToSendDocument, SubscriptionEntities db)
            {
								var mailToSendDocumentFromDb = GetMailToSendDocument(mailToSendDocument.IdMailToSendDocument.Value,db);
				mailToSendDocumentFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyMailToSendDocument(MailToSendDocument mailToSendDocument)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyMailToSendDocument(mailToSendDocument, db);
                }
            }

            public void DeletePermanentlyMailToSendDocument(MailToSendDocument mailToSendDocument, SubscriptionEntities db)
            {
								var mailToSendDocumentFromDb = GetMailToSendDocument(mailToSendDocument.IdMailToSendDocument.Value,db);
				
				db.MailToSendDocuments.Remove(mailToSendDocumentFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class NLogDetailDao :INLogDetailDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public NLogDetailDao(){
			
			}

			public NLogDetailDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<NLogDetail> GetAllNLogDetails(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllNLogDetails(db, shouldRemap);
                }
            }

            public List<NLogDetail> GetAllNLogDetails(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapNLogDetailList(db.NLogDetails.Where(p => p.IsDeactivated != true).ToList());
				
				return db.NLogDetails.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<NLogDetail> GetAllNLogDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<NLogDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<NLogDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllNLogDetailsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<NLogDetail> GetAllNLogDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<NLogDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<NLogDetail, dynamic> orderExpression = null)
            {
				IQueryable<NLogDetail> query =  db.NLogDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<NLogDetail> baseListReturnType = new BaseListReturnType<NLogDetail>();

                IQueryable<NLogDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdNLogDetail" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<NLogDetail, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.CallSite.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.CallSite.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Application.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Level.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Message.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.UserName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ServerName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Port.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Url.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Https.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ServerAddress.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.RemoteAddress.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Logger.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Exception.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Stacktrace.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapNLogDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

			



            public BaseListReturnType<NLogDetail> GetAllNLogDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<NLogDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<NLogDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllNLogDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<NLogDetail> GetAllNLogDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<NLogDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<NLogDetail, dynamic> orderExpression = null)
            {
				IQueryable<NLogDetail> query =  db.NLogDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<NLogDetail> baseListReturnType = new BaseListReturnType<NLogDetail>();

                IQueryable<NLogDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdNLogDetail" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<NLogDetail, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapNLogDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

			






			

			public BaseListReturnType<NLogDetail> GetAllNLogDetailWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllNLogDetailWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<NLogDetail> GetAllNLogDetailWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<NLogDetail> query =  db.NLogDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<NLogDetail> baseListReturnType = new BaseListReturnType<NLogDetail>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapNLogDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public NLogDetail GetNLogDetail(long idNLogDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetNLogDetail(idNLogDetail, db,shouldRemap);
                }
            }
                        public NLogDetail GetNLogDetail(long idNLogDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapNLogDetailSingle(db.NLogDetails.Where(p => p.IdNLogDetail == idNLogDetail && p.IsDeactivated != true).FirstOrDefault());

                return db.NLogDetails.Where(p => p.IdNLogDetail == idNLogDetail && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public NLogDetail GetNLogDetailCustom( Expression<Func<NLogDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetNLogDetailCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public NLogDetail GetNLogDetailCustom( SubscriptionEntities db , Expression<Func<NLogDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<NLogDetail> query =  db.NLogDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapNLogDetailSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<NLogDetail> GetNLogDetailCustomList( Expression<Func<NLogDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<NLogDetail, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetNLogDetailCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<NLogDetail> GetNLogDetailCustomList(  SubscriptionEntities db , Expression<Func<NLogDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<NLogDetail, dynamic> orderExpression = null)
			{
				IQueryable<NLogDetail> query =  db.NLogDetails;
                BaseListReturnType<NLogDetail> baseListReturnType = new BaseListReturnType<NLogDetail>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapNLogDetailList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
			


			public NLogDetail GetNLogDetailWithDetails(long idNLogDetail, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetNLogDetailWithDetails(idNLogDetail, db,includes,shouldRemap);
                }
            }

            public NLogDetail GetNLogDetailWithDetails(long idNLogDetail, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<NLogDetail> query =  db.NLogDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapNLogDetailSingle(query
						.Where(p => p.IdNLogDetail == idNLogDetail && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdNLogDetail == idNLogDetail && p.IsDeactivated != true).FirstOrDefault();
            }

            public NLogDetail GetNLogDetailWitDetails(long idNLogDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetNLogDetailWitDetails(idNLogDetail, db,shouldRemap);
                }
            }

            public NLogDetail GetNLogDetailWitDetails(long idNLogDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				NLogDetail _NLogDetail = db.NLogDetails

								.Where(p => p.IdNLogDetail == idNLogDetail && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapNLogDetailSingle(_NLogDetail);

				return  _NLogDetail;
            }

            public List<NLogDetail> GetNLogDetailListByIdList(List<long> nLogDetailIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetNLogDetailListByIdList(nLogDetailIds, db);
                }
            }
            public List<NLogDetail> GetNLogDetailListByIdList(List<long> nLogDetailIds, SubscriptionEntities db)
            {
                return db.NLogDetails.Where(p => p.IsDeactivated != true && nLogDetailIds.Contains(p.IdNLogDetail.Value)).ToList();
            }


            public void SaveNLogDetail(NLogDetail nLogDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveNLogDetail(nLogDetail, db);
                }
            }

            public void SaveNLogDetail(NLogDetail nLogDetail, SubscriptionEntities db)
            {
				                
                if (nLogDetail.IdNLogDetail.HasValue){
					var nLogDetailFromDb = db.NLogDetails.Where(p => p.IdNLogDetail == nLogDetail.IdNLogDetail).FirstOrDefault();
													nLogDetailFromDb.CallSite = nLogDetail.CallSite;
													nLogDetailFromDb.Application = nLogDetail.Application;
													nLogDetailFromDb.Logged = nLogDetail.Logged;
													nLogDetailFromDb.Level = nLogDetail.Level;
													nLogDetailFromDb.Message = nLogDetail.Message;
													nLogDetailFromDb.UserName = nLogDetail.UserName;
													nLogDetailFromDb.ServerName = nLogDetail.ServerName;
													nLogDetailFromDb.Port = nLogDetail.Port;
													nLogDetailFromDb.Url = nLogDetail.Url;
													nLogDetailFromDb.Https = nLogDetail.Https;
													nLogDetailFromDb.ServerAddress = nLogDetail.ServerAddress;
													nLogDetailFromDb.RemoteAddress = nLogDetail.RemoteAddress;
													nLogDetailFromDb.Logger = nLogDetail.Logger;
													nLogDetailFromDb.Exception = nLogDetail.Exception;
													nLogDetailFromDb.Stacktrace = nLogDetail.Stacktrace;
													nLogDetailFromDb.Date = nLogDetail.Date;
													nLogDetailFromDb.IsDeactivated = nLogDetail.IsDeactivated;
									}
                else{
                                        db.NLogDetails.Add(nLogDetail);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyNLogDetail(NLogDetail nLogDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyNLogDetail(nLogDetail, db);
                }
            }

            public void SaveOnlyNLogDetail(NLogDetail nLogDetail, SubscriptionEntities db)
            {
			                    if (nLogDetail.IdNLogDetail.HasValue){
					var nLogDetailFromDb = db.NLogDetails.Where(p => p.IdNLogDetail == nLogDetail.IdNLogDetail).FirstOrDefault();
													nLogDetailFromDb.CallSite = nLogDetail.CallSite;
													nLogDetailFromDb.Application = nLogDetail.Application;
													nLogDetailFromDb.Logged = nLogDetail.Logged;
													nLogDetailFromDb.Level = nLogDetail.Level;
													nLogDetailFromDb.Message = nLogDetail.Message;
													nLogDetailFromDb.UserName = nLogDetail.UserName;
													nLogDetailFromDb.ServerName = nLogDetail.ServerName;
													nLogDetailFromDb.Port = nLogDetail.Port;
													nLogDetailFromDb.Url = nLogDetail.Url;
													nLogDetailFromDb.Https = nLogDetail.Https;
													nLogDetailFromDb.ServerAddress = nLogDetail.ServerAddress;
													nLogDetailFromDb.RemoteAddress = nLogDetail.RemoteAddress;
													nLogDetailFromDb.Logger = nLogDetail.Logger;
													nLogDetailFromDb.Exception = nLogDetail.Exception;
													nLogDetailFromDb.Stacktrace = nLogDetail.Stacktrace;
													nLogDetailFromDb.Date = nLogDetail.Date;
													nLogDetailFromDb.IsDeactivated = nLogDetail.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					NLogDetail _nLogDetail = new NLogDetail();
																	_nLogDetail.CallSite = nLogDetail.CallSite;
													_nLogDetail.Application = nLogDetail.Application;
													_nLogDetail.Logged = nLogDetail.Logged;
													_nLogDetail.Level = nLogDetail.Level;
													_nLogDetail.Message = nLogDetail.Message;
													_nLogDetail.UserName = nLogDetail.UserName;
													_nLogDetail.ServerName = nLogDetail.ServerName;
													_nLogDetail.Port = nLogDetail.Port;
													_nLogDetail.Url = nLogDetail.Url;
													_nLogDetail.Https = nLogDetail.Https;
													_nLogDetail.ServerAddress = nLogDetail.ServerAddress;
													_nLogDetail.RemoteAddress = nLogDetail.RemoteAddress;
													_nLogDetail.Logger = nLogDetail.Logger;
													_nLogDetail.Exception = nLogDetail.Exception;
													_nLogDetail.Stacktrace = nLogDetail.Stacktrace;
													_nLogDetail.Date = nLogDetail.Date;
													_nLogDetail.IsDeactivated = nLogDetail.IsDeactivated;
					

                    db.NLogDetails.Add(_nLogDetail);
					db.SaveChanges();
					nLogDetail.IdNLogDetail =  _nLogDetail.IdNLogDetail;
                    
                }
            }

            public void DeleteNLogDetail(NLogDetail nLogDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteNLogDetail(nLogDetail, db);
                }
            }

            public void DeleteNLogDetail(NLogDetail nLogDetail, SubscriptionEntities db)
            {
								var nLogDetailFromDb = GetNLogDetail(nLogDetail.IdNLogDetail.Value,db);
				nLogDetailFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyNLogDetail(NLogDetail nLogDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyNLogDetail(nLogDetail, db);
                }
            }

            public void DeletePermanentlyNLogDetail(NLogDetail nLogDetail, SubscriptionEntities db)
            {
								var nLogDetailFromDb = GetNLogDetail(nLogDetail.IdNLogDetail.Value,db);
				
				db.NLogDetails.Remove(nLogDetailFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class OrderDao :IOrderDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public OrderDao(){
			
			}

			public OrderDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Order> GetAllOrders(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrders(db, shouldRemap);
                }
            }

            public List<Order> GetAllOrders(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderList(db.Orders.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Orders.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Order> GetAllOrdersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrdersByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Order> GetAllOrdersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Order, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
            {
				IQueryable<Order> query =  db.Orders;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Order> baseListReturnType = new BaseListReturnType<Order>();

                IQueryable<Order> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrder" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Order, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.OrderNumber.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.OrderNumber.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Order> GetAllOrdersWithBankStatementStagingHitsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrdersByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHits"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Order> GetAllOrdersWithUserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrdersByPage(sortingPagingInfo, db,expression,new List<string>(){"User"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Order> GetAllOrdersWithOrderConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrdersByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Order> GetAllOrdersWithOrderStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrdersByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Order> GetAllOrdersWithOrderDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrdersByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderDetails"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Order> GetAllOrdersByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrdersByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Order> GetAllOrdersByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Order, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
            {
				IQueryable<Order> query =  db.Orders;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Order> baseListReturnType = new BaseListReturnType<Order>();

                IQueryable<Order> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrder" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Order, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Order> GetAllOrdersWithBankStatementStagingHitsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrdersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHits"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Order> GetAllOrdersWithUserDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrdersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"User"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Order> GetAllOrdersWithOrderConceptDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrdersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Order> GetAllOrdersWithOrderStateDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrdersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Order> GetAllOrdersWithOrderDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap = false, Func<Order, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrdersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderDetails"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Order> GetAllOrdersWithBankStatementStagingHitsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderWitDetails(new List<string>(){"BankStatementStagingHits"},shouldRemap);
					}
				}
							public BaseListReturnType<Order> GetAllOrdersWithUserDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderWitDetails(new List<string>(){"User"},shouldRemap);
					}
				}
							public BaseListReturnType<Order> GetAllOrdersWithOrderConceptDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderWitDetails(new List<string>(){"OrderConcept"},shouldRemap);
					}
				}
							public BaseListReturnType<Order> GetAllOrdersWithOrderStateDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderWitDetails(new List<string>(){"OrderState"},shouldRemap);
					}
				}
							public BaseListReturnType<Order> GetAllOrdersWithOrderDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderWitDetails(new List<string>(){"OrderDetails"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Order> GetAllOrderWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Order> GetAllOrderWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Order> query =  db.Orders;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Order> baseListReturnType = new BaseListReturnType<Order>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Order GetOrder(long idOrder,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrder(idOrder, db,shouldRemap);
                }
            }
                        public Order GetOrder(long idOrder, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderSingle(db.Orders.Where(p => p.IdOrder == idOrder && p.IsDeactivated != true).FirstOrDefault());

                return db.Orders.Where(p => p.IdOrder == idOrder && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Order GetOrderCustom( Expression<Func<Order, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Order GetOrderCustom( SubscriptionEntities db , Expression<Func<Order, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Order> query =  db.Orders;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapOrderSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Order> GetOrderCustomList( Expression<Func<Order, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Order, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Order> GetOrderCustomList(  SubscriptionEntities db , Expression<Func<Order, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Order, dynamic> orderExpression = null)
			{
				IQueryable<Order> query =  db.Orders;
                BaseListReturnType<Order> baseListReturnType = new BaseListReturnType<Order>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Order GetOrderWithBankStatementStagingHitsDetails(long idOrder,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderWithDetails(idOrder,new List<string>(){"BankStatementStagingHits"},shouldRemap);
					}
				}

            //IdOrder -- Many


							public Order GetOrderWithUserDetails(long idOrder,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderWithDetails(idOrder,new List<string>(){"User"},shouldRemap);
					}
				}

            //IdUserAuthor -- ZeroOrOne

                public BaseListReturnType<Order> GetAllOrderListByUser(long idUser)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderListByUser(idUser, db);
                    }
                }
                public BaseListReturnType<Order> GetAllOrderListByUser(long idUser, SubscriptionEntities db)
                {
                    Expression<Func<Order, bool>> expression = property=> property.IdUserAuthor == idUser && property.IsDeactivated !=true;
                    return GetOrderCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Order> GetAllOrderListByUserByPage(long idUser, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderListByUserByPage(idUser, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Order> GetAllOrderListByUserByPage(long idUser, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Order, bool>> expression = property => property.IdUserAuthor == idUser && property.IsDeactivated !=true;
                    return GetAllOrdersByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Order GetOrderWithOrderConceptDetails(long idOrder,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderWithDetails(idOrder,new List<string>(){"OrderConcept"},shouldRemap);
					}
				}

            //IdOrderConcept -- ZeroOrOne

                public BaseListReturnType<Order> GetAllOrderListByOrderConcept(long idOrderConcept)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderListByOrderConcept(idOrderConcept, db);
                    }
                }
                public BaseListReturnType<Order> GetAllOrderListByOrderConcept(long idOrderConcept, SubscriptionEntities db)
                {
                    Expression<Func<Order, bool>> expression = property=> property.IdOrderConcept == idOrderConcept && property.IsDeactivated !=true;
                    return GetOrderCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Order> GetAllOrderListByOrderConceptByPage(long idOrderConcept, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderListByOrderConceptByPage(idOrderConcept, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Order> GetAllOrderListByOrderConceptByPage(long idOrderConcept, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Order, bool>> expression = property => property.IdOrderConcept == idOrderConcept && property.IsDeactivated !=true;
                    return GetAllOrdersByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Order GetOrderWithOrderStateDetails(long idOrder,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderWithDetails(idOrder,new List<string>(){"OrderState"},shouldRemap);
					}
				}

            //IdOrderState -- ZeroOrOne

                public BaseListReturnType<Order> GetAllOrderListByOrderState(long idOrderState)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderListByOrderState(idOrderState, db);
                    }
                }
                public BaseListReturnType<Order> GetAllOrderListByOrderState(long idOrderState, SubscriptionEntities db)
                {
                    Expression<Func<Order, bool>> expression = property=> property.IdOrderState == idOrderState && property.IsDeactivated !=true;
                    return GetOrderCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Order> GetAllOrderListByOrderStateByPage(long idOrderState, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderListByOrderStateByPage(idOrderState, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Order> GetAllOrderListByOrderStateByPage(long idOrderState, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Order, bool>> expression = property => property.IdOrderState == idOrderState && property.IsDeactivated !=true;
                    return GetAllOrdersByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Order GetOrderWithOrderDetailsDetails(long idOrder,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderWithDetails(idOrder,new List<string>(){"OrderDetails"},shouldRemap);
					}
				}

            //IdOrder -- Many


			


			public Order GetOrderWithDetails(long idOrder, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderWithDetails(idOrder, db,includes,shouldRemap);
                }
            }

            public Order GetOrderWithDetails(long idOrder, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Order> query =  db.Orders;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapOrderSingle(query
						.Where(p => p.IdOrder == idOrder && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdOrder == idOrder && p.IsDeactivated != true).FirstOrDefault();
            }

            public Order GetOrderWitDetails(long idOrder,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderWitDetails(idOrder, db,shouldRemap);
                }
            }

            public Order GetOrderWitDetails(long idOrder, SubscriptionEntities db,bool shouldRemap = false)
            {
				Order _Order = db.Orders

					.Include("BankStatementStagingHits")
					.Include("User")
					.Include("OrderConcept")
					.Include("OrderState")
					.Include("OrderDetails")
								.Where(p => p.IdOrder == idOrder && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapOrderSingle(_Order);

				return  _Order;
            }

            public List<Order> GetOrderListByIdList(List<long> orderIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderListByIdList(orderIds, db);
                }
            }
            public List<Order> GetOrderListByIdList(List<long> orderIds, SubscriptionEntities db)
            {
                return db.Orders.Where(p => p.IsDeactivated != true && orderIds.Contains(p.IdOrder.Value)).ToList();
            }


            public void SaveOrder(Order order)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOrder(order, db);
                }
            }

            public void SaveOrder(Order order, SubscriptionEntities db)
            {
									if (order.User != null) 
						DaoFactories.Instance.UserDao.SaveUser(order.User, db);
									if (order.OrderConcept != null) 
						DaoFactories.Instance.OrderConceptDao.SaveOrderConcept(order.OrderConcept, db);
									if (order.OrderState != null) 
						DaoFactories.Instance.OrderStateDao.SaveOrderState(order.OrderState, db);
				                
                if (order.IdOrder.HasValue){
					var orderFromDb = db.Orders.Where(p => p.IdOrder == order.IdOrder).FirstOrDefault();
													orderFromDb.OrderDate = order.OrderDate;
													orderFromDb.IdOrderConcept = order.IdOrderConcept;
													orderFromDb.IdUserAuthor = order.IdUserAuthor;
													orderFromDb.IsDeactivated = order.IsDeactivated;
													orderFromDb.OrderNumber = order.OrderNumber;
													orderFromDb.IdOrderSource = order.IdOrderSource;
													orderFromDb.IdOrderState = order.IdOrderState;
													orderFromDb.TotalAmount = order.TotalAmount;
									}
                else{
                                                //fix for saving without duplicating items in db
                              order.User = null;
                                                        //fix for saving without duplicating items in db
                              order.OrderConcept = null;
                                                        //fix for saving without duplicating items in db
                              order.OrderState = null;
                                                db.Orders.Add(order);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyOrder(Order order)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyOrder(order, db);
                }
            }

            public void SaveOnlyOrder(Order order, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // order.User = null;
                                                        //fix for saving without duplicating items in db
                             // order.OrderConcept = null;
                                                        //fix for saving without duplicating items in db
                             // order.OrderState = null;
                                            if (order.IdOrder.HasValue){
					var orderFromDb = db.Orders.Where(p => p.IdOrder == order.IdOrder).FirstOrDefault();
													orderFromDb.OrderDate = order.OrderDate;
													orderFromDb.IdOrderConcept = order.IdOrderConcept;
													orderFromDb.IdUserAuthor = order.IdUserAuthor;
													orderFromDb.IsDeactivated = order.IsDeactivated;
													orderFromDb.OrderNumber = order.OrderNumber;
													orderFromDb.IdOrderSource = order.IdOrderSource;
													orderFromDb.IdOrderState = order.IdOrderState;
													orderFromDb.TotalAmount = order.TotalAmount;
										 db.SaveChanges();

				}
                else{
					Order _order = new Order();
																	_order.OrderDate = order.OrderDate;
													_order.IdOrderConcept = order.IdOrderConcept;
													_order.IdUserAuthor = order.IdUserAuthor;
													_order.IsDeactivated = order.IsDeactivated;
													_order.OrderNumber = order.OrderNumber;
													_order.IdOrderSource = order.IdOrderSource;
													_order.IdOrderState = order.IdOrderState;
													_order.TotalAmount = order.TotalAmount;
					

                    db.Orders.Add(_order);
					db.SaveChanges();
					order.IdOrder =  _order.IdOrder;
                    
                }
            }

            public void DeleteOrder(Order order)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteOrder(order, db);
                }
            }

            public void DeleteOrder(Order order, SubscriptionEntities db)
            {
								var orderFromDb = GetOrder(order.IdOrder.Value,db);
				orderFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyOrder(Order order)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyOrder(order, db);
                }
            }

            public void DeletePermanentlyOrder(Order order, SubscriptionEntities db)
            {
								var orderFromDb = GetOrder(order.IdOrder.Value,db);
				
				db.Orders.Remove(orderFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForOrderWithoutSavingNewItem(List<BankStatementStagingHit> newBankStatementStagingHits,long idOrder)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingHitsForOrderWithoutSavingNewItem(newBankStatementStagingHits,idOrder,db);
                                }
                            }

							public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForOrderWithoutSavingNewItem(List<BankStatementStagingHit> newBankStatementStagingHits,long idOrder, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingHit, bool>> expressionBuilder = p => p.IdOrder == idOrder;
                                var oldBankStatementStagingHits = DaoFactories.Instance.BankStatementStagingHitDao.GetBankStatementStagingHitCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingHits.EntityList.Select(pc => pc.IdBankStatementStagingHit).Except(newBankStatementStagingHits.Where(pc => pc.IdBankStatementStagingHit.HasValue).Select(pc => pc.IdBankStatementStagingHit)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingHits.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingHit)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagingHits;
                            }


                            public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForOrder(List<BankStatementStagingHit> newBankStatementStagingHits,long idOrder)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingHitsForOrder(newBankStatementStagingHits,idOrder,db);
                                }
                            }

                            public List<BankStatementStagingHit> UpdateBankStatementStagingHitsForOrder(List<BankStatementStagingHit> newBankStatementStagingHits,long idOrder, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingHit, bool>> expressionBuilder = p => p.IdOrder == idOrder;
                                var oldBankStatementStagingHits = DaoFactories.Instance.BankStatementStagingHitDao.GetBankStatementStagingHitCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingHits.EntityList.Select(pc => pc.IdBankStatementStagingHit).Except(newBankStatementStagingHits.Where(pc => pc.IdBankStatementStagingHit.HasValue).Select(pc => pc.IdBankStatementStagingHit)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingHits.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingHit)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagingHits.ForEach(pc =>
                                {
                                    pc.IdOrder = idOrder;
                                    DaoFactories.Instance.BankStatementStagingHitDao.SaveOnlyBankStatementStagingHit(pc, db);
                                });
                                return newBankStatementStagingHits;
                            }

                        
							public List<OrderDetail> UpdateOrderDetailsForOrderWithoutSavingNewItem(List<OrderDetail> newOrderDetails,long idOrder)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderDetailsForOrderWithoutSavingNewItem(newOrderDetails,idOrder,db);
                                }
                            }

							public List<OrderDetail> UpdateOrderDetailsForOrderWithoutSavingNewItem(List<OrderDetail> newOrderDetails,long idOrder, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderDetail, bool>> expressionBuilder = p => p.IdOrder == idOrder;
                                var oldOrderDetails = DaoFactories.Instance.OrderDetailDao.GetOrderDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderDetails.EntityList.Select(pc => pc.IdOrderDetail).Except(newOrderDetails.Where(pc => pc.IdOrderDetail.HasValue).Select(pc => pc.IdOrderDetail)).ToList();
                                var itemsTobeDeleted = oldOrderDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newOrderDetails;
                            }


                            public List<OrderDetail> UpdateOrderDetailsForOrder(List<OrderDetail> newOrderDetails,long idOrder)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderDetailsForOrder(newOrderDetails,idOrder,db);
                                }
                            }

                            public List<OrderDetail> UpdateOrderDetailsForOrder(List<OrderDetail> newOrderDetails,long idOrder, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderDetail, bool>> expressionBuilder = p => p.IdOrder == idOrder;
                                var oldOrderDetails = DaoFactories.Instance.OrderDetailDao.GetOrderDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderDetails.EntityList.Select(pc => pc.IdOrderDetail).Except(newOrderDetails.Where(pc => pc.IdOrderDetail.HasValue).Select(pc => pc.IdOrderDetail)).ToList();
                                var itemsTobeDeleted = oldOrderDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newOrderDetails.ForEach(pc =>
                                {
                                    pc.IdOrder = idOrder;
                                    DaoFactories.Instance.OrderDetailDao.SaveOnlyOrderDetail(pc, db);
                                });
                                return newOrderDetails;
                            }

                        


    



		}
			public partial class OrderAddressDao :IOrderAddressDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public OrderAddressDao(){
			
			}

			public OrderAddressDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<OrderAddress> GetAllOrderAddresses(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderAddresses(db, shouldRemap);
                }
            }

            public List<OrderAddress> GetAllOrderAddresses(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderAddressList(db.OrderAddresses.Where(p => p.IsDeactivated != true).ToList());
				
				return db.OrderAddresses.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<OrderAddress> GetAllOrderAddressesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderAddress, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderAddress, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderAddressesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderAddress> GetAllOrderAddressesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderAddress, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderAddress, dynamic> orderExpression = null)
            {
				IQueryable<OrderAddress> query =  db.OrderAddresses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderAddress> baseListReturnType = new BaseListReturnType<OrderAddress>();

                IQueryable<OrderAddress> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderAddress" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderAddress, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.AddressLine1.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.AddressLine1.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.AddressLine2.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.AddressLine3.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.AddressLine4.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Postcode.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.City.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderAddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderAddress> GetAllOrderAddressesWithOrderConcept_OrderAddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderAddress, bool>> expression = null,bool shouldRemap = false, Func<OrderAddress, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderAddressesByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept_OrderAddress"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<OrderAddress> GetAllOrderAddressesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderAddress, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderAddress, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderAddressesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderAddress> GetAllOrderAddressesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderAddress, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderAddress, dynamic> orderExpression = null)
            {
				IQueryable<OrderAddress> query =  db.OrderAddresses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderAddress> baseListReturnType = new BaseListReturnType<OrderAddress>();

                IQueryable<OrderAddress> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderAddress" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderAddress, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderAddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderAddress> GetAllOrderAddressesWithOrderConcept_OrderAddressDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderAddress, bool>> expression = null,bool shouldRemap = false, Func<OrderAddress, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderAddressesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept_OrderAddress"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<OrderAddress> GetAllOrderAddressesWithOrderConcept_OrderAddressDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderAddressWitDetails(new List<string>(){"OrderConcept_OrderAddress"},shouldRemap);
					}
				}
			

			public BaseListReturnType<OrderAddress> GetAllOrderAddressWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderAddressWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<OrderAddress> GetAllOrderAddressWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderAddress> query =  db.OrderAddresses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderAddress> baseListReturnType = new BaseListReturnType<OrderAddress>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderAddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public OrderAddress GetOrderAddress(long idOrderAddress,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderAddress(idOrderAddress, db,shouldRemap);
                }
            }
                        public OrderAddress GetOrderAddress(long idOrderAddress, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderAddressSingle(db.OrderAddresses.Where(p => p.IdOrderAddress == idOrderAddress && p.IsDeactivated != true).FirstOrDefault());

                return db.OrderAddresses.Where(p => p.IdOrderAddress == idOrderAddress && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public OrderAddress GetOrderAddressCustom( Expression<Func<OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderAddressCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public OrderAddress GetOrderAddressCustom( SubscriptionEntities db , Expression<Func<OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<OrderAddress> query =  db.OrderAddresses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapOrderAddressSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<OrderAddress> GetOrderAddressCustomList( Expression<Func<OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderAddress, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderAddressCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<OrderAddress> GetOrderAddressCustomList(  SubscriptionEntities db , Expression<Func<OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderAddress, dynamic> orderExpression = null)
			{
				IQueryable<OrderAddress> query =  db.OrderAddresses;
                BaseListReturnType<OrderAddress> baseListReturnType = new BaseListReturnType<OrderAddress>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderAddressList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public OrderAddress GetOrderAddressWithOrderConcept_OrderAddressDetails(long idOrderAddress,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderAddressWithDetails(idOrderAddress,new List<string>(){"OrderConcept_OrderAddress"},shouldRemap);
					}
				}

            //IdOrderAddress -- Many


			


			public OrderAddress GetOrderAddressWithDetails(long idOrderAddress, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderAddressWithDetails(idOrderAddress, db,includes,shouldRemap);
                }
            }

            public OrderAddress GetOrderAddressWithDetails(long idOrderAddress, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderAddress> query =  db.OrderAddresses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapOrderAddressSingle(query
						.Where(p => p.IdOrderAddress == idOrderAddress && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdOrderAddress == idOrderAddress && p.IsDeactivated != true).FirstOrDefault();
            }

            public OrderAddress GetOrderAddressWitDetails(long idOrderAddress,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderAddressWitDetails(idOrderAddress, db,shouldRemap);
                }
            }

            public OrderAddress GetOrderAddressWitDetails(long idOrderAddress, SubscriptionEntities db,bool shouldRemap = false)
            {
				OrderAddress _OrderAddress = db.OrderAddresses

					.Include("OrderConcept_OrderAddress")
								.Where(p => p.IdOrderAddress == idOrderAddress && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapOrderAddressSingle(_OrderAddress);

				return  _OrderAddress;
            }

            public List<OrderAddress> GetOrderAddressListByIdList(List<long> orderAddressIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderAddressListByIdList(orderAddressIds, db);
                }
            }
            public List<OrderAddress> GetOrderAddressListByIdList(List<long> orderAddressIds, SubscriptionEntities db)
            {
                return db.OrderAddresses.Where(p => p.IsDeactivated != true && orderAddressIds.Contains(p.IdOrderAddress.Value)).ToList();
            }


            public void SaveOrderAddress(OrderAddress orderAddress)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOrderAddress(orderAddress, db);
                }
            }

            public void SaveOrderAddress(OrderAddress orderAddress, SubscriptionEntities db)
            {
				                
                if (orderAddress.IdOrderAddress.HasValue){
					var orderAddressFromDb = db.OrderAddresses.Where(p => p.IdOrderAddress == orderAddress.IdOrderAddress).FirstOrDefault();
													orderAddressFromDb.AddressLine1 = orderAddress.AddressLine1;
													orderAddressFromDb.AddressLine2 = orderAddress.AddressLine2;
													orderAddressFromDb.AddressLine3 = orderAddress.AddressLine3;
													orderAddressFromDb.AddressLine4 = orderAddress.AddressLine4;
													orderAddressFromDb.Postcode = orderAddress.Postcode;
													orderAddressFromDb.IsDeactivated = orderAddress.IsDeactivated;
													orderAddressFromDb.Lat = orderAddress.Lat;
													orderAddressFromDb.Lng = orderAddress.Lng;
													orderAddressFromDb.City = orderAddress.City;
									}
                else{
                                        db.OrderAddresses.Add(orderAddress);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyOrderAddress(OrderAddress orderAddress)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyOrderAddress(orderAddress, db);
                }
            }

            public void SaveOnlyOrderAddress(OrderAddress orderAddress, SubscriptionEntities db)
            {
			                    if (orderAddress.IdOrderAddress.HasValue){
					var orderAddressFromDb = db.OrderAddresses.Where(p => p.IdOrderAddress == orderAddress.IdOrderAddress).FirstOrDefault();
													orderAddressFromDb.AddressLine1 = orderAddress.AddressLine1;
													orderAddressFromDb.AddressLine2 = orderAddress.AddressLine2;
													orderAddressFromDb.AddressLine3 = orderAddress.AddressLine3;
													orderAddressFromDb.AddressLine4 = orderAddress.AddressLine4;
													orderAddressFromDb.Postcode = orderAddress.Postcode;
													orderAddressFromDb.IsDeactivated = orderAddress.IsDeactivated;
													orderAddressFromDb.Lat = orderAddress.Lat;
													orderAddressFromDb.Lng = orderAddress.Lng;
													orderAddressFromDb.City = orderAddress.City;
										 db.SaveChanges();

				}
                else{
					OrderAddress _orderAddress = new OrderAddress();
																	_orderAddress.AddressLine1 = orderAddress.AddressLine1;
													_orderAddress.AddressLine2 = orderAddress.AddressLine2;
													_orderAddress.AddressLine3 = orderAddress.AddressLine3;
													_orderAddress.AddressLine4 = orderAddress.AddressLine4;
													_orderAddress.Postcode = orderAddress.Postcode;
													_orderAddress.IsDeactivated = orderAddress.IsDeactivated;
													_orderAddress.Lat = orderAddress.Lat;
													_orderAddress.Lng = orderAddress.Lng;
													_orderAddress.City = orderAddress.City;
					

                    db.OrderAddresses.Add(_orderAddress);
					db.SaveChanges();
					orderAddress.IdOrderAddress =  _orderAddress.IdOrderAddress;
                    
                }
            }

            public void DeleteOrderAddress(OrderAddress orderAddress)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteOrderAddress(orderAddress, db);
                }
            }

            public void DeleteOrderAddress(OrderAddress orderAddress, SubscriptionEntities db)
            {
								var orderAddressFromDb = GetOrderAddress(orderAddress.IdOrderAddress.Value,db);
				orderAddressFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyOrderAddress(OrderAddress orderAddress)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyOrderAddress(orderAddress, db);
                }
            }

            public void DeletePermanentlyOrderAddress(OrderAddress orderAddress, SubscriptionEntities db)
            {
								var orderAddressFromDb = GetOrderAddress(orderAddress.IdOrderAddress.Value,db);
				
				db.OrderAddresses.Remove(orderAddressFromDb);
                db.SaveChanges();
            }


            
							public List<OrderConcept_OrderAddress> UpdateOrderConcept_OrderAddressForOrderAddressWithoutSavingNewItem(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderAddress)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderConcept_OrderAddressForOrderAddressWithoutSavingNewItem(newOrderConcept_OrderAddress,idOrderAddress,db);
                                }
                            }

							public List<OrderConcept_OrderAddress> UpdateOrderConcept_OrderAddressForOrderAddressWithoutSavingNewItem(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderAddress, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderConcept_OrderAddress, bool>> expressionBuilder = p => p.IdOrderAddress == idOrderAddress;
                                var oldOrderConcept_OrderAddress = DaoFactories.Instance.OrderConcept_OrderAddressDao.GetOrderConcept_OrderAddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderConcept_OrderAddress.EntityList.Select(pc => pc.IdOrderConcept_OrderAddress).Except(newOrderConcept_OrderAddress.Where(pc => pc.IdOrderConcept_OrderAddress.HasValue).Select(pc => pc.IdOrderConcept_OrderAddress)).ToList();
                                var itemsTobeDeleted = oldOrderConcept_OrderAddress.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderConcept_OrderAddress)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newOrderConcept_OrderAddress;
                            }


                            public List<OrderConcept_OrderAddress> UpdateOrderConcept_OrderAddressForOrderAddress(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderAddress)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderConcept_OrderAddressForOrderAddress(newOrderConcept_OrderAddress,idOrderAddress,db);
                                }
                            }

                            public List<OrderConcept_OrderAddress> UpdateOrderConcept_OrderAddressForOrderAddress(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderAddress, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderConcept_OrderAddress, bool>> expressionBuilder = p => p.IdOrderAddress == idOrderAddress;
                                var oldOrderConcept_OrderAddress = DaoFactories.Instance.OrderConcept_OrderAddressDao.GetOrderConcept_OrderAddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderConcept_OrderAddress.EntityList.Select(pc => pc.IdOrderConcept_OrderAddress).Except(newOrderConcept_OrderAddress.Where(pc => pc.IdOrderConcept_OrderAddress.HasValue).Select(pc => pc.IdOrderConcept_OrderAddress)).ToList();
                                var itemsTobeDeleted = oldOrderConcept_OrderAddress.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderConcept_OrderAddress)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newOrderConcept_OrderAddress.ForEach(pc =>
                                {
                                    pc.IdOrderAddress = idOrderAddress;
                                    DaoFactories.Instance.OrderConcept_OrderAddressDao.SaveOnlyOrderConcept_OrderAddress(pc, db);
                                });
                                return newOrderConcept_OrderAddress;
                            }

                        


    



		}
			public partial class OrderCompanyDao :IOrderCompanyDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public OrderCompanyDao(){
			
			}

			public OrderCompanyDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<OrderCompany> GetAllOrderCompanies(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderCompanies(db, shouldRemap);
                }
            }

            public List<OrderCompany> GetAllOrderCompanies(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderCompanyList(db.OrderCompanies.Where(p => p.IsDeactivated != true).ToList());
				
				return db.OrderCompanies.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<OrderCompany> GetAllOrderCompaniesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderCompany, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderCompany, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderCompaniesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderCompany> GetAllOrderCompaniesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderCompany, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderCompany, dynamic> orderExpression = null)
            {
				IQueryable<OrderCompany> query =  db.OrderCompanies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderCompany> baseListReturnType = new BaseListReturnType<OrderCompany>();

                IQueryable<OrderCompany> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderCompany" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderCompany, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Name.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Name.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderCompanyList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderCompany> GetAllOrderCompaniesWithOrderConceptsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderCompany, bool>> expression = null,bool shouldRemap = false, Func<OrderCompany, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderCompaniesByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderConcepts"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<OrderCompany> GetAllOrderCompaniesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderCompany, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderCompany, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderCompaniesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderCompany> GetAllOrderCompaniesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderCompany, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderCompany, dynamic> orderExpression = null)
            {
				IQueryable<OrderCompany> query =  db.OrderCompanies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderCompany> baseListReturnType = new BaseListReturnType<OrderCompany>();

                IQueryable<OrderCompany> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderCompany" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderCompany, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderCompanyList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderCompany> GetAllOrderCompaniesWithOrderConceptsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderCompany, bool>> expression = null,bool shouldRemap = false, Func<OrderCompany, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderCompaniesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderConcepts"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<OrderCompany> GetAllOrderCompaniesWithOrderConceptsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderCompanyWitDetails(new List<string>(){"OrderConcepts"},shouldRemap);
					}
				}
			

			public BaseListReturnType<OrderCompany> GetAllOrderCompanyWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderCompanyWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<OrderCompany> GetAllOrderCompanyWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderCompany> query =  db.OrderCompanies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderCompany> baseListReturnType = new BaseListReturnType<OrderCompany>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderCompanyList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public OrderCompany GetOrderCompany(long idOrderCompany,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderCompany(idOrderCompany, db,shouldRemap);
                }
            }
                        public OrderCompany GetOrderCompany(long idOrderCompany, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderCompanySingle(db.OrderCompanies.Where(p => p.IdOrderCompany == idOrderCompany && p.IsDeactivated != true).FirstOrDefault());

                return db.OrderCompanies.Where(p => p.IdOrderCompany == idOrderCompany && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public OrderCompany GetOrderCompanyCustom( Expression<Func<OrderCompany, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderCompanyCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public OrderCompany GetOrderCompanyCustom( SubscriptionEntities db , Expression<Func<OrderCompany, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<OrderCompany> query =  db.OrderCompanies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapOrderCompanySingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<OrderCompany> GetOrderCompanyCustomList( Expression<Func<OrderCompany, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderCompany, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderCompanyCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<OrderCompany> GetOrderCompanyCustomList(  SubscriptionEntities db , Expression<Func<OrderCompany, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderCompany, dynamic> orderExpression = null)
			{
				IQueryable<OrderCompany> query =  db.OrderCompanies;
                BaseListReturnType<OrderCompany> baseListReturnType = new BaseListReturnType<OrderCompany>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderCompanyList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public OrderCompany GetOrderCompanyWithOrderConceptsDetails(long idOrderCompany,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderCompanyWithDetails(idOrderCompany,new List<string>(){"OrderConcepts"},shouldRemap);
					}
				}

            //IdOrderCompany -- Many


			


			public OrderCompany GetOrderCompanyWithDetails(long idOrderCompany, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderCompanyWithDetails(idOrderCompany, db,includes,shouldRemap);
                }
            }

            public OrderCompany GetOrderCompanyWithDetails(long idOrderCompany, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderCompany> query =  db.OrderCompanies;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapOrderCompanySingle(query
						.Where(p => p.IdOrderCompany == idOrderCompany && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdOrderCompany == idOrderCompany && p.IsDeactivated != true).FirstOrDefault();
            }

            public OrderCompany GetOrderCompanyWitDetails(long idOrderCompany,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderCompanyWitDetails(idOrderCompany, db,shouldRemap);
                }
            }

            public OrderCompany GetOrderCompanyWitDetails(long idOrderCompany, SubscriptionEntities db,bool shouldRemap = false)
            {
				OrderCompany _OrderCompany = db.OrderCompanies

					.Include("OrderConcepts")
								.Where(p => p.IdOrderCompany == idOrderCompany && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapOrderCompanySingle(_OrderCompany);

				return  _OrderCompany;
            }

            public List<OrderCompany> GetOrderCompanyListByIdList(List<long> orderCompanyIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderCompanyListByIdList(orderCompanyIds, db);
                }
            }
            public List<OrderCompany> GetOrderCompanyListByIdList(List<long> orderCompanyIds, SubscriptionEntities db)
            {
                return db.OrderCompanies.Where(p => p.IsDeactivated != true && orderCompanyIds.Contains(p.IdOrderCompany.Value)).ToList();
            }


            public void SaveOrderCompany(OrderCompany orderCompany)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOrderCompany(orderCompany, db);
                }
            }

            public void SaveOrderCompany(OrderCompany orderCompany, SubscriptionEntities db)
            {
				                
                if (orderCompany.IdOrderCompany.HasValue){
					var orderCompanyFromDb = db.OrderCompanies.Where(p => p.IdOrderCompany == orderCompany.IdOrderCompany).FirstOrDefault();
													orderCompanyFromDb.Name = orderCompany.Name;
													orderCompanyFromDb.IsDeactivated = orderCompany.IsDeactivated;
													orderCompanyFromDb.Description = orderCompany.Description;
									}
                else{
                                        db.OrderCompanies.Add(orderCompany);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyOrderCompany(OrderCompany orderCompany)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyOrderCompany(orderCompany, db);
                }
            }

            public void SaveOnlyOrderCompany(OrderCompany orderCompany, SubscriptionEntities db)
            {
			                    if (orderCompany.IdOrderCompany.HasValue){
					var orderCompanyFromDb = db.OrderCompanies.Where(p => p.IdOrderCompany == orderCompany.IdOrderCompany).FirstOrDefault();
													orderCompanyFromDb.Name = orderCompany.Name;
													orderCompanyFromDb.IsDeactivated = orderCompany.IsDeactivated;
													orderCompanyFromDb.Description = orderCompany.Description;
										 db.SaveChanges();

				}
                else{
					OrderCompany _orderCompany = new OrderCompany();
																	_orderCompany.Name = orderCompany.Name;
													_orderCompany.IsDeactivated = orderCompany.IsDeactivated;
													_orderCompany.Description = orderCompany.Description;
					

                    db.OrderCompanies.Add(_orderCompany);
					db.SaveChanges();
					orderCompany.IdOrderCompany =  _orderCompany.IdOrderCompany;
                    
                }
            }

            public void DeleteOrderCompany(OrderCompany orderCompany)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteOrderCompany(orderCompany, db);
                }
            }

            public void DeleteOrderCompany(OrderCompany orderCompany, SubscriptionEntities db)
            {
								var orderCompanyFromDb = GetOrderCompany(orderCompany.IdOrderCompany.Value,db);
				orderCompanyFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyOrderCompany(OrderCompany orderCompany)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyOrderCompany(orderCompany, db);
                }
            }

            public void DeletePermanentlyOrderCompany(OrderCompany orderCompany, SubscriptionEntities db)
            {
								var orderCompanyFromDb = GetOrderCompany(orderCompany.IdOrderCompany.Value,db);
				
				db.OrderCompanies.Remove(orderCompanyFromDb);
                db.SaveChanges();
            }


            
							public List<OrderConcept> UpdateOrderConceptsForOrderCompanyWithoutSavingNewItem(List<OrderConcept> newOrderConcepts,long idOrderCompany)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderConceptsForOrderCompanyWithoutSavingNewItem(newOrderConcepts,idOrderCompany,db);
                                }
                            }

							public List<OrderConcept> UpdateOrderConceptsForOrderCompanyWithoutSavingNewItem(List<OrderConcept> newOrderConcepts,long idOrderCompany, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderConcept, bool>> expressionBuilder = p => p.IdOrderCompany == idOrderCompany;
                                var oldOrderConcepts = DaoFactories.Instance.OrderConceptDao.GetOrderConceptCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderConcepts.EntityList.Select(pc => pc.IdOrderConcept).Except(newOrderConcepts.Where(pc => pc.IdOrderConcept.HasValue).Select(pc => pc.IdOrderConcept)).ToList();
                                var itemsTobeDeleted = oldOrderConcepts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderConcept)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newOrderConcepts;
                            }


                            public List<OrderConcept> UpdateOrderConceptsForOrderCompany(List<OrderConcept> newOrderConcepts,long idOrderCompany)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderConceptsForOrderCompany(newOrderConcepts,idOrderCompany,db);
                                }
                            }

                            public List<OrderConcept> UpdateOrderConceptsForOrderCompany(List<OrderConcept> newOrderConcepts,long idOrderCompany, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderConcept, bool>> expressionBuilder = p => p.IdOrderCompany == idOrderCompany;
                                var oldOrderConcepts = DaoFactories.Instance.OrderConceptDao.GetOrderConceptCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderConcepts.EntityList.Select(pc => pc.IdOrderConcept).Except(newOrderConcepts.Where(pc => pc.IdOrderConcept.HasValue).Select(pc => pc.IdOrderConcept)).ToList();
                                var itemsTobeDeleted = oldOrderConcepts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderConcept)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newOrderConcepts.ForEach(pc =>
                                {
                                    pc.IdOrderCompany = idOrderCompany;
                                    DaoFactories.Instance.OrderConceptDao.SaveOnlyOrderConcept(pc, db);
                                });
                                return newOrderConcepts;
                            }

                        


    



		}
			public partial class OrderConceptDao :IOrderConceptDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public OrderConceptDao(){
			
			}

			public OrderConceptDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<OrderConcept> GetAllOrderConcepts(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderConcepts(db, shouldRemap);
                }
            }

            public List<OrderConcept> GetAllOrderConcepts(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderConceptList(db.OrderConcepts.Where(p => p.IsDeactivated != true).ToList());
				
				return db.OrderConcepts.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<OrderConcept> GetAllOrderConceptsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderConceptsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderConcept> GetAllOrderConceptsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderConcept, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
            {
				IQueryable<OrderConcept> query =  db.OrderConcepts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderConcept> baseListReturnType = new BaseListReturnType<OrderConcept>();

                IQueryable<OrderConcept> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderConcept" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderConcept, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderConceptList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrdersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"Orders"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderCompanyDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderCompany"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderConcept_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept_ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderPersonDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderPerson"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderConcept_OrderAddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptsByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept_OrderAddress"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<OrderConcept> GetAllOrderConceptsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderConcept> GetAllOrderConceptsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderConcept, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
            {
				IQueryable<OrderConcept> query =  db.OrderConcepts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderConcept> baseListReturnType = new BaseListReturnType<OrderConcept>();

                IQueryable<OrderConcept> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderConcept" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderConcept, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderConceptList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrdersDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Orders"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderCompanyDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderCompany"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderConcept_ContactTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept_ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderPersonDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderPerson"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderConcept_OrderAddressDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept_OrderAddress"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrdersDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptWitDetails(new List<string>(){"Orders"},shouldRemap);
					}
				}
							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderCompanyDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptWitDetails(new List<string>(){"OrderCompany"},shouldRemap);
					}
				}
							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderConcept_ContactTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptWitDetails(new List<string>(){"OrderConcept_ContactType"},shouldRemap);
					}
				}
							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderPersonDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptWitDetails(new List<string>(){"OrderPerson"},shouldRemap);
					}
				}
							public BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderConcept_OrderAddressDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConceptWitDetails(new List<string>(){"OrderConcept_OrderAddress"},shouldRemap);
					}
				}
			

			public BaseListReturnType<OrderConcept> GetAllOrderConceptWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderConceptWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<OrderConcept> GetAllOrderConceptWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderConcept> query =  db.OrderConcepts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderConcept> baseListReturnType = new BaseListReturnType<OrderConcept>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderConceptList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public OrderConcept GetOrderConcept(long idOrderConcept,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderConcept(idOrderConcept, db,shouldRemap);
                }
            }
                        public OrderConcept GetOrderConcept(long idOrderConcept, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderConceptSingle(db.OrderConcepts.Where(p => p.IdOrderConcept == idOrderConcept && p.IsDeactivated != true).FirstOrDefault());

                return db.OrderConcepts.Where(p => p.IdOrderConcept == idOrderConcept && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public OrderConcept GetOrderConceptCustom( Expression<Func<OrderConcept, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderConceptCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public OrderConcept GetOrderConceptCustom( SubscriptionEntities db , Expression<Func<OrderConcept, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<OrderConcept> query =  db.OrderConcepts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapOrderConceptSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<OrderConcept> GetOrderConceptCustomList( Expression<Func<OrderConcept, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderConcept, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderConceptCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<OrderConcept> GetOrderConceptCustomList(  SubscriptionEntities db , Expression<Func<OrderConcept, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderConcept, dynamic> orderExpression = null)
			{
				IQueryable<OrderConcept> query =  db.OrderConcepts;
                BaseListReturnType<OrderConcept> baseListReturnType = new BaseListReturnType<OrderConcept>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderConceptList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public OrderConcept GetOrderConceptWithOrdersDetails(long idOrderConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderConceptWithDetails(idOrderConcept,new List<string>(){"Orders"},shouldRemap);
					}
				}

            //IdOrderConcept -- Many


							public OrderConcept GetOrderConceptWithOrderCompanyDetails(long idOrderConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderConceptWithDetails(idOrderConcept,new List<string>(){"OrderCompany"},shouldRemap);
					}
				}

            //IdOrderCompany -- ZeroOrOne

                public BaseListReturnType<OrderConcept> GetAllOrderConceptListByOrderCompany(long idOrderCompany)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderConceptListByOrderCompany(idOrderCompany, db);
                    }
                }
                public BaseListReturnType<OrderConcept> GetAllOrderConceptListByOrderCompany(long idOrderCompany, SubscriptionEntities db)
                {
                    Expression<Func<OrderConcept, bool>> expression = property=> property.IdOrderCompany == idOrderCompany && property.IsDeactivated !=true;
                    return GetOrderConceptCustomList(db, expression, null, true);
                }
                public BaseListReturnType<OrderConcept> GetAllOrderConceptListByOrderCompanyByPage(long idOrderCompany, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderConceptListByOrderCompanyByPage(idOrderCompany, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<OrderConcept> GetAllOrderConceptListByOrderCompanyByPage(long idOrderCompany, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<OrderConcept, bool>> expression = property => property.IdOrderCompany == idOrderCompany && property.IsDeactivated !=true;
                    return GetAllOrderConceptsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public OrderConcept GetOrderConceptWithOrderConcept_ContactTypeDetails(long idOrderConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderConceptWithDetails(idOrderConcept,new List<string>(){"OrderConcept_ContactType"},shouldRemap);
					}
				}

            //IdOrderConcept -- Many


							public OrderConcept GetOrderConceptWithOrderPersonDetails(long idOrderConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderConceptWithDetails(idOrderConcept,new List<string>(){"OrderPerson"},shouldRemap);
					}
				}

            //IdOrderPerson -- ZeroOrOne

                public BaseListReturnType<OrderConcept> GetAllOrderConceptListByOrderPerson(long idOrderPerson)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderConceptListByOrderPerson(idOrderPerson, db);
                    }
                }
                public BaseListReturnType<OrderConcept> GetAllOrderConceptListByOrderPerson(long idOrderPerson, SubscriptionEntities db)
                {
                    Expression<Func<OrderConcept, bool>> expression = property=> property.IdOrderPerson == idOrderPerson && property.IsDeactivated !=true;
                    return GetOrderConceptCustomList(db, expression, null, true);
                }
                public BaseListReturnType<OrderConcept> GetAllOrderConceptListByOrderPersonByPage(long idOrderPerson, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderConceptListByOrderPersonByPage(idOrderPerson, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<OrderConcept> GetAllOrderConceptListByOrderPersonByPage(long idOrderPerson, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<OrderConcept, bool>> expression = property => property.IdOrderPerson == idOrderPerson && property.IsDeactivated !=true;
                    return GetAllOrderConceptsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public OrderConcept GetOrderConceptWithOrderConcept_OrderAddressDetails(long idOrderConcept,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderConceptWithDetails(idOrderConcept,new List<string>(){"OrderConcept_OrderAddress"},shouldRemap);
					}
				}

            //IdOrderConcept -- Many


			


			public OrderConcept GetOrderConceptWithDetails(long idOrderConcept, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderConceptWithDetails(idOrderConcept, db,includes,shouldRemap);
                }
            }

            public OrderConcept GetOrderConceptWithDetails(long idOrderConcept, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderConcept> query =  db.OrderConcepts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapOrderConceptSingle(query
						.Where(p => p.IdOrderConcept == idOrderConcept && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdOrderConcept == idOrderConcept && p.IsDeactivated != true).FirstOrDefault();
            }

            public OrderConcept GetOrderConceptWitDetails(long idOrderConcept,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderConceptWitDetails(idOrderConcept, db,shouldRemap);
                }
            }

            public OrderConcept GetOrderConceptWitDetails(long idOrderConcept, SubscriptionEntities db,bool shouldRemap = false)
            {
				OrderConcept _OrderConcept = db.OrderConcepts

					.Include("Orders")
					.Include("OrderCompany")
					.Include("OrderConcept_ContactType")
					.Include("OrderPerson")
					.Include("OrderConcept_OrderAddress")
								.Where(p => p.IdOrderConcept == idOrderConcept && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapOrderConceptSingle(_OrderConcept);

				return  _OrderConcept;
            }

            public List<OrderConcept> GetOrderConceptListByIdList(List<long> orderConceptIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderConceptListByIdList(orderConceptIds, db);
                }
            }
            public List<OrderConcept> GetOrderConceptListByIdList(List<long> orderConceptIds, SubscriptionEntities db)
            {
                return db.OrderConcepts.Where(p => p.IsDeactivated != true && orderConceptIds.Contains(p.IdOrderConcept.Value)).ToList();
            }


            public void SaveOrderConcept(OrderConcept orderConcept)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOrderConcept(orderConcept, db);
                }
            }

            public void SaveOrderConcept(OrderConcept orderConcept, SubscriptionEntities db)
            {
									if (orderConcept.OrderCompany != null) 
						DaoFactories.Instance.OrderCompanyDao.SaveOrderCompany(orderConcept.OrderCompany, db);
									if (orderConcept.OrderPerson != null) 
						DaoFactories.Instance.OrderPersonDao.SaveOrderPerson(orderConcept.OrderPerson, db);
				                
                if (orderConcept.IdOrderConcept.HasValue){
					var orderConceptFromDb = db.OrderConcepts.Where(p => p.IdOrderConcept == orderConcept.IdOrderConcept).FirstOrDefault();
													orderConceptFromDb.IdOrderCompany = orderConcept.IdOrderCompany;
													orderConceptFromDb.IdOrderPerson = orderConcept.IdOrderPerson;
													orderConceptFromDb.IsDeactivated = orderConcept.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              orderConcept.OrderCompany = null;
                                                        //fix for saving without duplicating items in db
                              orderConcept.OrderPerson = null;
                                                db.OrderConcepts.Add(orderConcept);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyOrderConcept(OrderConcept orderConcept)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyOrderConcept(orderConcept, db);
                }
            }

            public void SaveOnlyOrderConcept(OrderConcept orderConcept, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // orderConcept.OrderCompany = null;
                                                        //fix for saving without duplicating items in db
                             // orderConcept.OrderPerson = null;
                                            if (orderConcept.IdOrderConcept.HasValue){
					var orderConceptFromDb = db.OrderConcepts.Where(p => p.IdOrderConcept == orderConcept.IdOrderConcept).FirstOrDefault();
													orderConceptFromDb.IdOrderCompany = orderConcept.IdOrderCompany;
													orderConceptFromDb.IdOrderPerson = orderConcept.IdOrderPerson;
													orderConceptFromDb.IsDeactivated = orderConcept.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					OrderConcept _orderConcept = new OrderConcept();
																	_orderConcept.IdOrderCompany = orderConcept.IdOrderCompany;
													_orderConcept.IdOrderPerson = orderConcept.IdOrderPerson;
													_orderConcept.IsDeactivated = orderConcept.IsDeactivated;
					

                    db.OrderConcepts.Add(_orderConcept);
					db.SaveChanges();
					orderConcept.IdOrderConcept =  _orderConcept.IdOrderConcept;
                    
                }
            }

            public void DeleteOrderConcept(OrderConcept orderConcept)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteOrderConcept(orderConcept, db);
                }
            }

            public void DeleteOrderConcept(OrderConcept orderConcept, SubscriptionEntities db)
            {
								var orderConceptFromDb = GetOrderConcept(orderConcept.IdOrderConcept.Value,db);
				orderConceptFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyOrderConcept(OrderConcept orderConcept)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyOrderConcept(orderConcept, db);
                }
            }

            public void DeletePermanentlyOrderConcept(OrderConcept orderConcept, SubscriptionEntities db)
            {
								var orderConceptFromDb = GetOrderConcept(orderConcept.IdOrderConcept.Value,db);
				
				db.OrderConcepts.Remove(orderConceptFromDb);
                db.SaveChanges();
            }


            
							public List<Order> UpdateOrdersForOrderConceptWithoutSavingNewItem(List<Order> newOrders,long idOrderConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrdersForOrderConceptWithoutSavingNewItem(newOrders,idOrderConcept,db);
                                }
                            }

							public List<Order> UpdateOrdersForOrderConceptWithoutSavingNewItem(List<Order> newOrders,long idOrderConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<Order, bool>> expressionBuilder = p => p.IdOrderConcept == idOrderConcept;
                                var oldOrders = DaoFactories.Instance.OrderDao.GetOrderCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrders.EntityList.Select(pc => pc.IdOrder).Except(newOrders.Where(pc => pc.IdOrder.HasValue).Select(pc => pc.IdOrder)).ToList();
                                var itemsTobeDeleted = oldOrders.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrder)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newOrders;
                            }


                            public List<Order> UpdateOrdersForOrderConcept(List<Order> newOrders,long idOrderConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrdersForOrderConcept(newOrders,idOrderConcept,db);
                                }
                            }

                            public List<Order> UpdateOrdersForOrderConcept(List<Order> newOrders,long idOrderConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<Order, bool>> expressionBuilder = p => p.IdOrderConcept == idOrderConcept;
                                var oldOrders = DaoFactories.Instance.OrderDao.GetOrderCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrders.EntityList.Select(pc => pc.IdOrder).Except(newOrders.Where(pc => pc.IdOrder.HasValue).Select(pc => pc.IdOrder)).ToList();
                                var itemsTobeDeleted = oldOrders.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrder)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newOrders.ForEach(pc =>
                                {
                                    pc.IdOrderConcept = idOrderConcept;
                                    DaoFactories.Instance.OrderDao.SaveOnlyOrder(pc, db);
                                });
                                return newOrders;
                            }

                        
							public List<OrderConcept_ContactType> UpdateOrderConcept_ContactTypeForOrderConceptWithoutSavingNewItem(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idOrderConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderConcept_ContactTypeForOrderConceptWithoutSavingNewItem(newOrderConcept_ContactType,idOrderConcept,db);
                                }
                            }

							public List<OrderConcept_ContactType> UpdateOrderConcept_ContactTypeForOrderConceptWithoutSavingNewItem(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idOrderConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderConcept_ContactType, bool>> expressionBuilder = p => p.IdOrderConcept == idOrderConcept;
                                var oldOrderConcept_ContactType = DaoFactories.Instance.OrderConcept_ContactTypeDao.GetOrderConcept_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderConcept_ContactType.EntityList.Select(pc => pc.IdOrderConcept_ContactType).Except(newOrderConcept_ContactType.Where(pc => pc.IdOrderConcept_ContactType.HasValue).Select(pc => pc.IdOrderConcept_ContactType)).ToList();
                                var itemsTobeDeleted = oldOrderConcept_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderConcept_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newOrderConcept_ContactType;
                            }


                            public List<OrderConcept_ContactType> UpdateOrderConcept_ContactTypeForOrderConcept(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idOrderConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderConcept_ContactTypeForOrderConcept(newOrderConcept_ContactType,idOrderConcept,db);
                                }
                            }

                            public List<OrderConcept_ContactType> UpdateOrderConcept_ContactTypeForOrderConcept(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idOrderConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderConcept_ContactType, bool>> expressionBuilder = p => p.IdOrderConcept == idOrderConcept;
                                var oldOrderConcept_ContactType = DaoFactories.Instance.OrderConcept_ContactTypeDao.GetOrderConcept_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderConcept_ContactType.EntityList.Select(pc => pc.IdOrderConcept_ContactType).Except(newOrderConcept_ContactType.Where(pc => pc.IdOrderConcept_ContactType.HasValue).Select(pc => pc.IdOrderConcept_ContactType)).ToList();
                                var itemsTobeDeleted = oldOrderConcept_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderConcept_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newOrderConcept_ContactType.ForEach(pc =>
                                {
                                    pc.IdOrderConcept = idOrderConcept;
                                    DaoFactories.Instance.OrderConcept_ContactTypeDao.SaveOnlyOrderConcept_ContactType(pc, db);
                                });
                                return newOrderConcept_ContactType;
                            }

                        
							public List<OrderConcept_OrderAddress> UpdateOrderConcept_OrderAddressForOrderConceptWithoutSavingNewItem(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderConcept_OrderAddressForOrderConceptWithoutSavingNewItem(newOrderConcept_OrderAddress,idOrderConcept,db);
                                }
                            }

							public List<OrderConcept_OrderAddress> UpdateOrderConcept_OrderAddressForOrderConceptWithoutSavingNewItem(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderConcept_OrderAddress, bool>> expressionBuilder = p => p.IdOrderConcept == idOrderConcept;
                                var oldOrderConcept_OrderAddress = DaoFactories.Instance.OrderConcept_OrderAddressDao.GetOrderConcept_OrderAddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderConcept_OrderAddress.EntityList.Select(pc => pc.IdOrderConcept_OrderAddress).Except(newOrderConcept_OrderAddress.Where(pc => pc.IdOrderConcept_OrderAddress.HasValue).Select(pc => pc.IdOrderConcept_OrderAddress)).ToList();
                                var itemsTobeDeleted = oldOrderConcept_OrderAddress.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderConcept_OrderAddress)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newOrderConcept_OrderAddress;
                            }


                            public List<OrderConcept_OrderAddress> UpdateOrderConcept_OrderAddressForOrderConcept(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderConcept)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderConcept_OrderAddressForOrderConcept(newOrderConcept_OrderAddress,idOrderConcept,db);
                                }
                            }

                            public List<OrderConcept_OrderAddress> UpdateOrderConcept_OrderAddressForOrderConcept(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderConcept, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderConcept_OrderAddress, bool>> expressionBuilder = p => p.IdOrderConcept == idOrderConcept;
                                var oldOrderConcept_OrderAddress = DaoFactories.Instance.OrderConcept_OrderAddressDao.GetOrderConcept_OrderAddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderConcept_OrderAddress.EntityList.Select(pc => pc.IdOrderConcept_OrderAddress).Except(newOrderConcept_OrderAddress.Where(pc => pc.IdOrderConcept_OrderAddress.HasValue).Select(pc => pc.IdOrderConcept_OrderAddress)).ToList();
                                var itemsTobeDeleted = oldOrderConcept_OrderAddress.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderConcept_OrderAddress)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newOrderConcept_OrderAddress.ForEach(pc =>
                                {
                                    pc.IdOrderConcept = idOrderConcept;
                                    DaoFactories.Instance.OrderConcept_OrderAddressDao.SaveOnlyOrderConcept_OrderAddress(pc, db);
                                });
                                return newOrderConcept_OrderAddress;
                            }

                        


    



		}
			public partial class OrderConcept_ContactTypeDao :IOrderConcept_ContactTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public OrderConcept_ContactTypeDao(){
			
			}

			public OrderConcept_ContactTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<OrderConcept_ContactType> GetAllOrderConcept_ContactType(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderConcept_ContactType(db, shouldRemap);
                }
            }

            public List<OrderConcept_ContactType> GetAllOrderConcept_ContactType(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderConcept_ContactTypeList(db.OrderConcept_ContactType.Where(p => p.IsDeactivated != true).ToList());
				
				return db.OrderConcept_ContactType.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderConcept_ContactType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderConcept_ContactTypeByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderConcept_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderConcept_ContactType, dynamic> orderExpression = null)
            {
				IQueryable<OrderConcept_ContactType> query =  db.OrderConcept_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderConcept_ContactType> baseListReturnType = new BaseListReturnType<OrderConcept_ContactType>();

                IQueryable<OrderConcept_ContactType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderConcept_ContactType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderConcept_ContactType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderConcept_ContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeWithContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_ContactType, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConcept_ContactTypeByPage(sortingPagingInfo, db,expression,new List<string>(){"ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeWithOrderConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_ContactType, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConcept_ContactTypeByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderConcept_ContactType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderConcept_ContactTypeByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderConcept_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderConcept_ContactType, dynamic> orderExpression = null)
            {
				IQueryable<OrderConcept_ContactType> query =  db.OrderConcept_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderConcept_ContactType> baseListReturnType = new BaseListReturnType<OrderConcept_ContactType>();

                IQueryable<OrderConcept_ContactType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderConcept_ContactType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderConcept_ContactType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderConcept_ContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeWithContactTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_ContactType, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConcept_ContactTypeByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeWithOrderConceptDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_ContactType, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConcept_ContactTypeByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeWithContactTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConcept_ContactTypeWitDetails(new List<string>(){"ContactType"},shouldRemap);
					}
				}
							public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeWithOrderConceptDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConcept_ContactTypeWitDetails(new List<string>(){"OrderConcept"},shouldRemap);
					}
				}
			

			public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderConcept_ContactTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderConcept_ContactType> query =  db.OrderConcept_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderConcept_ContactType> baseListReturnType = new BaseListReturnType<OrderConcept_ContactType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderConcept_ContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public OrderConcept_ContactType GetOrderConcept_ContactType(long idOrderConcept_ContactType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderConcept_ContactType(idOrderConcept_ContactType, db,shouldRemap);
                }
            }
                        public OrderConcept_ContactType GetOrderConcept_ContactType(long idOrderConcept_ContactType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderConcept_ContactTypeSingle(db.OrderConcept_ContactType.Where(p => p.IdOrderConcept_ContactType == idOrderConcept_ContactType && p.IsDeactivated != true).FirstOrDefault());

                return db.OrderConcept_ContactType.Where(p => p.IdOrderConcept_ContactType == idOrderConcept_ContactType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public OrderConcept_ContactType GetOrderConcept_ContactTypeCustom( Expression<Func<OrderConcept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderConcept_ContactTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public OrderConcept_ContactType GetOrderConcept_ContactTypeCustom( SubscriptionEntities db , Expression<Func<OrderConcept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<OrderConcept_ContactType> query =  db.OrderConcept_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapOrderConcept_ContactTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<OrderConcept_ContactType> GetOrderConcept_ContactTypeCustomList( Expression<Func<OrderConcept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderConcept_ContactType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderConcept_ContactTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<OrderConcept_ContactType> GetOrderConcept_ContactTypeCustomList(  SubscriptionEntities db , Expression<Func<OrderConcept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderConcept_ContactType, dynamic> orderExpression = null)
			{
				IQueryable<OrderConcept_ContactType> query =  db.OrderConcept_ContactType;
                BaseListReturnType<OrderConcept_ContactType> baseListReturnType = new BaseListReturnType<OrderConcept_ContactType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderConcept_ContactTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public OrderConcept_ContactType GetOrderConcept_ContactTypeWithContactTypeDetails(long idOrderConcept_ContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderConcept_ContactTypeWithDetails(idOrderConcept_ContactType,new List<string>(){"ContactType"},shouldRemap);
					}
				}

            //IdContactType -- ZeroOrOne

                public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeListByContactType(long idContactType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderConcept_ContactTypeListByContactType(idContactType, db);
                    }
                }
                public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeListByContactType(long idContactType, SubscriptionEntities db)
                {
                    Expression<Func<OrderConcept_ContactType, bool>> expression = property=> property.IdContactType == idContactType && property.IsDeactivated !=true;
                    return GetOrderConcept_ContactTypeCustomList(db, expression, null, true);
                }
                public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeListByContactTypeByPage(long idContactType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderConcept_ContactTypeListByContactTypeByPage(idContactType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeListByContactTypeByPage(long idContactType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<OrderConcept_ContactType, bool>> expression = property => property.IdContactType == idContactType && property.IsDeactivated !=true;
                    return GetAllOrderConcept_ContactTypeByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public OrderConcept_ContactType GetOrderConcept_ContactTypeWithOrderConceptDetails(long idOrderConcept_ContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderConcept_ContactTypeWithDetails(idOrderConcept_ContactType,new List<string>(){"OrderConcept"},shouldRemap);
					}
				}

            //IdOrderConcept -- ZeroOrOne

                public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeListByOrderConcept(long idOrderConcept)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderConcept_ContactTypeListByOrderConcept(idOrderConcept, db);
                    }
                }
                public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeListByOrderConcept(long idOrderConcept, SubscriptionEntities db)
                {
                    Expression<Func<OrderConcept_ContactType, bool>> expression = property=> property.IdOrderConcept == idOrderConcept && property.IsDeactivated !=true;
                    return GetOrderConcept_ContactTypeCustomList(db, expression, null, true);
                }
                public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeListByOrderConceptByPage(long idOrderConcept, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderConcept_ContactTypeListByOrderConceptByPage(idOrderConcept, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeListByOrderConceptByPage(long idOrderConcept, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<OrderConcept_ContactType, bool>> expression = property => property.IdOrderConcept == idOrderConcept && property.IsDeactivated !=true;
                    return GetAllOrderConcept_ContactTypeByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public OrderConcept_ContactType GetOrderConcept_ContactTypeWithDetails(long idOrderConcept_ContactType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderConcept_ContactTypeWithDetails(idOrderConcept_ContactType, db,includes,shouldRemap);
                }
            }

            public OrderConcept_ContactType GetOrderConcept_ContactTypeWithDetails(long idOrderConcept_ContactType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderConcept_ContactType> query =  db.OrderConcept_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapOrderConcept_ContactTypeSingle(query
						.Where(p => p.IdOrderConcept_ContactType == idOrderConcept_ContactType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdOrderConcept_ContactType == idOrderConcept_ContactType && p.IsDeactivated != true).FirstOrDefault();
            }

            public OrderConcept_ContactType GetOrderConcept_ContactTypeWitDetails(long idOrderConcept_ContactType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderConcept_ContactTypeWitDetails(idOrderConcept_ContactType, db,shouldRemap);
                }
            }

            public OrderConcept_ContactType GetOrderConcept_ContactTypeWitDetails(long idOrderConcept_ContactType, SubscriptionEntities db,bool shouldRemap = false)
            {
				OrderConcept_ContactType _OrderConcept_ContactType = db.OrderConcept_ContactType

					.Include("ContactType")
					.Include("OrderConcept")
								.Where(p => p.IdOrderConcept_ContactType == idOrderConcept_ContactType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapOrderConcept_ContactTypeSingle(_OrderConcept_ContactType);

				return  _OrderConcept_ContactType;
            }

            public List<OrderConcept_ContactType> GetOrderConcept_ContactTypeListByIdList(List<long> orderConcept_ContactTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderConcept_ContactTypeListByIdList(orderConcept_ContactTypeIds, db);
                }
            }
            public List<OrderConcept_ContactType> GetOrderConcept_ContactTypeListByIdList(List<long> orderConcept_ContactTypeIds, SubscriptionEntities db)
            {
                return db.OrderConcept_ContactType.Where(p => p.IsDeactivated != true && orderConcept_ContactTypeIds.Contains(p.IdOrderConcept_ContactType.Value)).ToList();
            }


            public void SaveOrderConcept_ContactType(OrderConcept_ContactType orderConcept_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOrderConcept_ContactType(orderConcept_ContactType, db);
                }
            }

            public void SaveOrderConcept_ContactType(OrderConcept_ContactType orderConcept_ContactType, SubscriptionEntities db)
            {
									if (orderConcept_ContactType.ContactType != null) 
						DaoFactories.Instance.ContactTypeDao.SaveContactType(orderConcept_ContactType.ContactType, db);
									if (orderConcept_ContactType.OrderConcept != null) 
						DaoFactories.Instance.OrderConceptDao.SaveOrderConcept(orderConcept_ContactType.OrderConcept, db);
				                
                if (orderConcept_ContactType.IdOrderConcept_ContactType.HasValue){
					var orderConcept_ContactTypeFromDb = db.OrderConcept_ContactType.Where(p => p.IdOrderConcept_ContactType == orderConcept_ContactType.IdOrderConcept_ContactType).FirstOrDefault();
													orderConcept_ContactTypeFromDb.IdOrderConcept = orderConcept_ContactType.IdOrderConcept;
													orderConcept_ContactTypeFromDb.IdContactType = orderConcept_ContactType.IdContactType;
													orderConcept_ContactTypeFromDb.IsDeactivated = orderConcept_ContactType.IsDeactivated;
													orderConcept_ContactTypeFromDb.Description = orderConcept_ContactType.Description;
									}
                else{
                                                //fix for saving without duplicating items in db
                              orderConcept_ContactType.ContactType = null;
                                                        //fix for saving without duplicating items in db
                              orderConcept_ContactType.OrderConcept = null;
                                                db.OrderConcept_ContactType.Add(orderConcept_ContactType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyOrderConcept_ContactType(OrderConcept_ContactType orderConcept_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyOrderConcept_ContactType(orderConcept_ContactType, db);
                }
            }

            public void SaveOnlyOrderConcept_ContactType(OrderConcept_ContactType orderConcept_ContactType, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // orderConcept_ContactType.ContactType = null;
                                                        //fix for saving without duplicating items in db
                             // orderConcept_ContactType.OrderConcept = null;
                                            if (orderConcept_ContactType.IdOrderConcept_ContactType.HasValue){
					var orderConcept_ContactTypeFromDb = db.OrderConcept_ContactType.Where(p => p.IdOrderConcept_ContactType == orderConcept_ContactType.IdOrderConcept_ContactType).FirstOrDefault();
													orderConcept_ContactTypeFromDb.IdOrderConcept = orderConcept_ContactType.IdOrderConcept;
													orderConcept_ContactTypeFromDb.IdContactType = orderConcept_ContactType.IdContactType;
													orderConcept_ContactTypeFromDb.IsDeactivated = orderConcept_ContactType.IsDeactivated;
													orderConcept_ContactTypeFromDb.Description = orderConcept_ContactType.Description;
										 db.SaveChanges();

				}
                else{
					OrderConcept_ContactType _orderConcept_ContactType = new OrderConcept_ContactType();
																	_orderConcept_ContactType.IdOrderConcept = orderConcept_ContactType.IdOrderConcept;
													_orderConcept_ContactType.IdContactType = orderConcept_ContactType.IdContactType;
													_orderConcept_ContactType.IsDeactivated = orderConcept_ContactType.IsDeactivated;
													_orderConcept_ContactType.Description = orderConcept_ContactType.Description;
					

                    db.OrderConcept_ContactType.Add(_orderConcept_ContactType);
					db.SaveChanges();
					orderConcept_ContactType.IdOrderConcept_ContactType =  _orderConcept_ContactType.IdOrderConcept_ContactType;
                    
                }
            }

            public void DeleteOrderConcept_ContactType(OrderConcept_ContactType orderConcept_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteOrderConcept_ContactType(orderConcept_ContactType, db);
                }
            }

            public void DeleteOrderConcept_ContactType(OrderConcept_ContactType orderConcept_ContactType, SubscriptionEntities db)
            {
								var orderConcept_ContactTypeFromDb = GetOrderConcept_ContactType(orderConcept_ContactType.IdOrderConcept_ContactType.Value,db);
				orderConcept_ContactTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyOrderConcept_ContactType(OrderConcept_ContactType orderConcept_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyOrderConcept_ContactType(orderConcept_ContactType, db);
                }
            }

            public void DeletePermanentlyOrderConcept_ContactType(OrderConcept_ContactType orderConcept_ContactType, SubscriptionEntities db)
            {
								var orderConcept_ContactTypeFromDb = GetOrderConcept_ContactType(orderConcept_ContactType.IdOrderConcept_ContactType.Value,db);
				
				db.OrderConcept_ContactType.Remove(orderConcept_ContactTypeFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class OrderConcept_OrderAddressDao :IOrderConcept_OrderAddressDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public OrderConcept_OrderAddressDao(){
			
			}

			public OrderConcept_OrderAddressDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddress(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderConcept_OrderAddress(db, shouldRemap);
                }
            }

            public List<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddress(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderConcept_OrderAddressList(db.OrderConcept_OrderAddress.Where(p => p.IsDeactivated != true).ToList());
				
				return db.OrderConcept_OrderAddress.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_OrderAddress, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderConcept_OrderAddressByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderConcept_OrderAddress, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
            {
				IQueryable<OrderConcept_OrderAddress> query =  db.OrderConcept_OrderAddress;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderConcept_OrderAddress> baseListReturnType = new BaseListReturnType<OrderConcept_OrderAddress>();

                IQueryable<OrderConcept_OrderAddress> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderConcept_OrderAddress" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderConcept_OrderAddress, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Detail.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Detail.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderConcept_OrderAddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressWithOrderAddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_OrderAddress, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConcept_OrderAddressByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderAddress"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressWithOrderConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_OrderAddress, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConcept_OrderAddressByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_OrderAddress, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderConcept_OrderAddressByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderConcept_OrderAddress, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
            {
				IQueryable<OrderConcept_OrderAddress> query =  db.OrderConcept_OrderAddress;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderConcept_OrderAddress> baseListReturnType = new BaseListReturnType<OrderConcept_OrderAddress>();

                IQueryable<OrderConcept_OrderAddress> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderConcept_OrderAddress" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderConcept_OrderAddress, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderConcept_OrderAddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressWithOrderAddressDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_OrderAddress, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConcept_OrderAddressByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderAddress"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressWithOrderConceptDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_OrderAddress, bool>> expression = null,bool shouldRemap = false, Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConcept_OrderAddressByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderConcept"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressWithOrderAddressDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConcept_OrderAddressWitDetails(new List<string>(){"OrderAddress"},shouldRemap);
					}
				}
							public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressWithOrderConceptDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderConcept_OrderAddressWitDetails(new List<string>(){"OrderConcept"},shouldRemap);
					}
				}
			

			public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderConcept_OrderAddressWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderConcept_OrderAddress> query =  db.OrderConcept_OrderAddress;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderConcept_OrderAddress> baseListReturnType = new BaseListReturnType<OrderConcept_OrderAddress>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderConcept_OrderAddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public OrderConcept_OrderAddress GetOrderConcept_OrderAddress(long idOrderConcept_OrderAddress,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderConcept_OrderAddress(idOrderConcept_OrderAddress, db,shouldRemap);
                }
            }
                        public OrderConcept_OrderAddress GetOrderConcept_OrderAddress(long idOrderConcept_OrderAddress, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderConcept_OrderAddressSingle(db.OrderConcept_OrderAddress.Where(p => p.IdOrderConcept_OrderAddress == idOrderConcept_OrderAddress && p.IsDeactivated != true).FirstOrDefault());

                return db.OrderConcept_OrderAddress.Where(p => p.IdOrderConcept_OrderAddress == idOrderConcept_OrderAddress && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public OrderConcept_OrderAddress GetOrderConcept_OrderAddressCustom( Expression<Func<OrderConcept_OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderConcept_OrderAddressCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public OrderConcept_OrderAddress GetOrderConcept_OrderAddressCustom( SubscriptionEntities db , Expression<Func<OrderConcept_OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<OrderConcept_OrderAddress> query =  db.OrderConcept_OrderAddress;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapOrderConcept_OrderAddressSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<OrderConcept_OrderAddress> GetOrderConcept_OrderAddressCustomList( Expression<Func<OrderConcept_OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderConcept_OrderAddressCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<OrderConcept_OrderAddress> GetOrderConcept_OrderAddressCustomList(  SubscriptionEntities db , Expression<Func<OrderConcept_OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
			{
				IQueryable<OrderConcept_OrderAddress> query =  db.OrderConcept_OrderAddress;
                BaseListReturnType<OrderConcept_OrderAddress> baseListReturnType = new BaseListReturnType<OrderConcept_OrderAddress>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderConcept_OrderAddressList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public OrderConcept_OrderAddress GetOrderConcept_OrderAddressWithOrderAddressDetails(long idOrderConcept_OrderAddress,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderConcept_OrderAddressWithDetails(idOrderConcept_OrderAddress,new List<string>(){"OrderAddress"},shouldRemap);
					}
				}

            //IdOrderAddress -- ZeroOrOne

                public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressListByOrderAddress(long idOrderAddress)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderConcept_OrderAddressListByOrderAddress(idOrderAddress, db);
                    }
                }
                public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressListByOrderAddress(long idOrderAddress, SubscriptionEntities db)
                {
                    Expression<Func<OrderConcept_OrderAddress, bool>> expression = property=> property.IdOrderAddress == idOrderAddress && property.IsDeactivated !=true;
                    return GetOrderConcept_OrderAddressCustomList(db, expression, null, true);
                }
                public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressListByOrderAddressByPage(long idOrderAddress, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderConcept_OrderAddressListByOrderAddressByPage(idOrderAddress, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressListByOrderAddressByPage(long idOrderAddress, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<OrderConcept_OrderAddress, bool>> expression = property => property.IdOrderAddress == idOrderAddress && property.IsDeactivated !=true;
                    return GetAllOrderConcept_OrderAddressByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public OrderConcept_OrderAddress GetOrderConcept_OrderAddressWithOrderConceptDetails(long idOrderConcept_OrderAddress,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderConcept_OrderAddressWithDetails(idOrderConcept_OrderAddress,new List<string>(){"OrderConcept"},shouldRemap);
					}
				}

            //IdOrderConcept -- ZeroOrOne

                public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressListByOrderConcept(long idOrderConcept)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderConcept_OrderAddressListByOrderConcept(idOrderConcept, db);
                    }
                }
                public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressListByOrderConcept(long idOrderConcept, SubscriptionEntities db)
                {
                    Expression<Func<OrderConcept_OrderAddress, bool>> expression = property=> property.IdOrderConcept == idOrderConcept && property.IsDeactivated !=true;
                    return GetOrderConcept_OrderAddressCustomList(db, expression, null, true);
                }
                public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressListByOrderConceptByPage(long idOrderConcept, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderConcept_OrderAddressListByOrderConceptByPage(idOrderConcept, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressListByOrderConceptByPage(long idOrderConcept, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<OrderConcept_OrderAddress, bool>> expression = property => property.IdOrderConcept == idOrderConcept && property.IsDeactivated !=true;
                    return GetAllOrderConcept_OrderAddressByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public OrderConcept_OrderAddress GetOrderConcept_OrderAddressWithDetails(long idOrderConcept_OrderAddress, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderConcept_OrderAddressWithDetails(idOrderConcept_OrderAddress, db,includes,shouldRemap);
                }
            }

            public OrderConcept_OrderAddress GetOrderConcept_OrderAddressWithDetails(long idOrderConcept_OrderAddress, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderConcept_OrderAddress> query =  db.OrderConcept_OrderAddress;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapOrderConcept_OrderAddressSingle(query
						.Where(p => p.IdOrderConcept_OrderAddress == idOrderConcept_OrderAddress && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdOrderConcept_OrderAddress == idOrderConcept_OrderAddress && p.IsDeactivated != true).FirstOrDefault();
            }

            public OrderConcept_OrderAddress GetOrderConcept_OrderAddressWitDetails(long idOrderConcept_OrderAddress,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderConcept_OrderAddressWitDetails(idOrderConcept_OrderAddress, db,shouldRemap);
                }
            }

            public OrderConcept_OrderAddress GetOrderConcept_OrderAddressWitDetails(long idOrderConcept_OrderAddress, SubscriptionEntities db,bool shouldRemap = false)
            {
				OrderConcept_OrderAddress _OrderConcept_OrderAddress = db.OrderConcept_OrderAddress

					.Include("OrderAddress")
					.Include("OrderConcept")
								.Where(p => p.IdOrderConcept_OrderAddress == idOrderConcept_OrderAddress && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapOrderConcept_OrderAddressSingle(_OrderConcept_OrderAddress);

				return  _OrderConcept_OrderAddress;
            }

            public List<OrderConcept_OrderAddress> GetOrderConcept_OrderAddressListByIdList(List<long> orderConcept_OrderAddressIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderConcept_OrderAddressListByIdList(orderConcept_OrderAddressIds, db);
                }
            }
            public List<OrderConcept_OrderAddress> GetOrderConcept_OrderAddressListByIdList(List<long> orderConcept_OrderAddressIds, SubscriptionEntities db)
            {
                return db.OrderConcept_OrderAddress.Where(p => p.IsDeactivated != true && orderConcept_OrderAddressIds.Contains(p.IdOrderConcept_OrderAddress.Value)).ToList();
            }


            public void SaveOrderConcept_OrderAddress(OrderConcept_OrderAddress orderConcept_OrderAddress)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOrderConcept_OrderAddress(orderConcept_OrderAddress, db);
                }
            }

            public void SaveOrderConcept_OrderAddress(OrderConcept_OrderAddress orderConcept_OrderAddress, SubscriptionEntities db)
            {
									if (orderConcept_OrderAddress.OrderAddress != null) 
						DaoFactories.Instance.OrderAddressDao.SaveOrderAddress(orderConcept_OrderAddress.OrderAddress, db);
									if (orderConcept_OrderAddress.OrderConcept != null) 
						DaoFactories.Instance.OrderConceptDao.SaveOrderConcept(orderConcept_OrderAddress.OrderConcept, db);
				                
                if (orderConcept_OrderAddress.IdOrderConcept_OrderAddress.HasValue){
					var orderConcept_OrderAddressFromDb = db.OrderConcept_OrderAddress.Where(p => p.IdOrderConcept_OrderAddress == orderConcept_OrderAddress.IdOrderConcept_OrderAddress).FirstOrDefault();
													orderConcept_OrderAddressFromDb.IdOrderConcept = orderConcept_OrderAddress.IdOrderConcept;
													orderConcept_OrderAddressFromDb.IdOrderAddress = orderConcept_OrderAddress.IdOrderAddress;
													orderConcept_OrderAddressFromDb.Detail = orderConcept_OrderAddress.Detail;
													orderConcept_OrderAddressFromDb.IsDeactivated = orderConcept_OrderAddress.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              orderConcept_OrderAddress.OrderAddress = null;
                                                        //fix for saving without duplicating items in db
                              orderConcept_OrderAddress.OrderConcept = null;
                                                db.OrderConcept_OrderAddress.Add(orderConcept_OrderAddress);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyOrderConcept_OrderAddress(OrderConcept_OrderAddress orderConcept_OrderAddress)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyOrderConcept_OrderAddress(orderConcept_OrderAddress, db);
                }
            }

            public void SaveOnlyOrderConcept_OrderAddress(OrderConcept_OrderAddress orderConcept_OrderAddress, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // orderConcept_OrderAddress.OrderAddress = null;
                                                        //fix for saving without duplicating items in db
                             // orderConcept_OrderAddress.OrderConcept = null;
                                            if (orderConcept_OrderAddress.IdOrderConcept_OrderAddress.HasValue){
					var orderConcept_OrderAddressFromDb = db.OrderConcept_OrderAddress.Where(p => p.IdOrderConcept_OrderAddress == orderConcept_OrderAddress.IdOrderConcept_OrderAddress).FirstOrDefault();
													orderConcept_OrderAddressFromDb.IdOrderConcept = orderConcept_OrderAddress.IdOrderConcept;
													orderConcept_OrderAddressFromDb.IdOrderAddress = orderConcept_OrderAddress.IdOrderAddress;
													orderConcept_OrderAddressFromDb.Detail = orderConcept_OrderAddress.Detail;
													orderConcept_OrderAddressFromDb.IsDeactivated = orderConcept_OrderAddress.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					OrderConcept_OrderAddress _orderConcept_OrderAddress = new OrderConcept_OrderAddress();
																	_orderConcept_OrderAddress.IdOrderConcept = orderConcept_OrderAddress.IdOrderConcept;
													_orderConcept_OrderAddress.IdOrderAddress = orderConcept_OrderAddress.IdOrderAddress;
													_orderConcept_OrderAddress.Detail = orderConcept_OrderAddress.Detail;
													_orderConcept_OrderAddress.IsDeactivated = orderConcept_OrderAddress.IsDeactivated;
					

                    db.OrderConcept_OrderAddress.Add(_orderConcept_OrderAddress);
					db.SaveChanges();
					orderConcept_OrderAddress.IdOrderConcept_OrderAddress =  _orderConcept_OrderAddress.IdOrderConcept_OrderAddress;
                    
                }
            }

            public void DeleteOrderConcept_OrderAddress(OrderConcept_OrderAddress orderConcept_OrderAddress)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteOrderConcept_OrderAddress(orderConcept_OrderAddress, db);
                }
            }

            public void DeleteOrderConcept_OrderAddress(OrderConcept_OrderAddress orderConcept_OrderAddress, SubscriptionEntities db)
            {
								var orderConcept_OrderAddressFromDb = GetOrderConcept_OrderAddress(orderConcept_OrderAddress.IdOrderConcept_OrderAddress.Value,db);
				orderConcept_OrderAddressFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyOrderConcept_OrderAddress(OrderConcept_OrderAddress orderConcept_OrderAddress)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyOrderConcept_OrderAddress(orderConcept_OrderAddress, db);
                }
            }

            public void DeletePermanentlyOrderConcept_OrderAddress(OrderConcept_OrderAddress orderConcept_OrderAddress, SubscriptionEntities db)
            {
								var orderConcept_OrderAddressFromDb = GetOrderConcept_OrderAddress(orderConcept_OrderAddress.IdOrderConcept_OrderAddress.Value,db);
				
				db.OrderConcept_OrderAddress.Remove(orderConcept_OrderAddressFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class OrderDetailDao :IOrderDetailDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public OrderDetailDao(){
			
			}

			public OrderDetailDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<OrderDetail> GetAllOrderDetails(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderDetails(db, shouldRemap);
                }
            }

            public List<OrderDetail> GetAllOrderDetails(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderDetailList(db.OrderDetails.Where(p => p.IsDeactivated != true).ToList());
				
				return db.OrderDetails.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<OrderDetail> GetAllOrderDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderDetailsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderDetail> GetAllOrderDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderDetail, dynamic> orderExpression = null)
            {
				IQueryable<OrderDetail> query =  db.OrderDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderDetail> baseListReturnType = new BaseListReturnType<OrderDetail>();

                IQueryable<OrderDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderDetail" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderDetail, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderDetail> GetAllOrderDetailsWithProductDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderDetail, bool>> expression = null,bool shouldRemap = false, Func<OrderDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"Product"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderDetail> GetAllOrderDetailsWithOrderDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderDetail, bool>> expression = null,bool shouldRemap = false, Func<OrderDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"Order"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<OrderDetail> GetAllOrderDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderDetail> GetAllOrderDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderDetail, dynamic> orderExpression = null)
            {
				IQueryable<OrderDetail> query =  db.OrderDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderDetail> baseListReturnType = new BaseListReturnType<OrderDetail>();

                IQueryable<OrderDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderDetail" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderDetail, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderDetail> GetAllOrderDetailsWithProductDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderDetail, bool>> expression = null,bool shouldRemap = false, Func<OrderDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Product"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderDetail> GetAllOrderDetailsWithOrderDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderDetail, bool>> expression = null,bool shouldRemap = false, Func<OrderDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Order"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<OrderDetail> GetAllOrderDetailsWithProductDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderDetailWitDetails(new List<string>(){"Product"},shouldRemap);
					}
				}
							public BaseListReturnType<OrderDetail> GetAllOrderDetailsWithOrderDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderDetailWitDetails(new List<string>(){"Order"},shouldRemap);
					}
				}
			

			public BaseListReturnType<OrderDetail> GetAllOrderDetailWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderDetailWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<OrderDetail> GetAllOrderDetailWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderDetail> query =  db.OrderDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderDetail> baseListReturnType = new BaseListReturnType<OrderDetail>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public OrderDetail GetOrderDetail(long idOrderDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderDetail(idOrderDetail, db,shouldRemap);
                }
            }
                        public OrderDetail GetOrderDetail(long idOrderDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderDetailSingle(db.OrderDetails.Where(p => p.IdOrderDetail == idOrderDetail && p.IsDeactivated != true).FirstOrDefault());

                return db.OrderDetails.Where(p => p.IdOrderDetail == idOrderDetail && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public OrderDetail GetOrderDetailCustom( Expression<Func<OrderDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderDetailCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public OrderDetail GetOrderDetailCustom( SubscriptionEntities db , Expression<Func<OrderDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<OrderDetail> query =  db.OrderDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapOrderDetailSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<OrderDetail> GetOrderDetailCustomList( Expression<Func<OrderDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderDetail, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderDetailCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<OrderDetail> GetOrderDetailCustomList(  SubscriptionEntities db , Expression<Func<OrderDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderDetail, dynamic> orderExpression = null)
			{
				IQueryable<OrderDetail> query =  db.OrderDetails;
                BaseListReturnType<OrderDetail> baseListReturnType = new BaseListReturnType<OrderDetail>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderDetailList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public OrderDetail GetOrderDetailWithProductDetails(long idOrderDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderDetailWithDetails(idOrderDetail,new List<string>(){"Product"},shouldRemap);
					}
				}

            //IdProduct -- ZeroOrOne

                public BaseListReturnType<OrderDetail> GetAllOrderDetailListByProduct(long idProduct)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderDetailListByProduct(idProduct, db);
                    }
                }
                public BaseListReturnType<OrderDetail> GetAllOrderDetailListByProduct(long idProduct, SubscriptionEntities db)
                {
                    Expression<Func<OrderDetail, bool>> expression = property=> property.IdProduct == idProduct && property.IsDeactivated !=true;
                    return GetOrderDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<OrderDetail> GetAllOrderDetailListByProductByPage(long idProduct, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderDetailListByProductByPage(idProduct, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<OrderDetail> GetAllOrderDetailListByProductByPage(long idProduct, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<OrderDetail, bool>> expression = property => property.IdProduct == idProduct && property.IsDeactivated !=true;
                    return GetAllOrderDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public OrderDetail GetOrderDetailWithOrderDetails(long idOrderDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderDetailWithDetails(idOrderDetail,new List<string>(){"Order"},shouldRemap);
					}
				}

            //IdOrder -- ZeroOrOne

                public BaseListReturnType<OrderDetail> GetAllOrderDetailListByOrder(long idOrder)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderDetailListByOrder(idOrder, db);
                    }
                }
                public BaseListReturnType<OrderDetail> GetAllOrderDetailListByOrder(long idOrder, SubscriptionEntities db)
                {
                    Expression<Func<OrderDetail, bool>> expression = property=> property.IdOrder == idOrder && property.IsDeactivated !=true;
                    return GetOrderDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<OrderDetail> GetAllOrderDetailListByOrderByPage(long idOrder, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderDetailListByOrderByPage(idOrder, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<OrderDetail> GetAllOrderDetailListByOrderByPage(long idOrder, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<OrderDetail, bool>> expression = property => property.IdOrder == idOrder && property.IsDeactivated !=true;
                    return GetAllOrderDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public OrderDetail GetOrderDetailWithDetails(long idOrderDetail, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderDetailWithDetails(idOrderDetail, db,includes,shouldRemap);
                }
            }

            public OrderDetail GetOrderDetailWithDetails(long idOrderDetail, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderDetail> query =  db.OrderDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapOrderDetailSingle(query
						.Where(p => p.IdOrderDetail == idOrderDetail && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdOrderDetail == idOrderDetail && p.IsDeactivated != true).FirstOrDefault();
            }

            public OrderDetail GetOrderDetailWitDetails(long idOrderDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderDetailWitDetails(idOrderDetail, db,shouldRemap);
                }
            }

            public OrderDetail GetOrderDetailWitDetails(long idOrderDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				OrderDetail _OrderDetail = db.OrderDetails

					.Include("Product")
					.Include("Order")
								.Where(p => p.IdOrderDetail == idOrderDetail && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapOrderDetailSingle(_OrderDetail);

				return  _OrderDetail;
            }

            public List<OrderDetail> GetOrderDetailListByIdList(List<long> orderDetailIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderDetailListByIdList(orderDetailIds, db);
                }
            }
            public List<OrderDetail> GetOrderDetailListByIdList(List<long> orderDetailIds, SubscriptionEntities db)
            {
                return db.OrderDetails.Where(p => p.IsDeactivated != true && orderDetailIds.Contains(p.IdOrderDetail.Value)).ToList();
            }


            public void SaveOrderDetail(OrderDetail orderDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOrderDetail(orderDetail, db);
                }
            }

            public void SaveOrderDetail(OrderDetail orderDetail, SubscriptionEntities db)
            {
									if (orderDetail.Product != null) 
						DaoFactories.Instance.ProductDao.SaveProduct(orderDetail.Product, db);
									if (orderDetail.Order != null) 
						DaoFactories.Instance.OrderDao.SaveOrder(orderDetail.Order, db);
				                
                if (orderDetail.IdOrderDetail.HasValue){
					var orderDetailFromDb = db.OrderDetails.Where(p => p.IdOrderDetail == orderDetail.IdOrderDetail).FirstOrDefault();
													orderDetailFromDb.IdOrder = orderDetail.IdOrder;
													orderDetailFromDb.IdProduct = orderDetail.IdProduct;
													orderDetailFromDb.Quantity = orderDetail.Quantity;
													orderDetailFromDb.Rate = orderDetail.Rate;
													orderDetailFromDb.IsDeactivated = orderDetail.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              orderDetail.Product = null;
                                                        //fix for saving without duplicating items in db
                              orderDetail.Order = null;
                                                db.OrderDetails.Add(orderDetail);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyOrderDetail(OrderDetail orderDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyOrderDetail(orderDetail, db);
                }
            }

            public void SaveOnlyOrderDetail(OrderDetail orderDetail, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // orderDetail.Product = null;
                                                        //fix for saving without duplicating items in db
                             // orderDetail.Order = null;
                                            if (orderDetail.IdOrderDetail.HasValue){
					var orderDetailFromDb = db.OrderDetails.Where(p => p.IdOrderDetail == orderDetail.IdOrderDetail).FirstOrDefault();
													orderDetailFromDb.IdOrder = orderDetail.IdOrder;
													orderDetailFromDb.IdProduct = orderDetail.IdProduct;
													orderDetailFromDb.Quantity = orderDetail.Quantity;
													orderDetailFromDb.Rate = orderDetail.Rate;
													orderDetailFromDb.IsDeactivated = orderDetail.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					OrderDetail _orderDetail = new OrderDetail();
																	_orderDetail.IdOrder = orderDetail.IdOrder;
													_orderDetail.IdProduct = orderDetail.IdProduct;
													_orderDetail.Quantity = orderDetail.Quantity;
													_orderDetail.Rate = orderDetail.Rate;
													_orderDetail.IsDeactivated = orderDetail.IsDeactivated;
					

                    db.OrderDetails.Add(_orderDetail);
					db.SaveChanges();
					orderDetail.IdOrderDetail =  _orderDetail.IdOrderDetail;
                    
                }
            }

            public void DeleteOrderDetail(OrderDetail orderDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteOrderDetail(orderDetail, db);
                }
            }

            public void DeleteOrderDetail(OrderDetail orderDetail, SubscriptionEntities db)
            {
								var orderDetailFromDb = GetOrderDetail(orderDetail.IdOrderDetail.Value,db);
				orderDetailFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyOrderDetail(OrderDetail orderDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyOrderDetail(orderDetail, db);
                }
            }

            public void DeletePermanentlyOrderDetail(OrderDetail orderDetail, SubscriptionEntities db)
            {
								var orderDetailFromDb = GetOrderDetail(orderDetail.IdOrderDetail.Value,db);
				
				db.OrderDetails.Remove(orderDetailFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class OrderPersonDao :IOrderPersonDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public OrderPersonDao(){
			
			}

			public OrderPersonDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<OrderPerson> GetAllOrderPersons(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderPersons(db, shouldRemap);
                }
            }

            public List<OrderPerson> GetAllOrderPersons(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderPersonList(db.OrderPersons.Where(p => p.IsDeactivated != true).ToList());
				
				return db.OrderPersons.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<OrderPerson> GetAllOrderPersonsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderPerson, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderPerson, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderPersonsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderPerson> GetAllOrderPersonsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderPerson, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderPerson, dynamic> orderExpression = null)
            {
				IQueryable<OrderPerson> query =  db.OrderPersons;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderPerson> baseListReturnType = new BaseListReturnType<OrderPerson>();

                IQueryable<OrderPerson> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderPerson" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderPerson, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Firstname.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Firstname.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Lastname.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Othername.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Headline.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ShortBiography.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.NationalIdentificationNumber.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderPersonList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderPerson> GetAllOrderPersonsWithTitleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderPerson, bool>> expression = null,bool shouldRemap = false, Func<OrderPerson, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderPersonsByPage(sortingPagingInfo, db,expression,new List<string>(){"Title"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderPerson> GetAllOrderPersonsWithOrderConceptsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderPerson, bool>> expression = null,bool shouldRemap = false, Func<OrderPerson, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderPersonsByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderConcepts"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<OrderPerson> GetAllOrderPersonsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderPerson, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderPerson, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderPersonsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderPerson> GetAllOrderPersonsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderPerson, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderPerson, dynamic> orderExpression = null)
            {
				IQueryable<OrderPerson> query =  db.OrderPersons;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderPerson> baseListReturnType = new BaseListReturnType<OrderPerson>();

                IQueryable<OrderPerson> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderPerson" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderPerson, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderPersonList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderPerson> GetAllOrderPersonsWithTitleDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderPerson, bool>> expression = null,bool shouldRemap = false, Func<OrderPerson, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderPersonsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Title"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<OrderPerson> GetAllOrderPersonsWithOrderConceptsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderPerson, bool>> expression = null,bool shouldRemap = false, Func<OrderPerson, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderPersonsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderConcepts"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<OrderPerson> GetAllOrderPersonsWithTitleDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderPersonWitDetails(new List<string>(){"Title"},shouldRemap);
					}
				}
							public BaseListReturnType<OrderPerson> GetAllOrderPersonsWithOrderConceptsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderPersonWitDetails(new List<string>(){"OrderConcepts"},shouldRemap);
					}
				}
			

			public BaseListReturnType<OrderPerson> GetAllOrderPersonWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderPersonWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<OrderPerson> GetAllOrderPersonWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderPerson> query =  db.OrderPersons;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderPerson> baseListReturnType = new BaseListReturnType<OrderPerson>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderPersonList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public OrderPerson GetOrderPerson(long idOrderPerson,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderPerson(idOrderPerson, db,shouldRemap);
                }
            }
                        public OrderPerson GetOrderPerson(long idOrderPerson, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderPersonSingle(db.OrderPersons.Where(p => p.IdOrderPerson == idOrderPerson && p.IsDeactivated != true).FirstOrDefault());

                return db.OrderPersons.Where(p => p.IdOrderPerson == idOrderPerson && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public OrderPerson GetOrderPersonCustom( Expression<Func<OrderPerson, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderPersonCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public OrderPerson GetOrderPersonCustom( SubscriptionEntities db , Expression<Func<OrderPerson, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<OrderPerson> query =  db.OrderPersons;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapOrderPersonSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<OrderPerson> GetOrderPersonCustomList( Expression<Func<OrderPerson, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderPerson, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderPersonCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<OrderPerson> GetOrderPersonCustomList(  SubscriptionEntities db , Expression<Func<OrderPerson, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderPerson, dynamic> orderExpression = null)
			{
				IQueryable<OrderPerson> query =  db.OrderPersons;
                BaseListReturnType<OrderPerson> baseListReturnType = new BaseListReturnType<OrderPerson>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderPersonList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public OrderPerson GetOrderPersonWithTitleDetails(long idOrderPerson,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderPersonWithDetails(idOrderPerson,new List<string>(){"Title"},shouldRemap);
					}
				}

            //IdTitle -- ZeroOrOne

                public BaseListReturnType<OrderPerson> GetAllOrderPersonListByTitle(long idTitle)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderPersonListByTitle(idTitle, db);
                    }
                }
                public BaseListReturnType<OrderPerson> GetAllOrderPersonListByTitle(long idTitle, SubscriptionEntities db)
                {
                    Expression<Func<OrderPerson, bool>> expression = property=> property.IdTitle == idTitle && property.IsDeactivated !=true;
                    return GetOrderPersonCustomList(db, expression, null, true);
                }
                public BaseListReturnType<OrderPerson> GetAllOrderPersonListByTitleByPage(long idTitle, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllOrderPersonListByTitleByPage(idTitle, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<OrderPerson> GetAllOrderPersonListByTitleByPage(long idTitle, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<OrderPerson, bool>> expression = property => property.IdTitle == idTitle && property.IsDeactivated !=true;
                    return GetAllOrderPersonsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public OrderPerson GetOrderPersonWithOrderConceptsDetails(long idOrderPerson,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderPersonWithDetails(idOrderPerson,new List<string>(){"OrderConcepts"},shouldRemap);
					}
				}

            //IdOrderPerson -- Many


			


			public OrderPerson GetOrderPersonWithDetails(long idOrderPerson, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderPersonWithDetails(idOrderPerson, db,includes,shouldRemap);
                }
            }

            public OrderPerson GetOrderPersonWithDetails(long idOrderPerson, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderPerson> query =  db.OrderPersons;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapOrderPersonSingle(query
						.Where(p => p.IdOrderPerson == idOrderPerson && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdOrderPerson == idOrderPerson && p.IsDeactivated != true).FirstOrDefault();
            }

            public OrderPerson GetOrderPersonWitDetails(long idOrderPerson,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderPersonWitDetails(idOrderPerson, db,shouldRemap);
                }
            }

            public OrderPerson GetOrderPersonWitDetails(long idOrderPerson, SubscriptionEntities db,bool shouldRemap = false)
            {
				OrderPerson _OrderPerson = db.OrderPersons

					.Include("Title")
					.Include("OrderConcepts")
								.Where(p => p.IdOrderPerson == idOrderPerson && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapOrderPersonSingle(_OrderPerson);

				return  _OrderPerson;
            }

            public List<OrderPerson> GetOrderPersonListByIdList(List<long> orderPersonIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderPersonListByIdList(orderPersonIds, db);
                }
            }
            public List<OrderPerson> GetOrderPersonListByIdList(List<long> orderPersonIds, SubscriptionEntities db)
            {
                return db.OrderPersons.Where(p => p.IsDeactivated != true && orderPersonIds.Contains(p.IdOrderPerson.Value)).ToList();
            }


            public void SaveOrderPerson(OrderPerson orderPerson)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOrderPerson(orderPerson, db);
                }
            }

            public void SaveOrderPerson(OrderPerson orderPerson, SubscriptionEntities db)
            {
									if (orderPerson.Title != null) 
						DaoFactories.Instance.TitleDao.SaveTitle(orderPerson.Title, db);
				                
                if (orderPerson.IdOrderPerson.HasValue){
					var orderPersonFromDb = db.OrderPersons.Where(p => p.IdOrderPerson == orderPerson.IdOrderPerson).FirstOrDefault();
													orderPersonFromDb.IsDeactivated = orderPerson.IsDeactivated;
													orderPersonFromDb.Firstname = orderPerson.Firstname;
													orderPersonFromDb.Lastname = orderPerson.Lastname;
													orderPersonFromDb.Othername = orderPerson.Othername;
													orderPersonFromDb.IdProfilePic = orderPerson.IdProfilePic;
													orderPersonFromDb.Headline = orderPerson.Headline;
													orderPersonFromDb.ShortBiography = orderPerson.ShortBiography;
													orderPersonFromDb.Dob = orderPerson.Dob;
													orderPersonFromDb.IdNationality = orderPerson.IdNationality;
													orderPersonFromDb.HasDrivingLicense = orderPerson.HasDrivingLicense;
													orderPersonFromDb.IdCoverPic = orderPerson.IdCoverPic;
													orderPersonFromDb.IdHostedDomain = orderPerson.IdHostedDomain;
													orderPersonFromDb.IdTitle = orderPerson.IdTitle;
													orderPersonFromDb.NationalIdentificationNumber = orderPerson.NationalIdentificationNumber;
									}
                else{
                                                //fix for saving without duplicating items in db
                              orderPerson.Title = null;
                                                db.OrderPersons.Add(orderPerson);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyOrderPerson(OrderPerson orderPerson)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyOrderPerson(orderPerson, db);
                }
            }

            public void SaveOnlyOrderPerson(OrderPerson orderPerson, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // orderPerson.Title = null;
                                            if (orderPerson.IdOrderPerson.HasValue){
					var orderPersonFromDb = db.OrderPersons.Where(p => p.IdOrderPerson == orderPerson.IdOrderPerson).FirstOrDefault();
													orderPersonFromDb.IsDeactivated = orderPerson.IsDeactivated;
													orderPersonFromDb.Firstname = orderPerson.Firstname;
													orderPersonFromDb.Lastname = orderPerson.Lastname;
													orderPersonFromDb.Othername = orderPerson.Othername;
													orderPersonFromDb.IdProfilePic = orderPerson.IdProfilePic;
													orderPersonFromDb.Headline = orderPerson.Headline;
													orderPersonFromDb.ShortBiography = orderPerson.ShortBiography;
													orderPersonFromDb.Dob = orderPerson.Dob;
													orderPersonFromDb.IdNationality = orderPerson.IdNationality;
													orderPersonFromDb.HasDrivingLicense = orderPerson.HasDrivingLicense;
													orderPersonFromDb.IdCoverPic = orderPerson.IdCoverPic;
													orderPersonFromDb.IdHostedDomain = orderPerson.IdHostedDomain;
													orderPersonFromDb.IdTitle = orderPerson.IdTitle;
													orderPersonFromDb.NationalIdentificationNumber = orderPerson.NationalIdentificationNumber;
										 db.SaveChanges();

				}
                else{
					OrderPerson _orderPerson = new OrderPerson();
																	_orderPerson.IsDeactivated = orderPerson.IsDeactivated;
													_orderPerson.Firstname = orderPerson.Firstname;
													_orderPerson.Lastname = orderPerson.Lastname;
													_orderPerson.Othername = orderPerson.Othername;
													_orderPerson.IdProfilePic = orderPerson.IdProfilePic;
													_orderPerson.Headline = orderPerson.Headline;
													_orderPerson.ShortBiography = orderPerson.ShortBiography;
													_orderPerson.Dob = orderPerson.Dob;
													_orderPerson.IdNationality = orderPerson.IdNationality;
													_orderPerson.HasDrivingLicense = orderPerson.HasDrivingLicense;
													_orderPerson.IdCoverPic = orderPerson.IdCoverPic;
													_orderPerson.IdHostedDomain = orderPerson.IdHostedDomain;
													_orderPerson.IdTitle = orderPerson.IdTitle;
													_orderPerson.NationalIdentificationNumber = orderPerson.NationalIdentificationNumber;
					

                    db.OrderPersons.Add(_orderPerson);
					db.SaveChanges();
					orderPerson.IdOrderPerson =  _orderPerson.IdOrderPerson;
                    
                }
            }

            public void DeleteOrderPerson(OrderPerson orderPerson)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteOrderPerson(orderPerson, db);
                }
            }

            public void DeleteOrderPerson(OrderPerson orderPerson, SubscriptionEntities db)
            {
								var orderPersonFromDb = GetOrderPerson(orderPerson.IdOrderPerson.Value,db);
				orderPersonFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyOrderPerson(OrderPerson orderPerson)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyOrderPerson(orderPerson, db);
                }
            }

            public void DeletePermanentlyOrderPerson(OrderPerson orderPerson, SubscriptionEntities db)
            {
								var orderPersonFromDb = GetOrderPerson(orderPerson.IdOrderPerson.Value,db);
				
				db.OrderPersons.Remove(orderPersonFromDb);
                db.SaveChanges();
            }


            
							public List<OrderConcept> UpdateOrderConceptsForOrderPersonWithoutSavingNewItem(List<OrderConcept> newOrderConcepts,long idOrderPerson)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderConceptsForOrderPersonWithoutSavingNewItem(newOrderConcepts,idOrderPerson,db);
                                }
                            }

							public List<OrderConcept> UpdateOrderConceptsForOrderPersonWithoutSavingNewItem(List<OrderConcept> newOrderConcepts,long idOrderPerson, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderConcept, bool>> expressionBuilder = p => p.IdOrderPerson == idOrderPerson;
                                var oldOrderConcepts = DaoFactories.Instance.OrderConceptDao.GetOrderConceptCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderConcepts.EntityList.Select(pc => pc.IdOrderConcept).Except(newOrderConcepts.Where(pc => pc.IdOrderConcept.HasValue).Select(pc => pc.IdOrderConcept)).ToList();
                                var itemsTobeDeleted = oldOrderConcepts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderConcept)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newOrderConcepts;
                            }


                            public List<OrderConcept> UpdateOrderConceptsForOrderPerson(List<OrderConcept> newOrderConcepts,long idOrderPerson)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderConceptsForOrderPerson(newOrderConcepts,idOrderPerson,db);
                                }
                            }

                            public List<OrderConcept> UpdateOrderConceptsForOrderPerson(List<OrderConcept> newOrderConcepts,long idOrderPerson, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderConcept, bool>> expressionBuilder = p => p.IdOrderPerson == idOrderPerson;
                                var oldOrderConcepts = DaoFactories.Instance.OrderConceptDao.GetOrderConceptCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderConcepts.EntityList.Select(pc => pc.IdOrderConcept).Except(newOrderConcepts.Where(pc => pc.IdOrderConcept.HasValue).Select(pc => pc.IdOrderConcept)).ToList();
                                var itemsTobeDeleted = oldOrderConcepts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderConcept)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newOrderConcepts.ForEach(pc =>
                                {
                                    pc.IdOrderPerson = idOrderPerson;
                                    DaoFactories.Instance.OrderConceptDao.SaveOnlyOrderConcept(pc, db);
                                });
                                return newOrderConcepts;
                            }

                        


    



		}
			public partial class OrderStateDao :IOrderStateDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public OrderStateDao(){
			
			}

			public OrderStateDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<OrderState> GetAllOrderStates(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderStates(db, shouldRemap);
                }
            }

            public List<OrderState> GetAllOrderStates(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderStateList(db.OrderStates.Where(p => p.IsDeactivated != true).ToList());
				
				return db.OrderStates.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<OrderState> GetAllOrderStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderStatesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderState> GetAllOrderStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderState, dynamic> orderExpression = null)
            {
				IQueryable<OrderState> query =  db.OrderStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderState> baseListReturnType = new BaseListReturnType<OrderState>();

                IQueryable<OrderState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderState" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderState, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderState> GetAllOrderStatesWithOrdersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderState, bool>> expression = null,bool shouldRemap = false, Func<OrderState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderStatesByPage(sortingPagingInfo, db,expression,new List<string>(){"Orders"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<OrderState> GetAllOrderStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderStatesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<OrderState> GetAllOrderStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<OrderState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<OrderState, dynamic> orderExpression = null)
            {
				IQueryable<OrderState> query =  db.OrderStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderState> baseListReturnType = new BaseListReturnType<OrderState>();

                IQueryable<OrderState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdOrderState" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<OrderState, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<OrderState> GetAllOrderStatesWithOrdersDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderState, bool>> expression = null,bool shouldRemap = false, Func<OrderState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderStatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Orders"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<OrderState> GetAllOrderStatesWithOrdersDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllOrderStateWitDetails(new List<string>(){"Orders"},shouldRemap);
					}
				}
			

			public BaseListReturnType<OrderState> GetAllOrderStateWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllOrderStateWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<OrderState> GetAllOrderStateWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderState> query =  db.OrderStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<OrderState> baseListReturnType = new BaseListReturnType<OrderState>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public OrderState GetOrderState(long idOrderState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderState(idOrderState, db,shouldRemap);
                }
            }
                        public OrderState GetOrderState(long idOrderState, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapOrderStateSingle(db.OrderStates.Where(p => p.IdOrderState == idOrderState && p.IsDeactivated != true).FirstOrDefault());

                return db.OrderStates.Where(p => p.IdOrderState == idOrderState && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public OrderState GetOrderStateCustom( Expression<Func<OrderState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderStateCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public OrderState GetOrderStateCustom( SubscriptionEntities db , Expression<Func<OrderState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<OrderState> query =  db.OrderStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapOrderStateSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<OrderState> GetOrderStateCustomList( Expression<Func<OrderState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderState, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetOrderStateCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<OrderState> GetOrderStateCustomList(  SubscriptionEntities db , Expression<Func<OrderState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<OrderState, dynamic> orderExpression = null)
			{
				IQueryable<OrderState> query =  db.OrderStates;
                BaseListReturnType<OrderState> baseListReturnType = new BaseListReturnType<OrderState>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapOrderStateList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public OrderState GetOrderStateWithOrdersDetails(long idOrderState,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetOrderStateWithDetails(idOrderState,new List<string>(){"Orders"},shouldRemap);
					}
				}

            //IdOrderState -- Many


			


			public OrderState GetOrderStateWithDetails(long idOrderState, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderStateWithDetails(idOrderState, db,includes,shouldRemap);
                }
            }

            public OrderState GetOrderStateWithDetails(long idOrderState, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<OrderState> query =  db.OrderStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapOrderStateSingle(query
						.Where(p => p.IdOrderState == idOrderState && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdOrderState == idOrderState && p.IsDeactivated != true).FirstOrDefault();
            }

            public OrderState GetOrderStateWitDetails(long idOrderState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderStateWitDetails(idOrderState, db,shouldRemap);
                }
            }

            public OrderState GetOrderStateWitDetails(long idOrderState, SubscriptionEntities db,bool shouldRemap = false)
            {
				OrderState _OrderState = db.OrderStates

					.Include("Orders")
								.Where(p => p.IdOrderState == idOrderState && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapOrderStateSingle(_OrderState);

				return  _OrderState;
            }

            public List<OrderState> GetOrderStateListByIdList(List<long> orderStateIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetOrderStateListByIdList(orderStateIds, db);
                }
            }
            public List<OrderState> GetOrderStateListByIdList(List<long> orderStateIds, SubscriptionEntities db)
            {
                return db.OrderStates.Where(p => p.IsDeactivated != true && orderStateIds.Contains(p.IdOrderState.Value)).ToList();
            }


            public void SaveOrderState(OrderState orderState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOrderState(orderState, db);
                }
            }

            public void SaveOrderState(OrderState orderState, SubscriptionEntities db)
            {
				                
                if (orderState.IdOrderState.HasValue){
					var orderStateFromDb = db.OrderStates.Where(p => p.IdOrderState == orderState.IdOrderState).FirstOrDefault();
													orderStateFromDb.IsDeactivated = orderState.IsDeactivated;
													orderStateFromDb.Description = orderState.Description;
									}
                else{
                                        db.OrderStates.Add(orderState);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyOrderState(OrderState orderState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyOrderState(orderState, db);
                }
            }

            public void SaveOnlyOrderState(OrderState orderState, SubscriptionEntities db)
            {
			                    if (orderState.IdOrderState.HasValue){
					var orderStateFromDb = db.OrderStates.Where(p => p.IdOrderState == orderState.IdOrderState).FirstOrDefault();
													orderStateFromDb.IsDeactivated = orderState.IsDeactivated;
													orderStateFromDb.Description = orderState.Description;
										 db.SaveChanges();

				}
                else{
					OrderState _orderState = new OrderState();
																	_orderState.IsDeactivated = orderState.IsDeactivated;
													_orderState.Description = orderState.Description;
					

                    db.OrderStates.Add(_orderState);
					db.SaveChanges();
					orderState.IdOrderState =  _orderState.IdOrderState;
                    
                }
            }

            public void DeleteOrderState(OrderState orderState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteOrderState(orderState, db);
                }
            }

            public void DeleteOrderState(OrderState orderState, SubscriptionEntities db)
            {
								var orderStateFromDb = GetOrderState(orderState.IdOrderState.Value,db);
				orderStateFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyOrderState(OrderState orderState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyOrderState(orderState, db);
                }
            }

            public void DeletePermanentlyOrderState(OrderState orderState, SubscriptionEntities db)
            {
								var orderStateFromDb = GetOrderState(orderState.IdOrderState.Value,db);
				
				db.OrderStates.Remove(orderStateFromDb);
                db.SaveChanges();
            }


            
							public List<Order> UpdateOrdersForOrderStateWithoutSavingNewItem(List<Order> newOrders,long idOrderState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrdersForOrderStateWithoutSavingNewItem(newOrders,idOrderState,db);
                                }
                            }

							public List<Order> UpdateOrdersForOrderStateWithoutSavingNewItem(List<Order> newOrders,long idOrderState, SubscriptionEntities  db)
                            {
                                Expression<Func<Order, bool>> expressionBuilder = p => p.IdOrderState == idOrderState;
                                var oldOrders = DaoFactories.Instance.OrderDao.GetOrderCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrders.EntityList.Select(pc => pc.IdOrder).Except(newOrders.Where(pc => pc.IdOrder.HasValue).Select(pc => pc.IdOrder)).ToList();
                                var itemsTobeDeleted = oldOrders.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrder)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newOrders;
                            }


                            public List<Order> UpdateOrdersForOrderState(List<Order> newOrders,long idOrderState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrdersForOrderState(newOrders,idOrderState,db);
                                }
                            }

                            public List<Order> UpdateOrdersForOrderState(List<Order> newOrders,long idOrderState, SubscriptionEntities  db)
                            {
                                Expression<Func<Order, bool>> expressionBuilder = p => p.IdOrderState == idOrderState;
                                var oldOrders = DaoFactories.Instance.OrderDao.GetOrderCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrders.EntityList.Select(pc => pc.IdOrder).Except(newOrders.Where(pc => pc.IdOrder.HasValue).Select(pc => pc.IdOrder)).ToList();
                                var itemsTobeDeleted = oldOrders.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrder)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newOrders.ForEach(pc =>
                                {
                                    pc.IdOrderState = idOrderState;
                                    DaoFactories.Instance.OrderDao.SaveOnlyOrder(pc, db);
                                });
                                return newOrders;
                            }

                        


    



		}
			public partial class ParameterDao :IParameterDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public ParameterDao(){
			
			}

			public ParameterDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Parameter> GetAllParameters(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllParameters(db, shouldRemap);
                }
            }

            public List<Parameter> GetAllParameters(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapParameterList(db.Parameters.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Parameters.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Parameter> GetAllParametersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Parameter, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Parameter, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllParametersByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Parameter> GetAllParametersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Parameter, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Parameter, dynamic> orderExpression = null)
            {
				IQueryable<Parameter> query =  db.Parameters;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Parameter> baseListReturnType = new BaseListReturnType<Parameter>();

                IQueryable<Parameter> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdParameter" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Parameter, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.ParamaterValue.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ParamaterValue.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapParameterList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Parameter> GetAllParametersWithDocumentsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Parameter, bool>> expression = null,bool shouldRemap = false, Func<Parameter, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllParametersByPage(sortingPagingInfo, db,expression,new List<string>(){"Documents"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Parameter> GetAllParametersWithDocuments1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Parameter, bool>> expression = null,bool shouldRemap = false, Func<Parameter, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllParametersByPage(sortingPagingInfo, db,expression,new List<string>(){"Documents1"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Parameter> GetAllParametersByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Parameter, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Parameter, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllParametersByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Parameter> GetAllParametersByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Parameter, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Parameter, dynamic> orderExpression = null)
            {
				IQueryable<Parameter> query =  db.Parameters;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Parameter> baseListReturnType = new BaseListReturnType<Parameter>();

                IQueryable<Parameter> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdParameter" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Parameter, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapParameterList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Parameter> GetAllParametersWithDocumentsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Parameter, bool>> expression = null,bool shouldRemap = false, Func<Parameter, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllParametersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Documents"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Parameter> GetAllParametersWithDocuments1DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Parameter, bool>> expression = null,bool shouldRemap = false, Func<Parameter, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllParametersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Documents1"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Parameter> GetAllParametersWithDocumentsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllParameterWitDetails(new List<string>(){"Documents"},shouldRemap);
					}
				}
							public BaseListReturnType<Parameter> GetAllParametersWithDocuments1Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllParameterWitDetails(new List<string>(){"Documents1"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Parameter> GetAllParameterWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllParameterWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Parameter> GetAllParameterWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Parameter> query =  db.Parameters;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Parameter> baseListReturnType = new BaseListReturnType<Parameter>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapParameterList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Parameter GetParameter(long idParameter,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetParameter(idParameter, db,shouldRemap);
                }
            }
              

            public Parameter GetParameterByCode(long code,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetParameterByCode(code, db,shouldRemap);
                }
            }
            
            public Parameter GetParameterByCode(long code, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapParameterSingle(db.Parameters.Where(p => p.Code == code && p.IsDeactivated != true).FirstOrDefault());

                return db.Parameters.Where(p => p.Code == code && p.IsDeactivated != true).FirstOrDefault();
            }

                        public Parameter GetParameter(long idParameter, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapParameterSingle(db.Parameters.Where(p => p.IdParameter == idParameter && p.IsDeactivated != true).FirstOrDefault());

                return db.Parameters.Where(p => p.IdParameter == idParameter && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Parameter GetParameterCustom( Expression<Func<Parameter, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetParameterCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Parameter GetParameterCustom( SubscriptionEntities db , Expression<Func<Parameter, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Parameter> query =  db.Parameters;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapParameterSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Parameter> GetParameterCustomList( Expression<Func<Parameter, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Parameter, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetParameterCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Parameter> GetParameterCustomList(  SubscriptionEntities db , Expression<Func<Parameter, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Parameter, dynamic> orderExpression = null)
			{
				IQueryable<Parameter> query =  db.Parameters;
                BaseListReturnType<Parameter> baseListReturnType = new BaseListReturnType<Parameter>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapParameterList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Parameter GetParameterWithDocumentsDetails(long idParameter,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetParameterWithDetails(idParameter,new List<string>(){"Documents"},shouldRemap);
					}
				}

            //IdParameterBasePhysicalFilePath -- Many


							public Parameter GetParameterWithDocuments1Details(long idParameter,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetParameterWithDetails(idParameter,new List<string>(){"Documents1"},shouldRemap);
					}
				}

            //IdParameterBaseServerUrl -- Many


			


			public Parameter GetParameterWithDetails(long idParameter, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetParameterWithDetails(idParameter, db,includes,shouldRemap);
                }
            }

            public Parameter GetParameterWithDetails(long idParameter, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Parameter> query =  db.Parameters;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapParameterSingle(query
						.Where(p => p.IdParameter == idParameter && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdParameter == idParameter && p.IsDeactivated != true).FirstOrDefault();
            }

            public Parameter GetParameterWitDetails(long idParameter,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetParameterWitDetails(idParameter, db,shouldRemap);
                }
            }

            public Parameter GetParameterWitDetails(long idParameter, SubscriptionEntities db,bool shouldRemap = false)
            {
				Parameter _Parameter = db.Parameters

					.Include("Documents")
					.Include("Documents1")
								.Where(p => p.IdParameter == idParameter && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapParameterSingle(_Parameter);

				return  _Parameter;
            }

            public List<Parameter> GetParameterListByIdList(List<long> parameterIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetParameterListByIdList(parameterIds, db);
                }
            }
            public List<Parameter> GetParameterListByIdList(List<long> parameterIds, SubscriptionEntities db)
            {
                return db.Parameters.Where(p => p.IsDeactivated != true && parameterIds.Contains(p.IdParameter.Value)).ToList();
            }


            public void SaveParameter(Parameter parameter)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveParameter(parameter, db);
                }
            }

            public void SaveParameter(Parameter parameter, SubscriptionEntities db)
            {
				                
                if (parameter.IdParameter.HasValue){
					var parameterFromDb = db.Parameters.Where(p => p.IdParameter == parameter.IdParameter).FirstOrDefault();
													parameterFromDb.ParamaterValue = parameter.ParamaterValue;
													parameterFromDb.IsDeactivated = parameter.IsDeactivated;
													parameterFromDb.Code = parameter.Code;
									}
                else{
                                        db.Parameters.Add(parameter);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyParameter(Parameter parameter)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyParameter(parameter, db);
                }
            }

            public void SaveOnlyParameter(Parameter parameter, SubscriptionEntities db)
            {
			                    if (parameter.IdParameter.HasValue){
					var parameterFromDb = db.Parameters.Where(p => p.IdParameter == parameter.IdParameter).FirstOrDefault();
													parameterFromDb.ParamaterValue = parameter.ParamaterValue;
													parameterFromDb.IsDeactivated = parameter.IsDeactivated;
													parameterFromDb.Code = parameter.Code;
										 db.SaveChanges();

				}
                else{
					Parameter _parameter = new Parameter();
																	_parameter.ParamaterValue = parameter.ParamaterValue;
													_parameter.IsDeactivated = parameter.IsDeactivated;
													_parameter.Code = parameter.Code;
					

                    db.Parameters.Add(_parameter);
					db.SaveChanges();
					parameter.IdParameter =  _parameter.IdParameter;
                    
                }
            }

            public void DeleteParameter(Parameter parameter)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteParameter(parameter, db);
                }
            }

            public void DeleteParameter(Parameter parameter, SubscriptionEntities db)
            {
								var parameterFromDb = GetParameter(parameter.IdParameter.Value,db);
				parameterFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyParameter(Parameter parameter)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyParameter(parameter, db);
                }
            }

            public void DeletePermanentlyParameter(Parameter parameter, SubscriptionEntities db)
            {
								var parameterFromDb = GetParameter(parameter.IdParameter.Value,db);
				
				db.Parameters.Remove(parameterFromDb);
                db.SaveChanges();
            }


            
							public List<Document> UpdateDocumentsForParameterWithoutSavingNewItem(List<Document> newDocuments,long idParameter)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateDocumentsForParameterWithoutSavingNewItem(newDocuments,idParameter,db);
                                }
                            }

							public List<Document> UpdateDocumentsForParameterWithoutSavingNewItem(List<Document> newDocuments,long idParameter, SubscriptionEntities  db)
                            {
                                Expression<Func<Document, bool>> expressionBuilder = p => p.IdParameterBasePhysicalFilePath == idParameter;
                                var oldDocuments = DaoFactories.Instance.DocumentDao.GetDocumentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldDocuments.EntityList.Select(pc => pc.IdDocument).Except(newDocuments.Where(pc => pc.IdDocument.HasValue).Select(pc => pc.IdDocument)).ToList();
                                var itemsTobeDeleted = oldDocuments.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdDocument)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newDocuments;
                            }


                            public List<Document> UpdateDocumentsForParameter(List<Document> newDocuments,long idParameter)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateDocumentsForParameter(newDocuments,idParameter,db);
                                }
                            }

                            public List<Document> UpdateDocumentsForParameter(List<Document> newDocuments,long idParameter, SubscriptionEntities  db)
                            {
                                Expression<Func<Document, bool>> expressionBuilder = p => p.IdParameterBasePhysicalFilePath == idParameter;
                                var oldDocuments = DaoFactories.Instance.DocumentDao.GetDocumentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldDocuments.EntityList.Select(pc => pc.IdDocument).Except(newDocuments.Where(pc => pc.IdDocument.HasValue).Select(pc => pc.IdDocument)).ToList();
                                var itemsTobeDeleted = oldDocuments.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdDocument)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newDocuments.ForEach(pc =>
                                {
                                    pc.IdParameterBasePhysicalFilePath = idParameter;
                                    DaoFactories.Instance.DocumentDao.SaveOnlyDocument(pc, db);
                                });
                                return newDocuments;
                            }

                        
							public List<Document> UpdateDocuments1ForParameterWithoutSavingNewItem(List<Document> newDocuments,long idParameter)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateDocuments1ForParameterWithoutSavingNewItem(newDocuments,idParameter,db);
                                }
                            }

							public List<Document> UpdateDocuments1ForParameterWithoutSavingNewItem(List<Document> newDocuments,long idParameter, SubscriptionEntities  db)
                            {
                                Expression<Func<Document, bool>> expressionBuilder = p => p.IdParameterBaseServerUrl == idParameter;
                                var oldDocuments = DaoFactories.Instance.DocumentDao.GetDocumentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldDocuments.EntityList.Select(pc => pc.IdDocument).Except(newDocuments.Where(pc => pc.IdDocument.HasValue).Select(pc => pc.IdDocument)).ToList();
                                var itemsTobeDeleted = oldDocuments.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdDocument)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newDocuments;
                            }


                            public List<Document> UpdateDocuments1ForParameter(List<Document> newDocuments,long idParameter)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateDocuments1ForParameter(newDocuments,idParameter,db);
                                }
                            }

                            public List<Document> UpdateDocuments1ForParameter(List<Document> newDocuments,long idParameter, SubscriptionEntities  db)
                            {
                                Expression<Func<Document, bool>> expressionBuilder = p => p.IdParameterBaseServerUrl == idParameter;
                                var oldDocuments = DaoFactories.Instance.DocumentDao.GetDocumentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldDocuments.EntityList.Select(pc => pc.IdDocument).Except(newDocuments.Where(pc => pc.IdDocument.HasValue).Select(pc => pc.IdDocument)).ToList();
                                var itemsTobeDeleted = oldDocuments.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdDocument)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newDocuments.ForEach(pc =>
                                {
                                    pc.IdParameterBaseServerUrl = idParameter;
                                    DaoFactories.Instance.DocumentDao.SaveOnlyDocument(pc, db);
                                });
                                return newDocuments;
                            }

                        


    



		}
			public partial class PaymentDao :IPaymentDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public PaymentDao(){
			
			}

			public PaymentDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Payment> GetAllPayments(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPayments(db, shouldRemap);
                }
            }

            public List<Payment> GetAllPayments(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPaymentList(db.Payments.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Payments.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Payment> GetAllPaymentsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Payment> GetAllPaymentsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Payment, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
            {
				IQueryable<Payment> query =  db.Payments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Payment> baseListReturnType = new BaseListReturnType<Payment>();

                IQueryable<Payment> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPayment" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Payment, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Payment> GetAllPaymentsWithUserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentsByPage(sortingPagingInfo, db,expression,new List<string>(){"User"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Payment> GetAllPaymentsWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Payment> GetAllPaymentsWithPaymentDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentsByPage(sortingPagingInfo, db,expression,new List<string>(){"PaymentDetails"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Payment> GetAllPaymentsWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Payment> GetAllPaymentsWithTransaction_PaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction_Payment"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Payment> GetAllPaymentsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Payment> GetAllPaymentsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Payment, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
            {
				IQueryable<Payment> query =  db.Payments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Payment> baseListReturnType = new BaseListReturnType<Payment>();

                IQueryable<Payment> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPayment" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Payment, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Payment> GetAllPaymentsWithUserDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"User"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Payment> GetAllPaymentsWithTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Payment> GetAllPaymentsWithPaymentDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"PaymentDetails"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Payment> GetAllPaymentsWithTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Payment> GetAllPaymentsWithTransaction_PaymentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap = false, Func<Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction_Payment"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Payment> GetAllPaymentsWithUserDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentWitDetails(new List<string>(){"User"},shouldRemap);
					}
				}
							public BaseListReturnType<Payment> GetAllPaymentsWithTransactionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentWitDetails(new List<string>(){"Transaction"},shouldRemap);
					}
				}
							public BaseListReturnType<Payment> GetAllPaymentsWithPaymentDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentWitDetails(new List<string>(){"PaymentDetails"},shouldRemap);
					}
				}
							public BaseListReturnType<Payment> GetAllPaymentsWithTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentWitDetails(new List<string>(){"Transactions"},shouldRemap);
					}
				}
							public BaseListReturnType<Payment> GetAllPaymentsWithTransaction_PaymentDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentWitDetails(new List<string>(){"Transaction_Payment"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Payment> GetAllPaymentWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Payment> GetAllPaymentWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Payment> query =  db.Payments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Payment> baseListReturnType = new BaseListReturnType<Payment>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Payment GetPayment(long idPayment,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPayment(idPayment, db,shouldRemap);
                }
            }
                        public Payment GetPayment(long idPayment, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPaymentSingle(db.Payments.Where(p => p.IdPayment == idPayment && p.IsDeactivated != true).FirstOrDefault());

                return db.Payments.Where(p => p.IdPayment == idPayment && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Payment GetPaymentCustom( Expression<Func<Payment, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPaymentCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Payment GetPaymentCustom( SubscriptionEntities db , Expression<Func<Payment, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Payment> query =  db.Payments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapPaymentSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Payment> GetPaymentCustomList( Expression<Func<Payment, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Payment, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPaymentCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Payment> GetPaymentCustomList(  SubscriptionEntities db , Expression<Func<Payment, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Payment, dynamic> orderExpression = null)
			{
				IQueryable<Payment> query =  db.Payments;
                BaseListReturnType<Payment> baseListReturnType = new BaseListReturnType<Payment>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Payment GetPaymentWithUserDetails(long idPayment,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPaymentWithDetails(idPayment,new List<string>(){"User"},shouldRemap);
					}
				}

            //IdUserAuthor -- ZeroOrOne

                public BaseListReturnType<Payment> GetAllPaymentListByUser(long idUser)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPaymentListByUser(idUser, db);
                    }
                }
                public BaseListReturnType<Payment> GetAllPaymentListByUser(long idUser, SubscriptionEntities db)
                {
                    Expression<Func<Payment, bool>> expression = property=> property.IdUserAuthor == idUser && property.IsDeactivated !=true;
                    return GetPaymentCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Payment> GetAllPaymentListByUserByPage(long idUser, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPaymentListByUserByPage(idUser, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Payment> GetAllPaymentListByUserByPage(long idUser, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Payment, bool>> expression = property => property.IdUserAuthor == idUser && property.IsDeactivated !=true;
                    return GetAllPaymentsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Payment GetPaymentWithTransactionDetails(long idPayment,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPaymentWithDetails(idPayment,new List<string>(){"Transaction"},shouldRemap);
					}
				}

            //IdTransaction -- ZeroOrOne

                public BaseListReturnType<Payment> GetAllPaymentListByTransaction(long idTransaction)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPaymentListByTransaction(idTransaction, db);
                    }
                }
                public BaseListReturnType<Payment> GetAllPaymentListByTransaction(long idTransaction, SubscriptionEntities db)
                {
                    Expression<Func<Payment, bool>> expression = property=> property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetPaymentCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Payment> GetAllPaymentListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPaymentListByTransactionByPage(idTransaction, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Payment> GetAllPaymentListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Payment, bool>> expression = property => property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetAllPaymentsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Payment GetPaymentWithPaymentDetailsDetails(long idPayment,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPaymentWithDetails(idPayment,new List<string>(){"PaymentDetails"},shouldRemap);
					}
				}

            //IdPayment -- Many


							public Payment GetPaymentWithTransactionsDetails(long idPayment,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPaymentWithDetails(idPayment,new List<string>(){"Transactions"},shouldRemap);
					}
				}

            //IdPayment -- Many


							public Payment GetPaymentWithTransaction_PaymentDetails(long idPayment,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPaymentWithDetails(idPayment,new List<string>(){"Transaction_Payment"},shouldRemap);
					}
				}

            //IdPayment -- Many


			


			public Payment GetPaymentWithDetails(long idPayment, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentWithDetails(idPayment, db,includes,shouldRemap);
                }
            }

            public Payment GetPaymentWithDetails(long idPayment, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Payment> query =  db.Payments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapPaymentSingle(query
						.Where(p => p.IdPayment == idPayment && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdPayment == idPayment && p.IsDeactivated != true).FirstOrDefault();
            }

            public Payment GetPaymentWitDetails(long idPayment,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentWitDetails(idPayment, db,shouldRemap);
                }
            }

            public Payment GetPaymentWitDetails(long idPayment, SubscriptionEntities db,bool shouldRemap = false)
            {
				Payment _Payment = db.Payments

					.Include("User")
					.Include("Transaction")
					.Include("PaymentDetails")
					.Include("Transactions")
					.Include("Transaction_Payment")
								.Where(p => p.IdPayment == idPayment && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapPaymentSingle(_Payment);

				return  _Payment;
            }

            public List<Payment> GetPaymentListByIdList(List<long> paymentIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentListByIdList(paymentIds, db);
                }
            }
            public List<Payment> GetPaymentListByIdList(List<long> paymentIds, SubscriptionEntities db)
            {
                return db.Payments.Where(p => p.IsDeactivated != true && paymentIds.Contains(p.IdPayment.Value)).ToList();
            }


            public void SavePayment(Payment payment)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SavePayment(payment, db);
                }
            }

            public void SavePayment(Payment payment, SubscriptionEntities db)
            {
									if (payment.User != null) 
						DaoFactories.Instance.UserDao.SaveUser(payment.User, db);
									if (payment.Transaction != null) 
						DaoFactories.Instance.TransactionDao.SaveTransaction(payment.Transaction, db);
				                
                if (payment.IdPayment.HasValue){
					var paymentFromDb = db.Payments.Where(p => p.IdPayment == payment.IdPayment).FirstOrDefault();
													paymentFromDb.IsDeactivated = payment.IsDeactivated;
													paymentFromDb.PaymentDate = payment.PaymentDate;
													paymentFromDb.IdUserAuthor = payment.IdUserAuthor;
													paymentFromDb.IdTransaction = payment.IdTransaction;
									}
                else{
                                                //fix for saving without duplicating items in db
                              payment.User = null;
                                                        //fix for saving without duplicating items in db
                              payment.Transaction = null;
                                                db.Payments.Add(payment);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyPayment(Payment payment)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyPayment(payment, db);
                }
            }

            public void SaveOnlyPayment(Payment payment, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // payment.User = null;
                                                        //fix for saving without duplicating items in db
                             // payment.Transaction = null;
                                            if (payment.IdPayment.HasValue){
					var paymentFromDb = db.Payments.Where(p => p.IdPayment == payment.IdPayment).FirstOrDefault();
													paymentFromDb.IsDeactivated = payment.IsDeactivated;
													paymentFromDb.PaymentDate = payment.PaymentDate;
													paymentFromDb.IdUserAuthor = payment.IdUserAuthor;
													paymentFromDb.IdTransaction = payment.IdTransaction;
										 db.SaveChanges();

				}
                else{
					Payment _payment = new Payment();
																	_payment.IsDeactivated = payment.IsDeactivated;
													_payment.PaymentDate = payment.PaymentDate;
													_payment.IdUserAuthor = payment.IdUserAuthor;
													_payment.IdTransaction = payment.IdTransaction;
					

                    db.Payments.Add(_payment);
					db.SaveChanges();
					payment.IdPayment =  _payment.IdPayment;
                    
                }
            }

            public void DeletePayment(Payment payment)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePayment(payment, db);
                }
            }

            public void DeletePayment(Payment payment, SubscriptionEntities db)
            {
								var paymentFromDb = GetPayment(payment.IdPayment.Value,db);
				paymentFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyPayment(Payment payment)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyPayment(payment, db);
                }
            }

            public void DeletePermanentlyPayment(Payment payment, SubscriptionEntities db)
            {
								var paymentFromDb = GetPayment(payment.IdPayment.Value,db);
				
				db.Payments.Remove(paymentFromDb);
                db.SaveChanges();
            }


            
							public List<PaymentDetail> UpdatePaymentDetailsForPaymentWithoutSavingNewItem(List<PaymentDetail> newPaymentDetails,long idPayment)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePaymentDetailsForPaymentWithoutSavingNewItem(newPaymentDetails,idPayment,db);
                                }
                            }

							public List<PaymentDetail> UpdatePaymentDetailsForPaymentWithoutSavingNewItem(List<PaymentDetail> newPaymentDetails,long idPayment, SubscriptionEntities  db)
                            {
                                Expression<Func<PaymentDetail, bool>> expressionBuilder = p => p.IdPayment == idPayment;
                                var oldPaymentDetails = DaoFactories.Instance.PaymentDetailDao.GetPaymentDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPaymentDetails.EntityList.Select(pc => pc.IdPaymentDetail).Except(newPaymentDetails.Where(pc => pc.IdPaymentDetail.HasValue).Select(pc => pc.IdPaymentDetail)).ToList();
                                var itemsTobeDeleted = oldPaymentDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPaymentDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newPaymentDetails;
                            }


                            public List<PaymentDetail> UpdatePaymentDetailsForPayment(List<PaymentDetail> newPaymentDetails,long idPayment)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePaymentDetailsForPayment(newPaymentDetails,idPayment,db);
                                }
                            }

                            public List<PaymentDetail> UpdatePaymentDetailsForPayment(List<PaymentDetail> newPaymentDetails,long idPayment, SubscriptionEntities  db)
                            {
                                Expression<Func<PaymentDetail, bool>> expressionBuilder = p => p.IdPayment == idPayment;
                                var oldPaymentDetails = DaoFactories.Instance.PaymentDetailDao.GetPaymentDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPaymentDetails.EntityList.Select(pc => pc.IdPaymentDetail).Except(newPaymentDetails.Where(pc => pc.IdPaymentDetail.HasValue).Select(pc => pc.IdPaymentDetail)).ToList();
                                var itemsTobeDeleted = oldPaymentDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPaymentDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newPaymentDetails.ForEach(pc =>
                                {
                                    pc.IdPayment = idPayment;
                                    DaoFactories.Instance.PaymentDetailDao.SaveOnlyPaymentDetail(pc, db);
                                });
                                return newPaymentDetails;
                            }

                        
							public List<Transaction> UpdateTransactionsForPaymentWithoutSavingNewItem(List<Transaction> newTransactions,long idPayment)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForPaymentWithoutSavingNewItem(newTransactions,idPayment,db);
                                }
                            }

							public List<Transaction> UpdateTransactionsForPaymentWithoutSavingNewItem(List<Transaction> newTransactions,long idPayment, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdPayment == idPayment;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactions;
                            }


                            public List<Transaction> UpdateTransactionsForPayment(List<Transaction> newTransactions,long idPayment)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForPayment(newTransactions,idPayment,db);
                                }
                            }

                            public List<Transaction> UpdateTransactionsForPayment(List<Transaction> newTransactions,long idPayment, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdPayment == idPayment;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactions.ForEach(pc =>
                                {
                                    pc.IdPayment = idPayment;
                                    DaoFactories.Instance.TransactionDao.SaveOnlyTransaction(pc, db);
                                });
                                return newTransactions;
                            }

                        
							public List<Transaction_Payment> UpdateTransaction_PaymentForPaymentWithoutSavingNewItem(List<Transaction_Payment> newTransaction_Payment,long idPayment)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransaction_PaymentForPaymentWithoutSavingNewItem(newTransaction_Payment,idPayment,db);
                                }
                            }

							public List<Transaction_Payment> UpdateTransaction_PaymentForPaymentWithoutSavingNewItem(List<Transaction_Payment> newTransaction_Payment,long idPayment, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction_Payment, bool>> expressionBuilder = p => p.IdPayment == idPayment;
                                var oldTransaction_Payment = DaoFactories.Instance.Transaction_PaymentDao.GetTransaction_PaymentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransaction_Payment.EntityList.Select(pc => pc.IdTransaction_Payment).Except(newTransaction_Payment.Where(pc => pc.IdTransaction_Payment.HasValue).Select(pc => pc.IdTransaction_Payment)).ToList();
                                var itemsTobeDeleted = oldTransaction_Payment.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction_Payment)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransaction_Payment;
                            }


                            public List<Transaction_Payment> UpdateTransaction_PaymentForPayment(List<Transaction_Payment> newTransaction_Payment,long idPayment)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransaction_PaymentForPayment(newTransaction_Payment,idPayment,db);
                                }
                            }

                            public List<Transaction_Payment> UpdateTransaction_PaymentForPayment(List<Transaction_Payment> newTransaction_Payment,long idPayment, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction_Payment, bool>> expressionBuilder = p => p.IdPayment == idPayment;
                                var oldTransaction_Payment = DaoFactories.Instance.Transaction_PaymentDao.GetTransaction_PaymentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransaction_Payment.EntityList.Select(pc => pc.IdTransaction_Payment).Except(newTransaction_Payment.Where(pc => pc.IdTransaction_Payment.HasValue).Select(pc => pc.IdTransaction_Payment)).ToList();
                                var itemsTobeDeleted = oldTransaction_Payment.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction_Payment)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransaction_Payment.ForEach(pc =>
                                {
                                    pc.IdPayment = idPayment;
                                    DaoFactories.Instance.Transaction_PaymentDao.SaveOnlyTransaction_Payment(pc, db);
                                });
                                return newTransaction_Payment;
                            }

                        


    



		}
			public partial class PaymentDetailDao :IPaymentDetailDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public PaymentDetailDao(){
			
			}

			public PaymentDetailDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<PaymentDetail> GetAllPaymentDetails(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentDetails(db, shouldRemap);
                }
            }

            public List<PaymentDetail> GetAllPaymentDetails(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPaymentDetailList(db.PaymentDetails.Where(p => p.IsDeactivated != true).ToList());
				
				return db.PaymentDetails.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<PaymentDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentDetailsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<PaymentDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<PaymentDetail, dynamic> orderExpression = null)
            {
				IQueryable<PaymentDetail> query =  db.PaymentDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<PaymentDetail> baseListReturnType = new BaseListReturnType<PaymentDetail>();

                IQueryable<PaymentDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPaymentDetail" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<PaymentDetail, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.ChequeNo.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ChequeNo.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.BankAccountNo.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsWithBankDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null,bool shouldRemap = false, Func<PaymentDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"Bank"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsWithPaymentMethodDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null,bool shouldRemap = false, Func<PaymentDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"PaymentMethod"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsWithPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null,bool shouldRemap = false, Func<PaymentDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"Payment"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<PaymentDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<PaymentDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<PaymentDetail, dynamic> orderExpression = null)
            {
				IQueryable<PaymentDetail> query =  db.PaymentDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<PaymentDetail> baseListReturnType = new BaseListReturnType<PaymentDetail>();

                IQueryable<PaymentDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPaymentDetail" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<PaymentDetail, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsWithBankDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null,bool shouldRemap = false, Func<PaymentDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Bank"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsWithPaymentMethodDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null,bool shouldRemap = false, Func<PaymentDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"PaymentMethod"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsWithPaymentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null,bool shouldRemap = false, Func<PaymentDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Payment"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsWithBankDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentDetailWitDetails(new List<string>(){"Bank"},shouldRemap);
					}
				}
							public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsWithPaymentMethodDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentDetailWitDetails(new List<string>(){"PaymentMethod"},shouldRemap);
					}
				}
							public BaseListReturnType<PaymentDetail> GetAllPaymentDetailsWithPaymentDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentDetailWitDetails(new List<string>(){"Payment"},shouldRemap);
					}
				}
			

			public BaseListReturnType<PaymentDetail> GetAllPaymentDetailWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentDetailWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<PaymentDetail> GetAllPaymentDetailWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<PaymentDetail> query =  db.PaymentDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<PaymentDetail> baseListReturnType = new BaseListReturnType<PaymentDetail>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public PaymentDetail GetPaymentDetail(long idPaymentDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentDetail(idPaymentDetail, db,shouldRemap);
                }
            }
                        public PaymentDetail GetPaymentDetail(long idPaymentDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPaymentDetailSingle(db.PaymentDetails.Where(p => p.IdPaymentDetail == idPaymentDetail && p.IsDeactivated != true).FirstOrDefault());

                return db.PaymentDetails.Where(p => p.IdPaymentDetail == idPaymentDetail && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public PaymentDetail GetPaymentDetailCustom( Expression<Func<PaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPaymentDetailCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public PaymentDetail GetPaymentDetailCustom( SubscriptionEntities db , Expression<Func<PaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<PaymentDetail> query =  db.PaymentDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapPaymentDetailSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<PaymentDetail> GetPaymentDetailCustomList( Expression<Func<PaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<PaymentDetail, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPaymentDetailCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<PaymentDetail> GetPaymentDetailCustomList(  SubscriptionEntities db , Expression<Func<PaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<PaymentDetail, dynamic> orderExpression = null)
			{
				IQueryable<PaymentDetail> query =  db.PaymentDetails;
                BaseListReturnType<PaymentDetail> baseListReturnType = new BaseListReturnType<PaymentDetail>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentDetailList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public PaymentDetail GetPaymentDetailWithBankDetails(long idPaymentDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPaymentDetailWithDetails(idPaymentDetail,new List<string>(){"Bank"},shouldRemap);
					}
				}

            //IdBank -- ZeroOrOne

                public BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByBank(long idBank)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPaymentDetailListByBank(idBank, db);
                    }
                }
                public BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByBank(long idBank, SubscriptionEntities db)
                {
                    Expression<Func<PaymentDetail, bool>> expression = property=> property.IdBank == idBank && property.IsDeactivated !=true;
                    return GetPaymentDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByBankByPage(long idBank, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPaymentDetailListByBankByPage(idBank, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByBankByPage(long idBank, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<PaymentDetail, bool>> expression = property => property.IdBank == idBank && property.IsDeactivated !=true;
                    return GetAllPaymentDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public PaymentDetail GetPaymentDetailWithPaymentMethodDetails(long idPaymentDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPaymentDetailWithDetails(idPaymentDetail,new List<string>(){"PaymentMethod"},shouldRemap);
					}
				}

            //IdPaymentMethod -- ZeroOrOne

                public BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByPaymentMethod(long idPaymentMethod)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPaymentDetailListByPaymentMethod(idPaymentMethod, db);
                    }
                }
                public BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByPaymentMethod(long idPaymentMethod, SubscriptionEntities db)
                {
                    Expression<Func<PaymentDetail, bool>> expression = property=> property.IdPaymentMethod == idPaymentMethod && property.IsDeactivated !=true;
                    return GetPaymentDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByPaymentMethodByPage(long idPaymentMethod, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPaymentDetailListByPaymentMethodByPage(idPaymentMethod, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByPaymentMethodByPage(long idPaymentMethod, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<PaymentDetail, bool>> expression = property => property.IdPaymentMethod == idPaymentMethod && property.IsDeactivated !=true;
                    return GetAllPaymentDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public PaymentDetail GetPaymentDetailWithPaymentDetails(long idPaymentDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPaymentDetailWithDetails(idPaymentDetail,new List<string>(){"Payment"},shouldRemap);
					}
				}

            //IdPayment -- ZeroOrOne

                public BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByPayment(long idPayment)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPaymentDetailListByPayment(idPayment, db);
                    }
                }
                public BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByPayment(long idPayment, SubscriptionEntities db)
                {
                    Expression<Func<PaymentDetail, bool>> expression = property=> property.IdPayment == idPayment && property.IsDeactivated !=true;
                    return GetPaymentDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByPaymentByPage(long idPayment, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPaymentDetailListByPaymentByPage(idPayment, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByPaymentByPage(long idPayment, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<PaymentDetail, bool>> expression = property => property.IdPayment == idPayment && property.IsDeactivated !=true;
                    return GetAllPaymentDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public PaymentDetail GetPaymentDetailWithDetails(long idPaymentDetail, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentDetailWithDetails(idPaymentDetail, db,includes,shouldRemap);
                }
            }

            public PaymentDetail GetPaymentDetailWithDetails(long idPaymentDetail, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<PaymentDetail> query =  db.PaymentDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapPaymentDetailSingle(query
						.Where(p => p.IdPaymentDetail == idPaymentDetail && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdPaymentDetail == idPaymentDetail && p.IsDeactivated != true).FirstOrDefault();
            }

            public PaymentDetail GetPaymentDetailWitDetails(long idPaymentDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentDetailWitDetails(idPaymentDetail, db,shouldRemap);
                }
            }

            public PaymentDetail GetPaymentDetailWitDetails(long idPaymentDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				PaymentDetail _PaymentDetail = db.PaymentDetails

					.Include("Bank")
					.Include("PaymentMethod")
					.Include("Payment")
								.Where(p => p.IdPaymentDetail == idPaymentDetail && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapPaymentDetailSingle(_PaymentDetail);

				return  _PaymentDetail;
            }

            public List<PaymentDetail> GetPaymentDetailListByIdList(List<long> paymentDetailIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentDetailListByIdList(paymentDetailIds, db);
                }
            }
            public List<PaymentDetail> GetPaymentDetailListByIdList(List<long> paymentDetailIds, SubscriptionEntities db)
            {
                return db.PaymentDetails.Where(p => p.IsDeactivated != true && paymentDetailIds.Contains(p.IdPaymentDetail.Value)).ToList();
            }


            public void SavePaymentDetail(PaymentDetail paymentDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SavePaymentDetail(paymentDetail, db);
                }
            }

            public void SavePaymentDetail(PaymentDetail paymentDetail, SubscriptionEntities db)
            {
									if (paymentDetail.Bank != null) 
						DaoFactories.Instance.BankDao.SaveBank(paymentDetail.Bank, db);
									if (paymentDetail.PaymentMethod != null) 
						DaoFactories.Instance.PaymentMethodDao.SavePaymentMethod(paymentDetail.PaymentMethod, db);
									if (paymentDetail.Payment != null) 
						DaoFactories.Instance.PaymentDao.SavePayment(paymentDetail.Payment, db);
				                
                if (paymentDetail.IdPaymentDetail.HasValue){
					var paymentDetailFromDb = db.PaymentDetails.Where(p => p.IdPaymentDetail == paymentDetail.IdPaymentDetail).FirstOrDefault();
													paymentDetailFromDb.IsDeactivated = paymentDetail.IsDeactivated;
													paymentDetailFromDb.PaymentAmount = paymentDetail.PaymentAmount;
													paymentDetailFromDb.IdPaymentMethod = paymentDetail.IdPaymentMethod;
													paymentDetailFromDb.IdPayment = paymentDetail.IdPayment;
													paymentDetailFromDb.ChequeNo = paymentDetail.ChequeNo;
													paymentDetailFromDb.Description = paymentDetail.Description;
													paymentDetailFromDb.BankAccountNo = paymentDetail.BankAccountNo;
													paymentDetailFromDb.IdBank = paymentDetail.IdBank;
									}
                else{
                                                //fix for saving without duplicating items in db
                              paymentDetail.Bank = null;
                                                        //fix for saving without duplicating items in db
                              paymentDetail.PaymentMethod = null;
                                                        //fix for saving without duplicating items in db
                              paymentDetail.Payment = null;
                                                db.PaymentDetails.Add(paymentDetail);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyPaymentDetail(PaymentDetail paymentDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyPaymentDetail(paymentDetail, db);
                }
            }

            public void SaveOnlyPaymentDetail(PaymentDetail paymentDetail, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // paymentDetail.Bank = null;
                                                        //fix for saving without duplicating items in db
                             // paymentDetail.PaymentMethod = null;
                                                        //fix for saving without duplicating items in db
                             // paymentDetail.Payment = null;
                                            if (paymentDetail.IdPaymentDetail.HasValue){
					var paymentDetailFromDb = db.PaymentDetails.Where(p => p.IdPaymentDetail == paymentDetail.IdPaymentDetail).FirstOrDefault();
													paymentDetailFromDb.IsDeactivated = paymentDetail.IsDeactivated;
													paymentDetailFromDb.PaymentAmount = paymentDetail.PaymentAmount;
													paymentDetailFromDb.IdPaymentMethod = paymentDetail.IdPaymentMethod;
													paymentDetailFromDb.IdPayment = paymentDetail.IdPayment;
													paymentDetailFromDb.ChequeNo = paymentDetail.ChequeNo;
													paymentDetailFromDb.Description = paymentDetail.Description;
													paymentDetailFromDb.BankAccountNo = paymentDetail.BankAccountNo;
													paymentDetailFromDb.IdBank = paymentDetail.IdBank;
										 db.SaveChanges();

				}
                else{
					PaymentDetail _paymentDetail = new PaymentDetail();
																	_paymentDetail.IsDeactivated = paymentDetail.IsDeactivated;
													_paymentDetail.PaymentAmount = paymentDetail.PaymentAmount;
													_paymentDetail.IdPaymentMethod = paymentDetail.IdPaymentMethod;
													_paymentDetail.IdPayment = paymentDetail.IdPayment;
													_paymentDetail.ChequeNo = paymentDetail.ChequeNo;
													_paymentDetail.Description = paymentDetail.Description;
													_paymentDetail.BankAccountNo = paymentDetail.BankAccountNo;
													_paymentDetail.IdBank = paymentDetail.IdBank;
					

                    db.PaymentDetails.Add(_paymentDetail);
					db.SaveChanges();
					paymentDetail.IdPaymentDetail =  _paymentDetail.IdPaymentDetail;
                    
                }
            }

            public void DeletePaymentDetail(PaymentDetail paymentDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePaymentDetail(paymentDetail, db);
                }
            }

            public void DeletePaymentDetail(PaymentDetail paymentDetail, SubscriptionEntities db)
            {
								var paymentDetailFromDb = GetPaymentDetail(paymentDetail.IdPaymentDetail.Value,db);
				paymentDetailFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyPaymentDetail(PaymentDetail paymentDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyPaymentDetail(paymentDetail, db);
                }
            }

            public void DeletePermanentlyPaymentDetail(PaymentDetail paymentDetail, SubscriptionEntities db)
            {
								var paymentDetailFromDb = GetPaymentDetail(paymentDetail.IdPaymentDetail.Value,db);
				
				db.PaymentDetails.Remove(paymentDetailFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class PaymentDueStateDao :IPaymentDueStateDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public PaymentDueStateDao(){
			
			}

			public PaymentDueStateDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<PaymentDueState> GetAllPaymentDueStates(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentDueStates(db, shouldRemap);
                }
            }

            public List<PaymentDueState> GetAllPaymentDueStates(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPaymentDueStateList(db.PaymentDueStates.Where(p => p.IsDeactivated != true).ToList());
				
				return db.PaymentDueStates.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<PaymentDueState> GetAllPaymentDueStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDueState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<PaymentDueState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentDueStatesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<PaymentDueState> GetAllPaymentDueStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<PaymentDueState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<PaymentDueState, dynamic> orderExpression = null)
            {
				IQueryable<PaymentDueState> query =  db.PaymentDueStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<PaymentDueState> baseListReturnType = new BaseListReturnType<PaymentDueState>();

                IQueryable<PaymentDueState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPaymentDueState" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<PaymentDueState, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentDueStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

			



            public BaseListReturnType<PaymentDueState> GetAllPaymentDueStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDueState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<PaymentDueState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentDueStatesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<PaymentDueState> GetAllPaymentDueStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<PaymentDueState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<PaymentDueState, dynamic> orderExpression = null)
            {
				IQueryable<PaymentDueState> query =  db.PaymentDueStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<PaymentDueState> baseListReturnType = new BaseListReturnType<PaymentDueState>();

                IQueryable<PaymentDueState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPaymentDueState" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<PaymentDueState, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentDueStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

			






			

			public BaseListReturnType<PaymentDueState> GetAllPaymentDueStateWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentDueStateWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<PaymentDueState> GetAllPaymentDueStateWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<PaymentDueState> query =  db.PaymentDueStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<PaymentDueState> baseListReturnType = new BaseListReturnType<PaymentDueState>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentDueStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public PaymentDueState GetPaymentDueState(long idPaymentDueState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentDueState(idPaymentDueState, db,shouldRemap);
                }
            }
                        public PaymentDueState GetPaymentDueState(long idPaymentDueState, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPaymentDueStateSingle(db.PaymentDueStates.Where(p => p.IdPaymentDueState == idPaymentDueState && p.IsDeactivated != true).FirstOrDefault());

                return db.PaymentDueStates.Where(p => p.IdPaymentDueState == idPaymentDueState && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public PaymentDueState GetPaymentDueStateCustom( Expression<Func<PaymentDueState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPaymentDueStateCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public PaymentDueState GetPaymentDueStateCustom( SubscriptionEntities db , Expression<Func<PaymentDueState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<PaymentDueState> query =  db.PaymentDueStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapPaymentDueStateSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<PaymentDueState> GetPaymentDueStateCustomList( Expression<Func<PaymentDueState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<PaymentDueState, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPaymentDueStateCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<PaymentDueState> GetPaymentDueStateCustomList(  SubscriptionEntities db , Expression<Func<PaymentDueState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<PaymentDueState, dynamic> orderExpression = null)
			{
				IQueryable<PaymentDueState> query =  db.PaymentDueStates;
                BaseListReturnType<PaymentDueState> baseListReturnType = new BaseListReturnType<PaymentDueState>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentDueStateList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
			


			public PaymentDueState GetPaymentDueStateWithDetails(long idPaymentDueState, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentDueStateWithDetails(idPaymentDueState, db,includes,shouldRemap);
                }
            }

            public PaymentDueState GetPaymentDueStateWithDetails(long idPaymentDueState, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<PaymentDueState> query =  db.PaymentDueStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapPaymentDueStateSingle(query
						.Where(p => p.IdPaymentDueState == idPaymentDueState && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdPaymentDueState == idPaymentDueState && p.IsDeactivated != true).FirstOrDefault();
            }

            public PaymentDueState GetPaymentDueStateWitDetails(long idPaymentDueState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentDueStateWitDetails(idPaymentDueState, db,shouldRemap);
                }
            }

            public PaymentDueState GetPaymentDueStateWitDetails(long idPaymentDueState, SubscriptionEntities db,bool shouldRemap = false)
            {
				PaymentDueState _PaymentDueState = db.PaymentDueStates

								.Where(p => p.IdPaymentDueState == idPaymentDueState && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapPaymentDueStateSingle(_PaymentDueState);

				return  _PaymentDueState;
            }

            public List<PaymentDueState> GetPaymentDueStateListByIdList(List<long> paymentDueStateIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentDueStateListByIdList(paymentDueStateIds, db);
                }
            }
            public List<PaymentDueState> GetPaymentDueStateListByIdList(List<long> paymentDueStateIds, SubscriptionEntities db)
            {
                return db.PaymentDueStates.Where(p => p.IsDeactivated != true && paymentDueStateIds.Contains(p.IdPaymentDueState.Value)).ToList();
            }


            public void SavePaymentDueState(PaymentDueState paymentDueState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SavePaymentDueState(paymentDueState, db);
                }
            }

            public void SavePaymentDueState(PaymentDueState paymentDueState, SubscriptionEntities db)
            {
				                
                if (paymentDueState.IdPaymentDueState.HasValue){
					var paymentDueStateFromDb = db.PaymentDueStates.Where(p => p.IdPaymentDueState == paymentDueState.IdPaymentDueState).FirstOrDefault();
													paymentDueStateFromDb.IsDeactivated = paymentDueState.IsDeactivated;
													paymentDueStateFromDb.Description = paymentDueState.Description;
									}
                else{
                                        db.PaymentDueStates.Add(paymentDueState);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyPaymentDueState(PaymentDueState paymentDueState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyPaymentDueState(paymentDueState, db);
                }
            }

            public void SaveOnlyPaymentDueState(PaymentDueState paymentDueState, SubscriptionEntities db)
            {
			                    if (paymentDueState.IdPaymentDueState.HasValue){
					var paymentDueStateFromDb = db.PaymentDueStates.Where(p => p.IdPaymentDueState == paymentDueState.IdPaymentDueState).FirstOrDefault();
													paymentDueStateFromDb.IsDeactivated = paymentDueState.IsDeactivated;
													paymentDueStateFromDb.Description = paymentDueState.Description;
										 db.SaveChanges();

				}
                else{
					PaymentDueState _paymentDueState = new PaymentDueState();
																	_paymentDueState.IsDeactivated = paymentDueState.IsDeactivated;
													_paymentDueState.Description = paymentDueState.Description;
					

                    db.PaymentDueStates.Add(_paymentDueState);
					db.SaveChanges();
					paymentDueState.IdPaymentDueState =  _paymentDueState.IdPaymentDueState;
                    
                }
            }

            public void DeletePaymentDueState(PaymentDueState paymentDueState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePaymentDueState(paymentDueState, db);
                }
            }

            public void DeletePaymentDueState(PaymentDueState paymentDueState, SubscriptionEntities db)
            {
								var paymentDueStateFromDb = GetPaymentDueState(paymentDueState.IdPaymentDueState.Value,db);
				paymentDueStateFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyPaymentDueState(PaymentDueState paymentDueState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyPaymentDueState(paymentDueState, db);
                }
            }

            public void DeletePermanentlyPaymentDueState(PaymentDueState paymentDueState, SubscriptionEntities db)
            {
								var paymentDueStateFromDb = GetPaymentDueState(paymentDueState.IdPaymentDueState.Value,db);
				
				db.PaymentDueStates.Remove(paymentDueStateFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class PaymentMethodDao :IPaymentMethodDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public PaymentMethodDao(){
			
			}

			public PaymentMethodDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<PaymentMethod> GetAllPaymentMethods(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentMethods(db, shouldRemap);
                }
            }

            public List<PaymentMethod> GetAllPaymentMethods(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPaymentMethodList(db.PaymentMethods.Where(p => p.IsDeactivated != true).ToList());
				
				return db.PaymentMethods.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<PaymentMethod> GetAllPaymentMethodsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentMethod, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<PaymentMethod, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentMethodsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<PaymentMethod> GetAllPaymentMethodsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<PaymentMethod, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<PaymentMethod, dynamic> orderExpression = null)
            {
				IQueryable<PaymentMethod> query =  db.PaymentMethods;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<PaymentMethod> baseListReturnType = new BaseListReturnType<PaymentMethod>();

                IQueryable<PaymentMethod> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPaymentMethod" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<PaymentMethod, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentMethodList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<PaymentMethod> GetAllPaymentMethodsWithBanksDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentMethod, bool>> expression = null,bool shouldRemap = false, Func<PaymentMethod, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentMethodsByPage(sortingPagingInfo, db,expression,new List<string>(){"Banks"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<PaymentMethod> GetAllPaymentMethodsWithPaymentDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentMethod, bool>> expression = null,bool shouldRemap = false, Func<PaymentMethod, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentMethodsByPage(sortingPagingInfo, db,expression,new List<string>(){"PaymentDetails"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<PaymentMethod> GetAllPaymentMethodsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentMethod, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<PaymentMethod, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentMethodsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<PaymentMethod> GetAllPaymentMethodsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<PaymentMethod, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<PaymentMethod, dynamic> orderExpression = null)
            {
				IQueryable<PaymentMethod> query =  db.PaymentMethods;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<PaymentMethod> baseListReturnType = new BaseListReturnType<PaymentMethod>();

                IQueryable<PaymentMethod> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPaymentMethod" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<PaymentMethod, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentMethodList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<PaymentMethod> GetAllPaymentMethodsWithBanksDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentMethod, bool>> expression = null,bool shouldRemap = false, Func<PaymentMethod, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentMethodsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Banks"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<PaymentMethod> GetAllPaymentMethodsWithPaymentDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentMethod, bool>> expression = null,bool shouldRemap = false, Func<PaymentMethod, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentMethodsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"PaymentDetails"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<PaymentMethod> GetAllPaymentMethodsWithBanksDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentMethodWitDetails(new List<string>(){"Banks"},shouldRemap);
					}
				}
							public BaseListReturnType<PaymentMethod> GetAllPaymentMethodsWithPaymentDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPaymentMethodWitDetails(new List<string>(){"PaymentDetails"},shouldRemap);
					}
				}
			

			public BaseListReturnType<PaymentMethod> GetAllPaymentMethodWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPaymentMethodWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<PaymentMethod> GetAllPaymentMethodWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<PaymentMethod> query =  db.PaymentMethods;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<PaymentMethod> baseListReturnType = new BaseListReturnType<PaymentMethod>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentMethodList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public PaymentMethod GetPaymentMethod(long idPaymentMethod,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentMethod(idPaymentMethod, db,shouldRemap);
                }
            }
                        public PaymentMethod GetPaymentMethod(long idPaymentMethod, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPaymentMethodSingle(db.PaymentMethods.Where(p => p.IdPaymentMethod == idPaymentMethod && p.IsDeactivated != true).FirstOrDefault());

                return db.PaymentMethods.Where(p => p.IdPaymentMethod == idPaymentMethod && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public PaymentMethod GetPaymentMethodCustom( Expression<Func<PaymentMethod, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPaymentMethodCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public PaymentMethod GetPaymentMethodCustom( SubscriptionEntities db , Expression<Func<PaymentMethod, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<PaymentMethod> query =  db.PaymentMethods;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapPaymentMethodSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<PaymentMethod> GetPaymentMethodCustomList( Expression<Func<PaymentMethod, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<PaymentMethod, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPaymentMethodCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<PaymentMethod> GetPaymentMethodCustomList(  SubscriptionEntities db , Expression<Func<PaymentMethod, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<PaymentMethod, dynamic> orderExpression = null)
			{
				IQueryable<PaymentMethod> query =  db.PaymentMethods;
                BaseListReturnType<PaymentMethod> baseListReturnType = new BaseListReturnType<PaymentMethod>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPaymentMethodList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public PaymentMethod GetPaymentMethodWithBanksDetails(long idPaymentMethod,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPaymentMethodWithDetails(idPaymentMethod,new List<string>(){"Banks"},shouldRemap);
					}
				}

            //IdBankTransferPaymentMethod -- Many


							public PaymentMethod GetPaymentMethodWithPaymentDetailsDetails(long idPaymentMethod,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPaymentMethodWithDetails(idPaymentMethod,new List<string>(){"PaymentDetails"},shouldRemap);
					}
				}

            //IdPaymentMethod -- Many


			


			public PaymentMethod GetPaymentMethodWithDetails(long idPaymentMethod, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentMethodWithDetails(idPaymentMethod, db,includes,shouldRemap);
                }
            }

            public PaymentMethod GetPaymentMethodWithDetails(long idPaymentMethod, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<PaymentMethod> query =  db.PaymentMethods;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapPaymentMethodSingle(query
						.Where(p => p.IdPaymentMethod == idPaymentMethod && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdPaymentMethod == idPaymentMethod && p.IsDeactivated != true).FirstOrDefault();
            }

            public PaymentMethod GetPaymentMethodWitDetails(long idPaymentMethod,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentMethodWitDetails(idPaymentMethod, db,shouldRemap);
                }
            }

            public PaymentMethod GetPaymentMethodWitDetails(long idPaymentMethod, SubscriptionEntities db,bool shouldRemap = false)
            {
				PaymentMethod _PaymentMethod = db.PaymentMethods

					.Include("Banks")
					.Include("PaymentDetails")
								.Where(p => p.IdPaymentMethod == idPaymentMethod && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapPaymentMethodSingle(_PaymentMethod);

				return  _PaymentMethod;
            }

            public List<PaymentMethod> GetPaymentMethodListByIdList(List<long> paymentMethodIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPaymentMethodListByIdList(paymentMethodIds, db);
                }
            }
            public List<PaymentMethod> GetPaymentMethodListByIdList(List<long> paymentMethodIds, SubscriptionEntities db)
            {
                return db.PaymentMethods.Where(p => p.IsDeactivated != true && paymentMethodIds.Contains(p.IdPaymentMethod.Value)).ToList();
            }


            public void SavePaymentMethod(PaymentMethod paymentMethod)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SavePaymentMethod(paymentMethod, db);
                }
            }

            public void SavePaymentMethod(PaymentMethod paymentMethod, SubscriptionEntities db)
            {
				                
                if (paymentMethod.IdPaymentMethod.HasValue){
					var paymentMethodFromDb = db.PaymentMethods.Where(p => p.IdPaymentMethod == paymentMethod.IdPaymentMethod).FirstOrDefault();
													paymentMethodFromDb.Description = paymentMethod.Description;
													paymentMethodFromDb.IsDeactivated = paymentMethod.IsDeactivated;
									}
                else{
                                        db.PaymentMethods.Add(paymentMethod);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyPaymentMethod(PaymentMethod paymentMethod)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyPaymentMethod(paymentMethod, db);
                }
            }

            public void SaveOnlyPaymentMethod(PaymentMethod paymentMethod, SubscriptionEntities db)
            {
			                    if (paymentMethod.IdPaymentMethod.HasValue){
					var paymentMethodFromDb = db.PaymentMethods.Where(p => p.IdPaymentMethod == paymentMethod.IdPaymentMethod).FirstOrDefault();
													paymentMethodFromDb.Description = paymentMethod.Description;
													paymentMethodFromDb.IsDeactivated = paymentMethod.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					PaymentMethod _paymentMethod = new PaymentMethod();
																	_paymentMethod.Description = paymentMethod.Description;
													_paymentMethod.IsDeactivated = paymentMethod.IsDeactivated;
					

                    db.PaymentMethods.Add(_paymentMethod);
					db.SaveChanges();
					paymentMethod.IdPaymentMethod =  _paymentMethod.IdPaymentMethod;
                    
                }
            }

            public void DeletePaymentMethod(PaymentMethod paymentMethod)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePaymentMethod(paymentMethod, db);
                }
            }

            public void DeletePaymentMethod(PaymentMethod paymentMethod, SubscriptionEntities db)
            {
								var paymentMethodFromDb = GetPaymentMethod(paymentMethod.IdPaymentMethod.Value,db);
				paymentMethodFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyPaymentMethod(PaymentMethod paymentMethod)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyPaymentMethod(paymentMethod, db);
                }
            }

            public void DeletePermanentlyPaymentMethod(PaymentMethod paymentMethod, SubscriptionEntities db)
            {
								var paymentMethodFromDb = GetPaymentMethod(paymentMethod.IdPaymentMethod.Value,db);
				
				db.PaymentMethods.Remove(paymentMethodFromDb);
                db.SaveChanges();
            }


            
							public List<Bank> UpdateBanksForPaymentMethodWithoutSavingNewItem(List<Bank> newBanks,long idPaymentMethod)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBanksForPaymentMethodWithoutSavingNewItem(newBanks,idPaymentMethod,db);
                                }
                            }

							public List<Bank> UpdateBanksForPaymentMethodWithoutSavingNewItem(List<Bank> newBanks,long idPaymentMethod, SubscriptionEntities  db)
                            {
                                Expression<Func<Bank, bool>> expressionBuilder = p => p.IdBankTransferPaymentMethod == idPaymentMethod;
                                var oldBanks = DaoFactories.Instance.BankDao.GetBankCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBanks.EntityList.Select(pc => pc.IdBank).Except(newBanks.Where(pc => pc.IdBank.HasValue).Select(pc => pc.IdBank)).ToList();
                                var itemsTobeDeleted = oldBanks.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBank)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBanks;
                            }


                            public List<Bank> UpdateBanksForPaymentMethod(List<Bank> newBanks,long idPaymentMethod)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBanksForPaymentMethod(newBanks,idPaymentMethod,db);
                                }
                            }

                            public List<Bank> UpdateBanksForPaymentMethod(List<Bank> newBanks,long idPaymentMethod, SubscriptionEntities  db)
                            {
                                Expression<Func<Bank, bool>> expressionBuilder = p => p.IdBankTransferPaymentMethod == idPaymentMethod;
                                var oldBanks = DaoFactories.Instance.BankDao.GetBankCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBanks.EntityList.Select(pc => pc.IdBank).Except(newBanks.Where(pc => pc.IdBank.HasValue).Select(pc => pc.IdBank)).ToList();
                                var itemsTobeDeleted = oldBanks.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBank)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBanks.ForEach(pc =>
                                {
                                    pc.IdBankTransferPaymentMethod = idPaymentMethod;
                                    DaoFactories.Instance.BankDao.SaveOnlyBank(pc, db);
                                });
                                return newBanks;
                            }

                        
							public List<PaymentDetail> UpdatePaymentDetailsForPaymentMethodWithoutSavingNewItem(List<PaymentDetail> newPaymentDetails,long idPaymentMethod)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePaymentDetailsForPaymentMethodWithoutSavingNewItem(newPaymentDetails,idPaymentMethod,db);
                                }
                            }

							public List<PaymentDetail> UpdatePaymentDetailsForPaymentMethodWithoutSavingNewItem(List<PaymentDetail> newPaymentDetails,long idPaymentMethod, SubscriptionEntities  db)
                            {
                                Expression<Func<PaymentDetail, bool>> expressionBuilder = p => p.IdPaymentMethod == idPaymentMethod;
                                var oldPaymentDetails = DaoFactories.Instance.PaymentDetailDao.GetPaymentDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPaymentDetails.EntityList.Select(pc => pc.IdPaymentDetail).Except(newPaymentDetails.Where(pc => pc.IdPaymentDetail.HasValue).Select(pc => pc.IdPaymentDetail)).ToList();
                                var itemsTobeDeleted = oldPaymentDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPaymentDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newPaymentDetails;
                            }


                            public List<PaymentDetail> UpdatePaymentDetailsForPaymentMethod(List<PaymentDetail> newPaymentDetails,long idPaymentMethod)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePaymentDetailsForPaymentMethod(newPaymentDetails,idPaymentMethod,db);
                                }
                            }

                            public List<PaymentDetail> UpdatePaymentDetailsForPaymentMethod(List<PaymentDetail> newPaymentDetails,long idPaymentMethod, SubscriptionEntities  db)
                            {
                                Expression<Func<PaymentDetail, bool>> expressionBuilder = p => p.IdPaymentMethod == idPaymentMethod;
                                var oldPaymentDetails = DaoFactories.Instance.PaymentDetailDao.GetPaymentDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPaymentDetails.EntityList.Select(pc => pc.IdPaymentDetail).Except(newPaymentDetails.Where(pc => pc.IdPaymentDetail.HasValue).Select(pc => pc.IdPaymentDetail)).ToList();
                                var itemsTobeDeleted = oldPaymentDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPaymentDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newPaymentDetails.ForEach(pc =>
                                {
                                    pc.IdPaymentMethod = idPaymentMethod;
                                    DaoFactories.Instance.PaymentDetailDao.SaveOnlyPaymentDetail(pc, db);
                                });
                                return newPaymentDetails;
                            }

                        


    



		}
			public partial class PermissionDao :IPermissionDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public PermissionDao(){
			
			}

			public PermissionDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Permission> GetAllPermissions(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPermissions(db, shouldRemap);
                }
            }

            public List<Permission> GetAllPermissions(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPermissionList(db.Permissions.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Permissions.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Permission> GetAllPermissionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Permission, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPermissionsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Permission> GetAllPermissionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Permission, dynamic> orderExpression = null)
            {
				IQueryable<Permission> query =  db.Permissions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Permission> baseListReturnType = new BaseListReturnType<Permission>();

                IQueryable<Permission> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPermission" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Permission, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.PermissionName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.PermissionName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPermissionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Permission> GetAllPermissionsWithRole_PermissionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Permission, bool>> expression = null,bool shouldRemap = false, Func<Permission, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPermissionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Role_Permission"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Permission> GetAllPermissionsWithUser_PermissionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Permission, bool>> expression = null,bool shouldRemap = false, Func<Permission, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPermissionsByPage(sortingPagingInfo, db,expression,new List<string>(){"User_Permission"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Permission> GetAllPermissionsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Permission, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPermissionsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Permission> GetAllPermissionsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Permission, dynamic> orderExpression = null)
            {
				IQueryable<Permission> query =  db.Permissions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Permission> baseListReturnType = new BaseListReturnType<Permission>();

                IQueryable<Permission> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPermission" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Permission, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPermissionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Permission> GetAllPermissionsWithRole_PermissionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Permission, bool>> expression = null,bool shouldRemap = false, Func<Permission, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPermissionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Role_Permission"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Permission> GetAllPermissionsWithUser_PermissionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Permission, bool>> expression = null,bool shouldRemap = false, Func<Permission, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPermissionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"User_Permission"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Permission> GetAllPermissionsWithRole_PermissionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPermissionWitDetails(new List<string>(){"Role_Permission"},shouldRemap);
					}
				}
							public BaseListReturnType<Permission> GetAllPermissionsWithUser_PermissionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPermissionWitDetails(new List<string>(){"User_Permission"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Permission> GetAllPermissionWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPermissionWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Permission> GetAllPermissionWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Permission> query =  db.Permissions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Permission> baseListReturnType = new BaseListReturnType<Permission>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPermissionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Permission GetPermission(long idPermission,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPermission(idPermission, db,shouldRemap);
                }
            }
                        public Permission GetPermission(long idPermission, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPermissionSingle(db.Permissions.Where(p => p.IdPermission == idPermission && p.IsDeactivated != true).FirstOrDefault());

                return db.Permissions.Where(p => p.IdPermission == idPermission && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Permission GetPermissionCustom( Expression<Func<Permission, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPermissionCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Permission GetPermissionCustom( SubscriptionEntities db , Expression<Func<Permission, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Permission> query =  db.Permissions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapPermissionSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Permission> GetPermissionCustomList( Expression<Func<Permission, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Permission, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPermissionCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Permission> GetPermissionCustomList(  SubscriptionEntities db , Expression<Func<Permission, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Permission, dynamic> orderExpression = null)
			{
				IQueryable<Permission> query =  db.Permissions;
                BaseListReturnType<Permission> baseListReturnType = new BaseListReturnType<Permission>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPermissionList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Permission GetPermissionWithRole_PermissionDetails(long idPermission,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPermissionWithDetails(idPermission,new List<string>(){"Role_Permission"},shouldRemap);
					}
				}

            //IdPermission -- Many


							public Permission GetPermissionWithUser_PermissionDetails(long idPermission,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPermissionWithDetails(idPermission,new List<string>(){"User_Permission"},shouldRemap);
					}
				}

            //IdPermission -- Many


			


			public Permission GetPermissionWithDetails(long idPermission, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPermissionWithDetails(idPermission, db,includes,shouldRemap);
                }
            }

            public Permission GetPermissionWithDetails(long idPermission, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Permission> query =  db.Permissions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapPermissionSingle(query
						.Where(p => p.IdPermission == idPermission && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdPermission == idPermission && p.IsDeactivated != true).FirstOrDefault();
            }

            public Permission GetPermissionWitDetails(long idPermission,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPermissionWitDetails(idPermission, db,shouldRemap);
                }
            }

            public Permission GetPermissionWitDetails(long idPermission, SubscriptionEntities db,bool shouldRemap = false)
            {
				Permission _Permission = db.Permissions

					.Include("Role_Permission")
					.Include("User_Permission")
								.Where(p => p.IdPermission == idPermission && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapPermissionSingle(_Permission);

				return  _Permission;
            }

            public List<Permission> GetPermissionListByIdList(List<long> permissionIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPermissionListByIdList(permissionIds, db);
                }
            }
            public List<Permission> GetPermissionListByIdList(List<long> permissionIds, SubscriptionEntities db)
            {
                return db.Permissions.Where(p => p.IsDeactivated != true && permissionIds.Contains(p.IdPermission.Value)).ToList();
            }


            public void SavePermission(Permission permission)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SavePermission(permission, db);
                }
            }

            public void SavePermission(Permission permission, SubscriptionEntities db)
            {
				                
                if (permission.IdPermission.HasValue){
					var permissionFromDb = db.Permissions.Where(p => p.IdPermission == permission.IdPermission).FirstOrDefault();
													permissionFromDb.PermissionName = permission.PermissionName;
													permissionFromDb.PermissionCode = permission.PermissionCode;
													permissionFromDb.IsDeactivated = permission.IsDeactivated;
									}
                else{
                                        db.Permissions.Add(permission);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyPermission(Permission permission)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyPermission(permission, db);
                }
            }

            public void SaveOnlyPermission(Permission permission, SubscriptionEntities db)
            {
			                    if (permission.IdPermission.HasValue){
					var permissionFromDb = db.Permissions.Where(p => p.IdPermission == permission.IdPermission).FirstOrDefault();
													permissionFromDb.PermissionName = permission.PermissionName;
													permissionFromDb.PermissionCode = permission.PermissionCode;
													permissionFromDb.IsDeactivated = permission.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Permission _permission = new Permission();
																	_permission.PermissionName = permission.PermissionName;
													_permission.PermissionCode = permission.PermissionCode;
													_permission.IsDeactivated = permission.IsDeactivated;
					

                    db.Permissions.Add(_permission);
					db.SaveChanges();
					permission.IdPermission =  _permission.IdPermission;
                    
                }
            }

            public void DeletePermission(Permission permission)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermission(permission, db);
                }
            }

            public void DeletePermission(Permission permission, SubscriptionEntities db)
            {
								var permissionFromDb = GetPermission(permission.IdPermission.Value,db);
				permissionFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyPermission(Permission permission)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyPermission(permission, db);
                }
            }

            public void DeletePermanentlyPermission(Permission permission, SubscriptionEntities db)
            {
								var permissionFromDb = GetPermission(permission.IdPermission.Value,db);
				
				db.Permissions.Remove(permissionFromDb);
                db.SaveChanges();
            }


            
							public List<Role_Permission> UpdateRole_PermissionForPermissionWithoutSavingNewItem(List<Role_Permission> newRole_Permission,long idPermission)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRole_PermissionForPermissionWithoutSavingNewItem(newRole_Permission,idPermission,db);
                                }
                            }

							public List<Role_Permission> UpdateRole_PermissionForPermissionWithoutSavingNewItem(List<Role_Permission> newRole_Permission,long idPermission, SubscriptionEntities  db)
                            {
                                Expression<Func<Role_Permission, bool>> expressionBuilder = p => p.IdPermission == idPermission;
                                var oldRole_Permission = DaoFactories.Instance.Role_PermissionDao.GetRole_PermissionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRole_Permission.EntityList.Select(pc => pc.IdRole_Permission).Except(newRole_Permission.Where(pc => pc.IdRole_Permission.HasValue).Select(pc => pc.IdRole_Permission)).ToList();
                                var itemsTobeDeleted = oldRole_Permission.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRole_Permission)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newRole_Permission;
                            }


                            public List<Role_Permission> UpdateRole_PermissionForPermission(List<Role_Permission> newRole_Permission,long idPermission)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRole_PermissionForPermission(newRole_Permission,idPermission,db);
                                }
                            }

                            public List<Role_Permission> UpdateRole_PermissionForPermission(List<Role_Permission> newRole_Permission,long idPermission, SubscriptionEntities  db)
                            {
                                Expression<Func<Role_Permission, bool>> expressionBuilder = p => p.IdPermission == idPermission;
                                var oldRole_Permission = DaoFactories.Instance.Role_PermissionDao.GetRole_PermissionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRole_Permission.EntityList.Select(pc => pc.IdRole_Permission).Except(newRole_Permission.Where(pc => pc.IdRole_Permission.HasValue).Select(pc => pc.IdRole_Permission)).ToList();
                                var itemsTobeDeleted = oldRole_Permission.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRole_Permission)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newRole_Permission.ForEach(pc =>
                                {
                                    pc.IdPermission = idPermission;
                                    DaoFactories.Instance.Role_PermissionDao.SaveOnlyRole_Permission(pc, db);
                                });
                                return newRole_Permission;
                            }

                        
							public List<User_Permission> UpdateUser_PermissionForPermissionWithoutSavingNewItem(List<User_Permission> newUser_Permission,long idPermission)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateUser_PermissionForPermissionWithoutSavingNewItem(newUser_Permission,idPermission,db);
                                }
                            }

							public List<User_Permission> UpdateUser_PermissionForPermissionWithoutSavingNewItem(List<User_Permission> newUser_Permission,long idPermission, SubscriptionEntities  db)
                            {
                                Expression<Func<User_Permission, bool>> expressionBuilder = p => p.IdPermission == idPermission;
                                var oldUser_Permission = DaoFactories.Instance.User_PermissionDao.GetUser_PermissionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldUser_Permission.EntityList.Select(pc => pc.IdUser_Permission).Except(newUser_Permission.Where(pc => pc.IdUser_Permission.HasValue).Select(pc => pc.IdUser_Permission)).ToList();
                                var itemsTobeDeleted = oldUser_Permission.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdUser_Permission)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newUser_Permission;
                            }


                            public List<User_Permission> UpdateUser_PermissionForPermission(List<User_Permission> newUser_Permission,long idPermission)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateUser_PermissionForPermission(newUser_Permission,idPermission,db);
                                }
                            }

                            public List<User_Permission> UpdateUser_PermissionForPermission(List<User_Permission> newUser_Permission,long idPermission, SubscriptionEntities  db)
                            {
                                Expression<Func<User_Permission, bool>> expressionBuilder = p => p.IdPermission == idPermission;
                                var oldUser_Permission = DaoFactories.Instance.User_PermissionDao.GetUser_PermissionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldUser_Permission.EntityList.Select(pc => pc.IdUser_Permission).Except(newUser_Permission.Where(pc => pc.IdUser_Permission.HasValue).Select(pc => pc.IdUser_Permission)).ToList();
                                var itemsTobeDeleted = oldUser_Permission.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdUser_Permission)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newUser_Permission.ForEach(pc =>
                                {
                                    pc.IdPermission = idPermission;
                                    DaoFactories.Instance.User_PermissionDao.SaveOnlyUser_Permission(pc, db);
                                });
                                return newUser_Permission;
                            }

                        


    



		}
			public partial class PersonDao :IPersonDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public PersonDao(){
			
			}

			public PersonDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Person> GetAllPeople(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPeople(db, shouldRemap);
                }
            }

            public List<Person> GetAllPeople(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPersonList(db.People.Where(p => p.IsDeactivated != true).ToList());
				
				return db.People.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Person> GetAllPeopleByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPeopleByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Person> GetAllPeopleByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Person, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
            {
				IQueryable<Person> query =  db.People;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Person> baseListReturnType = new BaseListReturnType<Person>();

                IQueryable<Person> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPerson" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Person, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Firstname.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Firstname.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Lastname.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.NationalIdentificationNumber.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPersonList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Person> GetAllPeopleWithUsersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPeopleByPage(sortingPagingInfo, db,expression,new List<string>(){"Users"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithTitleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPeopleByPage(sortingPagingInfo, db,expression,new List<string>(){"Title"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithConceptsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPeopleByPage(sortingPagingInfo, db,expression,new List<string>(){"Concepts"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithCustomersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPeopleByPage(sortingPagingInfo, db,expression,new List<string>(){"Customers"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithPerson_AddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPeopleByPage(sortingPagingInfo, db,expression,new List<string>(){"Person_Address"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithPerson_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPeopleByPage(sortingPagingInfo, db,expression,new List<string>(){"Person_ContactType"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Person> GetAllPeopleByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPeopleByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Person> GetAllPeopleByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Person, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
            {
				IQueryable<Person> query =  db.People;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Person> baseListReturnType = new BaseListReturnType<Person>();

                IQueryable<Person> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPerson" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Person, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPersonList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Person> GetAllPeopleWithUsersDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPeopleByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Users"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithTitleDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPeopleByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Title"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithConceptsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPeopleByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Concepts"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithCustomersDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPeopleByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Customers"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithPerson_AddressDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPeopleByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Person_Address"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithPerson_ContactTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap = false, Func<Person, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPeopleByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Person_ContactType"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Person> GetAllPeopleWithUsersDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPersonWitDetails(new List<string>(){"Users"},shouldRemap);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithTitleDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPersonWitDetails(new List<string>(){"Title"},shouldRemap);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithConceptsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPersonWitDetails(new List<string>(){"Concepts"},shouldRemap);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithCustomersDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPersonWitDetails(new List<string>(){"Customers"},shouldRemap);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithPerson_AddressDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPersonWitDetails(new List<string>(){"Person_Address"},shouldRemap);
					}
				}
							public BaseListReturnType<Person> GetAllPeopleWithPerson_ContactTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPersonWitDetails(new List<string>(){"Person_ContactType"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Person> GetAllPersonWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPersonWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Person> GetAllPersonWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Person> query =  db.People;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Person> baseListReturnType = new BaseListReturnType<Person>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPersonList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Person GetPerson(long idPerson,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPerson(idPerson, db,shouldRemap);
                }
            }
                        public Person GetPerson(long idPerson, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPersonSingle(db.People.Where(p => p.IdPerson == idPerson && p.IsDeactivated != true).FirstOrDefault());

                return db.People.Where(p => p.IdPerson == idPerson && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Person GetPersonCustom( Expression<Func<Person, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPersonCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Person GetPersonCustom( SubscriptionEntities db , Expression<Func<Person, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Person> query =  db.People;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapPersonSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Person> GetPersonCustomList( Expression<Func<Person, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Person, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPersonCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Person> GetPersonCustomList(  SubscriptionEntities db , Expression<Func<Person, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Person, dynamic> orderExpression = null)
			{
				IQueryable<Person> query =  db.People;
                BaseListReturnType<Person> baseListReturnType = new BaseListReturnType<Person>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPersonList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Person GetPersonWithUsersDetails(long idPerson,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPersonWithDetails(idPerson,new List<string>(){"Users"},shouldRemap);
					}
				}

            //IdPerson -- Many


							public Person GetPersonWithTitleDetails(long idPerson,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPersonWithDetails(idPerson,new List<string>(){"Title"},shouldRemap);
					}
				}

            //IdTitle -- ZeroOrOne

                public BaseListReturnType<Person> GetAllPersonListByTitle(long idTitle)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPersonListByTitle(idTitle, db);
                    }
                }
                public BaseListReturnType<Person> GetAllPersonListByTitle(long idTitle, SubscriptionEntities db)
                {
                    Expression<Func<Person, bool>> expression = property=> property.IdTitle == idTitle && property.IsDeactivated !=true;
                    return GetPersonCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Person> GetAllPersonListByTitleByPage(long idTitle, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPersonListByTitleByPage(idTitle, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Person> GetAllPersonListByTitleByPage(long idTitle, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Person, bool>> expression = property => property.IdTitle == idTitle && property.IsDeactivated !=true;
                    return GetAllPeopleByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Person GetPersonWithConceptsDetails(long idPerson,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPersonWithDetails(idPerson,new List<string>(){"Concepts"},shouldRemap);
					}
				}

            //IdPerson -- Many


							public Person GetPersonWithCustomersDetails(long idPerson,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPersonWithDetails(idPerson,new List<string>(){"Customers"},shouldRemap);
					}
				}

            //IdPerson -- Many


							public Person GetPersonWithPerson_AddressDetails(long idPerson,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPersonWithDetails(idPerson,new List<string>(){"Person_Address"},shouldRemap);
					}
				}

            //IdPerson -- Many


							public Person GetPersonWithPerson_ContactTypeDetails(long idPerson,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPersonWithDetails(idPerson,new List<string>(){"Person_ContactType"},shouldRemap);
					}
				}

            //IdPerson -- Many


			


			public Person GetPersonWithDetails(long idPerson, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPersonWithDetails(idPerson, db,includes,shouldRemap);
                }
            }

            public Person GetPersonWithDetails(long idPerson, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Person> query =  db.People;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapPersonSingle(query
						.Where(p => p.IdPerson == idPerson && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdPerson == idPerson && p.IsDeactivated != true).FirstOrDefault();
            }

            public Person GetPersonWitDetails(long idPerson,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPersonWitDetails(idPerson, db,shouldRemap);
                }
            }

            public Person GetPersonWitDetails(long idPerson, SubscriptionEntities db,bool shouldRemap = false)
            {
				Person _Person = db.People

					.Include("Users")
					.Include("Title")
					.Include("Concepts")
					.Include("Customers")
					.Include("Person_Address")
					.Include("Person_ContactType")
								.Where(p => p.IdPerson == idPerson && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapPersonSingle(_Person);

				return  _Person;
            }

            public List<Person> GetPersonListByIdList(List<long> personIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPersonListByIdList(personIds, db);
                }
            }
            public List<Person> GetPersonListByIdList(List<long> personIds, SubscriptionEntities db)
            {
                return db.People.Where(p => p.IsDeactivated != true && personIds.Contains(p.IdPerson.Value)).ToList();
            }


            public void SavePerson(Person person)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SavePerson(person, db);
                }
            }

            public void SavePerson(Person person, SubscriptionEntities db)
            {
									if (person.Title != null) 
						DaoFactories.Instance.TitleDao.SaveTitle(person.Title, db);
				                
                if (person.IdPerson.HasValue){
					var personFromDb = db.People.Where(p => p.IdPerson == person.IdPerson).FirstOrDefault();
													personFromDb.IsDeactivated = person.IsDeactivated;
													personFromDb.Firstname = person.Firstname;
													personFromDb.Lastname = person.Lastname;
													personFromDb.Dob = person.Dob;
													personFromDb.IdNationality = person.IdNationality;
													personFromDb.IdTitle = person.IdTitle;
													personFromDb.NationalIdentificationNumber = person.NationalIdentificationNumber;
									}
                else{
                                                //fix for saving without duplicating items in db
                              person.Title = null;
                                                db.People.Add(person);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyPerson(Person person)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyPerson(person, db);
                }
            }

            public void SaveOnlyPerson(Person person, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // person.Title = null;
                                            if (person.IdPerson.HasValue){
					var personFromDb = db.People.Where(p => p.IdPerson == person.IdPerson).FirstOrDefault();
													personFromDb.IsDeactivated = person.IsDeactivated;
													personFromDb.Firstname = person.Firstname;
													personFromDb.Lastname = person.Lastname;
													personFromDb.Dob = person.Dob;
													personFromDb.IdNationality = person.IdNationality;
													personFromDb.IdTitle = person.IdTitle;
													personFromDb.NationalIdentificationNumber = person.NationalIdentificationNumber;
										 db.SaveChanges();

				}
                else{
					Person _person = new Person();
																	_person.IsDeactivated = person.IsDeactivated;
													_person.Firstname = person.Firstname;
													_person.Lastname = person.Lastname;
													_person.Dob = person.Dob;
													_person.IdNationality = person.IdNationality;
													_person.IdTitle = person.IdTitle;
													_person.NationalIdentificationNumber = person.NationalIdentificationNumber;
					

                    db.People.Add(_person);
					db.SaveChanges();
					person.IdPerson =  _person.IdPerson;
                    
                }
            }

            public void DeletePerson(Person person)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePerson(person, db);
                }
            }

            public void DeletePerson(Person person, SubscriptionEntities db)
            {
								var personFromDb = GetPerson(person.IdPerson.Value,db);
				personFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyPerson(Person person)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyPerson(person, db);
                }
            }

            public void DeletePermanentlyPerson(Person person, SubscriptionEntities db)
            {
								var personFromDb = GetPerson(person.IdPerson.Value,db);
				
				db.People.Remove(personFromDb);
                db.SaveChanges();
            }


            
							public List<User> UpdateUsersForPersonWithoutSavingNewItem(List<User> newUsers,long idPerson)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateUsersForPersonWithoutSavingNewItem(newUsers,idPerson,db);
                                }
                            }

							public List<User> UpdateUsersForPersonWithoutSavingNewItem(List<User> newUsers,long idPerson, SubscriptionEntities  db)
                            {
                                Expression<Func<User, bool>> expressionBuilder = p => p.IdPerson == idPerson;
                                var oldUsers = DaoFactories.Instance.UserDao.GetUserCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldUsers.EntityList.Select(pc => pc.IdUser).Except(newUsers.Where(pc => pc.IdUser.HasValue).Select(pc => pc.IdUser)).ToList();
                                var itemsTobeDeleted = oldUsers.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdUser)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newUsers;
                            }


                            public List<User> UpdateUsersForPerson(List<User> newUsers,long idPerson)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateUsersForPerson(newUsers,idPerson,db);
                                }
                            }

                            public List<User> UpdateUsersForPerson(List<User> newUsers,long idPerson, SubscriptionEntities  db)
                            {
                                Expression<Func<User, bool>> expressionBuilder = p => p.IdPerson == idPerson;
                                var oldUsers = DaoFactories.Instance.UserDao.GetUserCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldUsers.EntityList.Select(pc => pc.IdUser).Except(newUsers.Where(pc => pc.IdUser.HasValue).Select(pc => pc.IdUser)).ToList();
                                var itemsTobeDeleted = oldUsers.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdUser)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newUsers.ForEach(pc =>
                                {
                                    pc.IdPerson = idPerson;
                                    DaoFactories.Instance.UserDao.SaveOnlyUser(pc, db);
                                });
                                return newUsers;
                            }

                        
							public List<Concept> UpdateConceptsForPersonWithoutSavingNewItem(List<Concept> newConcepts,long idPerson)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateConceptsForPersonWithoutSavingNewItem(newConcepts,idPerson,db);
                                }
                            }

							public List<Concept> UpdateConceptsForPersonWithoutSavingNewItem(List<Concept> newConcepts,long idPerson, SubscriptionEntities  db)
                            {
                                Expression<Func<Concept, bool>> expressionBuilder = p => p.IdPerson == idPerson;
                                var oldConcepts = DaoFactories.Instance.ConceptDao.GetConceptCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldConcepts.EntityList.Select(pc => pc.IdConcept).Except(newConcepts.Where(pc => pc.IdConcept.HasValue).Select(pc => pc.IdConcept)).ToList();
                                var itemsTobeDeleted = oldConcepts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdConcept)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newConcepts;
                            }


                            public List<Concept> UpdateConceptsForPerson(List<Concept> newConcepts,long idPerson)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateConceptsForPerson(newConcepts,idPerson,db);
                                }
                            }

                            public List<Concept> UpdateConceptsForPerson(List<Concept> newConcepts,long idPerson, SubscriptionEntities  db)
                            {
                                Expression<Func<Concept, bool>> expressionBuilder = p => p.IdPerson == idPerson;
                                var oldConcepts = DaoFactories.Instance.ConceptDao.GetConceptCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldConcepts.EntityList.Select(pc => pc.IdConcept).Except(newConcepts.Where(pc => pc.IdConcept.HasValue).Select(pc => pc.IdConcept)).ToList();
                                var itemsTobeDeleted = oldConcepts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdConcept)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newConcepts.ForEach(pc =>
                                {
                                    pc.IdPerson = idPerson;
                                    DaoFactories.Instance.ConceptDao.SaveOnlyConcept(pc, db);
                                });
                                return newConcepts;
                            }

                        
							public List<Customer> UpdateCustomersForPersonWithoutSavingNewItem(List<Customer> newCustomers,long idPerson)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCustomersForPersonWithoutSavingNewItem(newCustomers,idPerson,db);
                                }
                            }

							public List<Customer> UpdateCustomersForPersonWithoutSavingNewItem(List<Customer> newCustomers,long idPerson, SubscriptionEntities  db)
                            {
                                Expression<Func<Customer, bool>> expressionBuilder = p => p.IdPerson == idPerson;
                                var oldCustomers = DaoFactories.Instance.CustomerDao.GetCustomerCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCustomers.EntityList.Select(pc => pc.IdCustomer).Except(newCustomers.Where(pc => pc.IdCustomer.HasValue).Select(pc => pc.IdCustomer)).ToList();
                                var itemsTobeDeleted = oldCustomers.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCustomer)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newCustomers;
                            }


                            public List<Customer> UpdateCustomersForPerson(List<Customer> newCustomers,long idPerson)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateCustomersForPerson(newCustomers,idPerson,db);
                                }
                            }

                            public List<Customer> UpdateCustomersForPerson(List<Customer> newCustomers,long idPerson, SubscriptionEntities  db)
                            {
                                Expression<Func<Customer, bool>> expressionBuilder = p => p.IdPerson == idPerson;
                                var oldCustomers = DaoFactories.Instance.CustomerDao.GetCustomerCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldCustomers.EntityList.Select(pc => pc.IdCustomer).Except(newCustomers.Where(pc => pc.IdCustomer.HasValue).Select(pc => pc.IdCustomer)).ToList();
                                var itemsTobeDeleted = oldCustomers.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdCustomer)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newCustomers.ForEach(pc =>
                                {
                                    pc.IdPerson = idPerson;
                                    DaoFactories.Instance.CustomerDao.SaveOnlyCustomer(pc, db);
                                });
                                return newCustomers;
                            }

                        
							public List<Person_Address> UpdatePerson_AddressForPersonWithoutSavingNewItem(List<Person_Address> newPerson_Address,long idPerson)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePerson_AddressForPersonWithoutSavingNewItem(newPerson_Address,idPerson,db);
                                }
                            }

							public List<Person_Address> UpdatePerson_AddressForPersonWithoutSavingNewItem(List<Person_Address> newPerson_Address,long idPerson, SubscriptionEntities  db)
                            {
                                Expression<Func<Person_Address, bool>> expressionBuilder = p => p.IdPerson == idPerson;
                                var oldPerson_Address = DaoFactories.Instance.Person_AddressDao.GetPerson_AddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPerson_Address.EntityList.Select(pc => pc.IdPerson_Address).Except(newPerson_Address.Where(pc => pc.IdPerson_Address.HasValue).Select(pc => pc.IdPerson_Address)).ToList();
                                var itemsTobeDeleted = oldPerson_Address.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPerson_Address)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newPerson_Address;
                            }


                            public List<Person_Address> UpdatePerson_AddressForPerson(List<Person_Address> newPerson_Address,long idPerson)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePerson_AddressForPerson(newPerson_Address,idPerson,db);
                                }
                            }

                            public List<Person_Address> UpdatePerson_AddressForPerson(List<Person_Address> newPerson_Address,long idPerson, SubscriptionEntities  db)
                            {
                                Expression<Func<Person_Address, bool>> expressionBuilder = p => p.IdPerson == idPerson;
                                var oldPerson_Address = DaoFactories.Instance.Person_AddressDao.GetPerson_AddressCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPerson_Address.EntityList.Select(pc => pc.IdPerson_Address).Except(newPerson_Address.Where(pc => pc.IdPerson_Address.HasValue).Select(pc => pc.IdPerson_Address)).ToList();
                                var itemsTobeDeleted = oldPerson_Address.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPerson_Address)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newPerson_Address.ForEach(pc =>
                                {
                                    pc.IdPerson = idPerson;
                                    DaoFactories.Instance.Person_AddressDao.SaveOnlyPerson_Address(pc, db);
                                });
                                return newPerson_Address;
                            }

                        
							public List<Person_ContactType> UpdatePerson_ContactTypeForPersonWithoutSavingNewItem(List<Person_ContactType> newPerson_ContactType,long idPerson)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePerson_ContactTypeForPersonWithoutSavingNewItem(newPerson_ContactType,idPerson,db);
                                }
                            }

							public List<Person_ContactType> UpdatePerson_ContactTypeForPersonWithoutSavingNewItem(List<Person_ContactType> newPerson_ContactType,long idPerson, SubscriptionEntities  db)
                            {
                                Expression<Func<Person_ContactType, bool>> expressionBuilder = p => p.IdPerson == idPerson;
                                var oldPerson_ContactType = DaoFactories.Instance.Person_ContactTypeDao.GetPerson_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPerson_ContactType.EntityList.Select(pc => pc.IdPerson_ContactType).Except(newPerson_ContactType.Where(pc => pc.IdPerson_ContactType.HasValue).Select(pc => pc.IdPerson_ContactType)).ToList();
                                var itemsTobeDeleted = oldPerson_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPerson_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newPerson_ContactType;
                            }


                            public List<Person_ContactType> UpdatePerson_ContactTypeForPerson(List<Person_ContactType> newPerson_ContactType,long idPerson)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePerson_ContactTypeForPerson(newPerson_ContactType,idPerson,db);
                                }
                            }

                            public List<Person_ContactType> UpdatePerson_ContactTypeForPerson(List<Person_ContactType> newPerson_ContactType,long idPerson, SubscriptionEntities  db)
                            {
                                Expression<Func<Person_ContactType, bool>> expressionBuilder = p => p.IdPerson == idPerson;
                                var oldPerson_ContactType = DaoFactories.Instance.Person_ContactTypeDao.GetPerson_ContactTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPerson_ContactType.EntityList.Select(pc => pc.IdPerson_ContactType).Except(newPerson_ContactType.Where(pc => pc.IdPerson_ContactType.HasValue).Select(pc => pc.IdPerson_ContactType)).ToList();
                                var itemsTobeDeleted = oldPerson_ContactType.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPerson_ContactType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newPerson_ContactType.ForEach(pc =>
                                {
                                    pc.IdPerson = idPerson;
                                    DaoFactories.Instance.Person_ContactTypeDao.SaveOnlyPerson_ContactType(pc, db);
                                });
                                return newPerson_ContactType;
                            }

                        


    



		}
			public partial class Person_AddressDao :IPerson_AddressDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public Person_AddressDao(){
			
			}

			public Person_AddressDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Person_Address> GetAllPerson_Address(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPerson_Address(db, shouldRemap);
                }
            }

            public List<Person_Address> GetAllPerson_Address(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPerson_AddressList(db.Person_Address.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Person_Address.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Person_Address> GetAllPerson_AddressByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_Address, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Person_Address, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPerson_AddressByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Person_Address> GetAllPerson_AddressByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Person_Address, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Person_Address, dynamic> orderExpression = null)
            {
				IQueryable<Person_Address> query =  db.Person_Address;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Person_Address> baseListReturnType = new BaseListReturnType<Person_Address>();

                IQueryable<Person_Address> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPerson_Address" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Person_Address, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPerson_AddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Person_Address> GetAllPerson_AddressWithAddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_Address, bool>> expression = null,bool shouldRemap = false, Func<Person_Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPerson_AddressByPage(sortingPagingInfo, db,expression,new List<string>(){"Address"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person_Address> GetAllPerson_AddressWithPersonDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_Address, bool>> expression = null,bool shouldRemap = false, Func<Person_Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPerson_AddressByPage(sortingPagingInfo, db,expression,new List<string>(){"Person"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Person_Address> GetAllPerson_AddressByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_Address, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Person_Address, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPerson_AddressByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Person_Address> GetAllPerson_AddressByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Person_Address, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Person_Address, dynamic> orderExpression = null)
            {
				IQueryable<Person_Address> query =  db.Person_Address;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Person_Address> baseListReturnType = new BaseListReturnType<Person_Address>();

                IQueryable<Person_Address> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPerson_Address" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Person_Address, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPerson_AddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Person_Address> GetAllPerson_AddressWithAddressDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_Address, bool>> expression = null,bool shouldRemap = false, Func<Person_Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPerson_AddressByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Address"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person_Address> GetAllPerson_AddressWithPersonDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_Address, bool>> expression = null,bool shouldRemap = false, Func<Person_Address, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPerson_AddressByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Person"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Person_Address> GetAllPerson_AddressWithAddressDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPerson_AddressWitDetails(new List<string>(){"Address"},shouldRemap);
					}
				}
							public BaseListReturnType<Person_Address> GetAllPerson_AddressWithPersonDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPerson_AddressWitDetails(new List<string>(){"Person"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Person_Address> GetAllPerson_AddressWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPerson_AddressWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Person_Address> GetAllPerson_AddressWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Person_Address> query =  db.Person_Address;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Person_Address> baseListReturnType = new BaseListReturnType<Person_Address>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPerson_AddressList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Person_Address GetPerson_Address(long idPerson_Address,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPerson_Address(idPerson_Address, db,shouldRemap);
                }
            }
                        public Person_Address GetPerson_Address(long idPerson_Address, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPerson_AddressSingle(db.Person_Address.Where(p => p.IdPerson_Address == idPerson_Address && p.IsDeactivated != true).FirstOrDefault());

                return db.Person_Address.Where(p => p.IdPerson_Address == idPerson_Address && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Person_Address GetPerson_AddressCustom( Expression<Func<Person_Address, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPerson_AddressCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Person_Address GetPerson_AddressCustom( SubscriptionEntities db , Expression<Func<Person_Address, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Person_Address> query =  db.Person_Address;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapPerson_AddressSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Person_Address> GetPerson_AddressCustomList( Expression<Func<Person_Address, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Person_Address, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPerson_AddressCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Person_Address> GetPerson_AddressCustomList(  SubscriptionEntities db , Expression<Func<Person_Address, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Person_Address, dynamic> orderExpression = null)
			{
				IQueryable<Person_Address> query =  db.Person_Address;
                BaseListReturnType<Person_Address> baseListReturnType = new BaseListReturnType<Person_Address>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPerson_AddressList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Person_Address GetPerson_AddressWithAddressDetails(long idPerson_Address,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPerson_AddressWithDetails(idPerson_Address,new List<string>(){"Address"},shouldRemap);
					}
				}

            //IdAddress -- ZeroOrOne

                public BaseListReturnType<Person_Address> GetAllPerson_AddressListByAddress(long idAddress)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPerson_AddressListByAddress(idAddress, db);
                    }
                }
                public BaseListReturnType<Person_Address> GetAllPerson_AddressListByAddress(long idAddress, SubscriptionEntities db)
                {
                    Expression<Func<Person_Address, bool>> expression = property=> property.IdAddress == idAddress && property.IsDeactivated !=true;
                    return GetPerson_AddressCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Person_Address> GetAllPerson_AddressListByAddressByPage(long idAddress, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPerson_AddressListByAddressByPage(idAddress, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Person_Address> GetAllPerson_AddressListByAddressByPage(long idAddress, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Person_Address, bool>> expression = property => property.IdAddress == idAddress && property.IsDeactivated !=true;
                    return GetAllPerson_AddressByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Person_Address GetPerson_AddressWithPersonDetails(long idPerson_Address,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPerson_AddressWithDetails(idPerson_Address,new List<string>(){"Person"},shouldRemap);
					}
				}

            //IdPerson -- ZeroOrOne

                public BaseListReturnType<Person_Address> GetAllPerson_AddressListByPerson(long idPerson)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPerson_AddressListByPerson(idPerson, db);
                    }
                }
                public BaseListReturnType<Person_Address> GetAllPerson_AddressListByPerson(long idPerson, SubscriptionEntities db)
                {
                    Expression<Func<Person_Address, bool>> expression = property=> property.IdPerson == idPerson && property.IsDeactivated !=true;
                    return GetPerson_AddressCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Person_Address> GetAllPerson_AddressListByPersonByPage(long idPerson, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPerson_AddressListByPersonByPage(idPerson, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Person_Address> GetAllPerson_AddressListByPersonByPage(long idPerson, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Person_Address, bool>> expression = property => property.IdPerson == idPerson && property.IsDeactivated !=true;
                    return GetAllPerson_AddressByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public Person_Address GetPerson_AddressWithDetails(long idPerson_Address, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPerson_AddressWithDetails(idPerson_Address, db,includes,shouldRemap);
                }
            }

            public Person_Address GetPerson_AddressWithDetails(long idPerson_Address, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Person_Address> query =  db.Person_Address;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapPerson_AddressSingle(query
						.Where(p => p.IdPerson_Address == idPerson_Address && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdPerson_Address == idPerson_Address && p.IsDeactivated != true).FirstOrDefault();
            }

            public Person_Address GetPerson_AddressWitDetails(long idPerson_Address,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPerson_AddressWitDetails(idPerson_Address, db,shouldRemap);
                }
            }

            public Person_Address GetPerson_AddressWitDetails(long idPerson_Address, SubscriptionEntities db,bool shouldRemap = false)
            {
				Person_Address _Person_Address = db.Person_Address

					.Include("Address")
					.Include("Person")
								.Where(p => p.IdPerson_Address == idPerson_Address && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapPerson_AddressSingle(_Person_Address);

				return  _Person_Address;
            }

            public List<Person_Address> GetPerson_AddressListByIdList(List<long> person_AddressIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPerson_AddressListByIdList(person_AddressIds, db);
                }
            }
            public List<Person_Address> GetPerson_AddressListByIdList(List<long> person_AddressIds, SubscriptionEntities db)
            {
                return db.Person_Address.Where(p => p.IsDeactivated != true && person_AddressIds.Contains(p.IdPerson_Address.Value)).ToList();
            }


            public void SavePerson_Address(Person_Address person_Address)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SavePerson_Address(person_Address, db);
                }
            }

            public void SavePerson_Address(Person_Address person_Address, SubscriptionEntities db)
            {
									if (person_Address.Address != null) 
						DaoFactories.Instance.AddressDao.SaveAddress(person_Address.Address, db);
									if (person_Address.Person != null) 
						DaoFactories.Instance.PersonDao.SavePerson(person_Address.Person, db);
				                
                if (person_Address.IdPerson_Address.HasValue){
					var person_AddressFromDb = db.Person_Address.Where(p => p.IdPerson_Address == person_Address.IdPerson_Address).FirstOrDefault();
													person_AddressFromDb.IdPerson = person_Address.IdPerson;
													person_AddressFromDb.IdAddress = person_Address.IdAddress;
													person_AddressFromDb.IsDeactivated = person_Address.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              person_Address.Address = null;
                                                        //fix for saving without duplicating items in db
                              person_Address.Person = null;
                                                db.Person_Address.Add(person_Address);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyPerson_Address(Person_Address person_Address)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyPerson_Address(person_Address, db);
                }
            }

            public void SaveOnlyPerson_Address(Person_Address person_Address, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // person_Address.Address = null;
                                                        //fix for saving without duplicating items in db
                             // person_Address.Person = null;
                                            if (person_Address.IdPerson_Address.HasValue){
					var person_AddressFromDb = db.Person_Address.Where(p => p.IdPerson_Address == person_Address.IdPerson_Address).FirstOrDefault();
													person_AddressFromDb.IdPerson = person_Address.IdPerson;
													person_AddressFromDb.IdAddress = person_Address.IdAddress;
													person_AddressFromDb.IsDeactivated = person_Address.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Person_Address _person_Address = new Person_Address();
																	_person_Address.IdPerson = person_Address.IdPerson;
													_person_Address.IdAddress = person_Address.IdAddress;
													_person_Address.IsDeactivated = person_Address.IsDeactivated;
					

                    db.Person_Address.Add(_person_Address);
					db.SaveChanges();
					person_Address.IdPerson_Address =  _person_Address.IdPerson_Address;
                    
                }
            }

            public void DeletePerson_Address(Person_Address person_Address)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePerson_Address(person_Address, db);
                }
            }

            public void DeletePerson_Address(Person_Address person_Address, SubscriptionEntities db)
            {
								var person_AddressFromDb = GetPerson_Address(person_Address.IdPerson_Address.Value,db);
				person_AddressFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyPerson_Address(Person_Address person_Address)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyPerson_Address(person_Address, db);
                }
            }

            public void DeletePermanentlyPerson_Address(Person_Address person_Address, SubscriptionEntities db)
            {
								var person_AddressFromDb = GetPerson_Address(person_Address.IdPerson_Address.Value,db);
				
				db.Person_Address.Remove(person_AddressFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class Person_ContactTypeDao :IPerson_ContactTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public Person_ContactTypeDao(){
			
			}

			public Person_ContactTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Person_ContactType> GetAllPerson_ContactType(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPerson_ContactType(db, shouldRemap);
                }
            }

            public List<Person_ContactType> GetAllPerson_ContactType(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPerson_ContactTypeList(db.Person_ContactType.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Person_ContactType.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Person_ContactType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPerson_ContactTypeByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Person_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Person_ContactType, dynamic> orderExpression = null)
            {
				IQueryable<Person_ContactType> query =  db.Person_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Person_ContactType> baseListReturnType = new BaseListReturnType<Person_ContactType>();

                IQueryable<Person_ContactType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPerson_ContactType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Person_ContactType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPerson_ContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeWithContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_ContactType, bool>> expression = null,bool shouldRemap = false, Func<Person_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPerson_ContactTypeByPage(sortingPagingInfo, db,expression,new List<string>(){"ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeWithPersonDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_ContactType, bool>> expression = null,bool shouldRemap = false, Func<Person_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPerson_ContactTypeByPage(sortingPagingInfo, db,expression,new List<string>(){"Person"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Person_ContactType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPerson_ContactTypeByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Person_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Person_ContactType, dynamic> orderExpression = null)
            {
				IQueryable<Person_ContactType> query =  db.Person_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Person_ContactType> baseListReturnType = new BaseListReturnType<Person_ContactType>();

                IQueryable<Person_ContactType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdPerson_ContactType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Person_ContactType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPerson_ContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeWithContactTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_ContactType, bool>> expression = null,bool shouldRemap = false, Func<Person_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPerson_ContactTypeByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"ContactType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeWithPersonDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_ContactType, bool>> expression = null,bool shouldRemap = false, Func<Person_ContactType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPerson_ContactTypeByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Person"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeWithContactTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPerson_ContactTypeWitDetails(new List<string>(){"ContactType"},shouldRemap);
					}
				}
							public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeWithPersonDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllPerson_ContactTypeWitDetails(new List<string>(){"Person"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllPerson_ContactTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Person_ContactType> query =  db.Person_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Person_ContactType> baseListReturnType = new BaseListReturnType<Person_ContactType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPerson_ContactTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Person_ContactType GetPerson_ContactType(long idPerson_ContactType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPerson_ContactType(idPerson_ContactType, db,shouldRemap);
                }
            }
                        public Person_ContactType GetPerson_ContactType(long idPerson_ContactType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapPerson_ContactTypeSingle(db.Person_ContactType.Where(p => p.IdPerson_ContactType == idPerson_ContactType && p.IsDeactivated != true).FirstOrDefault());

                return db.Person_ContactType.Where(p => p.IdPerson_ContactType == idPerson_ContactType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Person_ContactType GetPerson_ContactTypeCustom( Expression<Func<Person_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPerson_ContactTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Person_ContactType GetPerson_ContactTypeCustom( SubscriptionEntities db , Expression<Func<Person_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Person_ContactType> query =  db.Person_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapPerson_ContactTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Person_ContactType> GetPerson_ContactTypeCustomList( Expression<Func<Person_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Person_ContactType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetPerson_ContactTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Person_ContactType> GetPerson_ContactTypeCustomList(  SubscriptionEntities db , Expression<Func<Person_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Person_ContactType, dynamic> orderExpression = null)
			{
				IQueryable<Person_ContactType> query =  db.Person_ContactType;
                BaseListReturnType<Person_ContactType> baseListReturnType = new BaseListReturnType<Person_ContactType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapPerson_ContactTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Person_ContactType GetPerson_ContactTypeWithContactTypeDetails(long idPerson_ContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPerson_ContactTypeWithDetails(idPerson_ContactType,new List<string>(){"ContactType"},shouldRemap);
					}
				}

            //IdContactType -- ZeroOrOne

                public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeListByContactType(long idContactType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPerson_ContactTypeListByContactType(idContactType, db);
                    }
                }
                public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeListByContactType(long idContactType, SubscriptionEntities db)
                {
                    Expression<Func<Person_ContactType, bool>> expression = property=> property.IdContactType == idContactType && property.IsDeactivated !=true;
                    return GetPerson_ContactTypeCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeListByContactTypeByPage(long idContactType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPerson_ContactTypeListByContactTypeByPage(idContactType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeListByContactTypeByPage(long idContactType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Person_ContactType, bool>> expression = property => property.IdContactType == idContactType && property.IsDeactivated !=true;
                    return GetAllPerson_ContactTypeByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Person_ContactType GetPerson_ContactTypeWithPersonDetails(long idPerson_ContactType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetPerson_ContactTypeWithDetails(idPerson_ContactType,new List<string>(){"Person"},shouldRemap);
					}
				}

            //IdPerson -- ZeroOrOne

                public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeListByPerson(long idPerson)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPerson_ContactTypeListByPerson(idPerson, db);
                    }
                }
                public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeListByPerson(long idPerson, SubscriptionEntities db)
                {
                    Expression<Func<Person_ContactType, bool>> expression = property=> property.IdPerson == idPerson && property.IsDeactivated !=true;
                    return GetPerson_ContactTypeCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeListByPersonByPage(long idPerson, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllPerson_ContactTypeListByPersonByPage(idPerson, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeListByPersonByPage(long idPerson, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Person_ContactType, bool>> expression = property => property.IdPerson == idPerson && property.IsDeactivated !=true;
                    return GetAllPerson_ContactTypeByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public Person_ContactType GetPerson_ContactTypeWithDetails(long idPerson_ContactType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPerson_ContactTypeWithDetails(idPerson_ContactType, db,includes,shouldRemap);
                }
            }

            public Person_ContactType GetPerson_ContactTypeWithDetails(long idPerson_ContactType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Person_ContactType> query =  db.Person_ContactType;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapPerson_ContactTypeSingle(query
						.Where(p => p.IdPerson_ContactType == idPerson_ContactType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdPerson_ContactType == idPerson_ContactType && p.IsDeactivated != true).FirstOrDefault();
            }

            public Person_ContactType GetPerson_ContactTypeWitDetails(long idPerson_ContactType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPerson_ContactTypeWitDetails(idPerson_ContactType, db,shouldRemap);
                }
            }

            public Person_ContactType GetPerson_ContactTypeWitDetails(long idPerson_ContactType, SubscriptionEntities db,bool shouldRemap = false)
            {
				Person_ContactType _Person_ContactType = db.Person_ContactType

					.Include("ContactType")
					.Include("Person")
								.Where(p => p.IdPerson_ContactType == idPerson_ContactType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapPerson_ContactTypeSingle(_Person_ContactType);

				return  _Person_ContactType;
            }

            public List<Person_ContactType> GetPerson_ContactTypeListByIdList(List<long> person_ContactTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetPerson_ContactTypeListByIdList(person_ContactTypeIds, db);
                }
            }
            public List<Person_ContactType> GetPerson_ContactTypeListByIdList(List<long> person_ContactTypeIds, SubscriptionEntities db)
            {
                return db.Person_ContactType.Where(p => p.IsDeactivated != true && person_ContactTypeIds.Contains(p.IdPerson_ContactType.Value)).ToList();
            }


            public void SavePerson_ContactType(Person_ContactType person_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SavePerson_ContactType(person_ContactType, db);
                }
            }

            public void SavePerson_ContactType(Person_ContactType person_ContactType, SubscriptionEntities db)
            {
									if (person_ContactType.ContactType != null) 
						DaoFactories.Instance.ContactTypeDao.SaveContactType(person_ContactType.ContactType, db);
									if (person_ContactType.Person != null) 
						DaoFactories.Instance.PersonDao.SavePerson(person_ContactType.Person, db);
				                
                if (person_ContactType.IdPerson_ContactType.HasValue){
					var person_ContactTypeFromDb = db.Person_ContactType.Where(p => p.IdPerson_ContactType == person_ContactType.IdPerson_ContactType).FirstOrDefault();
													person_ContactTypeFromDb.IdPerson = person_ContactType.IdPerson;
													person_ContactTypeFromDb.IdContactType = person_ContactType.IdContactType;
													person_ContactTypeFromDb.IsDeactivated = person_ContactType.IsDeactivated;
													person_ContactTypeFromDb.Description = person_ContactType.Description;
													person_ContactTypeFromDb.IsPrimary = person_ContactType.IsPrimary;
									}
                else{
                                                //fix for saving without duplicating items in db
                              person_ContactType.ContactType = null;
                                                        //fix for saving without duplicating items in db
                              person_ContactType.Person = null;
                                                db.Person_ContactType.Add(person_ContactType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyPerson_ContactType(Person_ContactType person_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyPerson_ContactType(person_ContactType, db);
                }
            }

            public void SaveOnlyPerson_ContactType(Person_ContactType person_ContactType, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // person_ContactType.ContactType = null;
                                                        //fix for saving without duplicating items in db
                             // person_ContactType.Person = null;
                                            if (person_ContactType.IdPerson_ContactType.HasValue){
					var person_ContactTypeFromDb = db.Person_ContactType.Where(p => p.IdPerson_ContactType == person_ContactType.IdPerson_ContactType).FirstOrDefault();
													person_ContactTypeFromDb.IdPerson = person_ContactType.IdPerson;
													person_ContactTypeFromDb.IdContactType = person_ContactType.IdContactType;
													person_ContactTypeFromDb.IsDeactivated = person_ContactType.IsDeactivated;
													person_ContactTypeFromDb.Description = person_ContactType.Description;
													person_ContactTypeFromDb.IsPrimary = person_ContactType.IsPrimary;
										 db.SaveChanges();

				}
                else{
					Person_ContactType _person_ContactType = new Person_ContactType();
																	_person_ContactType.IdPerson = person_ContactType.IdPerson;
													_person_ContactType.IdContactType = person_ContactType.IdContactType;
													_person_ContactType.IsDeactivated = person_ContactType.IsDeactivated;
													_person_ContactType.Description = person_ContactType.Description;
													_person_ContactType.IsPrimary = person_ContactType.IsPrimary;
					

                    db.Person_ContactType.Add(_person_ContactType);
					db.SaveChanges();
					person_ContactType.IdPerson_ContactType =  _person_ContactType.IdPerson_ContactType;
                    
                }
            }

            public void DeletePerson_ContactType(Person_ContactType person_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePerson_ContactType(person_ContactType, db);
                }
            }

            public void DeletePerson_ContactType(Person_ContactType person_ContactType, SubscriptionEntities db)
            {
								var person_ContactTypeFromDb = GetPerson_ContactType(person_ContactType.IdPerson_ContactType.Value,db);
				person_ContactTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyPerson_ContactType(Person_ContactType person_ContactType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyPerson_ContactType(person_ContactType, db);
                }
            }

            public void DeletePermanentlyPerson_ContactType(Person_ContactType person_ContactType, SubscriptionEntities db)
            {
								var person_ContactTypeFromDb = GetPerson_ContactType(person_ContactType.IdPerson_ContactType.Value,db);
				
				db.Person_ContactType.Remove(person_ContactTypeFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class ProductDao :IProductDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public ProductDao(){
			
			}

			public ProductDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Product> GetAllProducts(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllProducts(db, shouldRemap);
                }
            }

            public List<Product> GetAllProducts(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapProductList(db.Products.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Products.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Product> GetAllProductsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllProductsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Product> GetAllProductsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Product, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
            {
				IQueryable<Product> query =  db.Products;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Product> baseListReturnType = new BaseListReturnType<Product>();

                IQueryable<Product> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdProduct" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Product, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ItemCode.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Name.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ImgUrl.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapProductList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Product> GetAllProductsWithTransactionDetailPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionDetailPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithProductTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductsByPage(sortingPagingInfo, db,expression,new List<string>(){"ProductType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithOrderDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductsByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderDetails"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithProduct1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductsByPage(sortingPagingInfo, db,expression,new List<string>(){"Product1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithProduct2DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductsByPage(sortingPagingInfo, db,expression,new List<string>(){"Product2"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithTransactionDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionDetails"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Product> GetAllProductsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllProductsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Product> GetAllProductsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Product, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
            {
				IQueryable<Product> query =  db.Products;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Product> baseListReturnType = new BaseListReturnType<Product>();

                IQueryable<Product> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdProduct" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Product, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapProductList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Product> GetAllProductsWithTransactionDetailPresetsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionDetailPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithProductTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"ProductType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithOrderDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderDetails"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithProduct1DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Product1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithProduct2DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Product2"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithTransactionDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap = false, Func<Product, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionDetails"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Product> GetAllProductsWithTransactionDetailPresetsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductWitDetails(new List<string>(){"TransactionDetailPresets"},shouldRemap);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithProductTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductWitDetails(new List<string>(){"ProductType"},shouldRemap);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithOrderDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductWitDetails(new List<string>(){"OrderDetails"},shouldRemap);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithProduct1Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductWitDetails(new List<string>(){"Product1"},shouldRemap);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithProduct2Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductWitDetails(new List<string>(){"Product2"},shouldRemap);
					}
				}
							public BaseListReturnType<Product> GetAllProductsWithTransactionDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductWitDetails(new List<string>(){"TransactionDetails"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Product> GetAllProductWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllProductWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Product> GetAllProductWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Product> query =  db.Products;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Product> baseListReturnType = new BaseListReturnType<Product>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapProductList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Product GetProduct(long idProduct,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetProduct(idProduct, db,shouldRemap);
                }
            }
                        public Product GetProduct(long idProduct, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapProductSingle(db.Products.Where(p => p.IdProduct == idProduct && p.IsDeactivated != true).FirstOrDefault());

                return db.Products.Where(p => p.IdProduct == idProduct && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Product GetProductCustom( Expression<Func<Product, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetProductCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Product GetProductCustom( SubscriptionEntities db , Expression<Func<Product, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Product> query =  db.Products;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapProductSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Product> GetProductCustomList( Expression<Func<Product, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Product, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetProductCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Product> GetProductCustomList(  SubscriptionEntities db , Expression<Func<Product, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Product, dynamic> orderExpression = null)
			{
				IQueryable<Product> query =  db.Products;
                BaseListReturnType<Product> baseListReturnType = new BaseListReturnType<Product>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapProductList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Product GetProductWithTransactionDetailPresetsDetails(long idProduct,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetProductWithDetails(idProduct,new List<string>(){"TransactionDetailPresets"},shouldRemap);
					}
				}

            //IdProduct -- Many


							public Product GetProductWithProductTypeDetails(long idProduct,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetProductWithDetails(idProduct,new List<string>(){"ProductType"},shouldRemap);
					}
				}

            //IdProductType -- ZeroOrOne

                public BaseListReturnType<Product> GetAllProductListByProductType(long idProductType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllProductListByProductType(idProductType, db);
                    }
                }
                public BaseListReturnType<Product> GetAllProductListByProductType(long idProductType, SubscriptionEntities db)
                {
                    Expression<Func<Product, bool>> expression = property=> property.IdProductType == idProductType && property.IsDeactivated !=true;
                    return GetProductCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Product> GetAllProductListByProductTypeByPage(long idProductType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllProductListByProductTypeByPage(idProductType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Product> GetAllProductListByProductTypeByPage(long idProductType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Product, bool>> expression = property => property.IdProductType == idProductType && property.IsDeactivated !=true;
                    return GetAllProductsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Product GetProductWithOrderDetailsDetails(long idProduct,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetProductWithDetails(idProduct,new List<string>(){"OrderDetails"},shouldRemap);
					}
				}

            //IdProduct -- Many


							public Product GetProductWithProduct1Details(long idProduct,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetProductWithDetails(idProduct,new List<string>(){"Product1"},shouldRemap);
					}
				}

            //IdParentProduct -- Many


							public Product GetProductWithProduct2Details(long idProduct,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetProductWithDetails(idProduct,new List<string>(){"Product2"},shouldRemap);
					}
				}

            //IdParentProduct -- ZeroOrOne

                public BaseListReturnType<Product> GetAllProductListByProduct2(long idProduct2)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllProductListByProduct2(idProduct2, db);
                    }
                }
                public BaseListReturnType<Product> GetAllProductListByProduct2(long idProduct2, SubscriptionEntities db)
                {
                    Expression<Func<Product, bool>> expression = property=> property.IdParentProduct == idProduct2 && property.IsDeactivated !=true;
                    return GetProductCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Product> GetAllProductListByProduct2ByPage(long idProduct2, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllProductListByProduct2ByPage(idProduct2, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Product> GetAllProductListByProduct2ByPage(long idProduct2, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Product, bool>> expression = property => property.IdParentProduct == idProduct2 && property.IsDeactivated !=true;
                    return GetAllProductsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Product GetProductWithTransactionDetailsDetails(long idProduct,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetProductWithDetails(idProduct,new List<string>(){"TransactionDetails"},shouldRemap);
					}
				}

            //IdProduct -- Many


			


			public Product GetProductWithDetails(long idProduct, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetProductWithDetails(idProduct, db,includes,shouldRemap);
                }
            }

            public Product GetProductWithDetails(long idProduct, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Product> query =  db.Products;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapProductSingle(query
						.Where(p => p.IdProduct == idProduct && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdProduct == idProduct && p.IsDeactivated != true).FirstOrDefault();
            }

            public Product GetProductWitDetails(long idProduct,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetProductWitDetails(idProduct, db,shouldRemap);
                }
            }

            public Product GetProductWitDetails(long idProduct, SubscriptionEntities db,bool shouldRemap = false)
            {
				Product _Product = db.Products

					.Include("TransactionDetailPresets")
					.Include("ProductType")
					.Include("OrderDetails")
					.Include("Product1")
					.Include("Product2")
					.Include("TransactionDetails")
								.Where(p => p.IdProduct == idProduct && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapProductSingle(_Product);

				return  _Product;
            }

            public List<Product> GetProductListByIdList(List<long> productIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetProductListByIdList(productIds, db);
                }
            }
            public List<Product> GetProductListByIdList(List<long> productIds, SubscriptionEntities db)
            {
                return db.Products.Where(p => p.IsDeactivated != true && productIds.Contains(p.IdProduct.Value)).ToList();
            }


            public void SaveProduct(Product product)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveProduct(product, db);
                }
            }

            public void SaveProduct(Product product, SubscriptionEntities db)
            {
									if (product.ProductType != null) 
						DaoFactories.Instance.ProductTypeDao.SaveProductType(product.ProductType, db);
									if (product.Product2 != null) 
						DaoFactories.Instance.ProductDao.SaveProduct(product.Product2, db);
				                
                if (product.IdProduct.HasValue){
					var productFromDb = db.Products.Where(p => p.IdProduct == product.IdProduct).FirstOrDefault();
													productFromDb.IsDeactivated = product.IsDeactivated;
													productFromDb.Description = product.Description;
													productFromDb.IdProductType = product.IdProductType;
													productFromDb.ItemCode = product.ItemCode;
													productFromDb.Rate = product.Rate;
													productFromDb.IdTransactionAccount = product.IdTransactionAccount;
													productFromDb.Name = product.Name;
													productFromDb.IdDocument = product.IdDocument;
													productFromDb.IsLimitedByStock = product.IsLimitedByStock;
													productFromDb.IdParentProduct = product.IdParentProduct;
													productFromDb.ImgUrl = product.ImgUrl;
													productFromDb.IsAvailableOnOrder = product.IsAvailableOnOrder;
									}
                else{
                                                //fix for saving without duplicating items in db
                              product.ProductType = null;
                                                        //fix for saving without duplicating items in db
                              product.Product2 = null;
                                                db.Products.Add(product);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyProduct(Product product)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyProduct(product, db);
                }
            }

            public void SaveOnlyProduct(Product product, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // product.ProductType = null;
                                                        //fix for saving without duplicating items in db
                             // product.Product2 = null;
                                            if (product.IdProduct.HasValue){
					var productFromDb = db.Products.Where(p => p.IdProduct == product.IdProduct).FirstOrDefault();
													productFromDb.IsDeactivated = product.IsDeactivated;
													productFromDb.Description = product.Description;
													productFromDb.IdProductType = product.IdProductType;
													productFromDb.ItemCode = product.ItemCode;
													productFromDb.Rate = product.Rate;
													productFromDb.IdTransactionAccount = product.IdTransactionAccount;
													productFromDb.Name = product.Name;
													productFromDb.IdDocument = product.IdDocument;
													productFromDb.IsLimitedByStock = product.IsLimitedByStock;
													productFromDb.IdParentProduct = product.IdParentProduct;
													productFromDb.ImgUrl = product.ImgUrl;
													productFromDb.IsAvailableOnOrder = product.IsAvailableOnOrder;
										 db.SaveChanges();

				}
                else{
					Product _product = new Product();
																	_product.IsDeactivated = product.IsDeactivated;
													_product.Description = product.Description;
													_product.IdProductType = product.IdProductType;
													_product.ItemCode = product.ItemCode;
													_product.Rate = product.Rate;
													_product.IdTransactionAccount = product.IdTransactionAccount;
													_product.Name = product.Name;
													_product.IdDocument = product.IdDocument;
													_product.IsLimitedByStock = product.IsLimitedByStock;
													_product.IdParentProduct = product.IdParentProduct;
													_product.ImgUrl = product.ImgUrl;
													_product.IsAvailableOnOrder = product.IsAvailableOnOrder;
					

                    db.Products.Add(_product);
					db.SaveChanges();
					product.IdProduct =  _product.IdProduct;
                    
                }
            }

            public void DeleteProduct(Product product)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteProduct(product, db);
                }
            }

            public void DeleteProduct(Product product, SubscriptionEntities db)
            {
								var productFromDb = GetProduct(product.IdProduct.Value,db);
				productFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyProduct(Product product)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyProduct(product, db);
                }
            }

            public void DeletePermanentlyProduct(Product product, SubscriptionEntities db)
            {
								var productFromDb = GetProduct(product.IdProduct.Value,db);
				
				db.Products.Remove(productFromDb);
                db.SaveChanges();
            }


            
							public List<TransactionDetailPreset> UpdateTransactionDetailPresetsForProductWithoutSavingNewItem(List<TransactionDetailPreset> newTransactionDetailPresets,long idProduct)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDetailPresetsForProductWithoutSavingNewItem(newTransactionDetailPresets,idProduct,db);
                                }
                            }

							public List<TransactionDetailPreset> UpdateTransactionDetailPresetsForProductWithoutSavingNewItem(List<TransactionDetailPreset> newTransactionDetailPresets,long idProduct, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDetailPreset, bool>> expressionBuilder = p => p.IdProduct == idProduct;
                                var oldTransactionDetailPresets = DaoFactories.Instance.TransactionDetailPresetDao.GetTransactionDetailPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDetailPresets.EntityList.Select(pc => pc.IdTransactionDetailPreset).Except(newTransactionDetailPresets.Where(pc => pc.IdTransactionDetailPreset.HasValue).Select(pc => pc.IdTransactionDetailPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionDetailPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDetailPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionDetailPresets;
                            }


                            public List<TransactionDetailPreset> UpdateTransactionDetailPresetsForProduct(List<TransactionDetailPreset> newTransactionDetailPresets,long idProduct)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDetailPresetsForProduct(newTransactionDetailPresets,idProduct,db);
                                }
                            }

                            public List<TransactionDetailPreset> UpdateTransactionDetailPresetsForProduct(List<TransactionDetailPreset> newTransactionDetailPresets,long idProduct, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDetailPreset, bool>> expressionBuilder = p => p.IdProduct == idProduct;
                                var oldTransactionDetailPresets = DaoFactories.Instance.TransactionDetailPresetDao.GetTransactionDetailPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDetailPresets.EntityList.Select(pc => pc.IdTransactionDetailPreset).Except(newTransactionDetailPresets.Where(pc => pc.IdTransactionDetailPreset.HasValue).Select(pc => pc.IdTransactionDetailPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionDetailPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDetailPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionDetailPresets.ForEach(pc =>
                                {
                                    pc.IdProduct = idProduct;
                                    DaoFactories.Instance.TransactionDetailPresetDao.SaveOnlyTransactionDetailPreset(pc, db);
                                });
                                return newTransactionDetailPresets;
                            }

                        
							public List<OrderDetail> UpdateOrderDetailsForProductWithoutSavingNewItem(List<OrderDetail> newOrderDetails,long idProduct)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderDetailsForProductWithoutSavingNewItem(newOrderDetails,idProduct,db);
                                }
                            }

							public List<OrderDetail> UpdateOrderDetailsForProductWithoutSavingNewItem(List<OrderDetail> newOrderDetails,long idProduct, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderDetail, bool>> expressionBuilder = p => p.IdProduct == idProduct;
                                var oldOrderDetails = DaoFactories.Instance.OrderDetailDao.GetOrderDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderDetails.EntityList.Select(pc => pc.IdOrderDetail).Except(newOrderDetails.Where(pc => pc.IdOrderDetail.HasValue).Select(pc => pc.IdOrderDetail)).ToList();
                                var itemsTobeDeleted = oldOrderDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newOrderDetails;
                            }


                            public List<OrderDetail> UpdateOrderDetailsForProduct(List<OrderDetail> newOrderDetails,long idProduct)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderDetailsForProduct(newOrderDetails,idProduct,db);
                                }
                            }

                            public List<OrderDetail> UpdateOrderDetailsForProduct(List<OrderDetail> newOrderDetails,long idProduct, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderDetail, bool>> expressionBuilder = p => p.IdProduct == idProduct;
                                var oldOrderDetails = DaoFactories.Instance.OrderDetailDao.GetOrderDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderDetails.EntityList.Select(pc => pc.IdOrderDetail).Except(newOrderDetails.Where(pc => pc.IdOrderDetail.HasValue).Select(pc => pc.IdOrderDetail)).ToList();
                                var itemsTobeDeleted = oldOrderDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newOrderDetails.ForEach(pc =>
                                {
                                    pc.IdProduct = idProduct;
                                    DaoFactories.Instance.OrderDetailDao.SaveOnlyOrderDetail(pc, db);
                                });
                                return newOrderDetails;
                            }

                        
							public List<Product> UpdateProduct1ForProductWithoutSavingNewItem(List<Product> newProduct1,long idProduct)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateProduct1ForProductWithoutSavingNewItem(newProduct1,idProduct,db);
                                }
                            }

							public List<Product> UpdateProduct1ForProductWithoutSavingNewItem(List<Product> newProduct1,long idProduct, SubscriptionEntities  db)
                            {
                                Expression<Func<Product, bool>> expressionBuilder = p => p.IdParentProduct == idProduct;
                                var oldProduct1 = DaoFactories.Instance.ProductDao.GetProductCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldProduct1.EntityList.Select(pc => pc.IdProduct).Except(newProduct1.Where(pc => pc.IdProduct.HasValue).Select(pc => pc.IdProduct)).ToList();
                                var itemsTobeDeleted = oldProduct1.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdProduct)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newProduct1;
                            }


                            public List<Product> UpdateProduct1ForProduct(List<Product> newProduct1,long idProduct)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateProduct1ForProduct(newProduct1,idProduct,db);
                                }
                            }

                            public List<Product> UpdateProduct1ForProduct(List<Product> newProduct1,long idProduct, SubscriptionEntities  db)
                            {
                                Expression<Func<Product, bool>> expressionBuilder = p => p.IdParentProduct == idProduct;
                                var oldProduct1 = DaoFactories.Instance.ProductDao.GetProductCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldProduct1.EntityList.Select(pc => pc.IdProduct).Except(newProduct1.Where(pc => pc.IdProduct.HasValue).Select(pc => pc.IdProduct)).ToList();
                                var itemsTobeDeleted = oldProduct1.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdProduct)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newProduct1.ForEach(pc =>
                                {
                                    pc.IdParentProduct = idProduct;
                                    DaoFactories.Instance.ProductDao.SaveOnlyProduct(pc, db);
                                });
                                return newProduct1;
                            }

                        
							public List<TransactionDetail> UpdateTransactionDetailsForProductWithoutSavingNewItem(List<TransactionDetail> newTransactionDetails,long idProduct)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDetailsForProductWithoutSavingNewItem(newTransactionDetails,idProduct,db);
                                }
                            }

							public List<TransactionDetail> UpdateTransactionDetailsForProductWithoutSavingNewItem(List<TransactionDetail> newTransactionDetails,long idProduct, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDetail, bool>> expressionBuilder = p => p.IdProduct == idProduct;
                                var oldTransactionDetails = DaoFactories.Instance.TransactionDetailDao.GetTransactionDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDetails.EntityList.Select(pc => pc.IdTransactionDetail).Except(newTransactionDetails.Where(pc => pc.IdTransactionDetail.HasValue).Select(pc => pc.IdTransactionDetail)).ToList();
                                var itemsTobeDeleted = oldTransactionDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionDetails;
                            }


                            public List<TransactionDetail> UpdateTransactionDetailsForProduct(List<TransactionDetail> newTransactionDetails,long idProduct)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDetailsForProduct(newTransactionDetails,idProduct,db);
                                }
                            }

                            public List<TransactionDetail> UpdateTransactionDetailsForProduct(List<TransactionDetail> newTransactionDetails,long idProduct, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDetail, bool>> expressionBuilder = p => p.IdProduct == idProduct;
                                var oldTransactionDetails = DaoFactories.Instance.TransactionDetailDao.GetTransactionDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDetails.EntityList.Select(pc => pc.IdTransactionDetail).Except(newTransactionDetails.Where(pc => pc.IdTransactionDetail.HasValue).Select(pc => pc.IdTransactionDetail)).ToList();
                                var itemsTobeDeleted = oldTransactionDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionDetails.ForEach(pc =>
                                {
                                    pc.IdProduct = idProduct;
                                    DaoFactories.Instance.TransactionDetailDao.SaveOnlyTransactionDetail(pc, db);
                                });
                                return newTransactionDetails;
                            }

                        


    



		}
			public partial class ProductTypeDao :IProductTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public ProductTypeDao(){
			
			}

			public ProductTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<ProductType> GetAllProductTypes(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllProductTypes(db, shouldRemap);
                }
            }

            public List<ProductType> GetAllProductTypes(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapProductTypeList(db.ProductTypes.Where(p => p.IsDeactivated != true).ToList());
				
				return db.ProductTypes.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<ProductType> GetAllProductTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ProductType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ProductType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllProductTypesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<ProductType> GetAllProductTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<ProductType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ProductType, dynamic> orderExpression = null)
            {
				IQueryable<ProductType> query =  db.ProductTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<ProductType> baseListReturnType = new BaseListReturnType<ProductType>();

                IQueryable<ProductType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdProductType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<ProductType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapProductTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<ProductType> GetAllProductTypesWithProductsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ProductType, bool>> expression = null,bool shouldRemap = false, Func<ProductType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"Products"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<ProductType> GetAllProductTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ProductType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ProductType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllProductTypesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<ProductType> GetAllProductTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<ProductType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ProductType, dynamic> orderExpression = null)
            {
				IQueryable<ProductType> query =  db.ProductTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<ProductType> baseListReturnType = new BaseListReturnType<ProductType>();

                IQueryable<ProductType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdProductType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<ProductType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapProductTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<ProductType> GetAllProductTypesWithProductsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ProductType, bool>> expression = null,bool shouldRemap = false, Func<ProductType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Products"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<ProductType> GetAllProductTypesWithProductsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllProductTypeWitDetails(new List<string>(){"Products"},shouldRemap);
					}
				}
			

			public BaseListReturnType<ProductType> GetAllProductTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllProductTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<ProductType> GetAllProductTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<ProductType> query =  db.ProductTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<ProductType> baseListReturnType = new BaseListReturnType<ProductType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapProductTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public ProductType GetProductType(long idProductType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetProductType(idProductType, db,shouldRemap);
                }
            }
                        public ProductType GetProductType(long idProductType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapProductTypeSingle(db.ProductTypes.Where(p => p.IdProductType == idProductType && p.IsDeactivated != true).FirstOrDefault());

                return db.ProductTypes.Where(p => p.IdProductType == idProductType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public ProductType GetProductTypeCustom( Expression<Func<ProductType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetProductTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public ProductType GetProductTypeCustom( SubscriptionEntities db , Expression<Func<ProductType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<ProductType> query =  db.ProductTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapProductTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<ProductType> GetProductTypeCustomList( Expression<Func<ProductType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<ProductType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetProductTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<ProductType> GetProductTypeCustomList(  SubscriptionEntities db , Expression<Func<ProductType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<ProductType, dynamic> orderExpression = null)
			{
				IQueryable<ProductType> query =  db.ProductTypes;
                BaseListReturnType<ProductType> baseListReturnType = new BaseListReturnType<ProductType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapProductTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public ProductType GetProductTypeWithProductsDetails(long idProductType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetProductTypeWithDetails(idProductType,new List<string>(){"Products"},shouldRemap);
					}
				}

            //IdProductType -- Many


			


			public ProductType GetProductTypeWithDetails(long idProductType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetProductTypeWithDetails(idProductType, db,includes,shouldRemap);
                }
            }

            public ProductType GetProductTypeWithDetails(long idProductType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<ProductType> query =  db.ProductTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapProductTypeSingle(query
						.Where(p => p.IdProductType == idProductType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdProductType == idProductType && p.IsDeactivated != true).FirstOrDefault();
            }

            public ProductType GetProductTypeWitDetails(long idProductType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetProductTypeWitDetails(idProductType, db,shouldRemap);
                }
            }

            public ProductType GetProductTypeWitDetails(long idProductType, SubscriptionEntities db,bool shouldRemap = false)
            {
				ProductType _ProductType = db.ProductTypes

					.Include("Products")
								.Where(p => p.IdProductType == idProductType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapProductTypeSingle(_ProductType);

				return  _ProductType;
            }

            public List<ProductType> GetProductTypeListByIdList(List<long> productTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetProductTypeListByIdList(productTypeIds, db);
                }
            }
            public List<ProductType> GetProductTypeListByIdList(List<long> productTypeIds, SubscriptionEntities db)
            {
                return db.ProductTypes.Where(p => p.IsDeactivated != true && productTypeIds.Contains(p.IdProductType.Value)).ToList();
            }


            public void SaveProductType(ProductType productType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveProductType(productType, db);
                }
            }

            public void SaveProductType(ProductType productType, SubscriptionEntities db)
            {
				                
                if (productType.IdProductType.HasValue){
					var productTypeFromDb = db.ProductTypes.Where(p => p.IdProductType == productType.IdProductType).FirstOrDefault();
													productTypeFromDb.IsDeactivated = productType.IsDeactivated;
													productTypeFromDb.Description = productType.Description;
									}
                else{
                                        db.ProductTypes.Add(productType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyProductType(ProductType productType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyProductType(productType, db);
                }
            }

            public void SaveOnlyProductType(ProductType productType, SubscriptionEntities db)
            {
			                    if (productType.IdProductType.HasValue){
					var productTypeFromDb = db.ProductTypes.Where(p => p.IdProductType == productType.IdProductType).FirstOrDefault();
													productTypeFromDb.IsDeactivated = productType.IsDeactivated;
													productTypeFromDb.Description = productType.Description;
										 db.SaveChanges();

				}
                else{
					ProductType _productType = new ProductType();
																	_productType.IsDeactivated = productType.IsDeactivated;
													_productType.Description = productType.Description;
					

                    db.ProductTypes.Add(_productType);
					db.SaveChanges();
					productType.IdProductType =  _productType.IdProductType;
                    
                }
            }

            public void DeleteProductType(ProductType productType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteProductType(productType, db);
                }
            }

            public void DeleteProductType(ProductType productType, SubscriptionEntities db)
            {
								var productTypeFromDb = GetProductType(productType.IdProductType.Value,db);
				productTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyProductType(ProductType productType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyProductType(productType, db);
                }
            }

            public void DeletePermanentlyProductType(ProductType productType, SubscriptionEntities db)
            {
								var productTypeFromDb = GetProductType(productType.IdProductType.Value,db);
				
				db.ProductTypes.Remove(productTypeFromDb);
                db.SaveChanges();
            }


            
							public List<Product> UpdateProductsForProductTypeWithoutSavingNewItem(List<Product> newProducts,long idProductType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateProductsForProductTypeWithoutSavingNewItem(newProducts,idProductType,db);
                                }
                            }

							public List<Product> UpdateProductsForProductTypeWithoutSavingNewItem(List<Product> newProducts,long idProductType, SubscriptionEntities  db)
                            {
                                Expression<Func<Product, bool>> expressionBuilder = p => p.IdProductType == idProductType;
                                var oldProducts = DaoFactories.Instance.ProductDao.GetProductCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldProducts.EntityList.Select(pc => pc.IdProduct).Except(newProducts.Where(pc => pc.IdProduct.HasValue).Select(pc => pc.IdProduct)).ToList();
                                var itemsTobeDeleted = oldProducts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdProduct)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newProducts;
                            }


                            public List<Product> UpdateProductsForProductType(List<Product> newProducts,long idProductType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateProductsForProductType(newProducts,idProductType,db);
                                }
                            }

                            public List<Product> UpdateProductsForProductType(List<Product> newProducts,long idProductType, SubscriptionEntities  db)
                            {
                                Expression<Func<Product, bool>> expressionBuilder = p => p.IdProductType == idProductType;
                                var oldProducts = DaoFactories.Instance.ProductDao.GetProductCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldProducts.EntityList.Select(pc => pc.IdProduct).Except(newProducts.Where(pc => pc.IdProduct.HasValue).Select(pc => pc.IdProduct)).ToList();
                                var itemsTobeDeleted = oldProducts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdProduct)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newProducts.ForEach(pc =>
                                {
                                    pc.IdProductType = idProductType;
                                    DaoFactories.Instance.ProductDao.SaveOnlyProduct(pc, db);
                                });
                                return newProducts;
                            }

                        


    



		}
			public partial class ReceiptDao :IReceiptDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public ReceiptDao(){
			
			}

			public ReceiptDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Receipt> GetAllReceipts(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllReceipts(db, shouldRemap);
                }
            }

            public List<Receipt> GetAllReceipts(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapReceiptList(db.Receipts.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Receipts.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Receipt> GetAllReceiptsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Receipt, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Receipt, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllReceiptsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Receipt> GetAllReceiptsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Receipt, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Receipt, dynamic> orderExpression = null)
            {
				IQueryable<Receipt> query =  db.Receipts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Receipt> baseListReturnType = new BaseListReturnType<Receipt>();

                IQueryable<Receipt> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdReceipt" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Receipt, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapReceiptList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Receipt> GetAllReceiptsWithUserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Receipt, bool>> expression = null,bool shouldRemap = false, Func<Receipt, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllReceiptsByPage(sortingPagingInfo, db,expression,new List<string>(){"User"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Receipt> GetAllReceiptsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Receipt, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Receipt, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllReceiptsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Receipt> GetAllReceiptsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Receipt, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Receipt, dynamic> orderExpression = null)
            {
				IQueryable<Receipt> query =  db.Receipts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Receipt> baseListReturnType = new BaseListReturnType<Receipt>();

                IQueryable<Receipt> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdReceipt" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Receipt, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapReceiptList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Receipt> GetAllReceiptsWithUserDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Receipt, bool>> expression = null,bool shouldRemap = false, Func<Receipt, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllReceiptsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"User"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Receipt> GetAllReceiptsWithUserDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllReceiptWitDetails(new List<string>(){"User"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Receipt> GetAllReceiptWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllReceiptWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Receipt> GetAllReceiptWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Receipt> query =  db.Receipts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Receipt> baseListReturnType = new BaseListReturnType<Receipt>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapReceiptList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Receipt GetReceipt(long idReceipt,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetReceipt(idReceipt, db,shouldRemap);
                }
            }
                        public Receipt GetReceipt(long idReceipt, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapReceiptSingle(db.Receipts.Where(p => p.IdReceipt == idReceipt && p.IsDeactivated != true).FirstOrDefault());

                return db.Receipts.Where(p => p.IdReceipt == idReceipt && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Receipt GetReceiptCustom( Expression<Func<Receipt, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetReceiptCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Receipt GetReceiptCustom( SubscriptionEntities db , Expression<Func<Receipt, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Receipt> query =  db.Receipts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapReceiptSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Receipt> GetReceiptCustomList( Expression<Func<Receipt, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Receipt, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetReceiptCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Receipt> GetReceiptCustomList(  SubscriptionEntities db , Expression<Func<Receipt, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Receipt, dynamic> orderExpression = null)
			{
				IQueryable<Receipt> query =  db.Receipts;
                BaseListReturnType<Receipt> baseListReturnType = new BaseListReturnType<Receipt>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapReceiptList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Receipt GetReceiptWithUserDetails(long idReceipt,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetReceiptWithDetails(idReceipt,new List<string>(){"User"},shouldRemap);
					}
				}

            //IdUser -- ZeroOrOne

                public BaseListReturnType<Receipt> GetAllReceiptListByUser(long idUser)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllReceiptListByUser(idUser, db);
                    }
                }
                public BaseListReturnType<Receipt> GetAllReceiptListByUser(long idUser, SubscriptionEntities db)
                {
                    Expression<Func<Receipt, bool>> expression = property=> property.IdUser == idUser && property.IsDeactivated !=true;
                    return GetReceiptCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Receipt> GetAllReceiptListByUserByPage(long idUser, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllReceiptListByUserByPage(idUser, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Receipt> GetAllReceiptListByUserByPage(long idUser, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Receipt, bool>> expression = property => property.IdUser == idUser && property.IsDeactivated !=true;
                    return GetAllReceiptsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public Receipt GetReceiptWithDetails(long idReceipt, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetReceiptWithDetails(idReceipt, db,includes,shouldRemap);
                }
            }

            public Receipt GetReceiptWithDetails(long idReceipt, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Receipt> query =  db.Receipts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapReceiptSingle(query
						.Where(p => p.IdReceipt == idReceipt && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdReceipt == idReceipt && p.IsDeactivated != true).FirstOrDefault();
            }

            public Receipt GetReceiptWitDetails(long idReceipt,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetReceiptWitDetails(idReceipt, db,shouldRemap);
                }
            }

            public Receipt GetReceiptWitDetails(long idReceipt, SubscriptionEntities db,bool shouldRemap = false)
            {
				Receipt _Receipt = db.Receipts

					.Include("User")
								.Where(p => p.IdReceipt == idReceipt && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapReceiptSingle(_Receipt);

				return  _Receipt;
            }

            public List<Receipt> GetReceiptListByIdList(List<long> receiptIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetReceiptListByIdList(receiptIds, db);
                }
            }
            public List<Receipt> GetReceiptListByIdList(List<long> receiptIds, SubscriptionEntities db)
            {
                return db.Receipts.Where(p => p.IsDeactivated != true && receiptIds.Contains(p.IdReceipt.Value)).ToList();
            }


            public void SaveReceipt(Receipt receipt)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveReceipt(receipt, db);
                }
            }

            public void SaveReceipt(Receipt receipt, SubscriptionEntities db)
            {
									if (receipt.User != null) 
						DaoFactories.Instance.UserDao.SaveUser(receipt.User, db);
				                
                if (receipt.IdReceipt.HasValue){
					var receiptFromDb = db.Receipts.Where(p => p.IdReceipt == receipt.IdReceipt).FirstOrDefault();
													receiptFromDb.Number = receipt.Number;
													receiptFromDb.IsDeactivated = receipt.IsDeactivated;
													receiptFromDb.IdUser = receipt.IdUser;
									}
                else{
                                                //fix for saving without duplicating items in db
                              receipt.User = null;
                                                db.Receipts.Add(receipt);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyReceipt(Receipt receipt)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyReceipt(receipt, db);
                }
            }

            public void SaveOnlyReceipt(Receipt receipt, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // receipt.User = null;
                                            if (receipt.IdReceipt.HasValue){
					var receiptFromDb = db.Receipts.Where(p => p.IdReceipt == receipt.IdReceipt).FirstOrDefault();
													receiptFromDb.Number = receipt.Number;
													receiptFromDb.IsDeactivated = receipt.IsDeactivated;
													receiptFromDb.IdUser = receipt.IdUser;
										 db.SaveChanges();

				}
                else{
					Receipt _receipt = new Receipt();
																	_receipt.Number = receipt.Number;
													_receipt.IsDeactivated = receipt.IsDeactivated;
													_receipt.IdUser = receipt.IdUser;
					

                    db.Receipts.Add(_receipt);
					db.SaveChanges();
					receipt.IdReceipt =  _receipt.IdReceipt;
                    
                }
            }

            public void DeleteReceipt(Receipt receipt)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteReceipt(receipt, db);
                }
            }

            public void DeleteReceipt(Receipt receipt, SubscriptionEntities db)
            {
								var receiptFromDb = GetReceipt(receipt.IdReceipt.Value,db);
				receiptFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyReceipt(Receipt receipt)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyReceipt(receipt, db);
                }
            }

            public void DeletePermanentlyReceipt(Receipt receipt, SubscriptionEntities db)
            {
								var receiptFromDb = GetReceipt(receipt.IdReceipt.Value,db);
				
				db.Receipts.Remove(receiptFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class RequestDao :IRequestDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public RequestDao(){
			
			}

			public RequestDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Request> GetAllRequests(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequests(db, shouldRemap);
                }
            }

            public List<Request> GetAllRequests(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapRequestList(db.Requests.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Requests.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Request> GetAllRequestsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Request, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Request> GetAllRequestsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Request, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Request, dynamic> orderExpression = null)
            {
				IQueryable<Request> query =  db.Requests;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Request> baseListReturnType = new BaseListReturnType<Request>();

                IQueryable<Request> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdRequest" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Request, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Remarks.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Remarks.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.JsonContent.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Request> GetAllRequestsWithRequestTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null,bool shouldRemap = false, Func<Request, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestsByPage(sortingPagingInfo, db,expression,new List<string>(){"RequestType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Request> GetAllRequestsWithWorkflowStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null,bool shouldRemap = false, Func<Request, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestsByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Request> GetAllRequestsWithRequestMessageQueuesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null,bool shouldRemap = false, Func<Request, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestsByPage(sortingPagingInfo, db,expression,new List<string>(){"RequestMessageQueues"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Request> GetAllRequestsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Request, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Request> GetAllRequestsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Request, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Request, dynamic> orderExpression = null)
            {
				IQueryable<Request> query =  db.Requests;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Request> baseListReturnType = new BaseListReturnType<Request>();

                IQueryable<Request> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdRequest" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Request, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Request> GetAllRequestsWithRequestTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null,bool shouldRemap = false, Func<Request, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"RequestType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Request> GetAllRequestsWithWorkflowStateDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null,bool shouldRemap = false, Func<Request, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Request> GetAllRequestsWithRequestMessageQueuesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null,bool shouldRemap = false, Func<Request, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"RequestMessageQueues"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Request> GetAllRequestsWithRequestTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestWitDetails(new List<string>(){"RequestType"},shouldRemap);
					}
				}
							public BaseListReturnType<Request> GetAllRequestsWithWorkflowStateDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestWitDetails(new List<string>(){"WorkflowState"},shouldRemap);
					}
				}
							public BaseListReturnType<Request> GetAllRequestsWithRequestMessageQueuesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestWitDetails(new List<string>(){"RequestMessageQueues"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Request> GetAllRequestWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Request> GetAllRequestWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Request> query =  db.Requests;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Request> baseListReturnType = new BaseListReturnType<Request>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Request GetRequest(long idRequest,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequest(idRequest, db,shouldRemap);
                }
            }
                        public Request GetRequest(long idRequest, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapRequestSingle(db.Requests.Where(p => p.IdRequest == idRequest && p.IsDeactivated != true).FirstOrDefault());

                return db.Requests.Where(p => p.IdRequest == idRequest && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Request GetRequestCustom( Expression<Func<Request, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetRequestCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Request GetRequestCustom( SubscriptionEntities db , Expression<Func<Request, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Request> query =  db.Requests;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapRequestSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Request> GetRequestCustomList( Expression<Func<Request, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Request, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetRequestCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Request> GetRequestCustomList(  SubscriptionEntities db , Expression<Func<Request, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Request, dynamic> orderExpression = null)
			{
				IQueryable<Request> query =  db.Requests;
                BaseListReturnType<Request> baseListReturnType = new BaseListReturnType<Request>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Request GetRequestWithRequestTypeDetails(long idRequest,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRequestWithDetails(idRequest,new List<string>(){"RequestType"},shouldRemap);
					}
				}

            //IdRequestType -- ZeroOrOne

                public BaseListReturnType<Request> GetAllRequestListByRequestType(long idRequestType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestListByRequestType(idRequestType, db);
                    }
                }
                public BaseListReturnType<Request> GetAllRequestListByRequestType(long idRequestType, SubscriptionEntities db)
                {
                    Expression<Func<Request, bool>> expression = property=> property.IdRequestType == idRequestType && property.IsDeactivated !=true;
                    return GetRequestCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Request> GetAllRequestListByRequestTypeByPage(long idRequestType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestListByRequestTypeByPage(idRequestType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Request> GetAllRequestListByRequestTypeByPage(long idRequestType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Request, bool>> expression = property => property.IdRequestType == idRequestType && property.IsDeactivated !=true;
                    return GetAllRequestsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Request GetRequestWithWorkflowStateDetails(long idRequest,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRequestWithDetails(idRequest,new List<string>(){"WorkflowState"},shouldRemap);
					}
				}

            //IdWorkflowState -- ZeroOrOne

                public BaseListReturnType<Request> GetAllRequestListByWorkflowState(long idWorkflowState)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestListByWorkflowState(idWorkflowState, db);
                    }
                }
                public BaseListReturnType<Request> GetAllRequestListByWorkflowState(long idWorkflowState, SubscriptionEntities db)
                {
                    Expression<Func<Request, bool>> expression = property=> property.IdWorkflowState == idWorkflowState && property.IsDeactivated !=true;
                    return GetRequestCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Request> GetAllRequestListByWorkflowStateByPage(long idWorkflowState, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestListByWorkflowStateByPage(idWorkflowState, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Request> GetAllRequestListByWorkflowStateByPage(long idWorkflowState, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Request, bool>> expression = property => property.IdWorkflowState == idWorkflowState && property.IsDeactivated !=true;
                    return GetAllRequestsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Request GetRequestWithRequestMessageQueuesDetails(long idRequest,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRequestWithDetails(idRequest,new List<string>(){"RequestMessageQueues"},shouldRemap);
					}
				}

            //IdRequest -- Many


			


			public Request GetRequestWithDetails(long idRequest, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestWithDetails(idRequest, db,includes,shouldRemap);
                }
            }

            public Request GetRequestWithDetails(long idRequest, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Request> query =  db.Requests;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapRequestSingle(query
						.Where(p => p.IdRequest == idRequest && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdRequest == idRequest && p.IsDeactivated != true).FirstOrDefault();
            }

            public Request GetRequestWitDetails(long idRequest,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestWitDetails(idRequest, db,shouldRemap);
                }
            }

            public Request GetRequestWitDetails(long idRequest, SubscriptionEntities db,bool shouldRemap = false)
            {
				Request _Request = db.Requests

					.Include("RequestType")
					.Include("WorkflowState")
					.Include("RequestMessageQueues")
								.Where(p => p.IdRequest == idRequest && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapRequestSingle(_Request);

				return  _Request;
            }

            public List<Request> GetRequestListByIdList(List<long> requestIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestListByIdList(requestIds, db);
                }
            }
            public List<Request> GetRequestListByIdList(List<long> requestIds, SubscriptionEntities db)
            {
                return db.Requests.Where(p => p.IsDeactivated != true && requestIds.Contains(p.IdRequest.Value)).ToList();
            }


            public void SaveRequest(Request request)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveRequest(request, db);
                }
            }

            public void SaveRequest(Request request, SubscriptionEntities db)
            {
									if (request.RequestType != null) 
						DaoFactories.Instance.RequestTypeDao.SaveRequestType(request.RequestType, db);
									if (request.WorkflowState != null) 
						DaoFactories.Instance.WorkflowStateDao.SaveWorkflowState(request.WorkflowState, db);
				                
                if (request.IdRequest.HasValue){
					var requestFromDb = db.Requests.Where(p => p.IdRequest == request.IdRequest).FirstOrDefault();
													requestFromDb.IdRequestType = request.IdRequestType;
													requestFromDb.IdRequestAuthor = request.IdRequestAuthor;
													requestFromDb.RequestDate = request.RequestDate;
													requestFromDb.IdWorkflowState = request.IdWorkflowState;
													requestFromDb.IdUserAssignedTo = request.IdUserAssignedTo;
													requestFromDb.Remarks = request.Remarks;
													requestFromDb.IsDeactivated = request.IsDeactivated;
													requestFromDb.JsonContent = request.JsonContent;
									}
                else{
                                                //fix for saving without duplicating items in db
                              request.RequestType = null;
                                                        //fix for saving without duplicating items in db
                              request.WorkflowState = null;
                                                db.Requests.Add(request);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyRequest(Request request)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyRequest(request, db);
                }
            }

            public void SaveOnlyRequest(Request request, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // request.RequestType = null;
                                                        //fix for saving without duplicating items in db
                             // request.WorkflowState = null;
                                            if (request.IdRequest.HasValue){
					var requestFromDb = db.Requests.Where(p => p.IdRequest == request.IdRequest).FirstOrDefault();
													requestFromDb.IdRequestType = request.IdRequestType;
													requestFromDb.IdRequestAuthor = request.IdRequestAuthor;
													requestFromDb.RequestDate = request.RequestDate;
													requestFromDb.IdWorkflowState = request.IdWorkflowState;
													requestFromDb.IdUserAssignedTo = request.IdUserAssignedTo;
													requestFromDb.Remarks = request.Remarks;
													requestFromDb.IsDeactivated = request.IsDeactivated;
													requestFromDb.JsonContent = request.JsonContent;
										 db.SaveChanges();

				}
                else{
					Request _request = new Request();
																	_request.IdRequestType = request.IdRequestType;
													_request.IdRequestAuthor = request.IdRequestAuthor;
													_request.RequestDate = request.RequestDate;
													_request.IdWorkflowState = request.IdWorkflowState;
													_request.IdUserAssignedTo = request.IdUserAssignedTo;
													_request.Remarks = request.Remarks;
													_request.IsDeactivated = request.IsDeactivated;
													_request.JsonContent = request.JsonContent;
					

                    db.Requests.Add(_request);
					db.SaveChanges();
					request.IdRequest =  _request.IdRequest;
                    
                }
            }

            public void DeleteRequest(Request request)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteRequest(request, db);
                }
            }

            public void DeleteRequest(Request request, SubscriptionEntities db)
            {
								var requestFromDb = GetRequest(request.IdRequest.Value,db);
				requestFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyRequest(Request request)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyRequest(request, db);
                }
            }

            public void DeletePermanentlyRequest(Request request, SubscriptionEntities db)
            {
								var requestFromDb = GetRequest(request.IdRequest.Value,db);
				
				db.Requests.Remove(requestFromDb);
                db.SaveChanges();
            }


            
							public List<RequestMessageQueue> UpdateRequestMessageQueuesForRequestWithoutSavingNewItem(List<RequestMessageQueue> newRequestMessageQueues,long idRequest)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestMessageQueuesForRequestWithoutSavingNewItem(newRequestMessageQueues,idRequest,db);
                                }
                            }

							public List<RequestMessageQueue> UpdateRequestMessageQueuesForRequestWithoutSavingNewItem(List<RequestMessageQueue> newRequestMessageQueues,long idRequest, SubscriptionEntities  db)
                            {
                                Expression<Func<RequestMessageQueue, bool>> expressionBuilder = p => p.IdRequest == idRequest;
                                var oldRequestMessageQueues = DaoFactories.Instance.RequestMessageQueueDao.GetRequestMessageQueueCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequestMessageQueues.EntityList.Select(pc => pc.IdRequestMessageQueue).Except(newRequestMessageQueues.Where(pc => pc.IdRequestMessageQueue.HasValue).Select(pc => pc.IdRequestMessageQueue)).ToList();
                                var itemsTobeDeleted = oldRequestMessageQueues.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequestMessageQueue)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newRequestMessageQueues;
                            }


                            public List<RequestMessageQueue> UpdateRequestMessageQueuesForRequest(List<RequestMessageQueue> newRequestMessageQueues,long idRequest)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestMessageQueuesForRequest(newRequestMessageQueues,idRequest,db);
                                }
                            }

                            public List<RequestMessageQueue> UpdateRequestMessageQueuesForRequest(List<RequestMessageQueue> newRequestMessageQueues,long idRequest, SubscriptionEntities  db)
                            {
                                Expression<Func<RequestMessageQueue, bool>> expressionBuilder = p => p.IdRequest == idRequest;
                                var oldRequestMessageQueues = DaoFactories.Instance.RequestMessageQueueDao.GetRequestMessageQueueCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequestMessageQueues.EntityList.Select(pc => pc.IdRequestMessageQueue).Except(newRequestMessageQueues.Where(pc => pc.IdRequestMessageQueue.HasValue).Select(pc => pc.IdRequestMessageQueue)).ToList();
                                var itemsTobeDeleted = oldRequestMessageQueues.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequestMessageQueue)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newRequestMessageQueues.ForEach(pc =>
                                {
                                    pc.IdRequest = idRequest;
                                    DaoFactories.Instance.RequestMessageQueueDao.SaveOnlyRequestMessageQueue(pc, db);
                                });
                                return newRequestMessageQueues;
                            }

                        


    



		}
			public partial class RequestMessageQueueDao :IRequestMessageQueueDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public RequestMessageQueueDao(){
			
			}

			public RequestMessageQueueDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<RequestMessageQueue> GetAllRequestMessageQueues(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestMessageQueues(db, shouldRemap);
                }
            }

            public List<RequestMessageQueue> GetAllRequestMessageQueues(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapRequestMessageQueueList(db.RequestMessageQueues.Where(p => p.IsDeactivated != true).ToList());
				
				return db.RequestMessageQueues.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueuesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestMessageQueue, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<RequestMessageQueue, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestMessageQueuesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueuesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<RequestMessageQueue, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<RequestMessageQueue, dynamic> orderExpression = null)
            {
				IQueryable<RequestMessageQueue> query =  db.RequestMessageQueues;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<RequestMessageQueue> baseListReturnType = new BaseListReturnType<RequestMessageQueue>();

                IQueryable<RequestMessageQueue> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdRequestMessageQueue" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<RequestMessageQueue, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Message.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Message.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestMessageQueueList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueuesWithRequestDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestMessageQueue, bool>> expression = null,bool shouldRemap = false, Func<RequestMessageQueue, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestMessageQueuesByPage(sortingPagingInfo, db,expression,new List<string>(){"Request"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueuesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestMessageQueue, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<RequestMessageQueue, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestMessageQueuesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueuesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<RequestMessageQueue, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<RequestMessageQueue, dynamic> orderExpression = null)
            {
				IQueryable<RequestMessageQueue> query =  db.RequestMessageQueues;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<RequestMessageQueue> baseListReturnType = new BaseListReturnType<RequestMessageQueue>();

                IQueryable<RequestMessageQueue> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdRequestMessageQueue" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<RequestMessageQueue, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestMessageQueueList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueuesWithRequestDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestMessageQueue, bool>> expression = null,bool shouldRemap = false, Func<RequestMessageQueue, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestMessageQueuesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Request"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueuesWithRequestDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestMessageQueueWitDetails(new List<string>(){"Request"},shouldRemap);
					}
				}
			

			public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueueWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestMessageQueueWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueueWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<RequestMessageQueue> query =  db.RequestMessageQueues;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<RequestMessageQueue> baseListReturnType = new BaseListReturnType<RequestMessageQueue>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestMessageQueueList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public RequestMessageQueue GetRequestMessageQueue(long idRequestMessageQueue,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestMessageQueue(idRequestMessageQueue, db,shouldRemap);
                }
            }
                        public RequestMessageQueue GetRequestMessageQueue(long idRequestMessageQueue, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapRequestMessageQueueSingle(db.RequestMessageQueues.Where(p => p.IdRequestMessageQueue == idRequestMessageQueue && p.IsDeactivated != true).FirstOrDefault());

                return db.RequestMessageQueues.Where(p => p.IdRequestMessageQueue == idRequestMessageQueue && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public RequestMessageQueue GetRequestMessageQueueCustom( Expression<Func<RequestMessageQueue, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetRequestMessageQueueCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public RequestMessageQueue GetRequestMessageQueueCustom( SubscriptionEntities db , Expression<Func<RequestMessageQueue, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<RequestMessageQueue> query =  db.RequestMessageQueues;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapRequestMessageQueueSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<RequestMessageQueue> GetRequestMessageQueueCustomList( Expression<Func<RequestMessageQueue, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<RequestMessageQueue, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetRequestMessageQueueCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<RequestMessageQueue> GetRequestMessageQueueCustomList(  SubscriptionEntities db , Expression<Func<RequestMessageQueue, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<RequestMessageQueue, dynamic> orderExpression = null)
			{
				IQueryable<RequestMessageQueue> query =  db.RequestMessageQueues;
                BaseListReturnType<RequestMessageQueue> baseListReturnType = new BaseListReturnType<RequestMessageQueue>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestMessageQueueList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public RequestMessageQueue GetRequestMessageQueueWithRequestDetails(long idRequestMessageQueue,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRequestMessageQueueWithDetails(idRequestMessageQueue,new List<string>(){"Request"},shouldRemap);
					}
				}

            //IdRequest -- ZeroOrOne

                public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueueListByRequest(long idRequest)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestMessageQueueListByRequest(idRequest, db);
                    }
                }
                public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueueListByRequest(long idRequest, SubscriptionEntities db)
                {
                    Expression<Func<RequestMessageQueue, bool>> expression = property=> property.IdRequest == idRequest && property.IsDeactivated !=true;
                    return GetRequestMessageQueueCustomList(db, expression, null, true);
                }
                public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueueListByRequestByPage(long idRequest, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestMessageQueueListByRequestByPage(idRequest, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueueListByRequestByPage(long idRequest, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<RequestMessageQueue, bool>> expression = property => property.IdRequest == idRequest && property.IsDeactivated !=true;
                    return GetAllRequestMessageQueuesByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public RequestMessageQueue GetRequestMessageQueueWithDetails(long idRequestMessageQueue, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestMessageQueueWithDetails(idRequestMessageQueue, db,includes,shouldRemap);
                }
            }

            public RequestMessageQueue GetRequestMessageQueueWithDetails(long idRequestMessageQueue, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<RequestMessageQueue> query =  db.RequestMessageQueues;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapRequestMessageQueueSingle(query
						.Where(p => p.IdRequestMessageQueue == idRequestMessageQueue && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdRequestMessageQueue == idRequestMessageQueue && p.IsDeactivated != true).FirstOrDefault();
            }

            public RequestMessageQueue GetRequestMessageQueueWitDetails(long idRequestMessageQueue,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestMessageQueueWitDetails(idRequestMessageQueue, db,shouldRemap);
                }
            }

            public RequestMessageQueue GetRequestMessageQueueWitDetails(long idRequestMessageQueue, SubscriptionEntities db,bool shouldRemap = false)
            {
				RequestMessageQueue _RequestMessageQueue = db.RequestMessageQueues

					.Include("Request")
								.Where(p => p.IdRequestMessageQueue == idRequestMessageQueue && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapRequestMessageQueueSingle(_RequestMessageQueue);

				return  _RequestMessageQueue;
            }

            public List<RequestMessageQueue> GetRequestMessageQueueListByIdList(List<long> requestMessageQueueIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestMessageQueueListByIdList(requestMessageQueueIds, db);
                }
            }
            public List<RequestMessageQueue> GetRequestMessageQueueListByIdList(List<long> requestMessageQueueIds, SubscriptionEntities db)
            {
                return db.RequestMessageQueues.Where(p => p.IsDeactivated != true && requestMessageQueueIds.Contains(p.IdRequestMessageQueue.Value)).ToList();
            }


            public void SaveRequestMessageQueue(RequestMessageQueue requestMessageQueue)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveRequestMessageQueue(requestMessageQueue, db);
                }
            }

            public void SaveRequestMessageQueue(RequestMessageQueue requestMessageQueue, SubscriptionEntities db)
            {
									if (requestMessageQueue.Request != null) 
						DaoFactories.Instance.RequestDao.SaveRequest(requestMessageQueue.Request, db);
				                
                if (requestMessageQueue.IdRequestMessageQueue.HasValue){
					var requestMessageQueueFromDb = db.RequestMessageQueues.Where(p => p.IdRequestMessageQueue == requestMessageQueue.IdRequestMessageQueue).FirstOrDefault();
													requestMessageQueueFromDb.IsDeactivated = requestMessageQueue.IsDeactivated;
													requestMessageQueueFromDb.Message = requestMessageQueue.Message;
													requestMessageQueueFromDb.IdRequest = requestMessageQueue.IdRequest;
													requestMessageQueueFromDb.IdUserReceiver = requestMessageQueue.IdUserReceiver;
													requestMessageQueueFromDb.DateCreated = requestMessageQueue.DateCreated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              requestMessageQueue.Request = null;
                                                db.RequestMessageQueues.Add(requestMessageQueue);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyRequestMessageQueue(RequestMessageQueue requestMessageQueue)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyRequestMessageQueue(requestMessageQueue, db);
                }
            }

            public void SaveOnlyRequestMessageQueue(RequestMessageQueue requestMessageQueue, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // requestMessageQueue.Request = null;
                                            if (requestMessageQueue.IdRequestMessageQueue.HasValue){
					var requestMessageQueueFromDb = db.RequestMessageQueues.Where(p => p.IdRequestMessageQueue == requestMessageQueue.IdRequestMessageQueue).FirstOrDefault();
													requestMessageQueueFromDb.IsDeactivated = requestMessageQueue.IsDeactivated;
													requestMessageQueueFromDb.Message = requestMessageQueue.Message;
													requestMessageQueueFromDb.IdRequest = requestMessageQueue.IdRequest;
													requestMessageQueueFromDb.IdUserReceiver = requestMessageQueue.IdUserReceiver;
													requestMessageQueueFromDb.DateCreated = requestMessageQueue.DateCreated;
										 db.SaveChanges();

				}
                else{
					RequestMessageQueue _requestMessageQueue = new RequestMessageQueue();
																	_requestMessageQueue.IsDeactivated = requestMessageQueue.IsDeactivated;
													_requestMessageQueue.Message = requestMessageQueue.Message;
													_requestMessageQueue.IdRequest = requestMessageQueue.IdRequest;
													_requestMessageQueue.IdUserReceiver = requestMessageQueue.IdUserReceiver;
													_requestMessageQueue.DateCreated = requestMessageQueue.DateCreated;
					

                    db.RequestMessageQueues.Add(_requestMessageQueue);
					db.SaveChanges();
					requestMessageQueue.IdRequestMessageQueue =  _requestMessageQueue.IdRequestMessageQueue;
                    
                }
            }

            public void DeleteRequestMessageQueue(RequestMessageQueue requestMessageQueue)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteRequestMessageQueue(requestMessageQueue, db);
                }
            }

            public void DeleteRequestMessageQueue(RequestMessageQueue requestMessageQueue, SubscriptionEntities db)
            {
								var requestMessageQueueFromDb = GetRequestMessageQueue(requestMessageQueue.IdRequestMessageQueue.Value,db);
				requestMessageQueueFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyRequestMessageQueue(RequestMessageQueue requestMessageQueue)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyRequestMessageQueue(requestMessageQueue, db);
                }
            }

            public void DeletePermanentlyRequestMessageQueue(RequestMessageQueue requestMessageQueue, SubscriptionEntities db)
            {
								var requestMessageQueueFromDb = GetRequestMessageQueue(requestMessageQueue.IdRequestMessageQueue.Value,db);
				
				db.RequestMessageQueues.Remove(requestMessageQueueFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class RequestTypeDao :IRequestTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public RequestTypeDao(){
			
			}

			public RequestTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<RequestType> GetAllRequestTypes(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestTypes(db, shouldRemap);
                }
            }

            public List<RequestType> GetAllRequestTypes(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapRequestTypeList(db.RequestTypes.Where(p => p.IsDeactivated != true).ToList());
				
				return db.RequestTypes.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<RequestType> GetAllRequestTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<RequestType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestTypesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<RequestType> GetAllRequestTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<RequestType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<RequestType, dynamic> orderExpression = null)
            {
				IQueryable<RequestType> query =  db.RequestTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<RequestType> baseListReturnType = new BaseListReturnType<RequestType>();

                IQueryable<RequestType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdRequestType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<RequestType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<RequestType> GetAllRequestTypesWithRequestsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null,bool shouldRemap = false, Func<RequestType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"Requests"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<RequestType> GetAllRequestTypesWithWorkflowDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null,bool shouldRemap = false, Func<RequestType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<RequestType> GetAllRequestTypesWithRequestType_UserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null,bool shouldRemap = false, Func<RequestType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"RequestType_User"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<RequestType> GetAllRequestTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<RequestType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestTypesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<RequestType> GetAllRequestTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<RequestType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<RequestType, dynamic> orderExpression = null)
            {
				IQueryable<RequestType> query =  db.RequestTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<RequestType> baseListReturnType = new BaseListReturnType<RequestType>();

                IQueryable<RequestType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdRequestType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<RequestType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<RequestType> GetAllRequestTypesWithRequestsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null,bool shouldRemap = false, Func<RequestType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Requests"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<RequestType> GetAllRequestTypesWithWorkflowDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null,bool shouldRemap = false, Func<RequestType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<RequestType> GetAllRequestTypesWithRequestType_UserDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null,bool shouldRemap = false, Func<RequestType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"RequestType_User"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<RequestType> GetAllRequestTypesWithRequestsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestTypeWitDetails(new List<string>(){"Requests"},shouldRemap);
					}
				}
							public BaseListReturnType<RequestType> GetAllRequestTypesWithWorkflowDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestTypeWitDetails(new List<string>(){"Workflow"},shouldRemap);
					}
				}
							public BaseListReturnType<RequestType> GetAllRequestTypesWithRequestType_UserDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestTypeWitDetails(new List<string>(){"RequestType_User"},shouldRemap);
					}
				}
			

			public BaseListReturnType<RequestType> GetAllRequestTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<RequestType> GetAllRequestTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<RequestType> query =  db.RequestTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<RequestType> baseListReturnType = new BaseListReturnType<RequestType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public RequestType GetRequestType(long idRequestType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestType(idRequestType, db,shouldRemap);
                }
            }
                        public RequestType GetRequestType(long idRequestType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapRequestTypeSingle(db.RequestTypes.Where(p => p.IdRequestType == idRequestType && p.IsDeactivated != true).FirstOrDefault());

                return db.RequestTypes.Where(p => p.IdRequestType == idRequestType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public RequestType GetRequestTypeCustom( Expression<Func<RequestType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetRequestTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public RequestType GetRequestTypeCustom( SubscriptionEntities db , Expression<Func<RequestType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<RequestType> query =  db.RequestTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapRequestTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<RequestType> GetRequestTypeCustomList( Expression<Func<RequestType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<RequestType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetRequestTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<RequestType> GetRequestTypeCustomList(  SubscriptionEntities db , Expression<Func<RequestType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<RequestType, dynamic> orderExpression = null)
			{
				IQueryable<RequestType> query =  db.RequestTypes;
                BaseListReturnType<RequestType> baseListReturnType = new BaseListReturnType<RequestType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public RequestType GetRequestTypeWithRequestsDetails(long idRequestType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRequestTypeWithDetails(idRequestType,new List<string>(){"Requests"},shouldRemap);
					}
				}

            //IdRequestType -- Many


							public RequestType GetRequestTypeWithWorkflowDetails(long idRequestType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRequestTypeWithDetails(idRequestType,new List<string>(){"Workflow"},shouldRemap);
					}
				}

            //IdWorkflow -- ZeroOrOne

                public BaseListReturnType<RequestType> GetAllRequestTypeListByWorkflow(long idWorkflow)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestTypeListByWorkflow(idWorkflow, db);
                    }
                }
                public BaseListReturnType<RequestType> GetAllRequestTypeListByWorkflow(long idWorkflow, SubscriptionEntities db)
                {
                    Expression<Func<RequestType, bool>> expression = property=> property.IdWorkflow == idWorkflow && property.IsDeactivated !=true;
                    return GetRequestTypeCustomList(db, expression, null, true);
                }
                public BaseListReturnType<RequestType> GetAllRequestTypeListByWorkflowByPage(long idWorkflow, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestTypeListByWorkflowByPage(idWorkflow, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<RequestType> GetAllRequestTypeListByWorkflowByPage(long idWorkflow, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<RequestType, bool>> expression = property => property.IdWorkflow == idWorkflow && property.IsDeactivated !=true;
                    return GetAllRequestTypesByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public RequestType GetRequestTypeWithRequestType_UserDetails(long idRequestType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRequestTypeWithDetails(idRequestType,new List<string>(){"RequestType_User"},shouldRemap);
					}
				}

            //IdRequestType -- Many


			


			public RequestType GetRequestTypeWithDetails(long idRequestType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestTypeWithDetails(idRequestType, db,includes,shouldRemap);
                }
            }

            public RequestType GetRequestTypeWithDetails(long idRequestType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<RequestType> query =  db.RequestTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapRequestTypeSingle(query
						.Where(p => p.IdRequestType == idRequestType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdRequestType == idRequestType && p.IsDeactivated != true).FirstOrDefault();
            }

            public RequestType GetRequestTypeWitDetails(long idRequestType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestTypeWitDetails(idRequestType, db,shouldRemap);
                }
            }

            public RequestType GetRequestTypeWitDetails(long idRequestType, SubscriptionEntities db,bool shouldRemap = false)
            {
				RequestType _RequestType = db.RequestTypes

					.Include("Requests")
					.Include("Workflow")
					.Include("RequestType_User")
								.Where(p => p.IdRequestType == idRequestType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapRequestTypeSingle(_RequestType);

				return  _RequestType;
            }

            public List<RequestType> GetRequestTypeListByIdList(List<long> requestTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestTypeListByIdList(requestTypeIds, db);
                }
            }
            public List<RequestType> GetRequestTypeListByIdList(List<long> requestTypeIds, SubscriptionEntities db)
            {
                return db.RequestTypes.Where(p => p.IsDeactivated != true && requestTypeIds.Contains(p.IdRequestType.Value)).ToList();
            }


            public void SaveRequestType(RequestType requestType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveRequestType(requestType, db);
                }
            }

            public void SaveRequestType(RequestType requestType, SubscriptionEntities db)
            {
									if (requestType.Workflow != null) 
						DaoFactories.Instance.WorkflowDao.SaveWorkflow(requestType.Workflow, db);
				                
                if (requestType.IdRequestType.HasValue){
					var requestTypeFromDb = db.RequestTypes.Where(p => p.IdRequestType == requestType.IdRequestType).FirstOrDefault();
													requestTypeFromDb.Description = requestType.Description;
													requestTypeFromDb.IsDeactivated = requestType.IsDeactivated;
													requestTypeFromDb.IdWorkflow = requestType.IdWorkflow;
									}
                else{
                                                //fix for saving without duplicating items in db
                              requestType.Workflow = null;
                                                db.RequestTypes.Add(requestType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyRequestType(RequestType requestType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyRequestType(requestType, db);
                }
            }

            public void SaveOnlyRequestType(RequestType requestType, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // requestType.Workflow = null;
                                            if (requestType.IdRequestType.HasValue){
					var requestTypeFromDb = db.RequestTypes.Where(p => p.IdRequestType == requestType.IdRequestType).FirstOrDefault();
													requestTypeFromDb.Description = requestType.Description;
													requestTypeFromDb.IsDeactivated = requestType.IsDeactivated;
													requestTypeFromDb.IdWorkflow = requestType.IdWorkflow;
										 db.SaveChanges();

				}
                else{
					RequestType _requestType = new RequestType();
																	_requestType.Description = requestType.Description;
													_requestType.IsDeactivated = requestType.IsDeactivated;
													_requestType.IdWorkflow = requestType.IdWorkflow;
					

                    db.RequestTypes.Add(_requestType);
					db.SaveChanges();
					requestType.IdRequestType =  _requestType.IdRequestType;
                    
                }
            }

            public void DeleteRequestType(RequestType requestType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteRequestType(requestType, db);
                }
            }

            public void DeleteRequestType(RequestType requestType, SubscriptionEntities db)
            {
								var requestTypeFromDb = GetRequestType(requestType.IdRequestType.Value,db);
				requestTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyRequestType(RequestType requestType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyRequestType(requestType, db);
                }
            }

            public void DeletePermanentlyRequestType(RequestType requestType, SubscriptionEntities db)
            {
								var requestTypeFromDb = GetRequestType(requestType.IdRequestType.Value,db);
				
				db.RequestTypes.Remove(requestTypeFromDb);
                db.SaveChanges();
            }


            
							public List<Request> UpdateRequestsForRequestTypeWithoutSavingNewItem(List<Request> newRequests,long idRequestType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestsForRequestTypeWithoutSavingNewItem(newRequests,idRequestType,db);
                                }
                            }

							public List<Request> UpdateRequestsForRequestTypeWithoutSavingNewItem(List<Request> newRequests,long idRequestType, SubscriptionEntities  db)
                            {
                                Expression<Func<Request, bool>> expressionBuilder = p => p.IdRequestType == idRequestType;
                                var oldRequests = DaoFactories.Instance.RequestDao.GetRequestCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequests.EntityList.Select(pc => pc.IdRequest).Except(newRequests.Where(pc => pc.IdRequest.HasValue).Select(pc => pc.IdRequest)).ToList();
                                var itemsTobeDeleted = oldRequests.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequest)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newRequests;
                            }


                            public List<Request> UpdateRequestsForRequestType(List<Request> newRequests,long idRequestType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestsForRequestType(newRequests,idRequestType,db);
                                }
                            }

                            public List<Request> UpdateRequestsForRequestType(List<Request> newRequests,long idRequestType, SubscriptionEntities  db)
                            {
                                Expression<Func<Request, bool>> expressionBuilder = p => p.IdRequestType == idRequestType;
                                var oldRequests = DaoFactories.Instance.RequestDao.GetRequestCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequests.EntityList.Select(pc => pc.IdRequest).Except(newRequests.Where(pc => pc.IdRequest.HasValue).Select(pc => pc.IdRequest)).ToList();
                                var itemsTobeDeleted = oldRequests.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequest)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newRequests.ForEach(pc =>
                                {
                                    pc.IdRequestType = idRequestType;
                                    DaoFactories.Instance.RequestDao.SaveOnlyRequest(pc, db);
                                });
                                return newRequests;
                            }

                        
							public List<RequestType_User> UpdateRequestType_UserForRequestTypeWithoutSavingNewItem(List<RequestType_User> newRequestType_User,long idRequestType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestType_UserForRequestTypeWithoutSavingNewItem(newRequestType_User,idRequestType,db);
                                }
                            }

							public List<RequestType_User> UpdateRequestType_UserForRequestTypeWithoutSavingNewItem(List<RequestType_User> newRequestType_User,long idRequestType, SubscriptionEntities  db)
                            {
                                Expression<Func<RequestType_User, bool>> expressionBuilder = p => p.IdRequestType == idRequestType;
                                var oldRequestType_User = DaoFactories.Instance.RequestType_UserDao.GetRequestType_UserCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequestType_User.EntityList.Select(pc => pc.IdRequestType_User).Except(newRequestType_User.Where(pc => pc.IdRequestType_User.HasValue).Select(pc => pc.IdRequestType_User)).ToList();
                                var itemsTobeDeleted = oldRequestType_User.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequestType_User)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newRequestType_User;
                            }


                            public List<RequestType_User> UpdateRequestType_UserForRequestType(List<RequestType_User> newRequestType_User,long idRequestType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestType_UserForRequestType(newRequestType_User,idRequestType,db);
                                }
                            }

                            public List<RequestType_User> UpdateRequestType_UserForRequestType(List<RequestType_User> newRequestType_User,long idRequestType, SubscriptionEntities  db)
                            {
                                Expression<Func<RequestType_User, bool>> expressionBuilder = p => p.IdRequestType == idRequestType;
                                var oldRequestType_User = DaoFactories.Instance.RequestType_UserDao.GetRequestType_UserCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequestType_User.EntityList.Select(pc => pc.IdRequestType_User).Except(newRequestType_User.Where(pc => pc.IdRequestType_User.HasValue).Select(pc => pc.IdRequestType_User)).ToList();
                                var itemsTobeDeleted = oldRequestType_User.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequestType_User)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newRequestType_User.ForEach(pc =>
                                {
                                    pc.IdRequestType = idRequestType;
                                    DaoFactories.Instance.RequestType_UserDao.SaveOnlyRequestType_User(pc, db);
                                });
                                return newRequestType_User;
                            }

                        


    



		}
			public partial class RequestType_UserDao :IRequestType_UserDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public RequestType_UserDao(){
			
			}

			public RequestType_UserDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<RequestType_User> GetAllRequestType_User(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestType_User(db, shouldRemap);
                }
            }

            public List<RequestType_User> GetAllRequestType_User(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapRequestType_UserList(db.RequestType_User.Where(p => p.IsDeactivated != true).ToList());
				
				return db.RequestType_User.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<RequestType_User> GetAllRequestType_UserByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<RequestType_User, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestType_UserByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<RequestType_User> GetAllRequestType_UserByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<RequestType_User, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<RequestType_User, dynamic> orderExpression = null)
            {
				IQueryable<RequestType_User> query =  db.RequestType_User;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<RequestType_User> baseListReturnType = new BaseListReturnType<RequestType_User>();

                IQueryable<RequestType_User> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdRequestType_User" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<RequestType_User, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestType_UserList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<RequestType_User> GetAllRequestType_UserWithUserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null,bool shouldRemap = false, Func<RequestType_User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestType_UserByPage(sortingPagingInfo, db,expression,new List<string>(){"User"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<RequestType_User> GetAllRequestType_UserWithRequestTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null,bool shouldRemap = false, Func<RequestType_User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestType_UserByPage(sortingPagingInfo, db,expression,new List<string>(){"RequestType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<RequestType_User> GetAllRequestType_UserWithRequestType_User1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null,bool shouldRemap = false, Func<RequestType_User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestType_UserByPage(sortingPagingInfo, db,expression,new List<string>(){"RequestType_User1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<RequestType_User> GetAllRequestType_UserWithRequestType_User2DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null,bool shouldRemap = false, Func<RequestType_User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestType_UserByPage(sortingPagingInfo, db,expression,new List<string>(){"RequestType_User2"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<RequestType_User> GetAllRequestType_UserByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<RequestType_User, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestType_UserByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<RequestType_User> GetAllRequestType_UserByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<RequestType_User, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<RequestType_User, dynamic> orderExpression = null)
            {
				IQueryable<RequestType_User> query =  db.RequestType_User;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<RequestType_User> baseListReturnType = new BaseListReturnType<RequestType_User>();

                IQueryable<RequestType_User> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdRequestType_User" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<RequestType_User, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestType_UserList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<RequestType_User> GetAllRequestType_UserWithUserDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null,bool shouldRemap = false, Func<RequestType_User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestType_UserByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"User"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<RequestType_User> GetAllRequestType_UserWithRequestTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null,bool shouldRemap = false, Func<RequestType_User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestType_UserByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"RequestType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<RequestType_User> GetAllRequestType_UserWithRequestType_User1DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null,bool shouldRemap = false, Func<RequestType_User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestType_UserByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"RequestType_User1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<RequestType_User> GetAllRequestType_UserWithRequestType_User2DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null,bool shouldRemap = false, Func<RequestType_User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestType_UserByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"RequestType_User2"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<RequestType_User> GetAllRequestType_UserWithUserDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestType_UserWitDetails(new List<string>(){"User"},shouldRemap);
					}
				}
							public BaseListReturnType<RequestType_User> GetAllRequestType_UserWithRequestTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestType_UserWitDetails(new List<string>(){"RequestType"},shouldRemap);
					}
				}
							public BaseListReturnType<RequestType_User> GetAllRequestType_UserWithRequestType_User1Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestType_UserWitDetails(new List<string>(){"RequestType_User1"},shouldRemap);
					}
				}
							public BaseListReturnType<RequestType_User> GetAllRequestType_UserWithRequestType_User2Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRequestType_UserWitDetails(new List<string>(){"RequestType_User2"},shouldRemap);
					}
				}
			

			public BaseListReturnType<RequestType_User> GetAllRequestType_UserWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRequestType_UserWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<RequestType_User> GetAllRequestType_UserWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<RequestType_User> query =  db.RequestType_User;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<RequestType_User> baseListReturnType = new BaseListReturnType<RequestType_User>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestType_UserList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public RequestType_User GetRequestType_User(long idRequestType_User,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestType_User(idRequestType_User, db,shouldRemap);
                }
            }
                        public RequestType_User GetRequestType_User(long idRequestType_User, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapRequestType_UserSingle(db.RequestType_User.Where(p => p.IdRequestType_User == idRequestType_User && p.IsDeactivated != true).FirstOrDefault());

                return db.RequestType_User.Where(p => p.IdRequestType_User == idRequestType_User && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public RequestType_User GetRequestType_UserCustom( Expression<Func<RequestType_User, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetRequestType_UserCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public RequestType_User GetRequestType_UserCustom( SubscriptionEntities db , Expression<Func<RequestType_User, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<RequestType_User> query =  db.RequestType_User;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapRequestType_UserSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<RequestType_User> GetRequestType_UserCustomList( Expression<Func<RequestType_User, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<RequestType_User, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetRequestType_UserCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<RequestType_User> GetRequestType_UserCustomList(  SubscriptionEntities db , Expression<Func<RequestType_User, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<RequestType_User, dynamic> orderExpression = null)
			{
				IQueryable<RequestType_User> query =  db.RequestType_User;
                BaseListReturnType<RequestType_User> baseListReturnType = new BaseListReturnType<RequestType_User>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRequestType_UserList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public RequestType_User GetRequestType_UserWithUserDetails(long idRequestType_User,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRequestType_UserWithDetails(idRequestType_User,new List<string>(){"User"},shouldRemap);
					}
				}

            //IdUser -- ZeroOrOne

                public BaseListReturnType<RequestType_User> GetAllRequestType_UserListByUser(long idUser)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestType_UserListByUser(idUser, db);
                    }
                }
                public BaseListReturnType<RequestType_User> GetAllRequestType_UserListByUser(long idUser, SubscriptionEntities db)
                {
                    Expression<Func<RequestType_User, bool>> expression = property=> property.IdUser == idUser && property.IsDeactivated !=true;
                    return GetRequestType_UserCustomList(db, expression, null, true);
                }
                public BaseListReturnType<RequestType_User> GetAllRequestType_UserListByUserByPage(long idUser, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestType_UserListByUserByPage(idUser, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<RequestType_User> GetAllRequestType_UserListByUserByPage(long idUser, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<RequestType_User, bool>> expression = property => property.IdUser == idUser && property.IsDeactivated !=true;
                    return GetAllRequestType_UserByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public RequestType_User GetRequestType_UserWithRequestTypeDetails(long idRequestType_User,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRequestType_UserWithDetails(idRequestType_User,new List<string>(){"RequestType"},shouldRemap);
					}
				}

            //IdRequestType -- ZeroOrOne

                public BaseListReturnType<RequestType_User> GetAllRequestType_UserListByRequestType(long idRequestType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestType_UserListByRequestType(idRequestType, db);
                    }
                }
                public BaseListReturnType<RequestType_User> GetAllRequestType_UserListByRequestType(long idRequestType, SubscriptionEntities db)
                {
                    Expression<Func<RequestType_User, bool>> expression = property=> property.IdRequestType == idRequestType && property.IsDeactivated !=true;
                    return GetRequestType_UserCustomList(db, expression, null, true);
                }
                public BaseListReturnType<RequestType_User> GetAllRequestType_UserListByRequestTypeByPage(long idRequestType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestType_UserListByRequestTypeByPage(idRequestType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<RequestType_User> GetAllRequestType_UserListByRequestTypeByPage(long idRequestType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<RequestType_User, bool>> expression = property => property.IdRequestType == idRequestType && property.IsDeactivated !=true;
                    return GetAllRequestType_UserByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public RequestType_User GetRequestType_UserWithRequestType_User1Details(long idRequestType_User,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRequestType_UserWithDetails(idRequestType_User,new List<string>(){"RequestType_User1"},shouldRemap);
					}
				}

            //IdParentRequestType_User -- Many


							public RequestType_User GetRequestType_UserWithRequestType_User2Details(long idRequestType_User,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRequestType_UserWithDetails(idRequestType_User,new List<string>(){"RequestType_User2"},shouldRemap);
					}
				}

            //IdParentRequestType_User -- ZeroOrOne

                public BaseListReturnType<RequestType_User> GetAllRequestType_UserListByRequestType_User2(long idRequestType_User2)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestType_UserListByRequestType_User2(idRequestType_User2, db);
                    }
                }
                public BaseListReturnType<RequestType_User> GetAllRequestType_UserListByRequestType_User2(long idRequestType_User2, SubscriptionEntities db)
                {
                    Expression<Func<RequestType_User, bool>> expression = property=> property.IdParentRequestType_User == idRequestType_User2 && property.IsDeactivated !=true;
                    return GetRequestType_UserCustomList(db, expression, null, true);
                }
                public BaseListReturnType<RequestType_User> GetAllRequestType_UserListByRequestType_User2ByPage(long idRequestType_User2, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRequestType_UserListByRequestType_User2ByPage(idRequestType_User2, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<RequestType_User> GetAllRequestType_UserListByRequestType_User2ByPage(long idRequestType_User2, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<RequestType_User, bool>> expression = property => property.IdParentRequestType_User == idRequestType_User2 && property.IsDeactivated !=true;
                    return GetAllRequestType_UserByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public RequestType_User GetRequestType_UserWithDetails(long idRequestType_User, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestType_UserWithDetails(idRequestType_User, db,includes,shouldRemap);
                }
            }

            public RequestType_User GetRequestType_UserWithDetails(long idRequestType_User, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<RequestType_User> query =  db.RequestType_User;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapRequestType_UserSingle(query
						.Where(p => p.IdRequestType_User == idRequestType_User && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdRequestType_User == idRequestType_User && p.IsDeactivated != true).FirstOrDefault();
            }

            public RequestType_User GetRequestType_UserWitDetails(long idRequestType_User,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestType_UserWitDetails(idRequestType_User, db,shouldRemap);
                }
            }

            public RequestType_User GetRequestType_UserWitDetails(long idRequestType_User, SubscriptionEntities db,bool shouldRemap = false)
            {
				RequestType_User _RequestType_User = db.RequestType_User

					.Include("User")
					.Include("RequestType")
					.Include("RequestType_User1")
					.Include("RequestType_User2")
								.Where(p => p.IdRequestType_User == idRequestType_User && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapRequestType_UserSingle(_RequestType_User);

				return  _RequestType_User;
            }

            public List<RequestType_User> GetRequestType_UserListByIdList(List<long> requestType_UserIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRequestType_UserListByIdList(requestType_UserIds, db);
                }
            }
            public List<RequestType_User> GetRequestType_UserListByIdList(List<long> requestType_UserIds, SubscriptionEntities db)
            {
                return db.RequestType_User.Where(p => p.IsDeactivated != true && requestType_UserIds.Contains(p.IdRequestType_User.Value)).ToList();
            }


            public void SaveRequestType_User(RequestType_User requestType_User)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveRequestType_User(requestType_User, db);
                }
            }

            public void SaveRequestType_User(RequestType_User requestType_User, SubscriptionEntities db)
            {
									if (requestType_User.User != null) 
						DaoFactories.Instance.UserDao.SaveUser(requestType_User.User, db);
									if (requestType_User.RequestType != null) 
						DaoFactories.Instance.RequestTypeDao.SaveRequestType(requestType_User.RequestType, db);
									if (requestType_User.RequestType_User2 != null) 
						DaoFactories.Instance.RequestType_UserDao.SaveRequestType_User(requestType_User.RequestType_User2, db);
				                
                if (requestType_User.IdRequestType_User.HasValue){
					var requestType_UserFromDb = db.RequestType_User.Where(p => p.IdRequestType_User == requestType_User.IdRequestType_User).FirstOrDefault();
													requestType_UserFromDb.IdRequestType = requestType_User.IdRequestType;
													requestType_UserFromDb.IdUser = requestType_User.IdUser;
													requestType_UserFromDb.IdParentRequestType_User = requestType_User.IdParentRequestType_User;
													requestType_UserFromDb.IsDeactivated = requestType_User.IsDeactivated;
													requestType_UserFromDb.Priority = requestType_User.Priority;
									}
                else{
                                                //fix for saving without duplicating items in db
                              requestType_User.User = null;
                                                        //fix for saving without duplicating items in db
                              requestType_User.RequestType = null;
                                                        //fix for saving without duplicating items in db
                              requestType_User.RequestType_User2 = null;
                                                db.RequestType_User.Add(requestType_User);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyRequestType_User(RequestType_User requestType_User)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyRequestType_User(requestType_User, db);
                }
            }

            public void SaveOnlyRequestType_User(RequestType_User requestType_User, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // requestType_User.User = null;
                                                        //fix for saving without duplicating items in db
                             // requestType_User.RequestType = null;
                                                        //fix for saving without duplicating items in db
                             // requestType_User.RequestType_User2 = null;
                                            if (requestType_User.IdRequestType_User.HasValue){
					var requestType_UserFromDb = db.RequestType_User.Where(p => p.IdRequestType_User == requestType_User.IdRequestType_User).FirstOrDefault();
													requestType_UserFromDb.IdRequestType = requestType_User.IdRequestType;
													requestType_UserFromDb.IdUser = requestType_User.IdUser;
													requestType_UserFromDb.IdParentRequestType_User = requestType_User.IdParentRequestType_User;
													requestType_UserFromDb.IsDeactivated = requestType_User.IsDeactivated;
													requestType_UserFromDb.Priority = requestType_User.Priority;
										 db.SaveChanges();

				}
                else{
					RequestType_User _requestType_User = new RequestType_User();
																	_requestType_User.IdRequestType = requestType_User.IdRequestType;
													_requestType_User.IdUser = requestType_User.IdUser;
													_requestType_User.IdParentRequestType_User = requestType_User.IdParentRequestType_User;
													_requestType_User.IsDeactivated = requestType_User.IsDeactivated;
													_requestType_User.Priority = requestType_User.Priority;
					

                    db.RequestType_User.Add(_requestType_User);
					db.SaveChanges();
					requestType_User.IdRequestType_User =  _requestType_User.IdRequestType_User;
                    
                }
            }

            public void DeleteRequestType_User(RequestType_User requestType_User)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteRequestType_User(requestType_User, db);
                }
            }

            public void DeleteRequestType_User(RequestType_User requestType_User, SubscriptionEntities db)
            {
								var requestType_UserFromDb = GetRequestType_User(requestType_User.IdRequestType_User.Value,db);
				requestType_UserFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyRequestType_User(RequestType_User requestType_User)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyRequestType_User(requestType_User, db);
                }
            }

            public void DeletePermanentlyRequestType_User(RequestType_User requestType_User, SubscriptionEntities db)
            {
								var requestType_UserFromDb = GetRequestType_User(requestType_User.IdRequestType_User.Value,db);
				
				db.RequestType_User.Remove(requestType_UserFromDb);
                db.SaveChanges();
            }


            
							public List<RequestType_User> UpdateRequestType_User1ForRequestType_UserWithoutSavingNewItem(List<RequestType_User> newRequestType_User1,long idRequestType_User)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestType_User1ForRequestType_UserWithoutSavingNewItem(newRequestType_User1,idRequestType_User,db);
                                }
                            }

							public List<RequestType_User> UpdateRequestType_User1ForRequestType_UserWithoutSavingNewItem(List<RequestType_User> newRequestType_User1,long idRequestType_User, SubscriptionEntities  db)
                            {
                                Expression<Func<RequestType_User, bool>> expressionBuilder = p => p.IdParentRequestType_User == idRequestType_User;
                                var oldRequestType_User1 = DaoFactories.Instance.RequestType_UserDao.GetRequestType_UserCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequestType_User1.EntityList.Select(pc => pc.IdRequestType_User).Except(newRequestType_User1.Where(pc => pc.IdRequestType_User.HasValue).Select(pc => pc.IdRequestType_User)).ToList();
                                var itemsTobeDeleted = oldRequestType_User1.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequestType_User)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newRequestType_User1;
                            }


                            public List<RequestType_User> UpdateRequestType_User1ForRequestType_User(List<RequestType_User> newRequestType_User1,long idRequestType_User)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestType_User1ForRequestType_User(newRequestType_User1,idRequestType_User,db);
                                }
                            }

                            public List<RequestType_User> UpdateRequestType_User1ForRequestType_User(List<RequestType_User> newRequestType_User1,long idRequestType_User, SubscriptionEntities  db)
                            {
                                Expression<Func<RequestType_User, bool>> expressionBuilder = p => p.IdParentRequestType_User == idRequestType_User;
                                var oldRequestType_User1 = DaoFactories.Instance.RequestType_UserDao.GetRequestType_UserCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequestType_User1.EntityList.Select(pc => pc.IdRequestType_User).Except(newRequestType_User1.Where(pc => pc.IdRequestType_User.HasValue).Select(pc => pc.IdRequestType_User)).ToList();
                                var itemsTobeDeleted = oldRequestType_User1.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequestType_User)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newRequestType_User1.ForEach(pc =>
                                {
                                    pc.IdParentRequestType_User = idRequestType_User;
                                    DaoFactories.Instance.RequestType_UserDao.SaveOnlyRequestType_User(pc, db);
                                });
                                return newRequestType_User1;
                            }

                        


    



		}
			public partial class RoleDao :IRoleDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public RoleDao(){
			
			}

			public RoleDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Role> GetAllRoles(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRoles(db, shouldRemap);
                }
            }

            public List<Role> GetAllRoles(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapRoleList(db.Roles.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Roles.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Role> GetAllRolesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Role, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRolesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Role> GetAllRolesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Role, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Role, dynamic> orderExpression = null)
            {
				IQueryable<Role> query =  db.Roles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Role> baseListReturnType = new BaseListReturnType<Role>();

                IQueryable<Role> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdRole" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Role, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Name.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Name.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRoleList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Role> GetAllRolesWithRole_PermissionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role, bool>> expression = null,bool shouldRemap = false, Func<Role, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRolesByPage(sortingPagingInfo, db,expression,new List<string>(){"Role_Permission"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Role> GetAllRolesWithUser_RoleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role, bool>> expression = null,bool shouldRemap = false, Func<Role, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRolesByPage(sortingPagingInfo, db,expression,new List<string>(){"User_Role"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Role> GetAllRolesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Role, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRolesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Role> GetAllRolesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Role, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Role, dynamic> orderExpression = null)
            {
				IQueryable<Role> query =  db.Roles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Role> baseListReturnType = new BaseListReturnType<Role>();

                IQueryable<Role> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdRole" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Role, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRoleList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Role> GetAllRolesWithRole_PermissionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role, bool>> expression = null,bool shouldRemap = false, Func<Role, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRolesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Role_Permission"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Role> GetAllRolesWithUser_RoleDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role, bool>> expression = null,bool shouldRemap = false, Func<Role, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRolesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"User_Role"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Role> GetAllRolesWithRole_PermissionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRoleWitDetails(new List<string>(){"Role_Permission"},shouldRemap);
					}
				}
							public BaseListReturnType<Role> GetAllRolesWithUser_RoleDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRoleWitDetails(new List<string>(){"User_Role"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Role> GetAllRoleWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRoleWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Role> GetAllRoleWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Role> query =  db.Roles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Role> baseListReturnType = new BaseListReturnType<Role>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRoleList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Role GetRole(long idRole,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRole(idRole, db,shouldRemap);
                }
            }
                        public Role GetRole(long idRole, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapRoleSingle(db.Roles.Where(p => p.IdRole == idRole && p.IsDeactivated != true).FirstOrDefault());

                return db.Roles.Where(p => p.IdRole == idRole && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Role GetRoleCustom( Expression<Func<Role, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetRoleCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Role GetRoleCustom( SubscriptionEntities db , Expression<Func<Role, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Role> query =  db.Roles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapRoleSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Role> GetRoleCustomList( Expression<Func<Role, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Role, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetRoleCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Role> GetRoleCustomList(  SubscriptionEntities db , Expression<Func<Role, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Role, dynamic> orderExpression = null)
			{
				IQueryable<Role> query =  db.Roles;
                BaseListReturnType<Role> baseListReturnType = new BaseListReturnType<Role>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRoleList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Role GetRoleWithRole_PermissionDetails(long idRole,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRoleWithDetails(idRole,new List<string>(){"Role_Permission"},shouldRemap);
					}
				}

            //IdRole -- Many


							public Role GetRoleWithUser_RoleDetails(long idRole,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRoleWithDetails(idRole,new List<string>(){"User_Role"},shouldRemap);
					}
				}

            //IdRole -- Many


			


			public Role GetRoleWithDetails(long idRole, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRoleWithDetails(idRole, db,includes,shouldRemap);
                }
            }

            public Role GetRoleWithDetails(long idRole, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Role> query =  db.Roles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapRoleSingle(query
						.Where(p => p.IdRole == idRole && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdRole == idRole && p.IsDeactivated != true).FirstOrDefault();
            }

            public Role GetRoleWitDetails(long idRole,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRoleWitDetails(idRole, db,shouldRemap);
                }
            }

            public Role GetRoleWitDetails(long idRole, SubscriptionEntities db,bool shouldRemap = false)
            {
				Role _Role = db.Roles

					.Include("Role_Permission")
					.Include("User_Role")
								.Where(p => p.IdRole == idRole && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapRoleSingle(_Role);

				return  _Role;
            }

            public List<Role> GetRoleListByIdList(List<long> roleIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRoleListByIdList(roleIds, db);
                }
            }
            public List<Role> GetRoleListByIdList(List<long> roleIds, SubscriptionEntities db)
            {
                return db.Roles.Where(p => p.IsDeactivated != true && roleIds.Contains(p.IdRole.Value)).ToList();
            }


            public void SaveRole(Role role)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveRole(role, db);
                }
            }

            public void SaveRole(Role role, SubscriptionEntities db)
            {
				                
                if (role.IdRole.HasValue){
					var roleFromDb = db.Roles.Where(p => p.IdRole == role.IdRole).FirstOrDefault();
													roleFromDb.Name = role.Name;
													roleFromDb.IsDeactivated = role.IsDeactivated;
									}
                else{
                                        db.Roles.Add(role);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyRole(Role role)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyRole(role, db);
                }
            }

            public void SaveOnlyRole(Role role, SubscriptionEntities db)
            {
			                    if (role.IdRole.HasValue){
					var roleFromDb = db.Roles.Where(p => p.IdRole == role.IdRole).FirstOrDefault();
													roleFromDb.Name = role.Name;
													roleFromDb.IsDeactivated = role.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Role _role = new Role();
																	_role.Name = role.Name;
													_role.IsDeactivated = role.IsDeactivated;
					

                    db.Roles.Add(_role);
					db.SaveChanges();
					role.IdRole =  _role.IdRole;
                    
                }
            }

            public void DeleteRole(Role role)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteRole(role, db);
                }
            }

            public void DeleteRole(Role role, SubscriptionEntities db)
            {
								var roleFromDb = GetRole(role.IdRole.Value,db);
				roleFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyRole(Role role)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyRole(role, db);
                }
            }

            public void DeletePermanentlyRole(Role role, SubscriptionEntities db)
            {
								var roleFromDb = GetRole(role.IdRole.Value,db);
				
				db.Roles.Remove(roleFromDb);
                db.SaveChanges();
            }


            
							public List<Role_Permission> UpdateRole_PermissionForRoleWithoutSavingNewItem(List<Role_Permission> newRole_Permission,long idRole)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRole_PermissionForRoleWithoutSavingNewItem(newRole_Permission,idRole,db);
                                }
                            }

							public List<Role_Permission> UpdateRole_PermissionForRoleWithoutSavingNewItem(List<Role_Permission> newRole_Permission,long idRole, SubscriptionEntities  db)
                            {
                                Expression<Func<Role_Permission, bool>> expressionBuilder = p => p.IdRole == idRole;
                                var oldRole_Permission = DaoFactories.Instance.Role_PermissionDao.GetRole_PermissionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRole_Permission.EntityList.Select(pc => pc.IdRole_Permission).Except(newRole_Permission.Where(pc => pc.IdRole_Permission.HasValue).Select(pc => pc.IdRole_Permission)).ToList();
                                var itemsTobeDeleted = oldRole_Permission.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRole_Permission)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newRole_Permission;
                            }


                            public List<Role_Permission> UpdateRole_PermissionForRole(List<Role_Permission> newRole_Permission,long idRole)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRole_PermissionForRole(newRole_Permission,idRole,db);
                                }
                            }

                            public List<Role_Permission> UpdateRole_PermissionForRole(List<Role_Permission> newRole_Permission,long idRole, SubscriptionEntities  db)
                            {
                                Expression<Func<Role_Permission, bool>> expressionBuilder = p => p.IdRole == idRole;
                                var oldRole_Permission = DaoFactories.Instance.Role_PermissionDao.GetRole_PermissionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRole_Permission.EntityList.Select(pc => pc.IdRole_Permission).Except(newRole_Permission.Where(pc => pc.IdRole_Permission.HasValue).Select(pc => pc.IdRole_Permission)).ToList();
                                var itemsTobeDeleted = oldRole_Permission.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRole_Permission)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newRole_Permission.ForEach(pc =>
                                {
                                    pc.IdRole = idRole;
                                    DaoFactories.Instance.Role_PermissionDao.SaveOnlyRole_Permission(pc, db);
                                });
                                return newRole_Permission;
                            }

                        
							public List<User_Role> UpdateUser_RoleForRoleWithoutSavingNewItem(List<User_Role> newUser_Role,long idRole)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateUser_RoleForRoleWithoutSavingNewItem(newUser_Role,idRole,db);
                                }
                            }

							public List<User_Role> UpdateUser_RoleForRoleWithoutSavingNewItem(List<User_Role> newUser_Role,long idRole, SubscriptionEntities  db)
                            {
                                Expression<Func<User_Role, bool>> expressionBuilder = p => p.IdRole == idRole;
                                var oldUser_Role = DaoFactories.Instance.User_RoleDao.GetUser_RoleCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldUser_Role.EntityList.Select(pc => pc.IdUser).Except(newUser_Role.Where(pc => pc.IdUser.HasValue).Select(pc => pc.IdUser)).ToList();
                                var itemsTobeDeleted = oldUser_Role.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdUser)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newUser_Role;
                            }


                            public List<User_Role> UpdateUser_RoleForRole(List<User_Role> newUser_Role,long idRole)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateUser_RoleForRole(newUser_Role,idRole,db);
                                }
                            }

                            public List<User_Role> UpdateUser_RoleForRole(List<User_Role> newUser_Role,long idRole, SubscriptionEntities  db)
                            {
                                Expression<Func<User_Role, bool>> expressionBuilder = p => p.IdRole == idRole;
                                var oldUser_Role = DaoFactories.Instance.User_RoleDao.GetUser_RoleCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldUser_Role.EntityList.Select(pc => pc.IdUser).Except(newUser_Role.Where(pc => pc.IdUser.HasValue).Select(pc => pc.IdUser)).ToList();
                                var itemsTobeDeleted = oldUser_Role.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdUser)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newUser_Role.ForEach(pc =>
                                {
                                    pc.IdRole = idRole;
                                    DaoFactories.Instance.User_RoleDao.SaveOnlyUser_Role(pc, db);
                                });
                                return newUser_Role;
                            }

                        


    



		}
			public partial class Role_PermissionDao :IRole_PermissionDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public Role_PermissionDao(){
			
			}

			public Role_PermissionDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Role_Permission> GetAllRole_Permission(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRole_Permission(db, shouldRemap);
                }
            }

            public List<Role_Permission> GetAllRole_Permission(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapRole_PermissionList(db.Role_Permission.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Role_Permission.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Role_Permission> GetAllRole_PermissionByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role_Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Role_Permission, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRole_PermissionByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Role_Permission> GetAllRole_PermissionByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Role_Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Role_Permission, dynamic> orderExpression = null)
            {
				IQueryable<Role_Permission> query =  db.Role_Permission;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Role_Permission> baseListReturnType = new BaseListReturnType<Role_Permission>();

                IQueryable<Role_Permission> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdRole_Permission" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Role_Permission, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRole_PermissionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Role_Permission> GetAllRole_PermissionWithPermissionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role_Permission, bool>> expression = null,bool shouldRemap = false, Func<Role_Permission, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRole_PermissionByPage(sortingPagingInfo, db,expression,new List<string>(){"Permission"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Role_Permission> GetAllRole_PermissionWithRoleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role_Permission, bool>> expression = null,bool shouldRemap = false, Func<Role_Permission, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRole_PermissionByPage(sortingPagingInfo, db,expression,new List<string>(){"Role"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Role_Permission> GetAllRole_PermissionByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role_Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Role_Permission, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRole_PermissionByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Role_Permission> GetAllRole_PermissionByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Role_Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Role_Permission, dynamic> orderExpression = null)
            {
				IQueryable<Role_Permission> query =  db.Role_Permission;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Role_Permission> baseListReturnType = new BaseListReturnType<Role_Permission>();

                IQueryable<Role_Permission> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdRole_Permission" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Role_Permission, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRole_PermissionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Role_Permission> GetAllRole_PermissionWithPermissionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role_Permission, bool>> expression = null,bool shouldRemap = false, Func<Role_Permission, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRole_PermissionByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Permission"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Role_Permission> GetAllRole_PermissionWithRoleDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role_Permission, bool>> expression = null,bool shouldRemap = false, Func<Role_Permission, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRole_PermissionByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Role"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Role_Permission> GetAllRole_PermissionWithPermissionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRole_PermissionWitDetails(new List<string>(){"Permission"},shouldRemap);
					}
				}
							public BaseListReturnType<Role_Permission> GetAllRole_PermissionWithRoleDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllRole_PermissionWitDetails(new List<string>(){"Role"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Role_Permission> GetAllRole_PermissionWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllRole_PermissionWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Role_Permission> GetAllRole_PermissionWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Role_Permission> query =  db.Role_Permission;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Role_Permission> baseListReturnType = new BaseListReturnType<Role_Permission>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRole_PermissionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Role_Permission GetRole_Permission(long idRole_Permission,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRole_Permission(idRole_Permission, db,shouldRemap);
                }
            }
                        public Role_Permission GetRole_Permission(long idRole_Permission, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapRole_PermissionSingle(db.Role_Permission.Where(p => p.IdRole_Permission == idRole_Permission && p.IsDeactivated != true).FirstOrDefault());

                return db.Role_Permission.Where(p => p.IdRole_Permission == idRole_Permission && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Role_Permission GetRole_PermissionCustom( Expression<Func<Role_Permission, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetRole_PermissionCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Role_Permission GetRole_PermissionCustom( SubscriptionEntities db , Expression<Func<Role_Permission, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Role_Permission> query =  db.Role_Permission;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapRole_PermissionSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Role_Permission> GetRole_PermissionCustomList( Expression<Func<Role_Permission, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Role_Permission, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetRole_PermissionCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Role_Permission> GetRole_PermissionCustomList(  SubscriptionEntities db , Expression<Func<Role_Permission, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Role_Permission, dynamic> orderExpression = null)
			{
				IQueryable<Role_Permission> query =  db.Role_Permission;
                BaseListReturnType<Role_Permission> baseListReturnType = new BaseListReturnType<Role_Permission>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapRole_PermissionList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Role_Permission GetRole_PermissionWithPermissionDetails(long idRole_Permission,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRole_PermissionWithDetails(idRole_Permission,new List<string>(){"Permission"},shouldRemap);
					}
				}

            //IdPermission -- ZeroOrOne

                public BaseListReturnType<Role_Permission> GetAllRole_PermissionListByPermission(long idPermission)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRole_PermissionListByPermission(idPermission, db);
                    }
                }
                public BaseListReturnType<Role_Permission> GetAllRole_PermissionListByPermission(long idPermission, SubscriptionEntities db)
                {
                    Expression<Func<Role_Permission, bool>> expression = property=> property.IdPermission == idPermission && property.IsDeactivated !=true;
                    return GetRole_PermissionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Role_Permission> GetAllRole_PermissionListByPermissionByPage(long idPermission, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRole_PermissionListByPermissionByPage(idPermission, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Role_Permission> GetAllRole_PermissionListByPermissionByPage(long idPermission, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Role_Permission, bool>> expression = property => property.IdPermission == idPermission && property.IsDeactivated !=true;
                    return GetAllRole_PermissionByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Role_Permission GetRole_PermissionWithRoleDetails(long idRole_Permission,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetRole_PermissionWithDetails(idRole_Permission,new List<string>(){"Role"},shouldRemap);
					}
				}

            //IdRole -- ZeroOrOne

                public BaseListReturnType<Role_Permission> GetAllRole_PermissionListByRole(long idRole)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRole_PermissionListByRole(idRole, db);
                    }
                }
                public BaseListReturnType<Role_Permission> GetAllRole_PermissionListByRole(long idRole, SubscriptionEntities db)
                {
                    Expression<Func<Role_Permission, bool>> expression = property=> property.IdRole == idRole && property.IsDeactivated !=true;
                    return GetRole_PermissionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Role_Permission> GetAllRole_PermissionListByRoleByPage(long idRole, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllRole_PermissionListByRoleByPage(idRole, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Role_Permission> GetAllRole_PermissionListByRoleByPage(long idRole, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Role_Permission, bool>> expression = property => property.IdRole == idRole && property.IsDeactivated !=true;
                    return GetAllRole_PermissionByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public Role_Permission GetRole_PermissionWithDetails(long idRole_Permission, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRole_PermissionWithDetails(idRole_Permission, db,includes,shouldRemap);
                }
            }

            public Role_Permission GetRole_PermissionWithDetails(long idRole_Permission, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Role_Permission> query =  db.Role_Permission;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapRole_PermissionSingle(query
						.Where(p => p.IdRole_Permission == idRole_Permission && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdRole_Permission == idRole_Permission && p.IsDeactivated != true).FirstOrDefault();
            }

            public Role_Permission GetRole_PermissionWitDetails(long idRole_Permission,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRole_PermissionWitDetails(idRole_Permission, db,shouldRemap);
                }
            }

            public Role_Permission GetRole_PermissionWitDetails(long idRole_Permission, SubscriptionEntities db,bool shouldRemap = false)
            {
				Role_Permission _Role_Permission = db.Role_Permission

					.Include("Permission")
					.Include("Role")
								.Where(p => p.IdRole_Permission == idRole_Permission && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapRole_PermissionSingle(_Role_Permission);

				return  _Role_Permission;
            }

            public List<Role_Permission> GetRole_PermissionListByIdList(List<long> role_PermissionIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetRole_PermissionListByIdList(role_PermissionIds, db);
                }
            }
            public List<Role_Permission> GetRole_PermissionListByIdList(List<long> role_PermissionIds, SubscriptionEntities db)
            {
                return db.Role_Permission.Where(p => p.IsDeactivated != true && role_PermissionIds.Contains(p.IdRole_Permission.Value)).ToList();
            }


            public void SaveRole_Permission(Role_Permission role_Permission)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveRole_Permission(role_Permission, db);
                }
            }

            public void SaveRole_Permission(Role_Permission role_Permission, SubscriptionEntities db)
            {
									if (role_Permission.Permission != null) 
						DaoFactories.Instance.PermissionDao.SavePermission(role_Permission.Permission, db);
									if (role_Permission.Role != null) 
						DaoFactories.Instance.RoleDao.SaveRole(role_Permission.Role, db);
				                
                if (role_Permission.IdRole_Permission.HasValue){
					var role_PermissionFromDb = db.Role_Permission.Where(p => p.IdRole_Permission == role_Permission.IdRole_Permission).FirstOrDefault();
													role_PermissionFromDb.IdRole = role_Permission.IdRole;
													role_PermissionFromDb.IdPermission = role_Permission.IdPermission;
													role_PermissionFromDb.IsDeactivated = role_Permission.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              role_Permission.Permission = null;
                                                        //fix for saving without duplicating items in db
                              role_Permission.Role = null;
                                                db.Role_Permission.Add(role_Permission);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyRole_Permission(Role_Permission role_Permission)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyRole_Permission(role_Permission, db);
                }
            }

            public void SaveOnlyRole_Permission(Role_Permission role_Permission, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // role_Permission.Permission = null;
                                                        //fix for saving without duplicating items in db
                             // role_Permission.Role = null;
                                            if (role_Permission.IdRole_Permission.HasValue){
					var role_PermissionFromDb = db.Role_Permission.Where(p => p.IdRole_Permission == role_Permission.IdRole_Permission).FirstOrDefault();
													role_PermissionFromDb.IdRole = role_Permission.IdRole;
													role_PermissionFromDb.IdPermission = role_Permission.IdPermission;
													role_PermissionFromDb.IsDeactivated = role_Permission.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Role_Permission _role_Permission = new Role_Permission();
																	_role_Permission.IdRole = role_Permission.IdRole;
													_role_Permission.IdPermission = role_Permission.IdPermission;
													_role_Permission.IsDeactivated = role_Permission.IsDeactivated;
					

                    db.Role_Permission.Add(_role_Permission);
					db.SaveChanges();
					role_Permission.IdRole_Permission =  _role_Permission.IdRole_Permission;
                    
                }
            }

            public void DeleteRole_Permission(Role_Permission role_Permission)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteRole_Permission(role_Permission, db);
                }
            }

            public void DeleteRole_Permission(Role_Permission role_Permission, SubscriptionEntities db)
            {
								var role_PermissionFromDb = GetRole_Permission(role_Permission.IdRole_Permission.Value,db);
				role_PermissionFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyRole_Permission(Role_Permission role_Permission)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyRole_Permission(role_Permission, db);
                }
            }

            public void DeletePermanentlyRole_Permission(Role_Permission role_Permission, SubscriptionEntities db)
            {
								var role_PermissionFromDb = GetRole_Permission(role_Permission.IdRole_Permission.Value,db);
				
				db.Role_Permission.Remove(role_PermissionFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class ScheduleSettingDao :IScheduleSettingDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public ScheduleSettingDao(){
			
			}

			public ScheduleSettingDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<ScheduleSetting> GetAllScheduleSettings(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllScheduleSettings(db, shouldRemap);
                }
            }

            public List<ScheduleSetting> GetAllScheduleSettings(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapScheduleSettingList(db.ScheduleSettings.Where(p => p.IsDeactivated != true).ToList());
				
				return db.ScheduleSettings.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ScheduleSetting, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ScheduleSetting, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllScheduleSettingsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<ScheduleSetting, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ScheduleSetting, dynamic> orderExpression = null)
            {
				IQueryable<ScheduleSetting> query =  db.ScheduleSettings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<ScheduleSetting> baseListReturnType = new BaseListReturnType<ScheduleSetting>();

                IQueryable<ScheduleSetting> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdScheduleSetting" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<ScheduleSetting, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.ReccurEvery.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ReccurEvery.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.WeekOccursOnDays.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.MonthOccurs.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.MonthOnSpecificDays.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.MonthEveryOrdinal.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.MonthEveryDays.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapScheduleSettingList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsWithFrequencyDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ScheduleSetting, bool>> expression = null,bool shouldRemap = false, Func<ScheduleSetting, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllScheduleSettingsByPage(sortingPagingInfo, db,expression,new List<string>(){"Frequency"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ScheduleSetting, bool>> expression = null,bool shouldRemap = false, Func<ScheduleSetting, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllScheduleSettingsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ScheduleSetting, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ScheduleSetting, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllScheduleSettingsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<ScheduleSetting, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<ScheduleSetting, dynamic> orderExpression = null)
            {
				IQueryable<ScheduleSetting> query =  db.ScheduleSettings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<ScheduleSetting> baseListReturnType = new BaseListReturnType<ScheduleSetting>();

                IQueryable<ScheduleSetting> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdScheduleSetting" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<ScheduleSetting, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapScheduleSettingList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsWithFrequencyDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ScheduleSetting, bool>> expression = null,bool shouldRemap = false, Func<ScheduleSetting, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllScheduleSettingsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Frequency"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsWithTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ScheduleSetting, bool>> expression = null,bool shouldRemap = false, Func<ScheduleSetting, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllScheduleSettingsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsWithFrequencyDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllScheduleSettingWitDetails(new List<string>(){"Frequency"},shouldRemap);
					}
				}
							public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsWithTransactionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllScheduleSettingWitDetails(new List<string>(){"Transaction"},shouldRemap);
					}
				}
			

			public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllScheduleSettingWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<ScheduleSetting> query =  db.ScheduleSettings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<ScheduleSetting> baseListReturnType = new BaseListReturnType<ScheduleSetting>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapScheduleSettingList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public ScheduleSetting GetScheduleSetting(long idScheduleSetting,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetScheduleSetting(idScheduleSetting, db,shouldRemap);
                }
            }
                        public ScheduleSetting GetScheduleSetting(long idScheduleSetting, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapScheduleSettingSingle(db.ScheduleSettings.Where(p => p.IdScheduleSetting == idScheduleSetting && p.IsDeactivated != true).FirstOrDefault());

                return db.ScheduleSettings.Where(p => p.IdScheduleSetting == idScheduleSetting && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public ScheduleSetting GetScheduleSettingCustom( Expression<Func<ScheduleSetting, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetScheduleSettingCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public ScheduleSetting GetScheduleSettingCustom( SubscriptionEntities db , Expression<Func<ScheduleSetting, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<ScheduleSetting> query =  db.ScheduleSettings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapScheduleSettingSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<ScheduleSetting> GetScheduleSettingCustomList( Expression<Func<ScheduleSetting, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<ScheduleSetting, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetScheduleSettingCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<ScheduleSetting> GetScheduleSettingCustomList(  SubscriptionEntities db , Expression<Func<ScheduleSetting, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<ScheduleSetting, dynamic> orderExpression = null)
			{
				IQueryable<ScheduleSetting> query =  db.ScheduleSettings;
                BaseListReturnType<ScheduleSetting> baseListReturnType = new BaseListReturnType<ScheduleSetting>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapScheduleSettingList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public ScheduleSetting GetScheduleSettingWithFrequencyDetails(long idScheduleSetting,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetScheduleSettingWithDetails(idScheduleSetting,new List<string>(){"Frequency"},shouldRemap);
					}
				}

            //IdFrequency -- ZeroOrOne

                public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingListByFrequency(long idFrequency)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllScheduleSettingListByFrequency(idFrequency, db);
                    }
                }
                public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingListByFrequency(long idFrequency, SubscriptionEntities db)
                {
                    Expression<Func<ScheduleSetting, bool>> expression = property=> property.IdFrequency == idFrequency && property.IsDeactivated !=true;
                    return GetScheduleSettingCustomList(db, expression, null, true);
                }
                public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingListByFrequencyByPage(long idFrequency, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllScheduleSettingListByFrequencyByPage(idFrequency, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingListByFrequencyByPage(long idFrequency, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<ScheduleSetting, bool>> expression = property => property.IdFrequency == idFrequency && property.IsDeactivated !=true;
                    return GetAllScheduleSettingsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public ScheduleSetting GetScheduleSettingWithTransactionDetails(long idScheduleSetting,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetScheduleSettingWithDetails(idScheduleSetting,new List<string>(){"Transaction"},shouldRemap);
					}
				}

            //IdTransaction -- ZeroOrOne

                public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingListByTransaction(long idTransaction)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllScheduleSettingListByTransaction(idTransaction, db);
                    }
                }
                public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingListByTransaction(long idTransaction, SubscriptionEntities db)
                {
                    Expression<Func<ScheduleSetting, bool>> expression = property=> property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetScheduleSettingCustomList(db, expression, null, true);
                }
                public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllScheduleSettingListByTransactionByPage(idTransaction, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<ScheduleSetting> GetAllScheduleSettingListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<ScheduleSetting, bool>> expression = property => property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetAllScheduleSettingsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public ScheduleSetting GetScheduleSettingWithDetails(long idScheduleSetting, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetScheduleSettingWithDetails(idScheduleSetting, db,includes,shouldRemap);
                }
            }

            public ScheduleSetting GetScheduleSettingWithDetails(long idScheduleSetting, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<ScheduleSetting> query =  db.ScheduleSettings;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapScheduleSettingSingle(query
						.Where(p => p.IdScheduleSetting == idScheduleSetting && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdScheduleSetting == idScheduleSetting && p.IsDeactivated != true).FirstOrDefault();
            }

            public ScheduleSetting GetScheduleSettingWitDetails(long idScheduleSetting,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetScheduleSettingWitDetails(idScheduleSetting, db,shouldRemap);
                }
            }

            public ScheduleSetting GetScheduleSettingWitDetails(long idScheduleSetting, SubscriptionEntities db,bool shouldRemap = false)
            {
				ScheduleSetting _ScheduleSetting = db.ScheduleSettings

					.Include("Frequency")
					.Include("Transaction")
								.Where(p => p.IdScheduleSetting == idScheduleSetting && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapScheduleSettingSingle(_ScheduleSetting);

				return  _ScheduleSetting;
            }

            public List<ScheduleSetting> GetScheduleSettingListByIdList(List<long> scheduleSettingIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetScheduleSettingListByIdList(scheduleSettingIds, db);
                }
            }
            public List<ScheduleSetting> GetScheduleSettingListByIdList(List<long> scheduleSettingIds, SubscriptionEntities db)
            {
                return db.ScheduleSettings.Where(p => p.IsDeactivated != true && scheduleSettingIds.Contains(p.IdScheduleSetting.Value)).ToList();
            }


            public void SaveScheduleSetting(ScheduleSetting scheduleSetting)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveScheduleSetting(scheduleSetting, db);
                }
            }

            public void SaveScheduleSetting(ScheduleSetting scheduleSetting, SubscriptionEntities db)
            {
									if (scheduleSetting.Frequency != null) 
						DaoFactories.Instance.FrequencyDao.SaveFrequency(scheduleSetting.Frequency, db);
									if (scheduleSetting.Transaction != null) 
						DaoFactories.Instance.TransactionDao.SaveTransaction(scheduleSetting.Transaction, db);
				                
                if (scheduleSetting.IdScheduleSetting.HasValue){
					var scheduleSettingFromDb = db.ScheduleSettings.Where(p => p.IdScheduleSetting == scheduleSetting.IdScheduleSetting).FirstOrDefault();
													scheduleSettingFromDb.IsDeactivated = scheduleSetting.IsDeactivated;
													scheduleSettingFromDb.IdFrequency = scheduleSetting.IdFrequency;
													scheduleSettingFromDb.ReccurEvery = scheduleSetting.ReccurEvery;
													scheduleSettingFromDb.WeekOccursOnDays = scheduleSetting.WeekOccursOnDays;
													scheduleSettingFromDb.MonthOccurs = scheduleSetting.MonthOccurs;
													scheduleSettingFromDb.MonthOnSpecificDays = scheduleSetting.MonthOnSpecificDays;
													scheduleSettingFromDb.MonthEveryOrdinal = scheduleSetting.MonthEveryOrdinal;
													scheduleSettingFromDb.MonthEveryDays = scheduleSetting.MonthEveryDays;
													scheduleSettingFromDb.StartDate = scheduleSetting.StartDate;
													scheduleSettingFromDb.EndDate = scheduleSetting.EndDate;
													scheduleSettingFromDb.IdTransaction = scheduleSetting.IdTransaction;
									}
                else{
                                                //fix for saving without duplicating items in db
                              scheduleSetting.Frequency = null;
                                                        //fix for saving without duplicating items in db
                              scheduleSetting.Transaction = null;
                                                db.ScheduleSettings.Add(scheduleSetting);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyScheduleSetting(ScheduleSetting scheduleSetting)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyScheduleSetting(scheduleSetting, db);
                }
            }

            public void SaveOnlyScheduleSetting(ScheduleSetting scheduleSetting, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // scheduleSetting.Frequency = null;
                                                        //fix for saving without duplicating items in db
                             // scheduleSetting.Transaction = null;
                                            if (scheduleSetting.IdScheduleSetting.HasValue){
					var scheduleSettingFromDb = db.ScheduleSettings.Where(p => p.IdScheduleSetting == scheduleSetting.IdScheduleSetting).FirstOrDefault();
													scheduleSettingFromDb.IsDeactivated = scheduleSetting.IsDeactivated;
													scheduleSettingFromDb.IdFrequency = scheduleSetting.IdFrequency;
													scheduleSettingFromDb.ReccurEvery = scheduleSetting.ReccurEvery;
													scheduleSettingFromDb.WeekOccursOnDays = scheduleSetting.WeekOccursOnDays;
													scheduleSettingFromDb.MonthOccurs = scheduleSetting.MonthOccurs;
													scheduleSettingFromDb.MonthOnSpecificDays = scheduleSetting.MonthOnSpecificDays;
													scheduleSettingFromDb.MonthEveryOrdinal = scheduleSetting.MonthEveryOrdinal;
													scheduleSettingFromDb.MonthEveryDays = scheduleSetting.MonthEveryDays;
													scheduleSettingFromDb.StartDate = scheduleSetting.StartDate;
													scheduleSettingFromDb.EndDate = scheduleSetting.EndDate;
													scheduleSettingFromDb.IdTransaction = scheduleSetting.IdTransaction;
										 db.SaveChanges();

				}
                else{
					ScheduleSetting _scheduleSetting = new ScheduleSetting();
																	_scheduleSetting.IsDeactivated = scheduleSetting.IsDeactivated;
													_scheduleSetting.IdFrequency = scheduleSetting.IdFrequency;
													_scheduleSetting.ReccurEvery = scheduleSetting.ReccurEvery;
													_scheduleSetting.WeekOccursOnDays = scheduleSetting.WeekOccursOnDays;
													_scheduleSetting.MonthOccurs = scheduleSetting.MonthOccurs;
													_scheduleSetting.MonthOnSpecificDays = scheduleSetting.MonthOnSpecificDays;
													_scheduleSetting.MonthEveryOrdinal = scheduleSetting.MonthEveryOrdinal;
													_scheduleSetting.MonthEveryDays = scheduleSetting.MonthEveryDays;
													_scheduleSetting.StartDate = scheduleSetting.StartDate;
													_scheduleSetting.EndDate = scheduleSetting.EndDate;
													_scheduleSetting.IdTransaction = scheduleSetting.IdTransaction;
					

                    db.ScheduleSettings.Add(_scheduleSetting);
					db.SaveChanges();
					scheduleSetting.IdScheduleSetting =  _scheduleSetting.IdScheduleSetting;
                    
                }
            }

            public void DeleteScheduleSetting(ScheduleSetting scheduleSetting)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteScheduleSetting(scheduleSetting, db);
                }
            }

            public void DeleteScheduleSetting(ScheduleSetting scheduleSetting, SubscriptionEntities db)
            {
								var scheduleSettingFromDb = GetScheduleSetting(scheduleSetting.IdScheduleSetting.Value,db);
				scheduleSettingFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyScheduleSetting(ScheduleSetting scheduleSetting)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyScheduleSetting(scheduleSetting, db);
                }
            }

            public void DeletePermanentlyScheduleSetting(ScheduleSetting scheduleSetting, SubscriptionEntities db)
            {
								var scheduleSettingFromDb = GetScheduleSetting(scheduleSetting.IdScheduleSetting.Value,db);
				
				db.ScheduleSettings.Remove(scheduleSettingFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class StockLocationDao :IStockLocationDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public StockLocationDao(){
			
			}

			public StockLocationDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<StockLocation> GetAllStockLocations(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllStockLocations(db, shouldRemap);
                }
            }

            public List<StockLocation> GetAllStockLocations(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapStockLocationList(db.StockLocations.Where(p => p.IsDeactivated != true).ToList());
				
				return db.StockLocations.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<StockLocation> GetAllStockLocationsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<StockLocation, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<StockLocation, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllStockLocationsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<StockLocation> GetAllStockLocationsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<StockLocation, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<StockLocation, dynamic> orderExpression = null)
            {
				IQueryable<StockLocation> query =  db.StockLocations;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<StockLocation> baseListReturnType = new BaseListReturnType<StockLocation>();

                IQueryable<StockLocation> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdStockLocation" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<StockLocation, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapStockLocationList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

			



            public BaseListReturnType<StockLocation> GetAllStockLocationsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<StockLocation, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<StockLocation, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllStockLocationsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<StockLocation> GetAllStockLocationsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<StockLocation, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<StockLocation, dynamic> orderExpression = null)
            {
				IQueryable<StockLocation> query =  db.StockLocations;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<StockLocation> baseListReturnType = new BaseListReturnType<StockLocation>();

                IQueryable<StockLocation> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdStockLocation" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<StockLocation, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapStockLocationList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

			






			

			public BaseListReturnType<StockLocation> GetAllStockLocationWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllStockLocationWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<StockLocation> GetAllStockLocationWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<StockLocation> query =  db.StockLocations;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<StockLocation> baseListReturnType = new BaseListReturnType<StockLocation>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapStockLocationList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public StockLocation GetStockLocation(long idStockLocation,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetStockLocation(idStockLocation, db,shouldRemap);
                }
            }
                        public StockLocation GetStockLocation(long idStockLocation, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapStockLocationSingle(db.StockLocations.Where(p => p.IdStockLocation == idStockLocation && p.IsDeactivated != true).FirstOrDefault());

                return db.StockLocations.Where(p => p.IdStockLocation == idStockLocation && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public StockLocation GetStockLocationCustom( Expression<Func<StockLocation, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetStockLocationCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public StockLocation GetStockLocationCustom( SubscriptionEntities db , Expression<Func<StockLocation, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<StockLocation> query =  db.StockLocations;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapStockLocationSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<StockLocation> GetStockLocationCustomList( Expression<Func<StockLocation, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<StockLocation, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetStockLocationCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<StockLocation> GetStockLocationCustomList(  SubscriptionEntities db , Expression<Func<StockLocation, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<StockLocation, dynamic> orderExpression = null)
			{
				IQueryable<StockLocation> query =  db.StockLocations;
                BaseListReturnType<StockLocation> baseListReturnType = new BaseListReturnType<StockLocation>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapStockLocationList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
			


			public StockLocation GetStockLocationWithDetails(long idStockLocation, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetStockLocationWithDetails(idStockLocation, db,includes,shouldRemap);
                }
            }

            public StockLocation GetStockLocationWithDetails(long idStockLocation, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<StockLocation> query =  db.StockLocations;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapStockLocationSingle(query
						.Where(p => p.IdStockLocation == idStockLocation && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdStockLocation == idStockLocation && p.IsDeactivated != true).FirstOrDefault();
            }

            public StockLocation GetStockLocationWitDetails(long idStockLocation,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetStockLocationWitDetails(idStockLocation, db,shouldRemap);
                }
            }

            public StockLocation GetStockLocationWitDetails(long idStockLocation, SubscriptionEntities db,bool shouldRemap = false)
            {
				StockLocation _StockLocation = db.StockLocations

								.Where(p => p.IdStockLocation == idStockLocation && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapStockLocationSingle(_StockLocation);

				return  _StockLocation;
            }

            public List<StockLocation> GetStockLocationListByIdList(List<long> stockLocationIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetStockLocationListByIdList(stockLocationIds, db);
                }
            }
            public List<StockLocation> GetStockLocationListByIdList(List<long> stockLocationIds, SubscriptionEntities db)
            {
                return db.StockLocations.Where(p => p.IsDeactivated != true && stockLocationIds.Contains(p.IdStockLocation.Value)).ToList();
            }


            public void SaveStockLocation(StockLocation stockLocation)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveStockLocation(stockLocation, db);
                }
            }

            public void SaveStockLocation(StockLocation stockLocation, SubscriptionEntities db)
            {
				                
                if (stockLocation.IdStockLocation.HasValue){
					var stockLocationFromDb = db.StockLocations.Where(p => p.IdStockLocation == stockLocation.IdStockLocation).FirstOrDefault();
													stockLocationFromDb.Description = stockLocation.Description;
													stockLocationFromDb.DisplayOrder = stockLocation.DisplayOrder;
													stockLocationFromDb.IsDeactivated = stockLocation.IsDeactivated;
									}
                else{
                                        db.StockLocations.Add(stockLocation);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyStockLocation(StockLocation stockLocation)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyStockLocation(stockLocation, db);
                }
            }

            public void SaveOnlyStockLocation(StockLocation stockLocation, SubscriptionEntities db)
            {
			                    if (stockLocation.IdStockLocation.HasValue){
					var stockLocationFromDb = db.StockLocations.Where(p => p.IdStockLocation == stockLocation.IdStockLocation).FirstOrDefault();
													stockLocationFromDb.Description = stockLocation.Description;
													stockLocationFromDb.DisplayOrder = stockLocation.DisplayOrder;
													stockLocationFromDb.IsDeactivated = stockLocation.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					StockLocation _stockLocation = new StockLocation();
																	_stockLocation.Description = stockLocation.Description;
													_stockLocation.DisplayOrder = stockLocation.DisplayOrder;
													_stockLocation.IsDeactivated = stockLocation.IsDeactivated;
					

                    db.StockLocations.Add(_stockLocation);
					db.SaveChanges();
					stockLocation.IdStockLocation =  _stockLocation.IdStockLocation;
                    
                }
            }

            public void DeleteStockLocation(StockLocation stockLocation)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteStockLocation(stockLocation, db);
                }
            }

            public void DeleteStockLocation(StockLocation stockLocation, SubscriptionEntities db)
            {
								var stockLocationFromDb = GetStockLocation(stockLocation.IdStockLocation.Value,db);
				stockLocationFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyStockLocation(StockLocation stockLocation)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyStockLocation(stockLocation, db);
                }
            }

            public void DeletePermanentlyStockLocation(StockLocation stockLocation, SubscriptionEntities db)
            {
								var stockLocationFromDb = GetStockLocation(stockLocation.IdStockLocation.Value,db);
				
				db.StockLocations.Remove(stockLocationFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class TemporaryPaymentDao :ITemporaryPaymentDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TemporaryPaymentDao(){
			
			}

			public TemporaryPaymentDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TemporaryPayment> GetAllTemporaryPayments(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryPayments(db, shouldRemap);
                }
            }

            public List<TemporaryPayment> GetAllTemporaryPayments(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTemporaryPaymentList(db.TemporaryPayments.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TemporaryPayments.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPayment, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryPayment, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryPaymentsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TemporaryPayment, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryPayment, dynamic> orderExpression = null)
            {
				IQueryable<TemporaryPayment> query =  db.TemporaryPayments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryPayment> baseListReturnType = new BaseListReturnType<TemporaryPayment>();

                IQueryable<TemporaryPayment> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTemporaryPayment" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TemporaryPayment, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Identifier.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Identifier.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryPaymentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsWithTemporaryPaymentDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPayment, bool>> expression = null,bool shouldRemap = false, Func<TemporaryPayment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryPaymentsByPage(sortingPagingInfo, db,expression,new List<string>(){"TemporaryPaymentDetails"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsWithTemporaryTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPayment, bool>> expression = null,bool shouldRemap = false, Func<TemporaryPayment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryPaymentsByPage(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactions"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPayment, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryPayment, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryPaymentsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TemporaryPayment, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryPayment, dynamic> orderExpression = null)
            {
				IQueryable<TemporaryPayment> query =  db.TemporaryPayments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryPayment> baseListReturnType = new BaseListReturnType<TemporaryPayment>();

                IQueryable<TemporaryPayment> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTemporaryPayment" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TemporaryPayment, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryPaymentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsWithTemporaryPaymentDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPayment, bool>> expression = null,bool shouldRemap = false, Func<TemporaryPayment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryPaymentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TemporaryPaymentDetails"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsWithTemporaryTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPayment, bool>> expression = null,bool shouldRemap = false, Func<TemporaryPayment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryPaymentsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactions"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsWithTemporaryPaymentDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryPaymentWitDetails(new List<string>(){"TemporaryPaymentDetails"},shouldRemap);
					}
				}
							public BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsWithTemporaryTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryPaymentWitDetails(new List<string>(){"TemporaryTransactions"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryPaymentWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TemporaryPayment> query =  db.TemporaryPayments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryPayment> baseListReturnType = new BaseListReturnType<TemporaryPayment>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryPaymentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TemporaryPayment GetTemporaryPayment(long idTemporaryPayment,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryPayment(idTemporaryPayment, db,shouldRemap);
                }
            }
                        public TemporaryPayment GetTemporaryPayment(long idTemporaryPayment, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTemporaryPaymentSingle(db.TemporaryPayments.Where(p => p.IdTemporaryPayment == idTemporaryPayment && p.IsDeactivated != true).FirstOrDefault());

                return db.TemporaryPayments.Where(p => p.IdTemporaryPayment == idTemporaryPayment && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TemporaryPayment GetTemporaryPaymentCustom( Expression<Func<TemporaryPayment, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTemporaryPaymentCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TemporaryPayment GetTemporaryPaymentCustom( SubscriptionEntities db , Expression<Func<TemporaryPayment, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TemporaryPayment> query =  db.TemporaryPayments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTemporaryPaymentSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TemporaryPayment> GetTemporaryPaymentCustomList( Expression<Func<TemporaryPayment, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TemporaryPayment, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTemporaryPaymentCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TemporaryPayment> GetTemporaryPaymentCustomList(  SubscriptionEntities db , Expression<Func<TemporaryPayment, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TemporaryPayment, dynamic> orderExpression = null)
			{
				IQueryable<TemporaryPayment> query =  db.TemporaryPayments;
                BaseListReturnType<TemporaryPayment> baseListReturnType = new BaseListReturnType<TemporaryPayment>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryPaymentList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TemporaryPayment GetTemporaryPaymentWithTemporaryPaymentDetailsDetails(long idTemporaryPayment,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTemporaryPaymentWithDetails(idTemporaryPayment,new List<string>(){"TemporaryPaymentDetails"},shouldRemap);
					}
				}

            //IdTemporaryPayment -- Many


							public TemporaryPayment GetTemporaryPaymentWithTemporaryTransactionsDetails(long idTemporaryPayment,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTemporaryPaymentWithDetails(idTemporaryPayment,new List<string>(){"TemporaryTransactions"},shouldRemap);
					}
				}

            //IdTemporaryPayment -- Many


			


			public TemporaryPayment GetTemporaryPaymentWithDetails(long idTemporaryPayment, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryPaymentWithDetails(idTemporaryPayment, db,includes,shouldRemap);
                }
            }

            public TemporaryPayment GetTemporaryPaymentWithDetails(long idTemporaryPayment, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TemporaryPayment> query =  db.TemporaryPayments;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTemporaryPaymentSingle(query
						.Where(p => p.IdTemporaryPayment == idTemporaryPayment && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTemporaryPayment == idTemporaryPayment && p.IsDeactivated != true).FirstOrDefault();
            }

            public TemporaryPayment GetTemporaryPaymentWitDetails(long idTemporaryPayment,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryPaymentWitDetails(idTemporaryPayment, db,shouldRemap);
                }
            }

            public TemporaryPayment GetTemporaryPaymentWitDetails(long idTemporaryPayment, SubscriptionEntities db,bool shouldRemap = false)
            {
				TemporaryPayment _TemporaryPayment = db.TemporaryPayments

					.Include("TemporaryPaymentDetails")
					.Include("TemporaryTransactions")
								.Where(p => p.IdTemporaryPayment == idTemporaryPayment && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTemporaryPaymentSingle(_TemporaryPayment);

				return  _TemporaryPayment;
            }

            public List<TemporaryPayment> GetTemporaryPaymentListByIdList(List<long> temporaryPaymentIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryPaymentListByIdList(temporaryPaymentIds, db);
                }
            }
            public List<TemporaryPayment> GetTemporaryPaymentListByIdList(List<long> temporaryPaymentIds, SubscriptionEntities db)
            {
                return db.TemporaryPayments.Where(p => p.IsDeactivated != true && temporaryPaymentIds.Contains(p.IdTemporaryPayment.Value)).ToList();
            }


            public void SaveTemporaryPayment(TemporaryPayment temporaryPayment)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTemporaryPayment(temporaryPayment, db);
                }
            }

            public void SaveTemporaryPayment(TemporaryPayment temporaryPayment, SubscriptionEntities db)
            {
				                
                if (temporaryPayment.IdTemporaryPayment.HasValue){
					var temporaryPaymentFromDb = db.TemporaryPayments.Where(p => p.IdTemporaryPayment == temporaryPayment.IdTemporaryPayment).FirstOrDefault();
													temporaryPaymentFromDb.IsDeactivated = temporaryPayment.IsDeactivated;
													temporaryPaymentFromDb.PaymentDate = temporaryPayment.PaymentDate;
													temporaryPaymentFromDb.IdUserAuthor = temporaryPayment.IdUserAuthor;
													temporaryPaymentFromDb.Identifier = temporaryPayment.Identifier;
									}
                else{
                                        db.TemporaryPayments.Add(temporaryPayment);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTemporaryPayment(TemporaryPayment temporaryPayment)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTemporaryPayment(temporaryPayment, db);
                }
            }

            public void SaveOnlyTemporaryPayment(TemporaryPayment temporaryPayment, SubscriptionEntities db)
            {
			                    if (temporaryPayment.IdTemporaryPayment.HasValue){
					var temporaryPaymentFromDb = db.TemporaryPayments.Where(p => p.IdTemporaryPayment == temporaryPayment.IdTemporaryPayment).FirstOrDefault();
													temporaryPaymentFromDb.IsDeactivated = temporaryPayment.IsDeactivated;
													temporaryPaymentFromDb.PaymentDate = temporaryPayment.PaymentDate;
													temporaryPaymentFromDb.IdUserAuthor = temporaryPayment.IdUserAuthor;
													temporaryPaymentFromDb.Identifier = temporaryPayment.Identifier;
										 db.SaveChanges();

				}
                else{
					TemporaryPayment _temporaryPayment = new TemporaryPayment();
																	_temporaryPayment.IsDeactivated = temporaryPayment.IsDeactivated;
													_temporaryPayment.PaymentDate = temporaryPayment.PaymentDate;
													_temporaryPayment.IdUserAuthor = temporaryPayment.IdUserAuthor;
													_temporaryPayment.Identifier = temporaryPayment.Identifier;
					

                    db.TemporaryPayments.Add(_temporaryPayment);
					db.SaveChanges();
					temporaryPayment.IdTemporaryPayment =  _temporaryPayment.IdTemporaryPayment;
                    
                }
            }

            public void DeleteTemporaryPayment(TemporaryPayment temporaryPayment)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTemporaryPayment(temporaryPayment, db);
                }
            }

            public void DeleteTemporaryPayment(TemporaryPayment temporaryPayment, SubscriptionEntities db)
            {
								var temporaryPaymentFromDb = GetTemporaryPayment(temporaryPayment.IdTemporaryPayment.Value,db);
				temporaryPaymentFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTemporaryPayment(TemporaryPayment temporaryPayment)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTemporaryPayment(temporaryPayment, db);
                }
            }

            public void DeletePermanentlyTemporaryPayment(TemporaryPayment temporaryPayment, SubscriptionEntities db)
            {
								var temporaryPaymentFromDb = GetTemporaryPayment(temporaryPayment.IdTemporaryPayment.Value,db);
				
				db.TemporaryPayments.Remove(temporaryPaymentFromDb);
                db.SaveChanges();
            }


            
							public List<TemporaryPaymentDetail> UpdateTemporaryPaymentDetailsForTemporaryPaymentWithoutSavingNewItem(List<TemporaryPaymentDetail> newTemporaryPaymentDetails,long idTemporaryPayment)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryPaymentDetailsForTemporaryPaymentWithoutSavingNewItem(newTemporaryPaymentDetails,idTemporaryPayment,db);
                                }
                            }

							public List<TemporaryPaymentDetail> UpdateTemporaryPaymentDetailsForTemporaryPaymentWithoutSavingNewItem(List<TemporaryPaymentDetail> newTemporaryPaymentDetails,long idTemporaryPayment, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryPaymentDetail, bool>> expressionBuilder = p => p.IdTemporaryPayment == idTemporaryPayment;
                                var oldTemporaryPaymentDetails = DaoFactories.Instance.TemporaryPaymentDetailDao.GetTemporaryPaymentDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryPaymentDetails.EntityList.Select(pc => pc.IdTemporaryPaymentDetail).Except(newTemporaryPaymentDetails.Where(pc => pc.IdTemporaryPaymentDetail.HasValue).Select(pc => pc.IdTemporaryPaymentDetail)).ToList();
                                var itemsTobeDeleted = oldTemporaryPaymentDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryPaymentDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTemporaryPaymentDetails;
                            }


                            public List<TemporaryPaymentDetail> UpdateTemporaryPaymentDetailsForTemporaryPayment(List<TemporaryPaymentDetail> newTemporaryPaymentDetails,long idTemporaryPayment)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryPaymentDetailsForTemporaryPayment(newTemporaryPaymentDetails,idTemporaryPayment,db);
                                }
                            }

                            public List<TemporaryPaymentDetail> UpdateTemporaryPaymentDetailsForTemporaryPayment(List<TemporaryPaymentDetail> newTemporaryPaymentDetails,long idTemporaryPayment, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryPaymentDetail, bool>> expressionBuilder = p => p.IdTemporaryPayment == idTemporaryPayment;
                                var oldTemporaryPaymentDetails = DaoFactories.Instance.TemporaryPaymentDetailDao.GetTemporaryPaymentDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryPaymentDetails.EntityList.Select(pc => pc.IdTemporaryPaymentDetail).Except(newTemporaryPaymentDetails.Where(pc => pc.IdTemporaryPaymentDetail.HasValue).Select(pc => pc.IdTemporaryPaymentDetail)).ToList();
                                var itemsTobeDeleted = oldTemporaryPaymentDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryPaymentDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTemporaryPaymentDetails.ForEach(pc =>
                                {
                                    pc.IdTemporaryPayment = idTemporaryPayment;
                                    DaoFactories.Instance.TemporaryPaymentDetailDao.SaveOnlyTemporaryPaymentDetail(pc, db);
                                });
                                return newTemporaryPaymentDetails;
                            }

                        
							public List<TemporaryTransaction> UpdateTemporaryTransactionsForTemporaryPaymentWithoutSavingNewItem(List<TemporaryTransaction> newTemporaryTransactions,long idTemporaryPayment)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionsForTemporaryPaymentWithoutSavingNewItem(newTemporaryTransactions,idTemporaryPayment,db);
                                }
                            }

							public List<TemporaryTransaction> UpdateTemporaryTransactionsForTemporaryPaymentWithoutSavingNewItem(List<TemporaryTransaction> newTemporaryTransactions,long idTemporaryPayment, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransaction, bool>> expressionBuilder = p => p.IdTemporaryPayment == idTemporaryPayment;
                                var oldTemporaryTransactions = DaoFactories.Instance.TemporaryTransactionDao.GetTemporaryTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactions.EntityList.Select(pc => pc.IdTemporaryTransaction).Except(newTemporaryTransactions.Where(pc => pc.IdTemporaryTransaction.HasValue).Select(pc => pc.IdTemporaryTransaction)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTemporaryTransactions;
                            }


                            public List<TemporaryTransaction> UpdateTemporaryTransactionsForTemporaryPayment(List<TemporaryTransaction> newTemporaryTransactions,long idTemporaryPayment)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionsForTemporaryPayment(newTemporaryTransactions,idTemporaryPayment,db);
                                }
                            }

                            public List<TemporaryTransaction> UpdateTemporaryTransactionsForTemporaryPayment(List<TemporaryTransaction> newTemporaryTransactions,long idTemporaryPayment, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransaction, bool>> expressionBuilder = p => p.IdTemporaryPayment == idTemporaryPayment;
                                var oldTemporaryTransactions = DaoFactories.Instance.TemporaryTransactionDao.GetTemporaryTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactions.EntityList.Select(pc => pc.IdTemporaryTransaction).Except(newTemporaryTransactions.Where(pc => pc.IdTemporaryTransaction.HasValue).Select(pc => pc.IdTemporaryTransaction)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTemporaryTransactions.ForEach(pc =>
                                {
                                    pc.IdTemporaryPayment = idTemporaryPayment;
                                    DaoFactories.Instance.TemporaryTransactionDao.SaveOnlyTemporaryTransaction(pc, db);
                                });
                                return newTemporaryTransactions;
                            }

                        


    



		}
			public partial class TemporaryPaymentDetailDao :ITemporaryPaymentDetailDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TemporaryPaymentDetailDao(){
			
			}

			public TemporaryPaymentDetailDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TemporaryPaymentDetail> GetAllTemporaryPaymentDetails(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryPaymentDetails(db, shouldRemap);
                }
            }

            public List<TemporaryPaymentDetail> GetAllTemporaryPaymentDetails(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTemporaryPaymentDetailList(db.TemporaryPaymentDetails.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TemporaryPaymentDetails.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPaymentDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryPaymentDetailsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TemporaryPaymentDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
            {
				IQueryable<TemporaryPaymentDetail> query =  db.TemporaryPaymentDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryPaymentDetail> baseListReturnType = new BaseListReturnType<TemporaryPaymentDetail>();

                IQueryable<TemporaryPaymentDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTemporaryPaymentDetail" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TemporaryPaymentDetail, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.ChequeNo.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ChequeNo.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Identifier.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryPaymentDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailsWithTemporaryPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPaymentDetail, bool>> expression = null,bool shouldRemap = false, Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryPaymentDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"TemporaryPayment"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPaymentDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryPaymentDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TemporaryPaymentDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
            {
				IQueryable<TemporaryPaymentDetail> query =  db.TemporaryPaymentDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryPaymentDetail> baseListReturnType = new BaseListReturnType<TemporaryPaymentDetail>();

                IQueryable<TemporaryPaymentDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTemporaryPaymentDetail" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TemporaryPaymentDetail, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryPaymentDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailsWithTemporaryPaymentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPaymentDetail, bool>> expression = null,bool shouldRemap = false, Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryPaymentDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TemporaryPayment"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailsWithTemporaryPaymentDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryPaymentDetailWitDetails(new List<string>(){"TemporaryPayment"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryPaymentDetailWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TemporaryPaymentDetail> query =  db.TemporaryPaymentDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryPaymentDetail> baseListReturnType = new BaseListReturnType<TemporaryPaymentDetail>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryPaymentDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TemporaryPaymentDetail GetTemporaryPaymentDetail(long idTemporaryPaymentDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryPaymentDetail(idTemporaryPaymentDetail, db,shouldRemap);
                }
            }
                        public TemporaryPaymentDetail GetTemporaryPaymentDetail(long idTemporaryPaymentDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTemporaryPaymentDetailSingle(db.TemporaryPaymentDetails.Where(p => p.IdTemporaryPaymentDetail == idTemporaryPaymentDetail && p.IsDeactivated != true).FirstOrDefault());

                return db.TemporaryPaymentDetails.Where(p => p.IdTemporaryPaymentDetail == idTemporaryPaymentDetail && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TemporaryPaymentDetail GetTemporaryPaymentDetailCustom( Expression<Func<TemporaryPaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTemporaryPaymentDetailCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TemporaryPaymentDetail GetTemporaryPaymentDetailCustom( SubscriptionEntities db , Expression<Func<TemporaryPaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TemporaryPaymentDetail> query =  db.TemporaryPaymentDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTemporaryPaymentDetailSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TemporaryPaymentDetail> GetTemporaryPaymentDetailCustomList( Expression<Func<TemporaryPaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTemporaryPaymentDetailCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TemporaryPaymentDetail> GetTemporaryPaymentDetailCustomList(  SubscriptionEntities db , Expression<Func<TemporaryPaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
			{
				IQueryable<TemporaryPaymentDetail> query =  db.TemporaryPaymentDetails;
                BaseListReturnType<TemporaryPaymentDetail> baseListReturnType = new BaseListReturnType<TemporaryPaymentDetail>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryPaymentDetailList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TemporaryPaymentDetail GetTemporaryPaymentDetailWithTemporaryPaymentDetails(long idTemporaryPaymentDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTemporaryPaymentDetailWithDetails(idTemporaryPaymentDetail,new List<string>(){"TemporaryPayment"},shouldRemap);
					}
				}

            //IdTemporaryPayment -- ZeroOrOne

                public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailListByTemporaryPayment(long idTemporaryPayment)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryPaymentDetailListByTemporaryPayment(idTemporaryPayment, db);
                    }
                }
                public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailListByTemporaryPayment(long idTemporaryPayment, SubscriptionEntities db)
                {
                    Expression<Func<TemporaryPaymentDetail, bool>> expression = property=> property.IdTemporaryPayment == idTemporaryPayment && property.IsDeactivated !=true;
                    return GetTemporaryPaymentDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailListByTemporaryPaymentByPage(long idTemporaryPayment, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryPaymentDetailListByTemporaryPaymentByPage(idTemporaryPayment, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailListByTemporaryPaymentByPage(long idTemporaryPayment, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TemporaryPaymentDetail, bool>> expression = property => property.IdTemporaryPayment == idTemporaryPayment && property.IsDeactivated !=true;
                    return GetAllTemporaryPaymentDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public TemporaryPaymentDetail GetTemporaryPaymentDetailWithDetails(long idTemporaryPaymentDetail, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryPaymentDetailWithDetails(idTemporaryPaymentDetail, db,includes,shouldRemap);
                }
            }

            public TemporaryPaymentDetail GetTemporaryPaymentDetailWithDetails(long idTemporaryPaymentDetail, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TemporaryPaymentDetail> query =  db.TemporaryPaymentDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTemporaryPaymentDetailSingle(query
						.Where(p => p.IdTemporaryPaymentDetail == idTemporaryPaymentDetail && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTemporaryPaymentDetail == idTemporaryPaymentDetail && p.IsDeactivated != true).FirstOrDefault();
            }

            public TemporaryPaymentDetail GetTemporaryPaymentDetailWitDetails(long idTemporaryPaymentDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryPaymentDetailWitDetails(idTemporaryPaymentDetail, db,shouldRemap);
                }
            }

            public TemporaryPaymentDetail GetTemporaryPaymentDetailWitDetails(long idTemporaryPaymentDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				TemporaryPaymentDetail _TemporaryPaymentDetail = db.TemporaryPaymentDetails

					.Include("TemporaryPayment")
								.Where(p => p.IdTemporaryPaymentDetail == idTemporaryPaymentDetail && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTemporaryPaymentDetailSingle(_TemporaryPaymentDetail);

				return  _TemporaryPaymentDetail;
            }

            public List<TemporaryPaymentDetail> GetTemporaryPaymentDetailListByIdList(List<long> temporaryPaymentDetailIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryPaymentDetailListByIdList(temporaryPaymentDetailIds, db);
                }
            }
            public List<TemporaryPaymentDetail> GetTemporaryPaymentDetailListByIdList(List<long> temporaryPaymentDetailIds, SubscriptionEntities db)
            {
                return db.TemporaryPaymentDetails.Where(p => p.IsDeactivated != true && temporaryPaymentDetailIds.Contains(p.IdTemporaryPaymentDetail.Value)).ToList();
            }


            public void SaveTemporaryPaymentDetail(TemporaryPaymentDetail temporaryPaymentDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTemporaryPaymentDetail(temporaryPaymentDetail, db);
                }
            }

            public void SaveTemporaryPaymentDetail(TemporaryPaymentDetail temporaryPaymentDetail, SubscriptionEntities db)
            {
									if (temporaryPaymentDetail.TemporaryPayment != null) 
						DaoFactories.Instance.TemporaryPaymentDao.SaveTemporaryPayment(temporaryPaymentDetail.TemporaryPayment, db);
				                
                if (temporaryPaymentDetail.IdTemporaryPaymentDetail.HasValue){
					var temporaryPaymentDetailFromDb = db.TemporaryPaymentDetails.Where(p => p.IdTemporaryPaymentDetail == temporaryPaymentDetail.IdTemporaryPaymentDetail).FirstOrDefault();
													temporaryPaymentDetailFromDb.IsDeactivated = temporaryPaymentDetail.IsDeactivated;
													temporaryPaymentDetailFromDb.PaymentAmount = temporaryPaymentDetail.PaymentAmount;
													temporaryPaymentDetailFromDb.IdPaymentMethod = temporaryPaymentDetail.IdPaymentMethod;
													temporaryPaymentDetailFromDb.IdTemporaryPayment = temporaryPaymentDetail.IdTemporaryPayment;
													temporaryPaymentDetailFromDb.ChequeNo = temporaryPaymentDetail.ChequeNo;
													temporaryPaymentDetailFromDb.Identifier = temporaryPaymentDetail.Identifier;
									}
                else{
                                                //fix for saving without duplicating items in db
                              temporaryPaymentDetail.TemporaryPayment = null;
                                                db.TemporaryPaymentDetails.Add(temporaryPaymentDetail);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTemporaryPaymentDetail(TemporaryPaymentDetail temporaryPaymentDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTemporaryPaymentDetail(temporaryPaymentDetail, db);
                }
            }

            public void SaveOnlyTemporaryPaymentDetail(TemporaryPaymentDetail temporaryPaymentDetail, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // temporaryPaymentDetail.TemporaryPayment = null;
                                            if (temporaryPaymentDetail.IdTemporaryPaymentDetail.HasValue){
					var temporaryPaymentDetailFromDb = db.TemporaryPaymentDetails.Where(p => p.IdTemporaryPaymentDetail == temporaryPaymentDetail.IdTemporaryPaymentDetail).FirstOrDefault();
													temporaryPaymentDetailFromDb.IsDeactivated = temporaryPaymentDetail.IsDeactivated;
													temporaryPaymentDetailFromDb.PaymentAmount = temporaryPaymentDetail.PaymentAmount;
													temporaryPaymentDetailFromDb.IdPaymentMethod = temporaryPaymentDetail.IdPaymentMethod;
													temporaryPaymentDetailFromDb.IdTemporaryPayment = temporaryPaymentDetail.IdTemporaryPayment;
													temporaryPaymentDetailFromDb.ChequeNo = temporaryPaymentDetail.ChequeNo;
													temporaryPaymentDetailFromDb.Identifier = temporaryPaymentDetail.Identifier;
										 db.SaveChanges();

				}
                else{
					TemporaryPaymentDetail _temporaryPaymentDetail = new TemporaryPaymentDetail();
																	_temporaryPaymentDetail.IsDeactivated = temporaryPaymentDetail.IsDeactivated;
													_temporaryPaymentDetail.PaymentAmount = temporaryPaymentDetail.PaymentAmount;
													_temporaryPaymentDetail.IdPaymentMethod = temporaryPaymentDetail.IdPaymentMethod;
													_temporaryPaymentDetail.IdTemporaryPayment = temporaryPaymentDetail.IdTemporaryPayment;
													_temporaryPaymentDetail.ChequeNo = temporaryPaymentDetail.ChequeNo;
													_temporaryPaymentDetail.Identifier = temporaryPaymentDetail.Identifier;
					

                    db.TemporaryPaymentDetails.Add(_temporaryPaymentDetail);
					db.SaveChanges();
					temporaryPaymentDetail.IdTemporaryPaymentDetail =  _temporaryPaymentDetail.IdTemporaryPaymentDetail;
                    
                }
            }

            public void DeleteTemporaryPaymentDetail(TemporaryPaymentDetail temporaryPaymentDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTemporaryPaymentDetail(temporaryPaymentDetail, db);
                }
            }

            public void DeleteTemporaryPaymentDetail(TemporaryPaymentDetail temporaryPaymentDetail, SubscriptionEntities db)
            {
								var temporaryPaymentDetailFromDb = GetTemporaryPaymentDetail(temporaryPaymentDetail.IdTemporaryPaymentDetail.Value,db);
				temporaryPaymentDetailFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTemporaryPaymentDetail(TemporaryPaymentDetail temporaryPaymentDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTemporaryPaymentDetail(temporaryPaymentDetail, db);
                }
            }

            public void DeletePermanentlyTemporaryPaymentDetail(TemporaryPaymentDetail temporaryPaymentDetail, SubscriptionEntities db)
            {
								var temporaryPaymentDetailFromDb = GetTemporaryPaymentDetail(temporaryPaymentDetail.IdTemporaryPaymentDetail.Value,db);
				
				db.TemporaryPaymentDetails.Remove(temporaryPaymentDetailFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class TemporaryTransactionDao :ITemporaryTransactionDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TemporaryTransactionDao(){
			
			}

			public TemporaryTransactionDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TemporaryTransaction> GetAllTemporaryTransactions(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactions(db, shouldRemap);
                }
            }

            public List<TemporaryTransaction> GetAllTemporaryTransactions(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTemporaryTransactionList(db.TemporaryTransactions.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TemporaryTransactions.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TemporaryTransaction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
            {
				IQueryable<TemporaryTransaction> query =  db.TemporaryTransactions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryTransaction> baseListReturnType = new BaseListReturnType<TemporaryTransaction>();

                IQueryable<TemporaryTransaction> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTemporaryTransaction" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TemporaryTransaction, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.ReceiptNo.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ReceiptNo.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Memo.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Identitifier.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithBankStatementHitListDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementHitList"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithBankStatementStagingDetailDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetail"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithBankStatementStagingHitDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHit"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithTemporaryPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"TemporaryPayment"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithTemporaryTransactionDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactionDetails"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TemporaryTransaction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
            {
				IQueryable<TemporaryTransaction> query =  db.TemporaryTransactions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryTransaction> baseListReturnType = new BaseListReturnType<TemporaryTransaction>();

                IQueryable<TemporaryTransaction> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTemporaryTransaction" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TemporaryTransaction, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithBankStatementHitListDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementHitList"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithBankStatementStagingDetailDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetail"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithBankStatementStagingHitDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHit"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithTemporaryPaymentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TemporaryPayment"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithTemporaryTransactionDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactionDetails"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithBankStatementHitListDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionWitDetails(new List<string>(){"BankStatementHitList"},shouldRemap);
					}
				}
							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithBankStatementStagingDetailDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionWitDetails(new List<string>(){"BankStatementStagingDetail"},shouldRemap);
					}
				}
							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithBankStatementStagingHitDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionWitDetails(new List<string>(){"BankStatementStagingHit"},shouldRemap);
					}
				}
							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithTemporaryPaymentDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionWitDetails(new List<string>(){"TemporaryPayment"},shouldRemap);
					}
				}
							public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithTemporaryTransactionDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionWitDetails(new List<string>(){"TemporaryTransactionDetails"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TemporaryTransaction> query =  db.TemporaryTransactions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryTransaction> baseListReturnType = new BaseListReturnType<TemporaryTransaction>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TemporaryTransaction GetTemporaryTransaction(long idTemporaryTransaction,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransaction(idTemporaryTransaction, db,shouldRemap);
                }
            }
                        public TemporaryTransaction GetTemporaryTransaction(long idTemporaryTransaction, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTemporaryTransactionSingle(db.TemporaryTransactions.Where(p => p.IdTemporaryTransaction == idTemporaryTransaction && p.IsDeactivated != true).FirstOrDefault());

                return db.TemporaryTransactions.Where(p => p.IdTemporaryTransaction == idTemporaryTransaction && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TemporaryTransaction GetTemporaryTransactionCustom( Expression<Func<TemporaryTransaction, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTemporaryTransactionCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TemporaryTransaction GetTemporaryTransactionCustom( SubscriptionEntities db , Expression<Func<TemporaryTransaction, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TemporaryTransaction> query =  db.TemporaryTransactions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTemporaryTransactionSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TemporaryTransaction> GetTemporaryTransactionCustomList( Expression<Func<TemporaryTransaction, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TemporaryTransaction, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTemporaryTransactionCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TemporaryTransaction> GetTemporaryTransactionCustomList(  SubscriptionEntities db , Expression<Func<TemporaryTransaction, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TemporaryTransaction, dynamic> orderExpression = null)
			{
				IQueryable<TemporaryTransaction> query =  db.TemporaryTransactions;
                BaseListReturnType<TemporaryTransaction> baseListReturnType = new BaseListReturnType<TemporaryTransaction>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TemporaryTransaction GetTemporaryTransactionWithBankStatementHitListDetails(long idTemporaryTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTemporaryTransactionWithDetails(idTemporaryTransaction,new List<string>(){"BankStatementHitList"},shouldRemap);
					}
				}

            //IdBankStatementHitList -- ZeroOrOne

                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementHitList(long idBankStatementHitList)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionListByBankStatementHitList(idBankStatementHitList, db);
                    }
                }
                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementHitList(long idBankStatementHitList, SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransaction, bool>> expression = property=> property.IdBankStatementHitList == idBankStatementHitList && property.IsDeactivated !=true;
                    return GetTemporaryTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementHitListByPage(long idBankStatementHitList, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionListByBankStatementHitListByPage(idBankStatementHitList, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementHitListByPage(long idBankStatementHitList, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransaction, bool>> expression = property => property.IdBankStatementHitList == idBankStatementHitList && property.IsDeactivated !=true;
                    return GetAllTemporaryTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TemporaryTransaction GetTemporaryTransactionWithBankStatementStagingDetailDetails(long idTemporaryTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTemporaryTransactionWithDetails(idTemporaryTransaction,new List<string>(){"BankStatementStagingDetail"},shouldRemap);
					}
				}

            //IdBankStatementStagingDetail -- ZeroOrOne

                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementStagingDetail(long idBankStatementStagingDetail)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionListByBankStatementStagingDetail(idBankStatementStagingDetail, db);
                    }
                }
                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementStagingDetail(long idBankStatementStagingDetail, SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransaction, bool>> expression = property=> property.IdBankStatementStagingDetail == idBankStatementStagingDetail && property.IsDeactivated !=true;
                    return GetTemporaryTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementStagingDetailByPage(long idBankStatementStagingDetail, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionListByBankStatementStagingDetailByPage(idBankStatementStagingDetail, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementStagingDetailByPage(long idBankStatementStagingDetail, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransaction, bool>> expression = property => property.IdBankStatementStagingDetail == idBankStatementStagingDetail && property.IsDeactivated !=true;
                    return GetAllTemporaryTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TemporaryTransaction GetTemporaryTransactionWithBankStatementStagingHitDetails(long idTemporaryTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTemporaryTransactionWithDetails(idTemporaryTransaction,new List<string>(){"BankStatementStagingHit"},shouldRemap);
					}
				}

            //IdBankStatementStagingHit -- ZeroOrOne

                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementStagingHit(long idBankStatementStagingHit)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionListByBankStatementStagingHit(idBankStatementStagingHit, db);
                    }
                }
                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementStagingHit(long idBankStatementStagingHit, SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransaction, bool>> expression = property=> property.IdBankStatementStagingHit == idBankStatementStagingHit && property.IsDeactivated !=true;
                    return GetTemporaryTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementStagingHitByPage(long idBankStatementStagingHit, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionListByBankStatementStagingHitByPage(idBankStatementStagingHit, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementStagingHitByPage(long idBankStatementStagingHit, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransaction, bool>> expression = property => property.IdBankStatementStagingHit == idBankStatementStagingHit && property.IsDeactivated !=true;
                    return GetAllTemporaryTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TemporaryTransaction GetTemporaryTransactionWithTemporaryPaymentDetails(long idTemporaryTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTemporaryTransactionWithDetails(idTemporaryTransaction,new List<string>(){"TemporaryPayment"},shouldRemap);
					}
				}

            //IdTemporaryPayment -- ZeroOrOne

                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByTemporaryPayment(long idTemporaryPayment)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionListByTemporaryPayment(idTemporaryPayment, db);
                    }
                }
                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByTemporaryPayment(long idTemporaryPayment, SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransaction, bool>> expression = property=> property.IdTemporaryPayment == idTemporaryPayment && property.IsDeactivated !=true;
                    return GetTemporaryTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByTemporaryPaymentByPage(long idTemporaryPayment, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionListByTemporaryPaymentByPage(idTemporaryPayment, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByTemporaryPaymentByPage(long idTemporaryPayment, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransaction, bool>> expression = property => property.IdTemporaryPayment == idTemporaryPayment && property.IsDeactivated !=true;
                    return GetAllTemporaryTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TemporaryTransaction GetTemporaryTransactionWithTemporaryTransactionDetailsDetails(long idTemporaryTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTemporaryTransactionWithDetails(idTemporaryTransaction,new List<string>(){"TemporaryTransactionDetails"},shouldRemap);
					}
				}

            //IdTemporaryTransaction -- Many


			


			public TemporaryTransaction GetTemporaryTransactionWithDetails(long idTemporaryTransaction, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionWithDetails(idTemporaryTransaction, db,includes,shouldRemap);
                }
            }

            public TemporaryTransaction GetTemporaryTransactionWithDetails(long idTemporaryTransaction, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TemporaryTransaction> query =  db.TemporaryTransactions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTemporaryTransactionSingle(query
						.Where(p => p.IdTemporaryTransaction == idTemporaryTransaction && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTemporaryTransaction == idTemporaryTransaction && p.IsDeactivated != true).FirstOrDefault();
            }

            public TemporaryTransaction GetTemporaryTransactionWitDetails(long idTemporaryTransaction,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionWitDetails(idTemporaryTransaction, db,shouldRemap);
                }
            }

            public TemporaryTransaction GetTemporaryTransactionWitDetails(long idTemporaryTransaction, SubscriptionEntities db,bool shouldRemap = false)
            {
				TemporaryTransaction _TemporaryTransaction = db.TemporaryTransactions

					.Include("BankStatementHitList")
					.Include("BankStatementStagingDetail")
					.Include("BankStatementStagingHit")
					.Include("TemporaryPayment")
					.Include("TemporaryTransactionDetails")
								.Where(p => p.IdTemporaryTransaction == idTemporaryTransaction && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTemporaryTransactionSingle(_TemporaryTransaction);

				return  _TemporaryTransaction;
            }

            public List<TemporaryTransaction> GetTemporaryTransactionListByIdList(List<long> temporaryTransactionIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionListByIdList(temporaryTransactionIds, db);
                }
            }
            public List<TemporaryTransaction> GetTemporaryTransactionListByIdList(List<long> temporaryTransactionIds, SubscriptionEntities db)
            {
                return db.TemporaryTransactions.Where(p => p.IsDeactivated != true && temporaryTransactionIds.Contains(p.IdTemporaryTransaction.Value)).ToList();
            }


            public void SaveTemporaryTransaction(TemporaryTransaction temporaryTransaction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTemporaryTransaction(temporaryTransaction, db);
                }
            }

            public void SaveTemporaryTransaction(TemporaryTransaction temporaryTransaction, SubscriptionEntities db)
            {
									if (temporaryTransaction.BankStatementHitList != null) 
						DaoFactories.Instance.BankStatementHitListDao.SaveBankStatementHitList(temporaryTransaction.BankStatementHitList, db);
									if (temporaryTransaction.BankStatementStagingDetail != null) 
						DaoFactories.Instance.BankStatementStagingDetailDao.SaveBankStatementStagingDetail(temporaryTransaction.BankStatementStagingDetail, db);
									if (temporaryTransaction.BankStatementStagingHit != null) 
						DaoFactories.Instance.BankStatementStagingHitDao.SaveBankStatementStagingHit(temporaryTransaction.BankStatementStagingHit, db);
									if (temporaryTransaction.TemporaryPayment != null) 
						DaoFactories.Instance.TemporaryPaymentDao.SaveTemporaryPayment(temporaryTransaction.TemporaryPayment, db);
				                
                if (temporaryTransaction.IdTemporaryTransaction.HasValue){
					var temporaryTransactionFromDb = db.TemporaryTransactions.Where(p => p.IdTemporaryTransaction == temporaryTransaction.IdTemporaryTransaction).FirstOrDefault();
													temporaryTransactionFromDb.IdTransactionType = temporaryTransaction.IdTransactionType;
													temporaryTransactionFromDb.IsDeactivated = temporaryTransaction.IsDeactivated;
													temporaryTransactionFromDb.TransactionDate = temporaryTransaction.TransactionDate;
													temporaryTransactionFromDb.ReceiptNo = temporaryTransaction.ReceiptNo;
													temporaryTransactionFromDb.IdCustomer = temporaryTransaction.IdCustomer;
													temporaryTransactionFromDb.IdTransactionClass = temporaryTransaction.IdTransactionClass;
													temporaryTransactionFromDb.IdTransactionTemplate = temporaryTransaction.IdTransactionTemplate;
													temporaryTransactionFromDb.IdTransactionAccount = temporaryTransaction.IdTransactionAccount;
													temporaryTransactionFromDb.Memo = temporaryTransaction.Memo;
													temporaryTransactionFromDb.CapturedDate = temporaryTransaction.CapturedDate;
													temporaryTransactionFromDb.TotalAmount = temporaryTransaction.TotalAmount;
													temporaryTransactionFromDb.IdUserAuthor = temporaryTransaction.IdUserAuthor;
													temporaryTransactionFromDb.IdTemporaryPayment = temporaryTransaction.IdTemporaryPayment;
													temporaryTransactionFromDb.IdBankStatementStagingDetail = temporaryTransaction.IdBankStatementStagingDetail;
													temporaryTransactionFromDb.Identitifier = temporaryTransaction.Identitifier;
													temporaryTransactionFromDb.IdBankStatementHitList = temporaryTransaction.IdBankStatementHitList;
													temporaryTransactionFromDb.IdBankStatementStagingHit = temporaryTransaction.IdBankStatementStagingHit;
									}
                else{
                                                //fix for saving without duplicating items in db
                              temporaryTransaction.BankStatementHitList = null;
                                                        //fix for saving without duplicating items in db
                              temporaryTransaction.BankStatementStagingDetail = null;
                                                        //fix for saving without duplicating items in db
                              temporaryTransaction.BankStatementStagingHit = null;
                                                        //fix for saving without duplicating items in db
                              temporaryTransaction.TemporaryPayment = null;
                                                db.TemporaryTransactions.Add(temporaryTransaction);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTemporaryTransaction(TemporaryTransaction temporaryTransaction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTemporaryTransaction(temporaryTransaction, db);
                }
            }

            public void SaveOnlyTemporaryTransaction(TemporaryTransaction temporaryTransaction, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // temporaryTransaction.BankStatementHitList = null;
                                                        //fix for saving without duplicating items in db
                             // temporaryTransaction.BankStatementStagingDetail = null;
                                                        //fix for saving without duplicating items in db
                             // temporaryTransaction.BankStatementStagingHit = null;
                                                        //fix for saving without duplicating items in db
                             // temporaryTransaction.TemporaryPayment = null;
                                            if (temporaryTransaction.IdTemporaryTransaction.HasValue){
					var temporaryTransactionFromDb = db.TemporaryTransactions.Where(p => p.IdTemporaryTransaction == temporaryTransaction.IdTemporaryTransaction).FirstOrDefault();
													temporaryTransactionFromDb.IdTransactionType = temporaryTransaction.IdTransactionType;
													temporaryTransactionFromDb.IsDeactivated = temporaryTransaction.IsDeactivated;
													temporaryTransactionFromDb.TransactionDate = temporaryTransaction.TransactionDate;
													temporaryTransactionFromDb.ReceiptNo = temporaryTransaction.ReceiptNo;
													temporaryTransactionFromDb.IdCustomer = temporaryTransaction.IdCustomer;
													temporaryTransactionFromDb.IdTransactionClass = temporaryTransaction.IdTransactionClass;
													temporaryTransactionFromDb.IdTransactionTemplate = temporaryTransaction.IdTransactionTemplate;
													temporaryTransactionFromDb.IdTransactionAccount = temporaryTransaction.IdTransactionAccount;
													temporaryTransactionFromDb.Memo = temporaryTransaction.Memo;
													temporaryTransactionFromDb.CapturedDate = temporaryTransaction.CapturedDate;
													temporaryTransactionFromDb.TotalAmount = temporaryTransaction.TotalAmount;
													temporaryTransactionFromDb.IdUserAuthor = temporaryTransaction.IdUserAuthor;
													temporaryTransactionFromDb.IdTemporaryPayment = temporaryTransaction.IdTemporaryPayment;
													temporaryTransactionFromDb.IdBankStatementStagingDetail = temporaryTransaction.IdBankStatementStagingDetail;
													temporaryTransactionFromDb.Identitifier = temporaryTransaction.Identitifier;
													temporaryTransactionFromDb.IdBankStatementHitList = temporaryTransaction.IdBankStatementHitList;
													temporaryTransactionFromDb.IdBankStatementStagingHit = temporaryTransaction.IdBankStatementStagingHit;
										 db.SaveChanges();

				}
                else{
					TemporaryTransaction _temporaryTransaction = new TemporaryTransaction();
																	_temporaryTransaction.IdTransactionType = temporaryTransaction.IdTransactionType;
													_temporaryTransaction.IsDeactivated = temporaryTransaction.IsDeactivated;
													_temporaryTransaction.TransactionDate = temporaryTransaction.TransactionDate;
													_temporaryTransaction.ReceiptNo = temporaryTransaction.ReceiptNo;
													_temporaryTransaction.IdCustomer = temporaryTransaction.IdCustomer;
													_temporaryTransaction.IdTransactionClass = temporaryTransaction.IdTransactionClass;
													_temporaryTransaction.IdTransactionTemplate = temporaryTransaction.IdTransactionTemplate;
													_temporaryTransaction.IdTransactionAccount = temporaryTransaction.IdTransactionAccount;
													_temporaryTransaction.Memo = temporaryTransaction.Memo;
													_temporaryTransaction.CapturedDate = temporaryTransaction.CapturedDate;
													_temporaryTransaction.TotalAmount = temporaryTransaction.TotalAmount;
													_temporaryTransaction.IdUserAuthor = temporaryTransaction.IdUserAuthor;
													_temporaryTransaction.IdTemporaryPayment = temporaryTransaction.IdTemporaryPayment;
													_temporaryTransaction.IdBankStatementStagingDetail = temporaryTransaction.IdBankStatementStagingDetail;
													_temporaryTransaction.Identitifier = temporaryTransaction.Identitifier;
													_temporaryTransaction.IdBankStatementHitList = temporaryTransaction.IdBankStatementHitList;
													_temporaryTransaction.IdBankStatementStagingHit = temporaryTransaction.IdBankStatementStagingHit;
					

                    db.TemporaryTransactions.Add(_temporaryTransaction);
					db.SaveChanges();
					temporaryTransaction.IdTemporaryTransaction =  _temporaryTransaction.IdTemporaryTransaction;
                    
                }
            }

            public void DeleteTemporaryTransaction(TemporaryTransaction temporaryTransaction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTemporaryTransaction(temporaryTransaction, db);
                }
            }

            public void DeleteTemporaryTransaction(TemporaryTransaction temporaryTransaction, SubscriptionEntities db)
            {
								var temporaryTransactionFromDb = GetTemporaryTransaction(temporaryTransaction.IdTemporaryTransaction.Value,db);
				temporaryTransactionFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTemporaryTransaction(TemporaryTransaction temporaryTransaction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTemporaryTransaction(temporaryTransaction, db);
                }
            }

            public void DeletePermanentlyTemporaryTransaction(TemporaryTransaction temporaryTransaction, SubscriptionEntities db)
            {
								var temporaryTransactionFromDb = GetTemporaryTransaction(temporaryTransaction.IdTemporaryTransaction.Value,db);
				
				db.TemporaryTransactions.Remove(temporaryTransactionFromDb);
                db.SaveChanges();
            }


            
							public List<TemporaryTransactionDetail> UpdateTemporaryTransactionDetailsForTemporaryTransactionWithoutSavingNewItem(List<TemporaryTransactionDetail> newTemporaryTransactionDetails,long idTemporaryTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionDetailsForTemporaryTransactionWithoutSavingNewItem(newTemporaryTransactionDetails,idTemporaryTransaction,db);
                                }
                            }

							public List<TemporaryTransactionDetail> UpdateTemporaryTransactionDetailsForTemporaryTransactionWithoutSavingNewItem(List<TemporaryTransactionDetail> newTemporaryTransactionDetails,long idTemporaryTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransactionDetail, bool>> expressionBuilder = p => p.IdTemporaryTransaction == idTemporaryTransaction;
                                var oldTemporaryTransactionDetails = DaoFactories.Instance.TemporaryTransactionDetailDao.GetTemporaryTransactionDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactionDetails.EntityList.Select(pc => pc.IdTemporaryTransactionDetail).Except(newTemporaryTransactionDetails.Where(pc => pc.IdTemporaryTransactionDetail.HasValue).Select(pc => pc.IdTemporaryTransactionDetail)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactionDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransactionDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTemporaryTransactionDetails;
                            }


                            public List<TemporaryTransactionDetail> UpdateTemporaryTransactionDetailsForTemporaryTransaction(List<TemporaryTransactionDetail> newTemporaryTransactionDetails,long idTemporaryTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionDetailsForTemporaryTransaction(newTemporaryTransactionDetails,idTemporaryTransaction,db);
                                }
                            }

                            public List<TemporaryTransactionDetail> UpdateTemporaryTransactionDetailsForTemporaryTransaction(List<TemporaryTransactionDetail> newTemporaryTransactionDetails,long idTemporaryTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransactionDetail, bool>> expressionBuilder = p => p.IdTemporaryTransaction == idTemporaryTransaction;
                                var oldTemporaryTransactionDetails = DaoFactories.Instance.TemporaryTransactionDetailDao.GetTemporaryTransactionDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactionDetails.EntityList.Select(pc => pc.IdTemporaryTransactionDetail).Except(newTemporaryTransactionDetails.Where(pc => pc.IdTemporaryTransactionDetail.HasValue).Select(pc => pc.IdTemporaryTransactionDetail)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactionDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransactionDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTemporaryTransactionDetails.ForEach(pc =>
                                {
                                    pc.IdTemporaryTransaction = idTemporaryTransaction;
                                    DaoFactories.Instance.TemporaryTransactionDetailDao.SaveOnlyTemporaryTransactionDetail(pc, db);
                                });
                                return newTemporaryTransactionDetails;
                            }

                        


    



		}
			public partial class TemporaryTransactionDetailDao :ITemporaryTransactionDetailDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TemporaryTransactionDetailDao(){
			
			}

			public TemporaryTransactionDetailDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TemporaryTransactionDetail> GetAllTemporaryTransactionDetails(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionDetails(db, shouldRemap);
                }
            }

            public List<TemporaryTransactionDetail> GetAllTemporaryTransactionDetails(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTemporaryTransactionDetailList(db.TemporaryTransactionDetails.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TemporaryTransactionDetails.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionDetailsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TemporaryTransactionDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
            {
				IQueryable<TemporaryTransactionDetail> query =  db.TemporaryTransactionDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryTransactionDetail> baseListReturnType = new BaseListReturnType<TemporaryTransactionDetail>();

                IQueryable<TemporaryTransactionDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTemporaryTransactionDetail" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TemporaryTransactionDetail, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Identifier.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailsWithTemporaryTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionDetail, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransaction"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TemporaryTransactionDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
            {
				IQueryable<TemporaryTransactionDetail> query =  db.TemporaryTransactionDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryTransactionDetail> baseListReturnType = new BaseListReturnType<TemporaryTransactionDetail>();

                IQueryable<TemporaryTransactionDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTemporaryTransactionDetail" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TemporaryTransactionDetail, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailsWithTemporaryTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionDetail, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransaction"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailsWithTemporaryTransactionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionDetailWitDetails(new List<string>(){"TemporaryTransaction"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionDetailWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TemporaryTransactionDetail> query =  db.TemporaryTransactionDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryTransactionDetail> baseListReturnType = new BaseListReturnType<TemporaryTransactionDetail>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TemporaryTransactionDetail GetTemporaryTransactionDetail(long idTemporaryTransactionDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionDetail(idTemporaryTransactionDetail, db,shouldRemap);
                }
            }
                        public TemporaryTransactionDetail GetTemporaryTransactionDetail(long idTemporaryTransactionDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTemporaryTransactionDetailSingle(db.TemporaryTransactionDetails.Where(p => p.IdTemporaryTransactionDetail == idTemporaryTransactionDetail && p.IsDeactivated != true).FirstOrDefault());

                return db.TemporaryTransactionDetails.Where(p => p.IdTemporaryTransactionDetail == idTemporaryTransactionDetail && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TemporaryTransactionDetail GetTemporaryTransactionDetailCustom( Expression<Func<TemporaryTransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTemporaryTransactionDetailCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TemporaryTransactionDetail GetTemporaryTransactionDetailCustom( SubscriptionEntities db , Expression<Func<TemporaryTransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TemporaryTransactionDetail> query =  db.TemporaryTransactionDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTemporaryTransactionDetailSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TemporaryTransactionDetail> GetTemporaryTransactionDetailCustomList( Expression<Func<TemporaryTransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTemporaryTransactionDetailCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TemporaryTransactionDetail> GetTemporaryTransactionDetailCustomList(  SubscriptionEntities db , Expression<Func<TemporaryTransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
			{
				IQueryable<TemporaryTransactionDetail> query =  db.TemporaryTransactionDetails;
                BaseListReturnType<TemporaryTransactionDetail> baseListReturnType = new BaseListReturnType<TemporaryTransactionDetail>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionDetailList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TemporaryTransactionDetail GetTemporaryTransactionDetailWithTemporaryTransactionDetails(long idTemporaryTransactionDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTemporaryTransactionDetailWithDetails(idTemporaryTransactionDetail,new List<string>(){"TemporaryTransaction"},shouldRemap);
					}
				}

            //IdTemporaryTransaction -- ZeroOrOne

                public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailListByTemporaryTransaction(long idTemporaryTransaction)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionDetailListByTemporaryTransaction(idTemporaryTransaction, db);
                    }
                }
                public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailListByTemporaryTransaction(long idTemporaryTransaction, SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransactionDetail, bool>> expression = property=> property.IdTemporaryTransaction == idTemporaryTransaction && property.IsDeactivated !=true;
                    return GetTemporaryTransactionDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailListByTemporaryTransactionByPage(long idTemporaryTransaction, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionDetailListByTemporaryTransactionByPage(idTemporaryTransaction, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailListByTemporaryTransactionByPage(long idTemporaryTransaction, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransactionDetail, bool>> expression = property => property.IdTemporaryTransaction == idTemporaryTransaction && property.IsDeactivated !=true;
                    return GetAllTemporaryTransactionDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public TemporaryTransactionDetail GetTemporaryTransactionDetailWithDetails(long idTemporaryTransactionDetail, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionDetailWithDetails(idTemporaryTransactionDetail, db,includes,shouldRemap);
                }
            }

            public TemporaryTransactionDetail GetTemporaryTransactionDetailWithDetails(long idTemporaryTransactionDetail, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TemporaryTransactionDetail> query =  db.TemporaryTransactionDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTemporaryTransactionDetailSingle(query
						.Where(p => p.IdTemporaryTransactionDetail == idTemporaryTransactionDetail && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTemporaryTransactionDetail == idTemporaryTransactionDetail && p.IsDeactivated != true).FirstOrDefault();
            }

            public TemporaryTransactionDetail GetTemporaryTransactionDetailWitDetails(long idTemporaryTransactionDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionDetailWitDetails(idTemporaryTransactionDetail, db,shouldRemap);
                }
            }

            public TemporaryTransactionDetail GetTemporaryTransactionDetailWitDetails(long idTemporaryTransactionDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				TemporaryTransactionDetail _TemporaryTransactionDetail = db.TemporaryTransactionDetails

					.Include("TemporaryTransaction")
								.Where(p => p.IdTemporaryTransactionDetail == idTemporaryTransactionDetail && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTemporaryTransactionDetailSingle(_TemporaryTransactionDetail);

				return  _TemporaryTransactionDetail;
            }

            public List<TemporaryTransactionDetail> GetTemporaryTransactionDetailListByIdList(List<long> temporaryTransactionDetailIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionDetailListByIdList(temporaryTransactionDetailIds, db);
                }
            }
            public List<TemporaryTransactionDetail> GetTemporaryTransactionDetailListByIdList(List<long> temporaryTransactionDetailIds, SubscriptionEntities db)
            {
                return db.TemporaryTransactionDetails.Where(p => p.IsDeactivated != true && temporaryTransactionDetailIds.Contains(p.IdTemporaryTransactionDetail.Value)).ToList();
            }


            public void SaveTemporaryTransactionDetail(TemporaryTransactionDetail temporaryTransactionDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTemporaryTransactionDetail(temporaryTransactionDetail, db);
                }
            }

            public void SaveTemporaryTransactionDetail(TemporaryTransactionDetail temporaryTransactionDetail, SubscriptionEntities db)
            {
									if (temporaryTransactionDetail.TemporaryTransaction != null) 
						DaoFactories.Instance.TemporaryTransactionDao.SaveTemporaryTransaction(temporaryTransactionDetail.TemporaryTransaction, db);
				                
                if (temporaryTransactionDetail.IdTemporaryTransactionDetail.HasValue){
					var temporaryTransactionDetailFromDb = db.TemporaryTransactionDetails.Where(p => p.IdTemporaryTransactionDetail == temporaryTransactionDetail.IdTemporaryTransactionDetail).FirstOrDefault();
													temporaryTransactionDetailFromDb.IsDeactivated = temporaryTransactionDetail.IsDeactivated;
													temporaryTransactionDetailFromDb.IdTemporaryTransaction = temporaryTransactionDetail.IdTemporaryTransaction;
													temporaryTransactionDetailFromDb.IdProduct = temporaryTransactionDetail.IdProduct;
													temporaryTransactionDetailFromDb.Description = temporaryTransactionDetail.Description;
													temporaryTransactionDetailFromDb.Quantity = temporaryTransactionDetail.Quantity;
													temporaryTransactionDetailFromDb.Rate = temporaryTransactionDetail.Rate;
													temporaryTransactionDetailFromDb.IdTransactionClass = temporaryTransactionDetail.IdTransactionClass;
													temporaryTransactionDetailFromDb.Identifier = temporaryTransactionDetail.Identifier;
									}
                else{
                                                //fix for saving without duplicating items in db
                              temporaryTransactionDetail.TemporaryTransaction = null;
                                                db.TemporaryTransactionDetails.Add(temporaryTransactionDetail);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTemporaryTransactionDetail(TemporaryTransactionDetail temporaryTransactionDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTemporaryTransactionDetail(temporaryTransactionDetail, db);
                }
            }

            public void SaveOnlyTemporaryTransactionDetail(TemporaryTransactionDetail temporaryTransactionDetail, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // temporaryTransactionDetail.TemporaryTransaction = null;
                                            if (temporaryTransactionDetail.IdTemporaryTransactionDetail.HasValue){
					var temporaryTransactionDetailFromDb = db.TemporaryTransactionDetails.Where(p => p.IdTemporaryTransactionDetail == temporaryTransactionDetail.IdTemporaryTransactionDetail).FirstOrDefault();
													temporaryTransactionDetailFromDb.IsDeactivated = temporaryTransactionDetail.IsDeactivated;
													temporaryTransactionDetailFromDb.IdTemporaryTransaction = temporaryTransactionDetail.IdTemporaryTransaction;
													temporaryTransactionDetailFromDb.IdProduct = temporaryTransactionDetail.IdProduct;
													temporaryTransactionDetailFromDb.Description = temporaryTransactionDetail.Description;
													temporaryTransactionDetailFromDb.Quantity = temporaryTransactionDetail.Quantity;
													temporaryTransactionDetailFromDb.Rate = temporaryTransactionDetail.Rate;
													temporaryTransactionDetailFromDb.IdTransactionClass = temporaryTransactionDetail.IdTransactionClass;
													temporaryTransactionDetailFromDb.Identifier = temporaryTransactionDetail.Identifier;
										 db.SaveChanges();

				}
                else{
					TemporaryTransactionDetail _temporaryTransactionDetail = new TemporaryTransactionDetail();
																	_temporaryTransactionDetail.IsDeactivated = temporaryTransactionDetail.IsDeactivated;
													_temporaryTransactionDetail.IdTemporaryTransaction = temporaryTransactionDetail.IdTemporaryTransaction;
													_temporaryTransactionDetail.IdProduct = temporaryTransactionDetail.IdProduct;
													_temporaryTransactionDetail.Description = temporaryTransactionDetail.Description;
													_temporaryTransactionDetail.Quantity = temporaryTransactionDetail.Quantity;
													_temporaryTransactionDetail.Rate = temporaryTransactionDetail.Rate;
													_temporaryTransactionDetail.IdTransactionClass = temporaryTransactionDetail.IdTransactionClass;
													_temporaryTransactionDetail.Identifier = temporaryTransactionDetail.Identifier;
					

                    db.TemporaryTransactionDetails.Add(_temporaryTransactionDetail);
					db.SaveChanges();
					temporaryTransactionDetail.IdTemporaryTransactionDetail =  _temporaryTransactionDetail.IdTemporaryTransactionDetail;
                    
                }
            }

            public void DeleteTemporaryTransactionDetail(TemporaryTransactionDetail temporaryTransactionDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTemporaryTransactionDetail(temporaryTransactionDetail, db);
                }
            }

            public void DeleteTemporaryTransactionDetail(TemporaryTransactionDetail temporaryTransactionDetail, SubscriptionEntities db)
            {
								var temporaryTransactionDetailFromDb = GetTemporaryTransactionDetail(temporaryTransactionDetail.IdTemporaryTransactionDetail.Value,db);
				temporaryTransactionDetailFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTemporaryTransactionDetail(TemporaryTransactionDetail temporaryTransactionDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTemporaryTransactionDetail(temporaryTransactionDetail, db);
                }
            }

            public void DeletePermanentlyTemporaryTransactionDetail(TemporaryTransactionDetail temporaryTransactionDetail, SubscriptionEntities db)
            {
								var temporaryTransactionDetailFromDb = GetTemporaryTransactionDetail(temporaryTransactionDetail.IdTemporaryTransactionDetail.Value,db);
				
				db.TemporaryTransactionDetails.Remove(temporaryTransactionDetailFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class TemporaryTransactionOrderDao :ITemporaryTransactionOrderDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TemporaryTransactionOrderDao(){
			
			}

			public TemporaryTransactionOrderDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TemporaryTransactionOrder> GetAllTemporaryTransactionOrders(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionOrders(db, shouldRemap);
                }
            }

            public List<TemporaryTransactionOrder> GetAllTemporaryTransactionOrders(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTemporaryTransactionOrderList(db.TemporaryTransactionOrders.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TemporaryTransactionOrders.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrder, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionOrdersByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TemporaryTransactionOrder, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
            {
				IQueryable<TemporaryTransactionOrder> query =  db.TemporaryTransactionOrders;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryTransactionOrder> baseListReturnType = new BaseListReturnType<TemporaryTransactionOrder>();

                IQueryable<TemporaryTransactionOrder> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTemporaryTransactionOrder" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TemporaryTransactionOrder, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.TransactionJson.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.TransactionJson.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.SignatureImage.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.IdWorkstation.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionOrderList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersWithTemporaryTransactionOrderStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrder, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionOrdersByPage(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactionOrderState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersWithDocumentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrder, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionOrdersByPage(sortingPagingInfo, db,expression,new List<string>(){"Document"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrder, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionOrdersByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TemporaryTransactionOrder, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
            {
				IQueryable<TemporaryTransactionOrder> query =  db.TemporaryTransactionOrders;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryTransactionOrder> baseListReturnType = new BaseListReturnType<TemporaryTransactionOrder>();

                IQueryable<TemporaryTransactionOrder> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTemporaryTransactionOrder" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TemporaryTransactionOrder, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionOrderList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersWithTemporaryTransactionOrderStateDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrder, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionOrdersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactionOrderState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersWithDocumentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrder, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionOrdersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Document"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersWithTemporaryTransactionOrderStateDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionOrderWitDetails(new List<string>(){"TemporaryTransactionOrderState"},shouldRemap);
					}
				}
							public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersWithDocumentDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionOrderWitDetails(new List<string>(){"Document"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionOrderWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TemporaryTransactionOrder> query =  db.TemporaryTransactionOrders;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryTransactionOrder> baseListReturnType = new BaseListReturnType<TemporaryTransactionOrder>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionOrderList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TemporaryTransactionOrder GetTemporaryTransactionOrder(long idTemporaryTransactionOrder,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionOrder(idTemporaryTransactionOrder, db,shouldRemap);
                }
            }
                        public TemporaryTransactionOrder GetTemporaryTransactionOrder(long idTemporaryTransactionOrder, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTemporaryTransactionOrderSingle(db.TemporaryTransactionOrders.Where(p => p.IdTemporaryTransactionOrder == idTemporaryTransactionOrder && p.IsDeactivated != true).FirstOrDefault());

                return db.TemporaryTransactionOrders.Where(p => p.IdTemporaryTransactionOrder == idTemporaryTransactionOrder && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TemporaryTransactionOrder GetTemporaryTransactionOrderCustom( Expression<Func<TemporaryTransactionOrder, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTemporaryTransactionOrderCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TemporaryTransactionOrder GetTemporaryTransactionOrderCustom( SubscriptionEntities db , Expression<Func<TemporaryTransactionOrder, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TemporaryTransactionOrder> query =  db.TemporaryTransactionOrders;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTemporaryTransactionOrderSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TemporaryTransactionOrder> GetTemporaryTransactionOrderCustomList( Expression<Func<TemporaryTransactionOrder, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTemporaryTransactionOrderCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TemporaryTransactionOrder> GetTemporaryTransactionOrderCustomList(  SubscriptionEntities db , Expression<Func<TemporaryTransactionOrder, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
			{
				IQueryable<TemporaryTransactionOrder> query =  db.TemporaryTransactionOrders;
                BaseListReturnType<TemporaryTransactionOrder> baseListReturnType = new BaseListReturnType<TemporaryTransactionOrder>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionOrderList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TemporaryTransactionOrder GetTemporaryTransactionOrderWithTemporaryTransactionOrderStateDetails(long idTemporaryTransactionOrder,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTemporaryTransactionOrderWithDetails(idTemporaryTransactionOrder,new List<string>(){"TemporaryTransactionOrderState"},shouldRemap);
					}
				}

            //IdTemporaryTransactionOrderState -- ZeroOrOne

                public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderState(long idTemporaryTransactionOrderState)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderState(idTemporaryTransactionOrderState, db);
                    }
                }
                public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderState(long idTemporaryTransactionOrderState, SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransactionOrder, bool>> expression = property=> property.IdTemporaryTransactionOrderState == idTemporaryTransactionOrderState && property.IsDeactivated !=true;
                    return GetTemporaryTransactionOrderCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderStateByPage(long idTemporaryTransactionOrderState, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderStateByPage(idTemporaryTransactionOrderState, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderStateByPage(long idTemporaryTransactionOrderState, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransactionOrder, bool>> expression = property => property.IdTemporaryTransactionOrderState == idTemporaryTransactionOrderState && property.IsDeactivated !=true;
                    return GetAllTemporaryTransactionOrdersByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TemporaryTransactionOrder GetTemporaryTransactionOrderWithDocumentDetails(long idTemporaryTransactionOrder,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTemporaryTransactionOrderWithDetails(idTemporaryTransactionOrder,new List<string>(){"Document"},shouldRemap);
					}
				}

            //IdSignatureDocument -- ZeroOrOne

                public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderListByDocument(long idDocument)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionOrderListByDocument(idDocument, db);
                    }
                }
                public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderListByDocument(long idDocument, SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransactionOrder, bool>> expression = property=> property.IdSignatureDocument == idDocument && property.IsDeactivated !=true;
                    return GetTemporaryTransactionOrderCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderListByDocumentByPage(long idDocument, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTemporaryTransactionOrderListByDocumentByPage(idDocument, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderListByDocumentByPage(long idDocument, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TemporaryTransactionOrder, bool>> expression = property => property.IdSignatureDocument == idDocument && property.IsDeactivated !=true;
                    return GetAllTemporaryTransactionOrdersByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public TemporaryTransactionOrder GetTemporaryTransactionOrderWithDetails(long idTemporaryTransactionOrder, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionOrderWithDetails(idTemporaryTransactionOrder, db,includes,shouldRemap);
                }
            }

            public TemporaryTransactionOrder GetTemporaryTransactionOrderWithDetails(long idTemporaryTransactionOrder, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TemporaryTransactionOrder> query =  db.TemporaryTransactionOrders;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTemporaryTransactionOrderSingle(query
						.Where(p => p.IdTemporaryTransactionOrder == idTemporaryTransactionOrder && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTemporaryTransactionOrder == idTemporaryTransactionOrder && p.IsDeactivated != true).FirstOrDefault();
            }

            public TemporaryTransactionOrder GetTemporaryTransactionOrderWitDetails(long idTemporaryTransactionOrder,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionOrderWitDetails(idTemporaryTransactionOrder, db,shouldRemap);
                }
            }

            public TemporaryTransactionOrder GetTemporaryTransactionOrderWitDetails(long idTemporaryTransactionOrder, SubscriptionEntities db,bool shouldRemap = false)
            {
				TemporaryTransactionOrder _TemporaryTransactionOrder = db.TemporaryTransactionOrders

					.Include("TemporaryTransactionOrderState")
					.Include("Document")
								.Where(p => p.IdTemporaryTransactionOrder == idTemporaryTransactionOrder && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTemporaryTransactionOrderSingle(_TemporaryTransactionOrder);

				return  _TemporaryTransactionOrder;
            }

            public List<TemporaryTransactionOrder> GetTemporaryTransactionOrderListByIdList(List<long> temporaryTransactionOrderIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionOrderListByIdList(temporaryTransactionOrderIds, db);
                }
            }
            public List<TemporaryTransactionOrder> GetTemporaryTransactionOrderListByIdList(List<long> temporaryTransactionOrderIds, SubscriptionEntities db)
            {
                return db.TemporaryTransactionOrders.Where(p => p.IsDeactivated != true && temporaryTransactionOrderIds.Contains(p.IdTemporaryTransactionOrder.Value)).ToList();
            }


            public void SaveTemporaryTransactionOrder(TemporaryTransactionOrder temporaryTransactionOrder)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTemporaryTransactionOrder(temporaryTransactionOrder, db);
                }
            }

            public void SaveTemporaryTransactionOrder(TemporaryTransactionOrder temporaryTransactionOrder, SubscriptionEntities db)
            {
									if (temporaryTransactionOrder.TemporaryTransactionOrderState != null) 
						DaoFactories.Instance.TemporaryTransactionOrderStateDao.SaveTemporaryTransactionOrderState(temporaryTransactionOrder.TemporaryTransactionOrderState, db);
									if (temporaryTransactionOrder.Document != null) 
						DaoFactories.Instance.DocumentDao.SaveDocument(temporaryTransactionOrder.Document, db);
				                
                if (temporaryTransactionOrder.IdTemporaryTransactionOrder.HasValue){
					var temporaryTransactionOrderFromDb = db.TemporaryTransactionOrders.Where(p => p.IdTemporaryTransactionOrder == temporaryTransactionOrder.IdTemporaryTransactionOrder).FirstOrDefault();
													temporaryTransactionOrderFromDb.IsDeactivated = temporaryTransactionOrder.IsDeactivated;
													temporaryTransactionOrderFromDb.IdTemporaryTransactionOrderState = temporaryTransactionOrder.IdTemporaryTransactionOrderState;
													temporaryTransactionOrderFromDb.TransactionJson = temporaryTransactionOrder.TransactionJson;
													temporaryTransactionOrderFromDb.SignatureImage = temporaryTransactionOrder.SignatureImage;
													temporaryTransactionOrderFromDb.TemporaryTransactionOrderDate = temporaryTransactionOrder.TemporaryTransactionOrderDate;
													temporaryTransactionOrderFromDb.IdWorkstation = temporaryTransactionOrder.IdWorkstation;
													temporaryTransactionOrderFromDb.IdSignatureDocument = temporaryTransactionOrder.IdSignatureDocument;
									}
                else{
                                                //fix for saving without duplicating items in db
                              temporaryTransactionOrder.TemporaryTransactionOrderState = null;
                                                        //fix for saving without duplicating items in db
                              temporaryTransactionOrder.Document = null;
                                                db.TemporaryTransactionOrders.Add(temporaryTransactionOrder);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTemporaryTransactionOrder(TemporaryTransactionOrder temporaryTransactionOrder)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTemporaryTransactionOrder(temporaryTransactionOrder, db);
                }
            }

            public void SaveOnlyTemporaryTransactionOrder(TemporaryTransactionOrder temporaryTransactionOrder, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // temporaryTransactionOrder.TemporaryTransactionOrderState = null;
                                                        //fix for saving without duplicating items in db
                             // temporaryTransactionOrder.Document = null;
                                            if (temporaryTransactionOrder.IdTemporaryTransactionOrder.HasValue){
					var temporaryTransactionOrderFromDb = db.TemporaryTransactionOrders.Where(p => p.IdTemporaryTransactionOrder == temporaryTransactionOrder.IdTemporaryTransactionOrder).FirstOrDefault();
													temporaryTransactionOrderFromDb.IsDeactivated = temporaryTransactionOrder.IsDeactivated;
													temporaryTransactionOrderFromDb.IdTemporaryTransactionOrderState = temporaryTransactionOrder.IdTemporaryTransactionOrderState;
													temporaryTransactionOrderFromDb.TransactionJson = temporaryTransactionOrder.TransactionJson;
													temporaryTransactionOrderFromDb.SignatureImage = temporaryTransactionOrder.SignatureImage;
													temporaryTransactionOrderFromDb.TemporaryTransactionOrderDate = temporaryTransactionOrder.TemporaryTransactionOrderDate;
													temporaryTransactionOrderFromDb.IdWorkstation = temporaryTransactionOrder.IdWorkstation;
													temporaryTransactionOrderFromDb.IdSignatureDocument = temporaryTransactionOrder.IdSignatureDocument;
										 db.SaveChanges();

				}
                else{
					TemporaryTransactionOrder _temporaryTransactionOrder = new TemporaryTransactionOrder();
																	_temporaryTransactionOrder.IsDeactivated = temporaryTransactionOrder.IsDeactivated;
													_temporaryTransactionOrder.IdTemporaryTransactionOrderState = temporaryTransactionOrder.IdTemporaryTransactionOrderState;
													_temporaryTransactionOrder.TransactionJson = temporaryTransactionOrder.TransactionJson;
													_temporaryTransactionOrder.SignatureImage = temporaryTransactionOrder.SignatureImage;
													_temporaryTransactionOrder.TemporaryTransactionOrderDate = temporaryTransactionOrder.TemporaryTransactionOrderDate;
													_temporaryTransactionOrder.IdWorkstation = temporaryTransactionOrder.IdWorkstation;
													_temporaryTransactionOrder.IdSignatureDocument = temporaryTransactionOrder.IdSignatureDocument;
					

                    db.TemporaryTransactionOrders.Add(_temporaryTransactionOrder);
					db.SaveChanges();
					temporaryTransactionOrder.IdTemporaryTransactionOrder =  _temporaryTransactionOrder.IdTemporaryTransactionOrder;
                    
                }
            }

            public void DeleteTemporaryTransactionOrder(TemporaryTransactionOrder temporaryTransactionOrder)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTemporaryTransactionOrder(temporaryTransactionOrder, db);
                }
            }

            public void DeleteTemporaryTransactionOrder(TemporaryTransactionOrder temporaryTransactionOrder, SubscriptionEntities db)
            {
								var temporaryTransactionOrderFromDb = GetTemporaryTransactionOrder(temporaryTransactionOrder.IdTemporaryTransactionOrder.Value,db);
				temporaryTransactionOrderFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTemporaryTransactionOrder(TemporaryTransactionOrder temporaryTransactionOrder)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTemporaryTransactionOrder(temporaryTransactionOrder, db);
                }
            }

            public void DeletePermanentlyTemporaryTransactionOrder(TemporaryTransactionOrder temporaryTransactionOrder, SubscriptionEntities db)
            {
								var temporaryTransactionOrderFromDb = GetTemporaryTransactionOrder(temporaryTransactionOrder.IdTemporaryTransactionOrder.Value,db);
				
				db.TemporaryTransactionOrders.Remove(temporaryTransactionOrderFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class TemporaryTransactionOrderStateDao :ITemporaryTransactionOrderStateDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TemporaryTransactionOrderStateDao(){
			
			}

			public TemporaryTransactionOrderStateDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStates(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionOrderStates(db, shouldRemap);
                }
            }

            public List<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStates(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTemporaryTransactionOrderStateList(db.TemporaryTransactionOrderStates.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TemporaryTransactionOrderStates.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrderState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionOrderStatesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TemporaryTransactionOrderState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
            {
				IQueryable<TemporaryTransactionOrderState> query =  db.TemporaryTransactionOrderStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryTransactionOrderState> baseListReturnType = new BaseListReturnType<TemporaryTransactionOrderState>();

                IQueryable<TemporaryTransactionOrderState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTemporaryTransactionOrderState" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TemporaryTransactionOrderState, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionOrderStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStatesWithTemporaryTransactionOrdersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrderState, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionOrderStatesByPage(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactionOrders"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrderState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionOrderStatesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TemporaryTransactionOrderState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
            {
				IQueryable<TemporaryTransactionOrderState> query =  db.TemporaryTransactionOrderStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryTransactionOrderState> baseListReturnType = new BaseListReturnType<TemporaryTransactionOrderState>();

                IQueryable<TemporaryTransactionOrderState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTemporaryTransactionOrderState" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TemporaryTransactionOrderState, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionOrderStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStatesWithTemporaryTransactionOrdersDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrderState, bool>> expression = null,bool shouldRemap = false, Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionOrderStatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TemporaryTransactionOrders"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStatesWithTemporaryTransactionOrdersDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTemporaryTransactionOrderStateWitDetails(new List<string>(){"TemporaryTransactionOrders"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStateWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTemporaryTransactionOrderStateWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStateWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TemporaryTransactionOrderState> query =  db.TemporaryTransactionOrderStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TemporaryTransactionOrderState> baseListReturnType = new BaseListReturnType<TemporaryTransactionOrderState>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionOrderStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TemporaryTransactionOrderState GetTemporaryTransactionOrderState(long idTemporaryTransactionOrderState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionOrderState(idTemporaryTransactionOrderState, db,shouldRemap);
                }
            }
                        public TemporaryTransactionOrderState GetTemporaryTransactionOrderState(long idTemporaryTransactionOrderState, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTemporaryTransactionOrderStateSingle(db.TemporaryTransactionOrderStates.Where(p => p.IdTemporaryTransactionOrderState == idTemporaryTransactionOrderState && p.IsDeactivated != true).FirstOrDefault());

                return db.TemporaryTransactionOrderStates.Where(p => p.IdTemporaryTransactionOrderState == idTemporaryTransactionOrderState && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TemporaryTransactionOrderState GetTemporaryTransactionOrderStateCustom( Expression<Func<TemporaryTransactionOrderState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTemporaryTransactionOrderStateCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TemporaryTransactionOrderState GetTemporaryTransactionOrderStateCustom( SubscriptionEntities db , Expression<Func<TemporaryTransactionOrderState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TemporaryTransactionOrderState> query =  db.TemporaryTransactionOrderStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTemporaryTransactionOrderStateSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TemporaryTransactionOrderState> GetTemporaryTransactionOrderStateCustomList( Expression<Func<TemporaryTransactionOrderState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTemporaryTransactionOrderStateCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TemporaryTransactionOrderState> GetTemporaryTransactionOrderStateCustomList(  SubscriptionEntities db , Expression<Func<TemporaryTransactionOrderState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
			{
				IQueryable<TemporaryTransactionOrderState> query =  db.TemporaryTransactionOrderStates;
                BaseListReturnType<TemporaryTransactionOrderState> baseListReturnType = new BaseListReturnType<TemporaryTransactionOrderState>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTemporaryTransactionOrderStateList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TemporaryTransactionOrderState GetTemporaryTransactionOrderStateWithTemporaryTransactionOrdersDetails(long idTemporaryTransactionOrderState,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTemporaryTransactionOrderStateWithDetails(idTemporaryTransactionOrderState,new List<string>(){"TemporaryTransactionOrders"},shouldRemap);
					}
				}

            //IdTemporaryTransactionOrderState -- Many


			


			public TemporaryTransactionOrderState GetTemporaryTransactionOrderStateWithDetails(long idTemporaryTransactionOrderState, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionOrderStateWithDetails(idTemporaryTransactionOrderState, db,includes,shouldRemap);
                }
            }

            public TemporaryTransactionOrderState GetTemporaryTransactionOrderStateWithDetails(long idTemporaryTransactionOrderState, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TemporaryTransactionOrderState> query =  db.TemporaryTransactionOrderStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTemporaryTransactionOrderStateSingle(query
						.Where(p => p.IdTemporaryTransactionOrderState == idTemporaryTransactionOrderState && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTemporaryTransactionOrderState == idTemporaryTransactionOrderState && p.IsDeactivated != true).FirstOrDefault();
            }

            public TemporaryTransactionOrderState GetTemporaryTransactionOrderStateWitDetails(long idTemporaryTransactionOrderState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionOrderStateWitDetails(idTemporaryTransactionOrderState, db,shouldRemap);
                }
            }

            public TemporaryTransactionOrderState GetTemporaryTransactionOrderStateWitDetails(long idTemporaryTransactionOrderState, SubscriptionEntities db,bool shouldRemap = false)
            {
				TemporaryTransactionOrderState _TemporaryTransactionOrderState = db.TemporaryTransactionOrderStates

					.Include("TemporaryTransactionOrders")
								.Where(p => p.IdTemporaryTransactionOrderState == idTemporaryTransactionOrderState && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTemporaryTransactionOrderStateSingle(_TemporaryTransactionOrderState);

				return  _TemporaryTransactionOrderState;
            }

            public List<TemporaryTransactionOrderState> GetTemporaryTransactionOrderStateListByIdList(List<long> temporaryTransactionOrderStateIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTemporaryTransactionOrderStateListByIdList(temporaryTransactionOrderStateIds, db);
                }
            }
            public List<TemporaryTransactionOrderState> GetTemporaryTransactionOrderStateListByIdList(List<long> temporaryTransactionOrderStateIds, SubscriptionEntities db)
            {
                return db.TemporaryTransactionOrderStates.Where(p => p.IsDeactivated != true && temporaryTransactionOrderStateIds.Contains(p.IdTemporaryTransactionOrderState.Value)).ToList();
            }


            public void SaveTemporaryTransactionOrderState(TemporaryTransactionOrderState temporaryTransactionOrderState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTemporaryTransactionOrderState(temporaryTransactionOrderState, db);
                }
            }

            public void SaveTemporaryTransactionOrderState(TemporaryTransactionOrderState temporaryTransactionOrderState, SubscriptionEntities db)
            {
				                
                if (temporaryTransactionOrderState.IdTemporaryTransactionOrderState.HasValue){
					var temporaryTransactionOrderStateFromDb = db.TemporaryTransactionOrderStates.Where(p => p.IdTemporaryTransactionOrderState == temporaryTransactionOrderState.IdTemporaryTransactionOrderState).FirstOrDefault();
													temporaryTransactionOrderStateFromDb.Description = temporaryTransactionOrderState.Description;
													temporaryTransactionOrderStateFromDb.IsDeactivated = temporaryTransactionOrderState.IsDeactivated;
									}
                else{
                                        db.TemporaryTransactionOrderStates.Add(temporaryTransactionOrderState);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTemporaryTransactionOrderState(TemporaryTransactionOrderState temporaryTransactionOrderState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTemporaryTransactionOrderState(temporaryTransactionOrderState, db);
                }
            }

            public void SaveOnlyTemporaryTransactionOrderState(TemporaryTransactionOrderState temporaryTransactionOrderState, SubscriptionEntities db)
            {
			                    if (temporaryTransactionOrderState.IdTemporaryTransactionOrderState.HasValue){
					var temporaryTransactionOrderStateFromDb = db.TemporaryTransactionOrderStates.Where(p => p.IdTemporaryTransactionOrderState == temporaryTransactionOrderState.IdTemporaryTransactionOrderState).FirstOrDefault();
													temporaryTransactionOrderStateFromDb.Description = temporaryTransactionOrderState.Description;
													temporaryTransactionOrderStateFromDb.IsDeactivated = temporaryTransactionOrderState.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					TemporaryTransactionOrderState _temporaryTransactionOrderState = new TemporaryTransactionOrderState();
																	_temporaryTransactionOrderState.Description = temporaryTransactionOrderState.Description;
													_temporaryTransactionOrderState.IsDeactivated = temporaryTransactionOrderState.IsDeactivated;
					

                    db.TemporaryTransactionOrderStates.Add(_temporaryTransactionOrderState);
					db.SaveChanges();
					temporaryTransactionOrderState.IdTemporaryTransactionOrderState =  _temporaryTransactionOrderState.IdTemporaryTransactionOrderState;
                    
                }
            }

            public void DeleteTemporaryTransactionOrderState(TemporaryTransactionOrderState temporaryTransactionOrderState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTemporaryTransactionOrderState(temporaryTransactionOrderState, db);
                }
            }

            public void DeleteTemporaryTransactionOrderState(TemporaryTransactionOrderState temporaryTransactionOrderState, SubscriptionEntities db)
            {
								var temporaryTransactionOrderStateFromDb = GetTemporaryTransactionOrderState(temporaryTransactionOrderState.IdTemporaryTransactionOrderState.Value,db);
				temporaryTransactionOrderStateFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTemporaryTransactionOrderState(TemporaryTransactionOrderState temporaryTransactionOrderState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTemporaryTransactionOrderState(temporaryTransactionOrderState, db);
                }
            }

            public void DeletePermanentlyTemporaryTransactionOrderState(TemporaryTransactionOrderState temporaryTransactionOrderState, SubscriptionEntities db)
            {
								var temporaryTransactionOrderStateFromDb = GetTemporaryTransactionOrderState(temporaryTransactionOrderState.IdTemporaryTransactionOrderState.Value,db);
				
				db.TemporaryTransactionOrderStates.Remove(temporaryTransactionOrderStateFromDb);
                db.SaveChanges();
            }


            
							public List<TemporaryTransactionOrder> UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderStateWithoutSavingNewItem(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idTemporaryTransactionOrderState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderStateWithoutSavingNewItem(newTemporaryTransactionOrders,idTemporaryTransactionOrderState,db);
                                }
                            }

							public List<TemporaryTransactionOrder> UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderStateWithoutSavingNewItem(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idTemporaryTransactionOrderState, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransactionOrder, bool>> expressionBuilder = p => p.IdTemporaryTransactionOrderState == idTemporaryTransactionOrderState;
                                var oldTemporaryTransactionOrders = DaoFactories.Instance.TemporaryTransactionOrderDao.GetTemporaryTransactionOrderCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactionOrders.EntityList.Select(pc => pc.IdTemporaryTransactionOrder).Except(newTemporaryTransactionOrders.Where(pc => pc.IdTemporaryTransactionOrder.HasValue).Select(pc => pc.IdTemporaryTransactionOrder)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactionOrders.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransactionOrder)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTemporaryTransactionOrders;
                            }


                            public List<TemporaryTransactionOrder> UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderState(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idTemporaryTransactionOrderState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderState(newTemporaryTransactionOrders,idTemporaryTransactionOrderState,db);
                                }
                            }

                            public List<TemporaryTransactionOrder> UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderState(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idTemporaryTransactionOrderState, SubscriptionEntities  db)
                            {
                                Expression<Func<TemporaryTransactionOrder, bool>> expressionBuilder = p => p.IdTemporaryTransactionOrderState == idTemporaryTransactionOrderState;
                                var oldTemporaryTransactionOrders = DaoFactories.Instance.TemporaryTransactionOrderDao.GetTemporaryTransactionOrderCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTemporaryTransactionOrders.EntityList.Select(pc => pc.IdTemporaryTransactionOrder).Except(newTemporaryTransactionOrders.Where(pc => pc.IdTemporaryTransactionOrder.HasValue).Select(pc => pc.IdTemporaryTransactionOrder)).ToList();
                                var itemsTobeDeleted = oldTemporaryTransactionOrders.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTemporaryTransactionOrder)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTemporaryTransactionOrders.ForEach(pc =>
                                {
                                    pc.IdTemporaryTransactionOrderState = idTemporaryTransactionOrderState;
                                    DaoFactories.Instance.TemporaryTransactionOrderDao.SaveOnlyTemporaryTransactionOrder(pc, db);
                                });
                                return newTemporaryTransactionOrders;
                            }

                        


    



		}
			public partial class TitleDao :ITitleDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TitleDao(){
			
			}

			public TitleDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Title> GetAllTitles(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTitles(db, shouldRemap);
                }
            }

            public List<Title> GetAllTitles(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTitleList(db.Titles.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Titles.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Title> GetAllTitlesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Title, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Title, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTitlesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Title> GetAllTitlesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Title, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Title, dynamic> orderExpression = null)
            {
				IQueryable<Title> query =  db.Titles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Title> baseListReturnType = new BaseListReturnType<Title>();

                IQueryable<Title> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTitle" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Title, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTitleList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Title> GetAllTitlesWithOrderPersonsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Title, bool>> expression = null,bool shouldRemap = false, Func<Title, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTitlesByPage(sortingPagingInfo, db,expression,new List<string>(){"OrderPersons"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Title> GetAllTitlesWithPeopleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Title, bool>> expression = null,bool shouldRemap = false, Func<Title, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTitlesByPage(sortingPagingInfo, db,expression,new List<string>(){"People"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Title> GetAllTitlesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Title, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Title, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTitlesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Title> GetAllTitlesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Title, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Title, dynamic> orderExpression = null)
            {
				IQueryable<Title> query =  db.Titles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Title> baseListReturnType = new BaseListReturnType<Title>();

                IQueryable<Title> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTitle" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Title, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTitleList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Title> GetAllTitlesWithOrderPersonsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Title, bool>> expression = null,bool shouldRemap = false, Func<Title, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTitlesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"OrderPersons"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Title> GetAllTitlesWithPeopleDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Title, bool>> expression = null,bool shouldRemap = false, Func<Title, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTitlesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"People"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Title> GetAllTitlesWithOrderPersonsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTitleWitDetails(new List<string>(){"OrderPersons"},shouldRemap);
					}
				}
							public BaseListReturnType<Title> GetAllTitlesWithPeopleDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTitleWitDetails(new List<string>(){"People"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Title> GetAllTitleWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTitleWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Title> GetAllTitleWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Title> query =  db.Titles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Title> baseListReturnType = new BaseListReturnType<Title>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTitleList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Title GetTitle(long idTitle,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTitle(idTitle, db,shouldRemap);
                }
            }
                        public Title GetTitle(long idTitle, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTitleSingle(db.Titles.Where(p => p.IdTitle == idTitle && p.IsDeactivated != true).FirstOrDefault());

                return db.Titles.Where(p => p.IdTitle == idTitle && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Title GetTitleCustom( Expression<Func<Title, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTitleCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Title GetTitleCustom( SubscriptionEntities db , Expression<Func<Title, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Title> query =  db.Titles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTitleSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Title> GetTitleCustomList( Expression<Func<Title, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Title, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTitleCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Title> GetTitleCustomList(  SubscriptionEntities db , Expression<Func<Title, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Title, dynamic> orderExpression = null)
			{
				IQueryable<Title> query =  db.Titles;
                BaseListReturnType<Title> baseListReturnType = new BaseListReturnType<Title>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTitleList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Title GetTitleWithOrderPersonsDetails(long idTitle,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTitleWithDetails(idTitle,new List<string>(){"OrderPersons"},shouldRemap);
					}
				}

            //IdTitle -- Many


							public Title GetTitleWithPeopleDetails(long idTitle,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTitleWithDetails(idTitle,new List<string>(){"People"},shouldRemap);
					}
				}

            //IdTitle -- Many


			


			public Title GetTitleWithDetails(long idTitle, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTitleWithDetails(idTitle, db,includes,shouldRemap);
                }
            }

            public Title GetTitleWithDetails(long idTitle, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Title> query =  db.Titles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTitleSingle(query
						.Where(p => p.IdTitle == idTitle && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTitle == idTitle && p.IsDeactivated != true).FirstOrDefault();
            }

            public Title GetTitleWitDetails(long idTitle,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTitleWitDetails(idTitle, db,shouldRemap);
                }
            }

            public Title GetTitleWitDetails(long idTitle, SubscriptionEntities db,bool shouldRemap = false)
            {
				Title _Title = db.Titles

					.Include("OrderPersons")
					.Include("People")
								.Where(p => p.IdTitle == idTitle && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTitleSingle(_Title);

				return  _Title;
            }

            public List<Title> GetTitleListByIdList(List<long> titleIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTitleListByIdList(titleIds, db);
                }
            }
            public List<Title> GetTitleListByIdList(List<long> titleIds, SubscriptionEntities db)
            {
                return db.Titles.Where(p => p.IsDeactivated != true && titleIds.Contains(p.IdTitle.Value)).ToList();
            }


            public void SaveTitle(Title title)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTitle(title, db);
                }
            }

            public void SaveTitle(Title title, SubscriptionEntities db)
            {
				                
                if (title.IdTitle.HasValue){
					var titleFromDb = db.Titles.Where(p => p.IdTitle == title.IdTitle).FirstOrDefault();
													titleFromDb.Description = title.Description;
													titleFromDb.IsDeactivated = title.IsDeactivated;
									}
                else{
                                        db.Titles.Add(title);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTitle(Title title)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTitle(title, db);
                }
            }

            public void SaveOnlyTitle(Title title, SubscriptionEntities db)
            {
			                    if (title.IdTitle.HasValue){
					var titleFromDb = db.Titles.Where(p => p.IdTitle == title.IdTitle).FirstOrDefault();
													titleFromDb.Description = title.Description;
													titleFromDb.IsDeactivated = title.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Title _title = new Title();
																	_title.Description = title.Description;
													_title.IsDeactivated = title.IsDeactivated;
					

                    db.Titles.Add(_title);
					db.SaveChanges();
					title.IdTitle =  _title.IdTitle;
                    
                }
            }

            public void DeleteTitle(Title title)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTitle(title, db);
                }
            }

            public void DeleteTitle(Title title, SubscriptionEntities db)
            {
								var titleFromDb = GetTitle(title.IdTitle.Value,db);
				titleFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTitle(Title title)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTitle(title, db);
                }
            }

            public void DeletePermanentlyTitle(Title title, SubscriptionEntities db)
            {
								var titleFromDb = GetTitle(title.IdTitle.Value,db);
				
				db.Titles.Remove(titleFromDb);
                db.SaveChanges();
            }


            
							public List<OrderPerson> UpdateOrderPersonsForTitleWithoutSavingNewItem(List<OrderPerson> newOrderPersons,long idTitle)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderPersonsForTitleWithoutSavingNewItem(newOrderPersons,idTitle,db);
                                }
                            }

							public List<OrderPerson> UpdateOrderPersonsForTitleWithoutSavingNewItem(List<OrderPerson> newOrderPersons,long idTitle, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderPerson, bool>> expressionBuilder = p => p.IdTitle == idTitle;
                                var oldOrderPersons = DaoFactories.Instance.OrderPersonDao.GetOrderPersonCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderPersons.EntityList.Select(pc => pc.IdOrderPerson).Except(newOrderPersons.Where(pc => pc.IdOrderPerson.HasValue).Select(pc => pc.IdOrderPerson)).ToList();
                                var itemsTobeDeleted = oldOrderPersons.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderPerson)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newOrderPersons;
                            }


                            public List<OrderPerson> UpdateOrderPersonsForTitle(List<OrderPerson> newOrderPersons,long idTitle)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrderPersonsForTitle(newOrderPersons,idTitle,db);
                                }
                            }

                            public List<OrderPerson> UpdateOrderPersonsForTitle(List<OrderPerson> newOrderPersons,long idTitle, SubscriptionEntities  db)
                            {
                                Expression<Func<OrderPerson, bool>> expressionBuilder = p => p.IdTitle == idTitle;
                                var oldOrderPersons = DaoFactories.Instance.OrderPersonDao.GetOrderPersonCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrderPersons.EntityList.Select(pc => pc.IdOrderPerson).Except(newOrderPersons.Where(pc => pc.IdOrderPerson.HasValue).Select(pc => pc.IdOrderPerson)).ToList();
                                var itemsTobeDeleted = oldOrderPersons.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrderPerson)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newOrderPersons.ForEach(pc =>
                                {
                                    pc.IdTitle = idTitle;
                                    DaoFactories.Instance.OrderPersonDao.SaveOnlyOrderPerson(pc, db);
                                });
                                return newOrderPersons;
                            }

                        
							public List<Person> UpdatePeopleForTitleWithoutSavingNewItem(List<Person> newPeople,long idTitle)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePeopleForTitleWithoutSavingNewItem(newPeople,idTitle,db);
                                }
                            }

							public List<Person> UpdatePeopleForTitleWithoutSavingNewItem(List<Person> newPeople,long idTitle, SubscriptionEntities  db)
                            {
                                Expression<Func<Person, bool>> expressionBuilder = p => p.IdTitle == idTitle;
                                var oldPeople = DaoFactories.Instance.PersonDao.GetPersonCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPeople.EntityList.Select(pc => pc.IdPerson).Except(newPeople.Where(pc => pc.IdPerson.HasValue).Select(pc => pc.IdPerson)).ToList();
                                var itemsTobeDeleted = oldPeople.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPerson)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newPeople;
                            }


                            public List<Person> UpdatePeopleForTitle(List<Person> newPeople,long idTitle)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePeopleForTitle(newPeople,idTitle,db);
                                }
                            }

                            public List<Person> UpdatePeopleForTitle(List<Person> newPeople,long idTitle, SubscriptionEntities  db)
                            {
                                Expression<Func<Person, bool>> expressionBuilder = p => p.IdTitle == idTitle;
                                var oldPeople = DaoFactories.Instance.PersonDao.GetPersonCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPeople.EntityList.Select(pc => pc.IdPerson).Except(newPeople.Where(pc => pc.IdPerson.HasValue).Select(pc => pc.IdPerson)).ToList();
                                var itemsTobeDeleted = oldPeople.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPerson)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newPeople.ForEach(pc =>
                                {
                                    pc.IdTitle = idTitle;
                                    DaoFactories.Instance.PersonDao.SaveOnlyPerson(pc, db);
                                });
                                return newPeople;
                            }

                        


    



		}
			public partial class TransactionDao :ITransactionDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TransactionDao(){
			
			}

			public TransactionDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Transaction> GetAllTransactions(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactions(db, shouldRemap);
                }
            }

            public List<Transaction> GetAllTransactions(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionList(db.Transactions.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Transactions.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Transaction> GetAllTransactionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Transaction> GetAllTransactionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Transaction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
            {
				IQueryable<Transaction> query =  db.Transactions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Transaction> baseListReturnType = new BaseListReturnType<Transaction>();

                IQueryable<Transaction> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransaction" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Transaction, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.ReceiptNo.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.ReceiptNo.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Memo.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Transaction> GetAllTransactionsWithUserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"User"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithCustomerDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Customer"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithDocumentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Document"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithScheduleSettingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"ScheduleSettings"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionDuesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionDues"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionDue_TransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionDue_Transaction"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithPaymentsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Payments"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Payment"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction2DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction2"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction11DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction11"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction3DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction3"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction_PaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction_Payment"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionDetails"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction_MailToSendDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction_MailToSend"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction_BankStatementStagingDetailDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction_BankStatementStagingDetail"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionAccountDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionAccount"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionClassDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionClass"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionTemplateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionTemplate"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Transaction> GetAllTransactionsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Transaction> GetAllTransactionsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Transaction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
            {
				IQueryable<Transaction> query =  db.Transactions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Transaction> baseListReturnType = new BaseListReturnType<Transaction>();

                IQueryable<Transaction> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransaction" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Transaction, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Transaction> GetAllTransactionsWithUserDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"User"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionStateDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithCustomerDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Customer"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithDocumentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Document"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithScheduleSettingsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"ScheduleSettings"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionDuesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionDues"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionDue_TransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionDue_Transaction"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithPaymentsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Payments"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithPaymentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Payment"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction1DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction2DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction2"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction11DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction11"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction3DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction3"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction_PaymentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction_Payment"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionDetails"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction_MailToSendDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction_MailToSend"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction_BankStatementStagingDetailDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction_BankStatementStagingDetail"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionAccountDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionAccount"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionClassDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionClass"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionTemplateDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap = false, Func<Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionTemplate"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Transaction> GetAllTransactionsWithUserDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"User"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionStateDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"TransactionState"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"TransactionType"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithCustomerDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"Customer"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithDocumentDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"Document"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithScheduleSettingsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"ScheduleSettings"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionDuesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"TransactionDues"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionDue_TransactionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"TransactionDue_Transaction"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithPaymentsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"Payments"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithPaymentDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"Payment"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction1Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"Transaction1"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction2Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"Transaction2"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction11Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"Transaction11"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction3Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"Transaction3"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction_PaymentDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"Transaction_Payment"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"TransactionDetails"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction_MailToSendDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"Transaction_MailToSend"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransaction_BankStatementStagingDetailDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"Transaction_BankStatementStagingDetail"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionAccountDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"TransactionAccount"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionClassDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"TransactionClass"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction> GetAllTransactionsWithTransactionTemplateDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionWitDetails(new List<string>(){"TransactionTemplate"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Transaction> GetAllTransactionWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Transaction> GetAllTransactionWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Transaction> query =  db.Transactions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Transaction> baseListReturnType = new BaseListReturnType<Transaction>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Transaction GetTransaction(long idTransaction,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction(idTransaction, db,shouldRemap);
                }
            }
                        public Transaction GetTransaction(long idTransaction, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionSingle(db.Transactions.Where(p => p.IdTransaction == idTransaction && p.IsDeactivated != true).FirstOrDefault());

                return db.Transactions.Where(p => p.IdTransaction == idTransaction && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Transaction GetTransactionCustom( Expression<Func<Transaction, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Transaction GetTransactionCustom( SubscriptionEntities db , Expression<Func<Transaction, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Transaction> query =  db.Transactions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransactionSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Transaction> GetTransactionCustomList( Expression<Func<Transaction, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Transaction, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Transaction> GetTransactionCustomList(  SubscriptionEntities db , Expression<Func<Transaction, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Transaction, dynamic> orderExpression = null)
			{
				IQueryable<Transaction> query =  db.Transactions;
                BaseListReturnType<Transaction> baseListReturnType = new BaseListReturnType<Transaction>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Transaction GetTransactionWithUserDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"User"},shouldRemap);
					}
				}

            //IdUserAuthor -- ZeroOrOne

                public BaseListReturnType<Transaction> GetAllTransactionListByUser(long idUser)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByUser(idUser, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByUser(long idUser, SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property=> property.IdUserAuthor == idUser && property.IsDeactivated !=true;
                    return GetTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByUserByPage(long idUser, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByUserByPage(idUser, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByUserByPage(long idUser, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property => property.IdUserAuthor == idUser && property.IsDeactivated !=true;
                    return GetAllTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction GetTransactionWithTransactionStateDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"TransactionState"},shouldRemap);
					}
				}

            //IdTransactionState -- ZeroOrOne

                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionState(long idTransactionState)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransactionState(idTransactionState, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionState(long idTransactionState, SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property=> property.IdTransactionState == idTransactionState && property.IsDeactivated !=true;
                    return GetTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionStateByPage(long idTransactionState, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransactionStateByPage(idTransactionState, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionStateByPage(long idTransactionState, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property => property.IdTransactionState == idTransactionState && property.IsDeactivated !=true;
                    return GetAllTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction GetTransactionWithTransactionTypeDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"TransactionType"},shouldRemap);
					}
				}

            //IdTransactionType -- ZeroOrOne

                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionType(long idTransactionType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransactionType(idTransactionType, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionType(long idTransactionType, SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property=> property.IdTransactionType == idTransactionType && property.IsDeactivated !=true;
                    return GetTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionTypeByPage(long idTransactionType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransactionTypeByPage(idTransactionType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionTypeByPage(long idTransactionType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property => property.IdTransactionType == idTransactionType && property.IsDeactivated !=true;
                    return GetAllTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction GetTransactionWithCustomerDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"Customer"},shouldRemap);
					}
				}

            //IdCustomer -- ZeroOrOne

                public BaseListReturnType<Transaction> GetAllTransactionListByCustomer(long idCustomer)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByCustomer(idCustomer, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByCustomer(long idCustomer, SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property=> property.IdCustomer == idCustomer && property.IsDeactivated !=true;
                    return GetTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByCustomerByPage(long idCustomer, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByCustomerByPage(idCustomer, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByCustomerByPage(long idCustomer, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property => property.IdCustomer == idCustomer && property.IsDeactivated !=true;
                    return GetAllTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction GetTransactionWithDocumentDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"Document"},shouldRemap);
					}
				}

            //IdSignatureDocument -- ZeroOrOne

                public BaseListReturnType<Transaction> GetAllTransactionListByDocument(long idDocument)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByDocument(idDocument, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByDocument(long idDocument, SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property=> property.IdSignatureDocument == idDocument && property.IsDeactivated !=true;
                    return GetTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByDocumentByPage(long idDocument, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByDocumentByPage(idDocument, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByDocumentByPage(long idDocument, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property => property.IdSignatureDocument == idDocument && property.IsDeactivated !=true;
                    return GetAllTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction GetTransactionWithScheduleSettingsDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"ScheduleSettings"},shouldRemap);
					}
				}

            //IdTransaction -- Many


							public Transaction GetTransactionWithTransactionDuesDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"TransactionDues"},shouldRemap);
					}
				}

            //IdTransaction -- Many


							public Transaction GetTransactionWithTransactionDue_TransactionDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"TransactionDue_Transaction"},shouldRemap);
					}
				}

            //IdTransactionDone -- Many


							public Transaction GetTransactionWithPaymentsDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"Payments"},shouldRemap);
					}
				}

            //IdTransaction -- Many


							public Transaction GetTransactionWithPaymentDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"Payment"},shouldRemap);
					}
				}

            //IdPayment -- ZeroOrOne

                public BaseListReturnType<Transaction> GetAllTransactionListByPayment(long idPayment)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByPayment(idPayment, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByPayment(long idPayment, SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property=> property.IdPayment == idPayment && property.IsDeactivated !=true;
                    return GetTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByPaymentByPage(long idPayment, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByPaymentByPage(idPayment, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByPaymentByPage(long idPayment, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property => property.IdPayment == idPayment && property.IsDeactivated !=true;
                    return GetAllTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction GetTransactionWithTransaction1Details(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"Transaction1"},shouldRemap);
					}
				}

            //IdTransaction -- ZeroOrOne

                public BaseListReturnType<Transaction> GetAllTransactionListByTransaction1(long idTransaction1)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransaction1(idTransaction1, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransaction1(long idTransaction1, SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property=> property.IdTransaction == idTransaction1 && property.IsDeactivated !=true;
                    return GetTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransaction1ByPage(long idTransaction1, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransaction1ByPage(idTransaction1, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransaction1ByPage(long idTransaction1, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property => property.IdTransaction == idTransaction1 && property.IsDeactivated !=true;
                    return GetAllTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction GetTransactionWithTransaction2Details(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"Transaction2"},shouldRemap);
					}
				}

            //IdTransaction -- One


							public Transaction GetTransactionWithTransaction11Details(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"Transaction11"},shouldRemap);
					}
				}

            //IdTransaction -- ZeroOrOne

                public BaseListReturnType<Transaction> GetAllTransactionListByTransaction11(long idTransaction11)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransaction11(idTransaction11, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransaction11(long idTransaction11, SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property=> property.IdTransaction == idTransaction11 && property.IsDeactivated !=true;
                    return GetTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransaction11ByPage(long idTransaction11, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransaction11ByPage(idTransaction11, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransaction11ByPage(long idTransaction11, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property => property.IdTransaction == idTransaction11 && property.IsDeactivated !=true;
                    return GetAllTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction GetTransactionWithTransaction3Details(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"Transaction3"},shouldRemap);
					}
				}

            //IdTransaction -- One


							public Transaction GetTransactionWithTransaction_PaymentDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"Transaction_Payment"},shouldRemap);
					}
				}

            //IdTransaction -- Many


							public Transaction GetTransactionWithTransactionDetailsDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"TransactionDetails"},shouldRemap);
					}
				}

            //IdTransaction -- Many


							public Transaction GetTransactionWithTransaction_MailToSendDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"Transaction_MailToSend"},shouldRemap);
					}
				}

            //IdTransaction -- Many


							public Transaction GetTransactionWithTransaction_BankStatementStagingDetailDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"Transaction_BankStatementStagingDetail"},shouldRemap);
					}
				}

            //IdTransaction -- Many


							public Transaction GetTransactionWithTransactionAccountDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"TransactionAccount"},shouldRemap);
					}
				}

            //IdTransactionAccount -- ZeroOrOne

                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionAccount(long idTransactionAccount)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransactionAccount(idTransactionAccount, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionAccount(long idTransactionAccount, SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property=> property.IdTransactionAccount == idTransactionAccount && property.IsDeactivated !=true;
                    return GetTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionAccountByPage(long idTransactionAccount, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransactionAccountByPage(idTransactionAccount, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionAccountByPage(long idTransactionAccount, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property => property.IdTransactionAccount == idTransactionAccount && property.IsDeactivated !=true;
                    return GetAllTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction GetTransactionWithTransactionClassDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"TransactionClass"},shouldRemap);
					}
				}

            //IdTransactionClass -- ZeroOrOne

                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionClass(long idTransactionClass)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransactionClass(idTransactionClass, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionClass(long idTransactionClass, SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property=> property.IdTransactionClass == idTransactionClass && property.IsDeactivated !=true;
                    return GetTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionClassByPage(long idTransactionClass, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransactionClassByPage(idTransactionClass, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionClassByPage(long idTransactionClass, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property => property.IdTransactionClass == idTransactionClass && property.IsDeactivated !=true;
                    return GetAllTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction GetTransactionWithTransactionTemplateDetails(long idTransaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionWithDetails(idTransaction,new List<string>(){"TransactionTemplate"},shouldRemap);
					}
				}

            //IdTransactionTemplate -- ZeroOrOne

                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionTemplate(long idTransactionTemplate)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransactionTemplate(idTransactionTemplate, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionTemplate(long idTransactionTemplate, SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property=> property.IdTransactionTemplate == idTransactionTemplate && property.IsDeactivated !=true;
                    return GetTransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionTemplateByPage(long idTransactionTemplate, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionListByTransactionTemplateByPage(idTransactionTemplate, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction> GetAllTransactionListByTransactionTemplateByPage(long idTransactionTemplate, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction, bool>> expression = property => property.IdTransactionTemplate == idTransactionTemplate && property.IsDeactivated !=true;
                    return GetAllTransactionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public Transaction GetTransactionWithDetails(long idTransaction, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionWithDetails(idTransaction, db,includes,shouldRemap);
                }
            }

            public Transaction GetTransactionWithDetails(long idTransaction, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Transaction> query =  db.Transactions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransactionSingle(query
						.Where(p => p.IdTransaction == idTransaction && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransaction == idTransaction && p.IsDeactivated != true).FirstOrDefault();
            }

            public Transaction GetTransactionWitDetails(long idTransaction,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionWitDetails(idTransaction, db,shouldRemap);
                }
            }

            public Transaction GetTransactionWitDetails(long idTransaction, SubscriptionEntities db,bool shouldRemap = false)
            {
				Transaction _Transaction = db.Transactions

					.Include("User")
					.Include("TransactionState")
					.Include("TransactionType")
					.Include("Customer")
					.Include("Document")
					.Include("ScheduleSettings")
					.Include("TransactionDues")
					.Include("TransactionDue_Transaction")
					.Include("Payments")
					.Include("Payment")
					.Include("Transaction1")
					.Include("Transaction2")
					.Include("Transaction11")
					.Include("Transaction3")
					.Include("Transaction_Payment")
					.Include("TransactionDetails")
					.Include("Transaction_MailToSend")
					.Include("Transaction_BankStatementStagingDetail")
					.Include("TransactionAccount")
					.Include("TransactionClass")
					.Include("TransactionTemplate")
								.Where(p => p.IdTransaction == idTransaction && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransactionSingle(_Transaction);

				return  _Transaction;
            }

            public List<Transaction> GetTransactionListByIdList(List<long> transactionIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionListByIdList(transactionIds, db);
                }
            }
            public List<Transaction> GetTransactionListByIdList(List<long> transactionIds, SubscriptionEntities db)
            {
                return db.Transactions.Where(p => p.IsDeactivated != true && transactionIds.Contains(p.IdTransaction.Value)).ToList();
            }


            public void SaveTransaction(Transaction transaction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransaction(transaction, db);
                }
            }

            public void SaveTransaction(Transaction transaction, SubscriptionEntities db)
            {
									if (transaction.User != null) 
						DaoFactories.Instance.UserDao.SaveUser(transaction.User, db);
									if (transaction.TransactionState != null) 
						DaoFactories.Instance.TransactionStateDao.SaveTransactionState(transaction.TransactionState, db);
									if (transaction.TransactionType != null) 
						DaoFactories.Instance.TransactionTypeDao.SaveTransactionType(transaction.TransactionType, db);
									if (transaction.Customer != null) 
						DaoFactories.Instance.CustomerDao.SaveCustomer(transaction.Customer, db);
									if (transaction.Document != null) 
						DaoFactories.Instance.DocumentDao.SaveDocument(transaction.Document, db);
									if (transaction.Payment != null) 
						DaoFactories.Instance.PaymentDao.SavePayment(transaction.Payment, db);
									if (transaction.Transaction1 != null) 
						DaoFactories.Instance.TransactionDao.SaveTransaction(transaction.Transaction1, db);
									if (transaction.Transaction2 != null) 
						DaoFactories.Instance.TransactionDao.SaveTransaction(transaction.Transaction2, db);
									if (transaction.Transaction11 != null) 
						DaoFactories.Instance.TransactionDao.SaveTransaction(transaction.Transaction11, db);
									if (transaction.Transaction3 != null) 
						DaoFactories.Instance.TransactionDao.SaveTransaction(transaction.Transaction3, db);
									if (transaction.TransactionAccount != null) 
						DaoFactories.Instance.TransactionAccountDao.SaveTransactionAccount(transaction.TransactionAccount, db);
									if (transaction.TransactionClass != null) 
						DaoFactories.Instance.TransactionClassDao.SaveTransactionClass(transaction.TransactionClass, db);
									if (transaction.TransactionTemplate != null) 
						DaoFactories.Instance.TransactionTemplateDao.SaveTransactionTemplate(transaction.TransactionTemplate, db);
				                
                if (transaction.IdTransaction.HasValue){
					var transactionFromDb = db.Transactions.Where(p => p.IdTransaction == transaction.IdTransaction).FirstOrDefault();
													transactionFromDb.IdTransactionType = transaction.IdTransactionType;
													transactionFromDb.IsDeactivated = transaction.IsDeactivated;
													transactionFromDb.TransactionDate = transaction.TransactionDate;
													transactionFromDb.ReceiptNo = transaction.ReceiptNo;
													transactionFromDb.IdCustomer = transaction.IdCustomer;
													transactionFromDb.IdTransactionClass = transaction.IdTransactionClass;
													transactionFromDb.IdTransactionTemplate = transaction.IdTransactionTemplate;
													transactionFromDb.IdTransactionAccount = transaction.IdTransactionAccount;
													transactionFromDb.Memo = transaction.Memo;
													transactionFromDb.CapturedDate = transaction.CapturedDate;
													transactionFromDb.TotalAmount = transaction.TotalAmount;
													transactionFromDb.IdUserAuthor = transaction.IdUserAuthor;
													transactionFromDb.IdSignatureDocument = transaction.IdSignatureDocument;
													transactionFromDb.IdTransactionState = transaction.IdTransactionState;
													transactionFromDb.IdTransactionOriginal = transaction.IdTransactionOriginal;
													transactionFromDb.IdPayment = transaction.IdPayment;
									}
                else{
                                                //fix for saving without duplicating items in db
                              transaction.User = null;
                                                        //fix for saving without duplicating items in db
                              transaction.TransactionState = null;
                                                        //fix for saving without duplicating items in db
                              transaction.TransactionType = null;
                                                        //fix for saving without duplicating items in db
                              transaction.Customer = null;
                                                        //fix for saving without duplicating items in db
                              transaction.Document = null;
                                                        //fix for saving without duplicating items in db
                              transaction.Payment = null;
                                                        //fix for saving without duplicating items in db
                              transaction.Transaction1 = null;
                                                        //fix for saving without duplicating items in db
                              transaction.Transaction2 = null;
                                                        //fix for saving without duplicating items in db
                              transaction.Transaction11 = null;
                                                        //fix for saving without duplicating items in db
                              transaction.Transaction3 = null;
                                                        //fix for saving without duplicating items in db
                              transaction.TransactionAccount = null;
                                                        //fix for saving without duplicating items in db
                              transaction.TransactionClass = null;
                                                        //fix for saving without duplicating items in db
                              transaction.TransactionTemplate = null;
                                                db.Transactions.Add(transaction);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransaction(Transaction transaction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransaction(transaction, db);
                }
            }

            public void SaveOnlyTransaction(Transaction transaction, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // transaction.User = null;
                                                        //fix for saving without duplicating items in db
                             // transaction.TransactionState = null;
                                                        //fix for saving without duplicating items in db
                             // transaction.TransactionType = null;
                                                        //fix for saving without duplicating items in db
                             // transaction.Customer = null;
                                                        //fix for saving without duplicating items in db
                             // transaction.Document = null;
                                                        //fix for saving without duplicating items in db
                             // transaction.Payment = null;
                                                        //fix for saving without duplicating items in db
                             // transaction.Transaction1 = null;
                                                        //fix for saving without duplicating items in db
                             // transaction.Transaction2 = null;
                                                        //fix for saving without duplicating items in db
                             // transaction.Transaction11 = null;
                                                        //fix for saving without duplicating items in db
                             // transaction.Transaction3 = null;
                                                        //fix for saving without duplicating items in db
                             // transaction.TransactionAccount = null;
                                                        //fix for saving without duplicating items in db
                             // transaction.TransactionClass = null;
                                                        //fix for saving without duplicating items in db
                             // transaction.TransactionTemplate = null;
                                            if (transaction.IdTransaction.HasValue){
					var transactionFromDb = db.Transactions.Where(p => p.IdTransaction == transaction.IdTransaction).FirstOrDefault();
													transactionFromDb.IdTransactionType = transaction.IdTransactionType;
													transactionFromDb.IsDeactivated = transaction.IsDeactivated;
													transactionFromDb.TransactionDate = transaction.TransactionDate;
													transactionFromDb.ReceiptNo = transaction.ReceiptNo;
													transactionFromDb.IdCustomer = transaction.IdCustomer;
													transactionFromDb.IdTransactionClass = transaction.IdTransactionClass;
													transactionFromDb.IdTransactionTemplate = transaction.IdTransactionTemplate;
													transactionFromDb.IdTransactionAccount = transaction.IdTransactionAccount;
													transactionFromDb.Memo = transaction.Memo;
													transactionFromDb.CapturedDate = transaction.CapturedDate;
													transactionFromDb.TotalAmount = transaction.TotalAmount;
													transactionFromDb.IdUserAuthor = transaction.IdUserAuthor;
													transactionFromDb.IdSignatureDocument = transaction.IdSignatureDocument;
													transactionFromDb.IdTransactionState = transaction.IdTransactionState;
													transactionFromDb.IdTransactionOriginal = transaction.IdTransactionOriginal;
													transactionFromDb.IdPayment = transaction.IdPayment;
										 db.SaveChanges();

				}
                else{
					Transaction _transaction = new Transaction();
																	_transaction.IdTransactionType = transaction.IdTransactionType;
													_transaction.IsDeactivated = transaction.IsDeactivated;
													_transaction.TransactionDate = transaction.TransactionDate;
													_transaction.ReceiptNo = transaction.ReceiptNo;
													_transaction.IdCustomer = transaction.IdCustomer;
													_transaction.IdTransactionClass = transaction.IdTransactionClass;
													_transaction.IdTransactionTemplate = transaction.IdTransactionTemplate;
													_transaction.IdTransactionAccount = transaction.IdTransactionAccount;
													_transaction.Memo = transaction.Memo;
													_transaction.CapturedDate = transaction.CapturedDate;
													_transaction.TotalAmount = transaction.TotalAmount;
													_transaction.IdUserAuthor = transaction.IdUserAuthor;
													_transaction.IdSignatureDocument = transaction.IdSignatureDocument;
													_transaction.IdTransactionState = transaction.IdTransactionState;
													_transaction.IdTransactionOriginal = transaction.IdTransactionOriginal;
													_transaction.IdPayment = transaction.IdPayment;
					

                    db.Transactions.Add(_transaction);
					db.SaveChanges();
					transaction.IdTransaction =  _transaction.IdTransaction;
                    
                }
            }

            public void DeleteTransaction(Transaction transaction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransaction(transaction, db);
                }
            }

            public void DeleteTransaction(Transaction transaction, SubscriptionEntities db)
            {
								var transactionFromDb = GetTransaction(transaction.IdTransaction.Value,db);
				transactionFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransaction(Transaction transaction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransaction(transaction, db);
                }
            }

            public void DeletePermanentlyTransaction(Transaction transaction, SubscriptionEntities db)
            {
								var transactionFromDb = GetTransaction(transaction.IdTransaction.Value,db);
				
				db.Transactions.Remove(transactionFromDb);
                db.SaveChanges();
            }


            
							public List<ScheduleSetting> UpdateScheduleSettingsForTransactionWithoutSavingNewItem(List<ScheduleSetting> newScheduleSettings,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateScheduleSettingsForTransactionWithoutSavingNewItem(newScheduleSettings,idTransaction,db);
                                }
                            }

							public List<ScheduleSetting> UpdateScheduleSettingsForTransactionWithoutSavingNewItem(List<ScheduleSetting> newScheduleSettings,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<ScheduleSetting, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldScheduleSettings = DaoFactories.Instance.ScheduleSettingDao.GetScheduleSettingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldScheduleSettings.EntityList.Select(pc => pc.IdScheduleSetting).Except(newScheduleSettings.Where(pc => pc.IdScheduleSetting.HasValue).Select(pc => pc.IdScheduleSetting)).ToList();
                                var itemsTobeDeleted = oldScheduleSettings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdScheduleSetting)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newScheduleSettings;
                            }


                            public List<ScheduleSetting> UpdateScheduleSettingsForTransaction(List<ScheduleSetting> newScheduleSettings,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateScheduleSettingsForTransaction(newScheduleSettings,idTransaction,db);
                                }
                            }

                            public List<ScheduleSetting> UpdateScheduleSettingsForTransaction(List<ScheduleSetting> newScheduleSettings,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<ScheduleSetting, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldScheduleSettings = DaoFactories.Instance.ScheduleSettingDao.GetScheduleSettingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldScheduleSettings.EntityList.Select(pc => pc.IdScheduleSetting).Except(newScheduleSettings.Where(pc => pc.IdScheduleSetting.HasValue).Select(pc => pc.IdScheduleSetting)).ToList();
                                var itemsTobeDeleted = oldScheduleSettings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdScheduleSetting)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newScheduleSettings.ForEach(pc =>
                                {
                                    pc.IdTransaction = idTransaction;
                                    DaoFactories.Instance.ScheduleSettingDao.SaveOnlyScheduleSetting(pc, db);
                                });
                                return newScheduleSettings;
                            }

                        
							public List<TransactionDue> UpdateTransactionDuesForTransactionWithoutSavingNewItem(List<TransactionDue> newTransactionDues,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDuesForTransactionWithoutSavingNewItem(newTransactionDues,idTransaction,db);
                                }
                            }

							public List<TransactionDue> UpdateTransactionDuesForTransactionWithoutSavingNewItem(List<TransactionDue> newTransactionDues,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDue, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldTransactionDues = DaoFactories.Instance.TransactionDueDao.GetTransactionDueCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDues.EntityList.Select(pc => pc.IdTransactionDue).Except(newTransactionDues.Where(pc => pc.IdTransactionDue.HasValue).Select(pc => pc.IdTransactionDue)).ToList();
                                var itemsTobeDeleted = oldTransactionDues.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDue)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionDues;
                            }


                            public List<TransactionDue> UpdateTransactionDuesForTransaction(List<TransactionDue> newTransactionDues,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDuesForTransaction(newTransactionDues,idTransaction,db);
                                }
                            }

                            public List<TransactionDue> UpdateTransactionDuesForTransaction(List<TransactionDue> newTransactionDues,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDue, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldTransactionDues = DaoFactories.Instance.TransactionDueDao.GetTransactionDueCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDues.EntityList.Select(pc => pc.IdTransactionDue).Except(newTransactionDues.Where(pc => pc.IdTransactionDue.HasValue).Select(pc => pc.IdTransactionDue)).ToList();
                                var itemsTobeDeleted = oldTransactionDues.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDue)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionDues.ForEach(pc =>
                                {
                                    pc.IdTransaction = idTransaction;
                                    DaoFactories.Instance.TransactionDueDao.SaveOnlyTransactionDue(pc, db);
                                });
                                return newTransactionDues;
                            }

                        
							public List<TransactionDue_Transaction> UpdateTransactionDue_TransactionForTransactionWithoutSavingNewItem(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDue_TransactionForTransactionWithoutSavingNewItem(newTransactionDue_Transaction,idTransaction,db);
                                }
                            }

							public List<TransactionDue_Transaction> UpdateTransactionDue_TransactionForTransactionWithoutSavingNewItem(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDue_Transaction, bool>> expressionBuilder = p => p.IdTransactionDone == idTransaction;
                                var oldTransactionDue_Transaction = DaoFactories.Instance.TransactionDue_TransactionDao.GetTransactionDue_TransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDue_Transaction.EntityList.Select(pc => pc.IdTransactionDue_Transaction).Except(newTransactionDue_Transaction.Where(pc => pc.IdTransactionDue_Transaction.HasValue).Select(pc => pc.IdTransactionDue_Transaction)).ToList();
                                var itemsTobeDeleted = oldTransactionDue_Transaction.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDue_Transaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionDue_Transaction;
                            }


                            public List<TransactionDue_Transaction> UpdateTransactionDue_TransactionForTransaction(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDue_TransactionForTransaction(newTransactionDue_Transaction,idTransaction,db);
                                }
                            }

                            public List<TransactionDue_Transaction> UpdateTransactionDue_TransactionForTransaction(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDue_Transaction, bool>> expressionBuilder = p => p.IdTransactionDone == idTransaction;
                                var oldTransactionDue_Transaction = DaoFactories.Instance.TransactionDue_TransactionDao.GetTransactionDue_TransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDue_Transaction.EntityList.Select(pc => pc.IdTransactionDue_Transaction).Except(newTransactionDue_Transaction.Where(pc => pc.IdTransactionDue_Transaction.HasValue).Select(pc => pc.IdTransactionDue_Transaction)).ToList();
                                var itemsTobeDeleted = oldTransactionDue_Transaction.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDue_Transaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionDue_Transaction.ForEach(pc =>
                                {
                                    pc.IdTransactionDone = idTransaction;
                                    DaoFactories.Instance.TransactionDue_TransactionDao.SaveOnlyTransactionDue_Transaction(pc, db);
                                });
                                return newTransactionDue_Transaction;
                            }

                        
							public List<Payment> UpdatePaymentsForTransactionWithoutSavingNewItem(List<Payment> newPayments,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePaymentsForTransactionWithoutSavingNewItem(newPayments,idTransaction,db);
                                }
                            }

							public List<Payment> UpdatePaymentsForTransactionWithoutSavingNewItem(List<Payment> newPayments,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<Payment, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldPayments = DaoFactories.Instance.PaymentDao.GetPaymentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPayments.EntityList.Select(pc => pc.IdPayment).Except(newPayments.Where(pc => pc.IdPayment.HasValue).Select(pc => pc.IdPayment)).ToList();
                                var itemsTobeDeleted = oldPayments.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPayment)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newPayments;
                            }


                            public List<Payment> UpdatePaymentsForTransaction(List<Payment> newPayments,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePaymentsForTransaction(newPayments,idTransaction,db);
                                }
                            }

                            public List<Payment> UpdatePaymentsForTransaction(List<Payment> newPayments,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<Payment, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldPayments = DaoFactories.Instance.PaymentDao.GetPaymentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPayments.EntityList.Select(pc => pc.IdPayment).Except(newPayments.Where(pc => pc.IdPayment.HasValue).Select(pc => pc.IdPayment)).ToList();
                                var itemsTobeDeleted = oldPayments.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPayment)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newPayments.ForEach(pc =>
                                {
                                    pc.IdTransaction = idTransaction;
                                    DaoFactories.Instance.PaymentDao.SaveOnlyPayment(pc, db);
                                });
                                return newPayments;
                            }

                        
							public List<Transaction_Payment> UpdateTransaction_PaymentForTransactionWithoutSavingNewItem(List<Transaction_Payment> newTransaction_Payment,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransaction_PaymentForTransactionWithoutSavingNewItem(newTransaction_Payment,idTransaction,db);
                                }
                            }

							public List<Transaction_Payment> UpdateTransaction_PaymentForTransactionWithoutSavingNewItem(List<Transaction_Payment> newTransaction_Payment,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction_Payment, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldTransaction_Payment = DaoFactories.Instance.Transaction_PaymentDao.GetTransaction_PaymentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransaction_Payment.EntityList.Select(pc => pc.IdTransaction_Payment).Except(newTransaction_Payment.Where(pc => pc.IdTransaction_Payment.HasValue).Select(pc => pc.IdTransaction_Payment)).ToList();
                                var itemsTobeDeleted = oldTransaction_Payment.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction_Payment)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransaction_Payment;
                            }


                            public List<Transaction_Payment> UpdateTransaction_PaymentForTransaction(List<Transaction_Payment> newTransaction_Payment,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransaction_PaymentForTransaction(newTransaction_Payment,idTransaction,db);
                                }
                            }

                            public List<Transaction_Payment> UpdateTransaction_PaymentForTransaction(List<Transaction_Payment> newTransaction_Payment,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction_Payment, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldTransaction_Payment = DaoFactories.Instance.Transaction_PaymentDao.GetTransaction_PaymentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransaction_Payment.EntityList.Select(pc => pc.IdTransaction_Payment).Except(newTransaction_Payment.Where(pc => pc.IdTransaction_Payment.HasValue).Select(pc => pc.IdTransaction_Payment)).ToList();
                                var itemsTobeDeleted = oldTransaction_Payment.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction_Payment)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransaction_Payment.ForEach(pc =>
                                {
                                    pc.IdTransaction = idTransaction;
                                    DaoFactories.Instance.Transaction_PaymentDao.SaveOnlyTransaction_Payment(pc, db);
                                });
                                return newTransaction_Payment;
                            }

                        
							public List<TransactionDetail> UpdateTransactionDetailsForTransactionWithoutSavingNewItem(List<TransactionDetail> newTransactionDetails,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDetailsForTransactionWithoutSavingNewItem(newTransactionDetails,idTransaction,db);
                                }
                            }

							public List<TransactionDetail> UpdateTransactionDetailsForTransactionWithoutSavingNewItem(List<TransactionDetail> newTransactionDetails,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDetail, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldTransactionDetails = DaoFactories.Instance.TransactionDetailDao.GetTransactionDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDetails.EntityList.Select(pc => pc.IdTransactionDetail).Except(newTransactionDetails.Where(pc => pc.IdTransactionDetail.HasValue).Select(pc => pc.IdTransactionDetail)).ToList();
                                var itemsTobeDeleted = oldTransactionDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionDetails;
                            }


                            public List<TransactionDetail> UpdateTransactionDetailsForTransaction(List<TransactionDetail> newTransactionDetails,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDetailsForTransaction(newTransactionDetails,idTransaction,db);
                                }
                            }

                            public List<TransactionDetail> UpdateTransactionDetailsForTransaction(List<TransactionDetail> newTransactionDetails,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDetail, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldTransactionDetails = DaoFactories.Instance.TransactionDetailDao.GetTransactionDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDetails.EntityList.Select(pc => pc.IdTransactionDetail).Except(newTransactionDetails.Where(pc => pc.IdTransactionDetail.HasValue).Select(pc => pc.IdTransactionDetail)).ToList();
                                var itemsTobeDeleted = oldTransactionDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionDetails.ForEach(pc =>
                                {
                                    pc.IdTransaction = idTransaction;
                                    DaoFactories.Instance.TransactionDetailDao.SaveOnlyTransactionDetail(pc, db);
                                });
                                return newTransactionDetails;
                            }

                        
							public List<Transaction_MailToSend> UpdateTransaction_MailToSendForTransactionWithoutSavingNewItem(List<Transaction_MailToSend> newTransaction_MailToSend,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransaction_MailToSendForTransactionWithoutSavingNewItem(newTransaction_MailToSend,idTransaction,db);
                                }
                            }

							public List<Transaction_MailToSend> UpdateTransaction_MailToSendForTransactionWithoutSavingNewItem(List<Transaction_MailToSend> newTransaction_MailToSend,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction_MailToSend, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldTransaction_MailToSend = DaoFactories.Instance.Transaction_MailToSendDao.GetTransaction_MailToSendCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransaction_MailToSend.EntityList.Select(pc => pc.IdTransaction_MailToSend).Except(newTransaction_MailToSend.Where(pc => pc.IdTransaction_MailToSend.HasValue).Select(pc => pc.IdTransaction_MailToSend)).ToList();
                                var itemsTobeDeleted = oldTransaction_MailToSend.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction_MailToSend)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransaction_MailToSend;
                            }


                            public List<Transaction_MailToSend> UpdateTransaction_MailToSendForTransaction(List<Transaction_MailToSend> newTransaction_MailToSend,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransaction_MailToSendForTransaction(newTransaction_MailToSend,idTransaction,db);
                                }
                            }

                            public List<Transaction_MailToSend> UpdateTransaction_MailToSendForTransaction(List<Transaction_MailToSend> newTransaction_MailToSend,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction_MailToSend, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldTransaction_MailToSend = DaoFactories.Instance.Transaction_MailToSendDao.GetTransaction_MailToSendCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransaction_MailToSend.EntityList.Select(pc => pc.IdTransaction_MailToSend).Except(newTransaction_MailToSend.Where(pc => pc.IdTransaction_MailToSend.HasValue).Select(pc => pc.IdTransaction_MailToSend)).ToList();
                                var itemsTobeDeleted = oldTransaction_MailToSend.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction_MailToSend)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransaction_MailToSend.ForEach(pc =>
                                {
                                    pc.IdTransaction = idTransaction;
                                    DaoFactories.Instance.Transaction_MailToSendDao.SaveOnlyTransaction_MailToSend(pc, db);
                                });
                                return newTransaction_MailToSend;
                            }

                        
							public List<Transaction_BankStatementStagingDetail> UpdateTransaction_BankStatementStagingDetailForTransactionWithoutSavingNewItem(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransaction_BankStatementStagingDetailForTransactionWithoutSavingNewItem(newTransaction_BankStatementStagingDetail,idTransaction,db);
                                }
                            }

							public List<Transaction_BankStatementStagingDetail> UpdateTransaction_BankStatementStagingDetailForTransactionWithoutSavingNewItem(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction_BankStatementStagingDetail, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldTransaction_BankStatementStagingDetail = DaoFactories.Instance.Transaction_BankStatementStagingDetailDao.GetTransaction_BankStatementStagingDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransaction_BankStatementStagingDetail.EntityList.Select(pc => pc.IdTransaction_BankStatementStagingDetail).Except(newTransaction_BankStatementStagingDetail.Where(pc => pc.IdTransaction_BankStatementStagingDetail.HasValue).Select(pc => pc.IdTransaction_BankStatementStagingDetail)).ToList();
                                var itemsTobeDeleted = oldTransaction_BankStatementStagingDetail.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction_BankStatementStagingDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransaction_BankStatementStagingDetail;
                            }


                            public List<Transaction_BankStatementStagingDetail> UpdateTransaction_BankStatementStagingDetailForTransaction(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idTransaction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransaction_BankStatementStagingDetailForTransaction(newTransaction_BankStatementStagingDetail,idTransaction,db);
                                }
                            }

                            public List<Transaction_BankStatementStagingDetail> UpdateTransaction_BankStatementStagingDetailForTransaction(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idTransaction, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction_BankStatementStagingDetail, bool>> expressionBuilder = p => p.IdTransaction == idTransaction;
                                var oldTransaction_BankStatementStagingDetail = DaoFactories.Instance.Transaction_BankStatementStagingDetailDao.GetTransaction_BankStatementStagingDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransaction_BankStatementStagingDetail.EntityList.Select(pc => pc.IdTransaction_BankStatementStagingDetail).Except(newTransaction_BankStatementStagingDetail.Where(pc => pc.IdTransaction_BankStatementStagingDetail.HasValue).Select(pc => pc.IdTransaction_BankStatementStagingDetail)).ToList();
                                var itemsTobeDeleted = oldTransaction_BankStatementStagingDetail.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction_BankStatementStagingDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransaction_BankStatementStagingDetail.ForEach(pc =>
                                {
                                    pc.IdTransaction = idTransaction;
                                    DaoFactories.Instance.Transaction_BankStatementStagingDetailDao.SaveOnlyTransaction_BankStatementStagingDetail(pc, db);
                                });
                                return newTransaction_BankStatementStagingDetail;
                            }

                        


    



		}
			public partial class Transaction_BankStatementStagingDetailDao :ITransaction_BankStatementStagingDetailDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public Transaction_BankStatementStagingDetailDao(){
			
			}

			public Transaction_BankStatementStagingDetailDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetail(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransaction_BankStatementStagingDetail(db, shouldRemap);
                }
            }

            public List<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetail(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransaction_BankStatementStagingDetailList(db.Transaction_BankStatementStagingDetail.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Transaction_BankStatementStagingDetail.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransaction_BankStatementStagingDetailByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
            {
				IQueryable<Transaction_BankStatementStagingDetail> query =  db.Transaction_BankStatementStagingDetail;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Transaction_BankStatementStagingDetail> baseListReturnType = new BaseListReturnType<Transaction_BankStatementStagingDetail>();

                IQueryable<Transaction_BankStatementStagingDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransaction_BankStatementStagingDetail" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Transaction_BankStatementStagingDetail, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransaction_BankStatementStagingDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailWithBankStatementStagingDetailDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_BankStatementStagingDetailByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetail"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_BankStatementStagingDetailByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransaction_BankStatementStagingDetailByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
            {
				IQueryable<Transaction_BankStatementStagingDetail> query =  db.Transaction_BankStatementStagingDetail;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Transaction_BankStatementStagingDetail> baseListReturnType = new BaseListReturnType<Transaction_BankStatementStagingDetail>();

                IQueryable<Transaction_BankStatementStagingDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransaction_BankStatementStagingDetail" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Transaction_BankStatementStagingDetail, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransaction_BankStatementStagingDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailWithBankStatementStagingDetailDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_BankStatementStagingDetailByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingDetail"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailWithTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = null,bool shouldRemap = false, Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_BankStatementStagingDetailByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailWithBankStatementStagingDetailDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_BankStatementStagingDetailWitDetails(new List<string>(){"BankStatementStagingDetail"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailWithTransactionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_BankStatementStagingDetailWitDetails(new List<string>(){"Transaction"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransaction_BankStatementStagingDetailWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Transaction_BankStatementStagingDetail> query =  db.Transaction_BankStatementStagingDetail;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Transaction_BankStatementStagingDetail> baseListReturnType = new BaseListReturnType<Transaction_BankStatementStagingDetail>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransaction_BankStatementStagingDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetail(long idTransaction_BankStatementStagingDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction_BankStatementStagingDetail(idTransaction_BankStatementStagingDetail, db,shouldRemap);
                }
            }
                        public Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetail(long idTransaction_BankStatementStagingDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransaction_BankStatementStagingDetailSingle(db.Transaction_BankStatementStagingDetail.Where(p => p.IdTransaction_BankStatementStagingDetail == idTransaction_BankStatementStagingDetail && p.IsDeactivated != true).FirstOrDefault());

                return db.Transaction_BankStatementStagingDetail.Where(p => p.IdTransaction_BankStatementStagingDetail == idTransaction_BankStatementStagingDetail && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailCustom( Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransaction_BankStatementStagingDetailCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailCustom( SubscriptionEntities db , Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Transaction_BankStatementStagingDetail> query =  db.Transaction_BankStatementStagingDetail;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransaction_BankStatementStagingDetailSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Transaction_BankStatementStagingDetail> GetTransaction_BankStatementStagingDetailCustomList( Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransaction_BankStatementStagingDetailCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Transaction_BankStatementStagingDetail> GetTransaction_BankStatementStagingDetailCustomList(  SubscriptionEntities db , Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
			{
				IQueryable<Transaction_BankStatementStagingDetail> query =  db.Transaction_BankStatementStagingDetail;
                BaseListReturnType<Transaction_BankStatementStagingDetail> baseListReturnType = new BaseListReturnType<Transaction_BankStatementStagingDetail>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransaction_BankStatementStagingDetailList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailWithBankStatementStagingDetailDetails(long idTransaction_BankStatementStagingDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransaction_BankStatementStagingDetailWithDetails(idTransaction_BankStatementStagingDetail,new List<string>(){"BankStatementStagingDetail"},shouldRemap);
					}
				}

            //IdBankStatementStagingDetail -- ZeroOrOne

                public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetail(long idBankStatementStagingDetail)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetail(idBankStatementStagingDetail, db);
                    }
                }
                public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetail(long idBankStatementStagingDetail, SubscriptionEntities db)
                {
                    Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = property=> property.IdBankStatementStagingDetail == idBankStatementStagingDetail && property.IsDeactivated !=true;
                    return GetTransaction_BankStatementStagingDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetailByPage(long idBankStatementStagingDetail, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetailByPage(idBankStatementStagingDetail, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetailByPage(long idBankStatementStagingDetail, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = property => property.IdBankStatementStagingDetail == idBankStatementStagingDetail && property.IsDeactivated !=true;
                    return GetAllTransaction_BankStatementStagingDetailByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailWithTransactionDetails(long idTransaction_BankStatementStagingDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransaction_BankStatementStagingDetailWithDetails(idTransaction_BankStatementStagingDetail,new List<string>(){"Transaction"},shouldRemap);
					}
				}

            //IdTransaction -- ZeroOrOne

                public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailListByTransaction(long idTransaction)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransaction_BankStatementStagingDetailListByTransaction(idTransaction, db);
                    }
                }
                public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailListByTransaction(long idTransaction, SubscriptionEntities db)
                {
                    Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = property=> property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetTransaction_BankStatementStagingDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransaction_BankStatementStagingDetailListByTransactionByPage(idTransaction, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = property => property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetAllTransaction_BankStatementStagingDetailByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailWithDetails(long idTransaction_BankStatementStagingDetail, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction_BankStatementStagingDetailWithDetails(idTransaction_BankStatementStagingDetail, db,includes,shouldRemap);
                }
            }

            public Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailWithDetails(long idTransaction_BankStatementStagingDetail, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Transaction_BankStatementStagingDetail> query =  db.Transaction_BankStatementStagingDetail;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransaction_BankStatementStagingDetailSingle(query
						.Where(p => p.IdTransaction_BankStatementStagingDetail == idTransaction_BankStatementStagingDetail && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransaction_BankStatementStagingDetail == idTransaction_BankStatementStagingDetail && p.IsDeactivated != true).FirstOrDefault();
            }

            public Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailWitDetails(long idTransaction_BankStatementStagingDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction_BankStatementStagingDetailWitDetails(idTransaction_BankStatementStagingDetail, db,shouldRemap);
                }
            }

            public Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailWitDetails(long idTransaction_BankStatementStagingDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				Transaction_BankStatementStagingDetail _Transaction_BankStatementStagingDetail = db.Transaction_BankStatementStagingDetail

					.Include("BankStatementStagingDetail")
					.Include("Transaction")
								.Where(p => p.IdTransaction_BankStatementStagingDetail == idTransaction_BankStatementStagingDetail && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransaction_BankStatementStagingDetailSingle(_Transaction_BankStatementStagingDetail);

				return  _Transaction_BankStatementStagingDetail;
            }

            public List<Transaction_BankStatementStagingDetail> GetTransaction_BankStatementStagingDetailListByIdList(List<long> transaction_BankStatementStagingDetailIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction_BankStatementStagingDetailListByIdList(transaction_BankStatementStagingDetailIds, db);
                }
            }
            public List<Transaction_BankStatementStagingDetail> GetTransaction_BankStatementStagingDetailListByIdList(List<long> transaction_BankStatementStagingDetailIds, SubscriptionEntities db)
            {
                return db.Transaction_BankStatementStagingDetail.Where(p => p.IsDeactivated != true && transaction_BankStatementStagingDetailIds.Contains(p.IdTransaction_BankStatementStagingDetail.Value)).ToList();
            }


            public void SaveTransaction_BankStatementStagingDetail(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransaction_BankStatementStagingDetail(transaction_BankStatementStagingDetail, db);
                }
            }

            public void SaveTransaction_BankStatementStagingDetail(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail, SubscriptionEntities db)
            {
									if (transaction_BankStatementStagingDetail.BankStatementStagingDetail != null) 
						DaoFactories.Instance.BankStatementStagingDetailDao.SaveBankStatementStagingDetail(transaction_BankStatementStagingDetail.BankStatementStagingDetail, db);
									if (transaction_BankStatementStagingDetail.Transaction != null) 
						DaoFactories.Instance.TransactionDao.SaveTransaction(transaction_BankStatementStagingDetail.Transaction, db);
				                
                if (transaction_BankStatementStagingDetail.IdTransaction_BankStatementStagingDetail.HasValue){
					var transaction_BankStatementStagingDetailFromDb = db.Transaction_BankStatementStagingDetail.Where(p => p.IdTransaction_BankStatementStagingDetail == transaction_BankStatementStagingDetail.IdTransaction_BankStatementStagingDetail).FirstOrDefault();
													transaction_BankStatementStagingDetailFromDb.IdTransaction = transaction_BankStatementStagingDetail.IdTransaction;
													transaction_BankStatementStagingDetailFromDb.IdBankStatementStagingDetail = transaction_BankStatementStagingDetail.IdBankStatementStagingDetail;
													transaction_BankStatementStagingDetailFromDb.IsDeactivated = transaction_BankStatementStagingDetail.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              transaction_BankStatementStagingDetail.BankStatementStagingDetail = null;
                                                        //fix for saving without duplicating items in db
                              transaction_BankStatementStagingDetail.Transaction = null;
                                                db.Transaction_BankStatementStagingDetail.Add(transaction_BankStatementStagingDetail);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransaction_BankStatementStagingDetail(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransaction_BankStatementStagingDetail(transaction_BankStatementStagingDetail, db);
                }
            }

            public void SaveOnlyTransaction_BankStatementStagingDetail(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // transaction_BankStatementStagingDetail.BankStatementStagingDetail = null;
                                                        //fix for saving without duplicating items in db
                             // transaction_BankStatementStagingDetail.Transaction = null;
                                            if (transaction_BankStatementStagingDetail.IdTransaction_BankStatementStagingDetail.HasValue){
					var transaction_BankStatementStagingDetailFromDb = db.Transaction_BankStatementStagingDetail.Where(p => p.IdTransaction_BankStatementStagingDetail == transaction_BankStatementStagingDetail.IdTransaction_BankStatementStagingDetail).FirstOrDefault();
													transaction_BankStatementStagingDetailFromDb.IdTransaction = transaction_BankStatementStagingDetail.IdTransaction;
													transaction_BankStatementStagingDetailFromDb.IdBankStatementStagingDetail = transaction_BankStatementStagingDetail.IdBankStatementStagingDetail;
													transaction_BankStatementStagingDetailFromDb.IsDeactivated = transaction_BankStatementStagingDetail.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Transaction_BankStatementStagingDetail _transaction_BankStatementStagingDetail = new Transaction_BankStatementStagingDetail();
																	_transaction_BankStatementStagingDetail.IdTransaction = transaction_BankStatementStagingDetail.IdTransaction;
													_transaction_BankStatementStagingDetail.IdBankStatementStagingDetail = transaction_BankStatementStagingDetail.IdBankStatementStagingDetail;
													_transaction_BankStatementStagingDetail.IsDeactivated = transaction_BankStatementStagingDetail.IsDeactivated;
					

                    db.Transaction_BankStatementStagingDetail.Add(_transaction_BankStatementStagingDetail);
					db.SaveChanges();
					transaction_BankStatementStagingDetail.IdTransaction_BankStatementStagingDetail =  _transaction_BankStatementStagingDetail.IdTransaction_BankStatementStagingDetail;
                    
                }
            }

            public void DeleteTransaction_BankStatementStagingDetail(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransaction_BankStatementStagingDetail(transaction_BankStatementStagingDetail, db);
                }
            }

            public void DeleteTransaction_BankStatementStagingDetail(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail, SubscriptionEntities db)
            {
								var transaction_BankStatementStagingDetailFromDb = GetTransaction_BankStatementStagingDetail(transaction_BankStatementStagingDetail.IdTransaction_BankStatementStagingDetail.Value,db);
				transaction_BankStatementStagingDetailFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransaction_BankStatementStagingDetail(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransaction_BankStatementStagingDetail(transaction_BankStatementStagingDetail, db);
                }
            }

            public void DeletePermanentlyTransaction_BankStatementStagingDetail(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail, SubscriptionEntities db)
            {
								var transaction_BankStatementStagingDetailFromDb = GetTransaction_BankStatementStagingDetail(transaction_BankStatementStagingDetail.IdTransaction_BankStatementStagingDetail.Value,db);
				
				db.Transaction_BankStatementStagingDetail.Remove(transaction_BankStatementStagingDetailFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class Transaction_MailToSendDao :ITransaction_MailToSendDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public Transaction_MailToSendDao(){
			
			}

			public Transaction_MailToSendDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Transaction_MailToSend> GetAllTransaction_MailToSend(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransaction_MailToSend(db, shouldRemap);
                }
            }

            public List<Transaction_MailToSend> GetAllTransaction_MailToSend(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransaction_MailToSendList(db.Transaction_MailToSend.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Transaction_MailToSend.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_MailToSend, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction_MailToSend, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransaction_MailToSendByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Transaction_MailToSend, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction_MailToSend, dynamic> orderExpression = null)
            {
				IQueryable<Transaction_MailToSend> query =  db.Transaction_MailToSend;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Transaction_MailToSend> baseListReturnType = new BaseListReturnType<Transaction_MailToSend>();

                IQueryable<Transaction_MailToSend> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransaction_MailToSend" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Transaction_MailToSend, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransaction_MailToSendList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendWithMailToSendDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_MailToSend, bool>> expression = null,bool shouldRemap = false, Func<Transaction_MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_MailToSendByPage(sortingPagingInfo, db,expression,new List<string>(){"MailToSend"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_MailToSend, bool>> expression = null,bool shouldRemap = false, Func<Transaction_MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_MailToSendByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_MailToSend, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction_MailToSend, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransaction_MailToSendByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Transaction_MailToSend, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction_MailToSend, dynamic> orderExpression = null)
            {
				IQueryable<Transaction_MailToSend> query =  db.Transaction_MailToSend;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Transaction_MailToSend> baseListReturnType = new BaseListReturnType<Transaction_MailToSend>();

                IQueryable<Transaction_MailToSend> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransaction_MailToSend" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Transaction_MailToSend, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransaction_MailToSendList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendWithMailToSendDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_MailToSend, bool>> expression = null,bool shouldRemap = false, Func<Transaction_MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_MailToSendByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"MailToSend"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendWithTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_MailToSend, bool>> expression = null,bool shouldRemap = false, Func<Transaction_MailToSend, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_MailToSendByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendWithMailToSendDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_MailToSendWitDetails(new List<string>(){"MailToSend"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendWithTransactionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_MailToSendWitDetails(new List<string>(){"Transaction"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransaction_MailToSendWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Transaction_MailToSend> query =  db.Transaction_MailToSend;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Transaction_MailToSend> baseListReturnType = new BaseListReturnType<Transaction_MailToSend>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransaction_MailToSendList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Transaction_MailToSend GetTransaction_MailToSend(long idTransaction_MailToSend,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction_MailToSend(idTransaction_MailToSend, db,shouldRemap);
                }
            }
                        public Transaction_MailToSend GetTransaction_MailToSend(long idTransaction_MailToSend, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransaction_MailToSendSingle(db.Transaction_MailToSend.Where(p => p.IdTransaction_MailToSend == idTransaction_MailToSend && p.IsDeactivated != true).FirstOrDefault());

                return db.Transaction_MailToSend.Where(p => p.IdTransaction_MailToSend == idTransaction_MailToSend && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Transaction_MailToSend GetTransaction_MailToSendCustom( Expression<Func<Transaction_MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransaction_MailToSendCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Transaction_MailToSend GetTransaction_MailToSendCustom( SubscriptionEntities db , Expression<Func<Transaction_MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Transaction_MailToSend> query =  db.Transaction_MailToSend;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransaction_MailToSendSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Transaction_MailToSend> GetTransaction_MailToSendCustomList( Expression<Func<Transaction_MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Transaction_MailToSend, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransaction_MailToSendCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Transaction_MailToSend> GetTransaction_MailToSendCustomList(  SubscriptionEntities db , Expression<Func<Transaction_MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Transaction_MailToSend, dynamic> orderExpression = null)
			{
				IQueryable<Transaction_MailToSend> query =  db.Transaction_MailToSend;
                BaseListReturnType<Transaction_MailToSend> baseListReturnType = new BaseListReturnType<Transaction_MailToSend>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransaction_MailToSendList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Transaction_MailToSend GetTransaction_MailToSendWithMailToSendDetails(long idTransaction_MailToSend,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransaction_MailToSendWithDetails(idTransaction_MailToSend,new List<string>(){"MailToSend"},shouldRemap);
					}
				}

            //IdMailToSend -- ZeroOrOne

                public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendListByMailToSend(long idMailToSend)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransaction_MailToSendListByMailToSend(idMailToSend, db);
                    }
                }
                public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendListByMailToSend(long idMailToSend, SubscriptionEntities db)
                {
                    Expression<Func<Transaction_MailToSend, bool>> expression = property=> property.IdMailToSend == idMailToSend && property.IsDeactivated !=true;
                    return GetTransaction_MailToSendCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendListByMailToSendByPage(long idMailToSend, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransaction_MailToSendListByMailToSendByPage(idMailToSend, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendListByMailToSendByPage(long idMailToSend, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction_MailToSend, bool>> expression = property => property.IdMailToSend == idMailToSend && property.IsDeactivated !=true;
                    return GetAllTransaction_MailToSendByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction_MailToSend GetTransaction_MailToSendWithTransactionDetails(long idTransaction_MailToSend,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransaction_MailToSendWithDetails(idTransaction_MailToSend,new List<string>(){"Transaction"},shouldRemap);
					}
				}

            //IdTransaction -- ZeroOrOne

                public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendListByTransaction(long idTransaction)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransaction_MailToSendListByTransaction(idTransaction, db);
                    }
                }
                public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendListByTransaction(long idTransaction, SubscriptionEntities db)
                {
                    Expression<Func<Transaction_MailToSend, bool>> expression = property=> property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetTransaction_MailToSendCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransaction_MailToSendListByTransactionByPage(idTransaction, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction_MailToSend, bool>> expression = property => property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetAllTransaction_MailToSendByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public Transaction_MailToSend GetTransaction_MailToSendWithDetails(long idTransaction_MailToSend, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction_MailToSendWithDetails(idTransaction_MailToSend, db,includes,shouldRemap);
                }
            }

            public Transaction_MailToSend GetTransaction_MailToSendWithDetails(long idTransaction_MailToSend, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Transaction_MailToSend> query =  db.Transaction_MailToSend;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransaction_MailToSendSingle(query
						.Where(p => p.IdTransaction_MailToSend == idTransaction_MailToSend && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransaction_MailToSend == idTransaction_MailToSend && p.IsDeactivated != true).FirstOrDefault();
            }

            public Transaction_MailToSend GetTransaction_MailToSendWitDetails(long idTransaction_MailToSend,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction_MailToSendWitDetails(idTransaction_MailToSend, db,shouldRemap);
                }
            }

            public Transaction_MailToSend GetTransaction_MailToSendWitDetails(long idTransaction_MailToSend, SubscriptionEntities db,bool shouldRemap = false)
            {
				Transaction_MailToSend _Transaction_MailToSend = db.Transaction_MailToSend

					.Include("MailToSend")
					.Include("Transaction")
								.Where(p => p.IdTransaction_MailToSend == idTransaction_MailToSend && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransaction_MailToSendSingle(_Transaction_MailToSend);

				return  _Transaction_MailToSend;
            }

            public List<Transaction_MailToSend> GetTransaction_MailToSendListByIdList(List<long> transaction_MailToSendIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction_MailToSendListByIdList(transaction_MailToSendIds, db);
                }
            }
            public List<Transaction_MailToSend> GetTransaction_MailToSendListByIdList(List<long> transaction_MailToSendIds, SubscriptionEntities db)
            {
                return db.Transaction_MailToSend.Where(p => p.IsDeactivated != true && transaction_MailToSendIds.Contains(p.IdTransaction_MailToSend.Value)).ToList();
            }


            public void SaveTransaction_MailToSend(Transaction_MailToSend transaction_MailToSend)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransaction_MailToSend(transaction_MailToSend, db);
                }
            }

            public void SaveTransaction_MailToSend(Transaction_MailToSend transaction_MailToSend, SubscriptionEntities db)
            {
									if (transaction_MailToSend.MailToSend != null) 
						DaoFactories.Instance.MailToSendDao.SaveMailToSend(transaction_MailToSend.MailToSend, db);
									if (transaction_MailToSend.Transaction != null) 
						DaoFactories.Instance.TransactionDao.SaveTransaction(transaction_MailToSend.Transaction, db);
				                
                if (transaction_MailToSend.IdTransaction_MailToSend.HasValue){
					var transaction_MailToSendFromDb = db.Transaction_MailToSend.Where(p => p.IdTransaction_MailToSend == transaction_MailToSend.IdTransaction_MailToSend).FirstOrDefault();
													transaction_MailToSendFromDb.IdTransaction = transaction_MailToSend.IdTransaction;
													transaction_MailToSendFromDb.IdMailToSend = transaction_MailToSend.IdMailToSend;
													transaction_MailToSendFromDb.IsDeactivated = transaction_MailToSend.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              transaction_MailToSend.MailToSend = null;
                                                        //fix for saving without duplicating items in db
                              transaction_MailToSend.Transaction = null;
                                                db.Transaction_MailToSend.Add(transaction_MailToSend);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransaction_MailToSend(Transaction_MailToSend transaction_MailToSend)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransaction_MailToSend(transaction_MailToSend, db);
                }
            }

            public void SaveOnlyTransaction_MailToSend(Transaction_MailToSend transaction_MailToSend, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // transaction_MailToSend.MailToSend = null;
                                                        //fix for saving without duplicating items in db
                             // transaction_MailToSend.Transaction = null;
                                            if (transaction_MailToSend.IdTransaction_MailToSend.HasValue){
					var transaction_MailToSendFromDb = db.Transaction_MailToSend.Where(p => p.IdTransaction_MailToSend == transaction_MailToSend.IdTransaction_MailToSend).FirstOrDefault();
													transaction_MailToSendFromDb.IdTransaction = transaction_MailToSend.IdTransaction;
													transaction_MailToSendFromDb.IdMailToSend = transaction_MailToSend.IdMailToSend;
													transaction_MailToSendFromDb.IsDeactivated = transaction_MailToSend.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Transaction_MailToSend _transaction_MailToSend = new Transaction_MailToSend();
																	_transaction_MailToSend.IdTransaction = transaction_MailToSend.IdTransaction;
													_transaction_MailToSend.IdMailToSend = transaction_MailToSend.IdMailToSend;
													_transaction_MailToSend.IsDeactivated = transaction_MailToSend.IsDeactivated;
					

                    db.Transaction_MailToSend.Add(_transaction_MailToSend);
					db.SaveChanges();
					transaction_MailToSend.IdTransaction_MailToSend =  _transaction_MailToSend.IdTransaction_MailToSend;
                    
                }
            }

            public void DeleteTransaction_MailToSend(Transaction_MailToSend transaction_MailToSend)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransaction_MailToSend(transaction_MailToSend, db);
                }
            }

            public void DeleteTransaction_MailToSend(Transaction_MailToSend transaction_MailToSend, SubscriptionEntities db)
            {
								var transaction_MailToSendFromDb = GetTransaction_MailToSend(transaction_MailToSend.IdTransaction_MailToSend.Value,db);
				transaction_MailToSendFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransaction_MailToSend(Transaction_MailToSend transaction_MailToSend)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransaction_MailToSend(transaction_MailToSend, db);
                }
            }

            public void DeletePermanentlyTransaction_MailToSend(Transaction_MailToSend transaction_MailToSend, SubscriptionEntities db)
            {
								var transaction_MailToSendFromDb = GetTransaction_MailToSend(transaction_MailToSend.IdTransaction_MailToSend.Value,db);
				
				db.Transaction_MailToSend.Remove(transaction_MailToSendFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class Transaction_PaymentDao :ITransaction_PaymentDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public Transaction_PaymentDao(){
			
			}

			public Transaction_PaymentDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Transaction_Payment> GetAllTransaction_Payment(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransaction_Payment(db, shouldRemap);
                }
            }

            public List<Transaction_Payment> GetAllTransaction_Payment(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransaction_PaymentList(db.Transaction_Payment.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Transaction_Payment.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_Payment, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction_Payment, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransaction_PaymentByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Transaction_Payment, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction_Payment, dynamic> orderExpression = null)
            {
				IQueryable<Transaction_Payment> query =  db.Transaction_Payment;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Transaction_Payment> baseListReturnType = new BaseListReturnType<Transaction_Payment>();

                IQueryable<Transaction_Payment> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransaction_Payment" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Transaction_Payment, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransaction_PaymentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentWithPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_Payment, bool>> expression = null,bool shouldRemap = false, Func<Transaction_Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_PaymentByPage(sortingPagingInfo, db,expression,new List<string>(){"Payment"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_Payment, bool>> expression = null,bool shouldRemap = false, Func<Transaction_Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_PaymentByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_Payment, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction_Payment, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransaction_PaymentByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Transaction_Payment, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Transaction_Payment, dynamic> orderExpression = null)
            {
				IQueryable<Transaction_Payment> query =  db.Transaction_Payment;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Transaction_Payment> baseListReturnType = new BaseListReturnType<Transaction_Payment>();

                IQueryable<Transaction_Payment> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransaction_Payment" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Transaction_Payment, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransaction_PaymentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentWithPaymentDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_Payment, bool>> expression = null,bool shouldRemap = false, Func<Transaction_Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_PaymentByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Payment"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentWithTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_Payment, bool>> expression = null,bool shouldRemap = false, Func<Transaction_Payment, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_PaymentByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentWithPaymentDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_PaymentWitDetails(new List<string>(){"Payment"},shouldRemap);
					}
				}
							public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentWithTransactionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransaction_PaymentWitDetails(new List<string>(){"Transaction"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransaction_PaymentWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Transaction_Payment> query =  db.Transaction_Payment;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Transaction_Payment> baseListReturnType = new BaseListReturnType<Transaction_Payment>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransaction_PaymentList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Transaction_Payment GetTransaction_Payment(long idTransaction_Payment,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction_Payment(idTransaction_Payment, db,shouldRemap);
                }
            }
                        public Transaction_Payment GetTransaction_Payment(long idTransaction_Payment, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransaction_PaymentSingle(db.Transaction_Payment.Where(p => p.IdTransaction_Payment == idTransaction_Payment && p.IsDeactivated != true).FirstOrDefault());

                return db.Transaction_Payment.Where(p => p.IdTransaction_Payment == idTransaction_Payment && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Transaction_Payment GetTransaction_PaymentCustom( Expression<Func<Transaction_Payment, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransaction_PaymentCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Transaction_Payment GetTransaction_PaymentCustom( SubscriptionEntities db , Expression<Func<Transaction_Payment, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Transaction_Payment> query =  db.Transaction_Payment;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransaction_PaymentSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Transaction_Payment> GetTransaction_PaymentCustomList( Expression<Func<Transaction_Payment, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Transaction_Payment, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransaction_PaymentCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Transaction_Payment> GetTransaction_PaymentCustomList(  SubscriptionEntities db , Expression<Func<Transaction_Payment, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Transaction_Payment, dynamic> orderExpression = null)
			{
				IQueryable<Transaction_Payment> query =  db.Transaction_Payment;
                BaseListReturnType<Transaction_Payment> baseListReturnType = new BaseListReturnType<Transaction_Payment>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransaction_PaymentList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Transaction_Payment GetTransaction_PaymentWithPaymentDetails(long idTransaction_Payment,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransaction_PaymentWithDetails(idTransaction_Payment,new List<string>(){"Payment"},shouldRemap);
					}
				}

            //IdPayment -- ZeroOrOne

                public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentListByPayment(long idPayment)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransaction_PaymentListByPayment(idPayment, db);
                    }
                }
                public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentListByPayment(long idPayment, SubscriptionEntities db)
                {
                    Expression<Func<Transaction_Payment, bool>> expression = property=> property.IdPayment == idPayment && property.IsDeactivated !=true;
                    return GetTransaction_PaymentCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentListByPaymentByPage(long idPayment, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransaction_PaymentListByPaymentByPage(idPayment, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentListByPaymentByPage(long idPayment, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction_Payment, bool>> expression = property => property.IdPayment == idPayment && property.IsDeactivated !=true;
                    return GetAllTransaction_PaymentByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public Transaction_Payment GetTransaction_PaymentWithTransactionDetails(long idTransaction_Payment,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransaction_PaymentWithDetails(idTransaction_Payment,new List<string>(){"Transaction"},shouldRemap);
					}
				}

            //IdTransaction -- ZeroOrOne

                public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentListByTransaction(long idTransaction)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransaction_PaymentListByTransaction(idTransaction, db);
                    }
                }
                public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentListByTransaction(long idTransaction, SubscriptionEntities db)
                {
                    Expression<Func<Transaction_Payment, bool>> expression = property=> property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetTransaction_PaymentCustomList(db, expression, null, true);
                }
                public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransaction_PaymentListByTransactionByPage(idTransaction, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<Transaction_Payment, bool>> expression = property => property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetAllTransaction_PaymentByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public Transaction_Payment GetTransaction_PaymentWithDetails(long idTransaction_Payment, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction_PaymentWithDetails(idTransaction_Payment, db,includes,shouldRemap);
                }
            }

            public Transaction_Payment GetTransaction_PaymentWithDetails(long idTransaction_Payment, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Transaction_Payment> query =  db.Transaction_Payment;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransaction_PaymentSingle(query
						.Where(p => p.IdTransaction_Payment == idTransaction_Payment && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransaction_Payment == idTransaction_Payment && p.IsDeactivated != true).FirstOrDefault();
            }

            public Transaction_Payment GetTransaction_PaymentWitDetails(long idTransaction_Payment,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction_PaymentWitDetails(idTransaction_Payment, db,shouldRemap);
                }
            }

            public Transaction_Payment GetTransaction_PaymentWitDetails(long idTransaction_Payment, SubscriptionEntities db,bool shouldRemap = false)
            {
				Transaction_Payment _Transaction_Payment = db.Transaction_Payment

					.Include("Payment")
					.Include("Transaction")
								.Where(p => p.IdTransaction_Payment == idTransaction_Payment && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransaction_PaymentSingle(_Transaction_Payment);

				return  _Transaction_Payment;
            }

            public List<Transaction_Payment> GetTransaction_PaymentListByIdList(List<long> transaction_PaymentIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransaction_PaymentListByIdList(transaction_PaymentIds, db);
                }
            }
            public List<Transaction_Payment> GetTransaction_PaymentListByIdList(List<long> transaction_PaymentIds, SubscriptionEntities db)
            {
                return db.Transaction_Payment.Where(p => p.IsDeactivated != true && transaction_PaymentIds.Contains(p.IdTransaction_Payment.Value)).ToList();
            }


            public void SaveTransaction_Payment(Transaction_Payment transaction_Payment)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransaction_Payment(transaction_Payment, db);
                }
            }

            public void SaveTransaction_Payment(Transaction_Payment transaction_Payment, SubscriptionEntities db)
            {
									if (transaction_Payment.Payment != null) 
						DaoFactories.Instance.PaymentDao.SavePayment(transaction_Payment.Payment, db);
									if (transaction_Payment.Transaction != null) 
						DaoFactories.Instance.TransactionDao.SaveTransaction(transaction_Payment.Transaction, db);
				                
                if (transaction_Payment.IdTransaction_Payment.HasValue){
					var transaction_PaymentFromDb = db.Transaction_Payment.Where(p => p.IdTransaction_Payment == transaction_Payment.IdTransaction_Payment).FirstOrDefault();
													transaction_PaymentFromDb.IdTransaction = transaction_Payment.IdTransaction;
													transaction_PaymentFromDb.IdPayment = transaction_Payment.IdPayment;
													transaction_PaymentFromDb.IsDeactivated = transaction_Payment.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              transaction_Payment.Payment = null;
                                                        //fix for saving without duplicating items in db
                              transaction_Payment.Transaction = null;
                                                db.Transaction_Payment.Add(transaction_Payment);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransaction_Payment(Transaction_Payment transaction_Payment)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransaction_Payment(transaction_Payment, db);
                }
            }

            public void SaveOnlyTransaction_Payment(Transaction_Payment transaction_Payment, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // transaction_Payment.Payment = null;
                                                        //fix for saving without duplicating items in db
                             // transaction_Payment.Transaction = null;
                                            if (transaction_Payment.IdTransaction_Payment.HasValue){
					var transaction_PaymentFromDb = db.Transaction_Payment.Where(p => p.IdTransaction_Payment == transaction_Payment.IdTransaction_Payment).FirstOrDefault();
													transaction_PaymentFromDb.IdTransaction = transaction_Payment.IdTransaction;
													transaction_PaymentFromDb.IdPayment = transaction_Payment.IdPayment;
													transaction_PaymentFromDb.IsDeactivated = transaction_Payment.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Transaction_Payment _transaction_Payment = new Transaction_Payment();
																	_transaction_Payment.IdTransaction = transaction_Payment.IdTransaction;
													_transaction_Payment.IdPayment = transaction_Payment.IdPayment;
													_transaction_Payment.IsDeactivated = transaction_Payment.IsDeactivated;
					

                    db.Transaction_Payment.Add(_transaction_Payment);
					db.SaveChanges();
					transaction_Payment.IdTransaction_Payment =  _transaction_Payment.IdTransaction_Payment;
                    
                }
            }

            public void DeleteTransaction_Payment(Transaction_Payment transaction_Payment)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransaction_Payment(transaction_Payment, db);
                }
            }

            public void DeleteTransaction_Payment(Transaction_Payment transaction_Payment, SubscriptionEntities db)
            {
								var transaction_PaymentFromDb = GetTransaction_Payment(transaction_Payment.IdTransaction_Payment.Value,db);
				transaction_PaymentFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransaction_Payment(Transaction_Payment transaction_Payment)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransaction_Payment(transaction_Payment, db);
                }
            }

            public void DeletePermanentlyTransaction_Payment(Transaction_Payment transaction_Payment, SubscriptionEntities db)
            {
								var transaction_PaymentFromDb = GetTransaction_Payment(transaction_Payment.IdTransaction_Payment.Value,db);
				
				db.Transaction_Payment.Remove(transaction_PaymentFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class TransactionAccountDao :ITransactionAccountDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TransactionAccountDao(){
			
			}

			public TransactionAccountDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TransactionAccount> GetAllTransactionAccounts(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionAccounts(db, shouldRemap);
                }
            }

            public List<TransactionAccount> GetAllTransactionAccounts(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionAccountList(db.TransactionAccounts.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TransactionAccounts.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionAccount, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionAccountsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionAccount, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionAccount, dynamic> orderExpression = null)
            {
				IQueryable<TransactionAccount> query =  db.TransactionAccounts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionAccount> baseListReturnType = new BaseListReturnType<TransactionAccount>();

                IQueryable<TransactionAccount> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionAccount" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionAccount, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.BankNumber.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionAccountList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithTransactionPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null,bool shouldRemap = false, Func<TransactionAccount, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithBanksDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null,bool shouldRemap = false, Func<TransactionAccount, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountsByPage(sortingPagingInfo, db,expression,new List<string>(){"Banks"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithTransactionAccountTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null,bool shouldRemap = false, Func<TransactionAccount, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionAccountType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null,bool shouldRemap = false, Func<TransactionAccount, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionAccount, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionAccountsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionAccount, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionAccount, dynamic> orderExpression = null)
            {
				IQueryable<TransactionAccount> query =  db.TransactionAccounts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionAccount> baseListReturnType = new BaseListReturnType<TransactionAccount>();

                IQueryable<TransactionAccount> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionAccount" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionAccount, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionAccountList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithTransactionPresetsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null,bool shouldRemap = false, Func<TransactionAccount, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithBanksDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null,bool shouldRemap = false, Func<TransactionAccount, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Banks"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithTransactionAccountTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null,bool shouldRemap = false, Func<TransactionAccount, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionAccountType"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null,bool shouldRemap = false, Func<TransactionAccount, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithTransactionPresetsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountWitDetails(new List<string>(){"TransactionPresets"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithBanksDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountWitDetails(new List<string>(){"Banks"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithTransactionAccountTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountWitDetails(new List<string>(){"TransactionAccountType"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountWitDetails(new List<string>(){"Transactions"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TransactionAccount> GetAllTransactionAccountWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionAccountWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TransactionAccount> GetAllTransactionAccountWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionAccount> query =  db.TransactionAccounts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionAccount> baseListReturnType = new BaseListReturnType<TransactionAccount>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionAccountList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TransactionAccount GetTransactionAccount(long idTransactionAccount,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionAccount(idTransactionAccount, db,shouldRemap);
                }
            }
                        public TransactionAccount GetTransactionAccount(long idTransactionAccount, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionAccountSingle(db.TransactionAccounts.Where(p => p.IdTransactionAccount == idTransactionAccount && p.IsDeactivated != true).FirstOrDefault());

                return db.TransactionAccounts.Where(p => p.IdTransactionAccount == idTransactionAccount && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TransactionAccount GetTransactionAccountCustom( Expression<Func<TransactionAccount, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionAccountCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TransactionAccount GetTransactionAccountCustom( SubscriptionEntities db , Expression<Func<TransactionAccount, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TransactionAccount> query =  db.TransactionAccounts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransactionAccountSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TransactionAccount> GetTransactionAccountCustomList( Expression<Func<TransactionAccount, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionAccount, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionAccountCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TransactionAccount> GetTransactionAccountCustomList(  SubscriptionEntities db , Expression<Func<TransactionAccount, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionAccount, dynamic> orderExpression = null)
			{
				IQueryable<TransactionAccount> query =  db.TransactionAccounts;
                BaseListReturnType<TransactionAccount> baseListReturnType = new BaseListReturnType<TransactionAccount>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionAccountList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TransactionAccount GetTransactionAccountWithTransactionPresetsDetails(long idTransactionAccount,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionAccountWithDetails(idTransactionAccount,new List<string>(){"TransactionPresets"},shouldRemap);
					}
				}

            //IdTransactionAccount -- Many


							public TransactionAccount GetTransactionAccountWithBanksDetails(long idTransactionAccount,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionAccountWithDetails(idTransactionAccount,new List<string>(){"Banks"},shouldRemap);
					}
				}

            //IdTransactionAccount -- Many


							public TransactionAccount GetTransactionAccountWithTransactionAccountTypeDetails(long idTransactionAccount,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionAccountWithDetails(idTransactionAccount,new List<string>(){"TransactionAccountType"},shouldRemap);
					}
				}

            //IdTransactionAccountType -- ZeroOrOne

                public BaseListReturnType<TransactionAccount> GetAllTransactionAccountListByTransactionAccountType(long idTransactionAccountType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionAccountListByTransactionAccountType(idTransactionAccountType, db);
                    }
                }
                public BaseListReturnType<TransactionAccount> GetAllTransactionAccountListByTransactionAccountType(long idTransactionAccountType, SubscriptionEntities db)
                {
                    Expression<Func<TransactionAccount, bool>> expression = property=> property.IdTransactionAccountType == idTransactionAccountType && property.IsDeactivated !=true;
                    return GetTransactionAccountCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionAccount> GetAllTransactionAccountListByTransactionAccountTypeByPage(long idTransactionAccountType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionAccountListByTransactionAccountTypeByPage(idTransactionAccountType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionAccount> GetAllTransactionAccountListByTransactionAccountTypeByPage(long idTransactionAccountType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionAccount, bool>> expression = property => property.IdTransactionAccountType == idTransactionAccountType && property.IsDeactivated !=true;
                    return GetAllTransactionAccountsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TransactionAccount GetTransactionAccountWithTransactionsDetails(long idTransactionAccount,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionAccountWithDetails(idTransactionAccount,new List<string>(){"Transactions"},shouldRemap);
					}
				}

            //IdTransactionAccount -- Many


			


			public TransactionAccount GetTransactionAccountWithDetails(long idTransactionAccount, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionAccountWithDetails(idTransactionAccount, db,includes,shouldRemap);
                }
            }

            public TransactionAccount GetTransactionAccountWithDetails(long idTransactionAccount, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionAccount> query =  db.TransactionAccounts;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransactionAccountSingle(query
						.Where(p => p.IdTransactionAccount == idTransactionAccount && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransactionAccount == idTransactionAccount && p.IsDeactivated != true).FirstOrDefault();
            }

            public TransactionAccount GetTransactionAccountWitDetails(long idTransactionAccount,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionAccountWitDetails(idTransactionAccount, db,shouldRemap);
                }
            }

            public TransactionAccount GetTransactionAccountWitDetails(long idTransactionAccount, SubscriptionEntities db,bool shouldRemap = false)
            {
				TransactionAccount _TransactionAccount = db.TransactionAccounts

					.Include("TransactionPresets")
					.Include("Banks")
					.Include("TransactionAccountType")
					.Include("Transactions")
								.Where(p => p.IdTransactionAccount == idTransactionAccount && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransactionAccountSingle(_TransactionAccount);

				return  _TransactionAccount;
            }

            public List<TransactionAccount> GetTransactionAccountListByIdList(List<long> transactionAccountIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionAccountListByIdList(transactionAccountIds, db);
                }
            }
            public List<TransactionAccount> GetTransactionAccountListByIdList(List<long> transactionAccountIds, SubscriptionEntities db)
            {
                return db.TransactionAccounts.Where(p => p.IsDeactivated != true && transactionAccountIds.Contains(p.IdTransactionAccount.Value)).ToList();
            }


            public void SaveTransactionAccount(TransactionAccount transactionAccount)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransactionAccount(transactionAccount, db);
                }
            }

            public void SaveTransactionAccount(TransactionAccount transactionAccount, SubscriptionEntities db)
            {
									if (transactionAccount.TransactionAccountType != null) 
						DaoFactories.Instance.TransactionAccountTypeDao.SaveTransactionAccountType(transactionAccount.TransactionAccountType, db);
				                
                if (transactionAccount.IdTransactionAccount.HasValue){
					var transactionAccountFromDb = db.TransactionAccounts.Where(p => p.IdTransactionAccount == transactionAccount.IdTransactionAccount).FirstOrDefault();
													transactionAccountFromDb.Description = transactionAccount.Description;
													transactionAccountFromDb.IsDeactivated = transactionAccount.IsDeactivated;
													transactionAccountFromDb.IdParentTransactionAccount = transactionAccount.IdParentTransactionAccount;
													transactionAccountFromDb.IdTransactionAccountType = transactionAccount.IdTransactionAccountType;
													transactionAccountFromDb.Number = transactionAccount.Number;
													transactionAccountFromDb.BankNumber = transactionAccount.BankNumber;
									}
                else{
                                                //fix for saving without duplicating items in db
                              transactionAccount.TransactionAccountType = null;
                                                db.TransactionAccounts.Add(transactionAccount);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransactionAccount(TransactionAccount transactionAccount)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransactionAccount(transactionAccount, db);
                }
            }

            public void SaveOnlyTransactionAccount(TransactionAccount transactionAccount, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // transactionAccount.TransactionAccountType = null;
                                            if (transactionAccount.IdTransactionAccount.HasValue){
					var transactionAccountFromDb = db.TransactionAccounts.Where(p => p.IdTransactionAccount == transactionAccount.IdTransactionAccount).FirstOrDefault();
													transactionAccountFromDb.Description = transactionAccount.Description;
													transactionAccountFromDb.IsDeactivated = transactionAccount.IsDeactivated;
													transactionAccountFromDb.IdParentTransactionAccount = transactionAccount.IdParentTransactionAccount;
													transactionAccountFromDb.IdTransactionAccountType = transactionAccount.IdTransactionAccountType;
													transactionAccountFromDb.Number = transactionAccount.Number;
													transactionAccountFromDb.BankNumber = transactionAccount.BankNumber;
										 db.SaveChanges();

				}
                else{
					TransactionAccount _transactionAccount = new TransactionAccount();
																	_transactionAccount.Description = transactionAccount.Description;
													_transactionAccount.IsDeactivated = transactionAccount.IsDeactivated;
													_transactionAccount.IdParentTransactionAccount = transactionAccount.IdParentTransactionAccount;
													_transactionAccount.IdTransactionAccountType = transactionAccount.IdTransactionAccountType;
													_transactionAccount.Number = transactionAccount.Number;
													_transactionAccount.BankNumber = transactionAccount.BankNumber;
					

                    db.TransactionAccounts.Add(_transactionAccount);
					db.SaveChanges();
					transactionAccount.IdTransactionAccount =  _transactionAccount.IdTransactionAccount;
                    
                }
            }

            public void DeleteTransactionAccount(TransactionAccount transactionAccount)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransactionAccount(transactionAccount, db);
                }
            }

            public void DeleteTransactionAccount(TransactionAccount transactionAccount, SubscriptionEntities db)
            {
								var transactionAccountFromDb = GetTransactionAccount(transactionAccount.IdTransactionAccount.Value,db);
				transactionAccountFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransactionAccount(TransactionAccount transactionAccount)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransactionAccount(transactionAccount, db);
                }
            }

            public void DeletePermanentlyTransactionAccount(TransactionAccount transactionAccount, SubscriptionEntities db)
            {
								var transactionAccountFromDb = GetTransactionAccount(transactionAccount.IdTransactionAccount.Value,db);
				
				db.TransactionAccounts.Remove(transactionAccountFromDb);
                db.SaveChanges();
            }


            
							public List<TransactionPreset> UpdateTransactionPresetsForTransactionAccountWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idTransactionAccount)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionPresetsForTransactionAccountWithoutSavingNewItem(newTransactionPresets,idTransactionAccount,db);
                                }
                            }

							public List<TransactionPreset> UpdateTransactionPresetsForTransactionAccountWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idTransactionAccount, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionPreset, bool>> expressionBuilder = p => p.IdTransactionAccount == idTransactionAccount;
                                var oldTransactionPresets = DaoFactories.Instance.TransactionPresetDao.GetTransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionPresets.EntityList.Select(pc => pc.IdTransactionPreset).Except(newTransactionPresets.Where(pc => pc.IdTransactionPreset.HasValue).Select(pc => pc.IdTransactionPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionPresets;
                            }


                            public List<TransactionPreset> UpdateTransactionPresetsForTransactionAccount(List<TransactionPreset> newTransactionPresets,long idTransactionAccount)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionPresetsForTransactionAccount(newTransactionPresets,idTransactionAccount,db);
                                }
                            }

                            public List<TransactionPreset> UpdateTransactionPresetsForTransactionAccount(List<TransactionPreset> newTransactionPresets,long idTransactionAccount, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionPreset, bool>> expressionBuilder = p => p.IdTransactionAccount == idTransactionAccount;
                                var oldTransactionPresets = DaoFactories.Instance.TransactionPresetDao.GetTransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionPresets.EntityList.Select(pc => pc.IdTransactionPreset).Except(newTransactionPresets.Where(pc => pc.IdTransactionPreset.HasValue).Select(pc => pc.IdTransactionPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionPresets.ForEach(pc =>
                                {
                                    pc.IdTransactionAccount = idTransactionAccount;
                                    DaoFactories.Instance.TransactionPresetDao.SaveOnlyTransactionPreset(pc, db);
                                });
                                return newTransactionPresets;
                            }

                        
							public List<Bank> UpdateBanksForTransactionAccountWithoutSavingNewItem(List<Bank> newBanks,long idTransactionAccount)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBanksForTransactionAccountWithoutSavingNewItem(newBanks,idTransactionAccount,db);
                                }
                            }

							public List<Bank> UpdateBanksForTransactionAccountWithoutSavingNewItem(List<Bank> newBanks,long idTransactionAccount, SubscriptionEntities  db)
                            {
                                Expression<Func<Bank, bool>> expressionBuilder = p => p.IdTransactionAccount == idTransactionAccount;
                                var oldBanks = DaoFactories.Instance.BankDao.GetBankCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBanks.EntityList.Select(pc => pc.IdBank).Except(newBanks.Where(pc => pc.IdBank.HasValue).Select(pc => pc.IdBank)).ToList();
                                var itemsTobeDeleted = oldBanks.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBank)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBanks;
                            }


                            public List<Bank> UpdateBanksForTransactionAccount(List<Bank> newBanks,long idTransactionAccount)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBanksForTransactionAccount(newBanks,idTransactionAccount,db);
                                }
                            }

                            public List<Bank> UpdateBanksForTransactionAccount(List<Bank> newBanks,long idTransactionAccount, SubscriptionEntities  db)
                            {
                                Expression<Func<Bank, bool>> expressionBuilder = p => p.IdTransactionAccount == idTransactionAccount;
                                var oldBanks = DaoFactories.Instance.BankDao.GetBankCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBanks.EntityList.Select(pc => pc.IdBank).Except(newBanks.Where(pc => pc.IdBank.HasValue).Select(pc => pc.IdBank)).ToList();
                                var itemsTobeDeleted = oldBanks.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBank)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBanks.ForEach(pc =>
                                {
                                    pc.IdTransactionAccount = idTransactionAccount;
                                    DaoFactories.Instance.BankDao.SaveOnlyBank(pc, db);
                                });
                                return newBanks;
                            }

                        
							public List<Transaction> UpdateTransactionsForTransactionAccountWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionAccount)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForTransactionAccountWithoutSavingNewItem(newTransactions,idTransactionAccount,db);
                                }
                            }

							public List<Transaction> UpdateTransactionsForTransactionAccountWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionAccount, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdTransactionAccount == idTransactionAccount;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactions;
                            }


                            public List<Transaction> UpdateTransactionsForTransactionAccount(List<Transaction> newTransactions,long idTransactionAccount)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForTransactionAccount(newTransactions,idTransactionAccount,db);
                                }
                            }

                            public List<Transaction> UpdateTransactionsForTransactionAccount(List<Transaction> newTransactions,long idTransactionAccount, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdTransactionAccount == idTransactionAccount;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactions.ForEach(pc =>
                                {
                                    pc.IdTransactionAccount = idTransactionAccount;
                                    DaoFactories.Instance.TransactionDao.SaveOnlyTransaction(pc, db);
                                });
                                return newTransactions;
                            }

                        


    



		}
			public partial class TransactionAccountTypeDao :ITransactionAccountTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TransactionAccountTypeDao(){
			
			}

			public TransactionAccountTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TransactionAccountType> GetAllTransactionAccountTypes(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionAccountTypes(db, shouldRemap);
                }
            }

            public List<TransactionAccountType> GetAllTransactionAccountTypes(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionAccountTypeList(db.TransactionAccountTypes.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TransactionAccountTypes.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TransactionAccountType> GetAllTransactionAccountTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccountType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionAccountType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionAccountTypesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionAccountType> GetAllTransactionAccountTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionAccountType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionAccountType, dynamic> orderExpression = null)
            {
				IQueryable<TransactionAccountType> query =  db.TransactionAccountTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionAccountType> baseListReturnType = new BaseListReturnType<TransactionAccountType>();

                IQueryable<TransactionAccountType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionAccountType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionAccountType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionAccountTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionAccountType> GetAllTransactionAccountTypesWithTransactionAccountsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccountType, bool>> expression = null,bool shouldRemap = false, Func<TransactionAccountType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionAccounts"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TransactionAccountType> GetAllTransactionAccountTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccountType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionAccountType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionAccountTypesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionAccountType> GetAllTransactionAccountTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionAccountType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionAccountType, dynamic> orderExpression = null)
            {
				IQueryable<TransactionAccountType> query =  db.TransactionAccountTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionAccountType> baseListReturnType = new BaseListReturnType<TransactionAccountType>();

                IQueryable<TransactionAccountType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionAccountType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionAccountType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionAccountTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionAccountType> GetAllTransactionAccountTypesWithTransactionAccountsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccountType, bool>> expression = null,bool shouldRemap = false, Func<TransactionAccountType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionAccounts"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TransactionAccountType> GetAllTransactionAccountTypesWithTransactionAccountsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionAccountTypeWitDetails(new List<string>(){"TransactionAccounts"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TransactionAccountType> GetAllTransactionAccountTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionAccountTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TransactionAccountType> GetAllTransactionAccountTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionAccountType> query =  db.TransactionAccountTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionAccountType> baseListReturnType = new BaseListReturnType<TransactionAccountType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionAccountTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TransactionAccountType GetTransactionAccountType(long idTransactionAccountType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionAccountType(idTransactionAccountType, db,shouldRemap);
                }
            }
                        public TransactionAccountType GetTransactionAccountType(long idTransactionAccountType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionAccountTypeSingle(db.TransactionAccountTypes.Where(p => p.IdTransactionAccountType == idTransactionAccountType && p.IsDeactivated != true).FirstOrDefault());

                return db.TransactionAccountTypes.Where(p => p.IdTransactionAccountType == idTransactionAccountType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TransactionAccountType GetTransactionAccountTypeCustom( Expression<Func<TransactionAccountType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionAccountTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TransactionAccountType GetTransactionAccountTypeCustom( SubscriptionEntities db , Expression<Func<TransactionAccountType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TransactionAccountType> query =  db.TransactionAccountTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransactionAccountTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TransactionAccountType> GetTransactionAccountTypeCustomList( Expression<Func<TransactionAccountType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionAccountType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionAccountTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TransactionAccountType> GetTransactionAccountTypeCustomList(  SubscriptionEntities db , Expression<Func<TransactionAccountType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionAccountType, dynamic> orderExpression = null)
			{
				IQueryable<TransactionAccountType> query =  db.TransactionAccountTypes;
                BaseListReturnType<TransactionAccountType> baseListReturnType = new BaseListReturnType<TransactionAccountType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionAccountTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TransactionAccountType GetTransactionAccountTypeWithTransactionAccountsDetails(long idTransactionAccountType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionAccountTypeWithDetails(idTransactionAccountType,new List<string>(){"TransactionAccounts"},shouldRemap);
					}
				}

            //IdTransactionAccountType -- Many


			


			public TransactionAccountType GetTransactionAccountTypeWithDetails(long idTransactionAccountType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionAccountTypeWithDetails(idTransactionAccountType, db,includes,shouldRemap);
                }
            }

            public TransactionAccountType GetTransactionAccountTypeWithDetails(long idTransactionAccountType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionAccountType> query =  db.TransactionAccountTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransactionAccountTypeSingle(query
						.Where(p => p.IdTransactionAccountType == idTransactionAccountType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransactionAccountType == idTransactionAccountType && p.IsDeactivated != true).FirstOrDefault();
            }

            public TransactionAccountType GetTransactionAccountTypeWitDetails(long idTransactionAccountType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionAccountTypeWitDetails(idTransactionAccountType, db,shouldRemap);
                }
            }

            public TransactionAccountType GetTransactionAccountTypeWitDetails(long idTransactionAccountType, SubscriptionEntities db,bool shouldRemap = false)
            {
				TransactionAccountType _TransactionAccountType = db.TransactionAccountTypes

					.Include("TransactionAccounts")
								.Where(p => p.IdTransactionAccountType == idTransactionAccountType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransactionAccountTypeSingle(_TransactionAccountType);

				return  _TransactionAccountType;
            }

            public List<TransactionAccountType> GetTransactionAccountTypeListByIdList(List<long> transactionAccountTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionAccountTypeListByIdList(transactionAccountTypeIds, db);
                }
            }
            public List<TransactionAccountType> GetTransactionAccountTypeListByIdList(List<long> transactionAccountTypeIds, SubscriptionEntities db)
            {
                return db.TransactionAccountTypes.Where(p => p.IsDeactivated != true && transactionAccountTypeIds.Contains(p.IdTransactionAccountType.Value)).ToList();
            }


            public void SaveTransactionAccountType(TransactionAccountType transactionAccountType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransactionAccountType(transactionAccountType, db);
                }
            }

            public void SaveTransactionAccountType(TransactionAccountType transactionAccountType, SubscriptionEntities db)
            {
				                
                if (transactionAccountType.IdTransactionAccountType.HasValue){
					var transactionAccountTypeFromDb = db.TransactionAccountTypes.Where(p => p.IdTransactionAccountType == transactionAccountType.IdTransactionAccountType).FirstOrDefault();
													transactionAccountTypeFromDb.IsDeactivated = transactionAccountType.IsDeactivated;
													transactionAccountTypeFromDb.Description = transactionAccountType.Description;
									}
                else{
                                        db.TransactionAccountTypes.Add(transactionAccountType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransactionAccountType(TransactionAccountType transactionAccountType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransactionAccountType(transactionAccountType, db);
                }
            }

            public void SaveOnlyTransactionAccountType(TransactionAccountType transactionAccountType, SubscriptionEntities db)
            {
			                    if (transactionAccountType.IdTransactionAccountType.HasValue){
					var transactionAccountTypeFromDb = db.TransactionAccountTypes.Where(p => p.IdTransactionAccountType == transactionAccountType.IdTransactionAccountType).FirstOrDefault();
													transactionAccountTypeFromDb.IsDeactivated = transactionAccountType.IsDeactivated;
													transactionAccountTypeFromDb.Description = transactionAccountType.Description;
										 db.SaveChanges();

				}
                else{
					TransactionAccountType _transactionAccountType = new TransactionAccountType();
																	_transactionAccountType.IsDeactivated = transactionAccountType.IsDeactivated;
													_transactionAccountType.Description = transactionAccountType.Description;
					

                    db.TransactionAccountTypes.Add(_transactionAccountType);
					db.SaveChanges();
					transactionAccountType.IdTransactionAccountType =  _transactionAccountType.IdTransactionAccountType;
                    
                }
            }

            public void DeleteTransactionAccountType(TransactionAccountType transactionAccountType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransactionAccountType(transactionAccountType, db);
                }
            }

            public void DeleteTransactionAccountType(TransactionAccountType transactionAccountType, SubscriptionEntities db)
            {
								var transactionAccountTypeFromDb = GetTransactionAccountType(transactionAccountType.IdTransactionAccountType.Value,db);
				transactionAccountTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransactionAccountType(TransactionAccountType transactionAccountType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransactionAccountType(transactionAccountType, db);
                }
            }

            public void DeletePermanentlyTransactionAccountType(TransactionAccountType transactionAccountType, SubscriptionEntities db)
            {
								var transactionAccountTypeFromDb = GetTransactionAccountType(transactionAccountType.IdTransactionAccountType.Value,db);
				
				db.TransactionAccountTypes.Remove(transactionAccountTypeFromDb);
                db.SaveChanges();
            }


            
							public List<TransactionAccount> UpdateTransactionAccountsForTransactionAccountTypeWithoutSavingNewItem(List<TransactionAccount> newTransactionAccounts,long idTransactionAccountType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionAccountsForTransactionAccountTypeWithoutSavingNewItem(newTransactionAccounts,idTransactionAccountType,db);
                                }
                            }

							public List<TransactionAccount> UpdateTransactionAccountsForTransactionAccountTypeWithoutSavingNewItem(List<TransactionAccount> newTransactionAccounts,long idTransactionAccountType, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionAccount, bool>> expressionBuilder = p => p.IdTransactionAccountType == idTransactionAccountType;
                                var oldTransactionAccounts = DaoFactories.Instance.TransactionAccountDao.GetTransactionAccountCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionAccounts.EntityList.Select(pc => pc.IdTransactionAccount).Except(newTransactionAccounts.Where(pc => pc.IdTransactionAccount.HasValue).Select(pc => pc.IdTransactionAccount)).ToList();
                                var itemsTobeDeleted = oldTransactionAccounts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionAccount)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionAccounts;
                            }


                            public List<TransactionAccount> UpdateTransactionAccountsForTransactionAccountType(List<TransactionAccount> newTransactionAccounts,long idTransactionAccountType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionAccountsForTransactionAccountType(newTransactionAccounts,idTransactionAccountType,db);
                                }
                            }

                            public List<TransactionAccount> UpdateTransactionAccountsForTransactionAccountType(List<TransactionAccount> newTransactionAccounts,long idTransactionAccountType, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionAccount, bool>> expressionBuilder = p => p.IdTransactionAccountType == idTransactionAccountType;
                                var oldTransactionAccounts = DaoFactories.Instance.TransactionAccountDao.GetTransactionAccountCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionAccounts.EntityList.Select(pc => pc.IdTransactionAccount).Except(newTransactionAccounts.Where(pc => pc.IdTransactionAccount.HasValue).Select(pc => pc.IdTransactionAccount)).ToList();
                                var itemsTobeDeleted = oldTransactionAccounts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionAccount)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionAccounts.ForEach(pc =>
                                {
                                    pc.IdTransactionAccountType = idTransactionAccountType;
                                    DaoFactories.Instance.TransactionAccountDao.SaveOnlyTransactionAccount(pc, db);
                                });
                                return newTransactionAccounts;
                            }

                        


    



		}
			public partial class TransactionClassDao :ITransactionClassDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TransactionClassDao(){
			
			}

			public TransactionClassDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TransactionClass> GetAllTransactionClasses(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionClasses(db, shouldRemap);
                }
            }

            public List<TransactionClass> GetAllTransactionClasses(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionClassList(db.TransactionClasses.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TransactionClasses.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TransactionClass> GetAllTransactionClassesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionClassesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionClass> GetAllTransactionClassesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionClass, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
            {
				IQueryable<TransactionClass> query =  db.TransactionClasses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionClass> baseListReturnType = new BaseListReturnType<TransactionClass>();

                IQueryable<TransactionClass> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionClass" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionClass, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionClassList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionDetailPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassesByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionDetailPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassesByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionClass1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassesByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionClass1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionClass2DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassesByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionClass2"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassesByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionDetails"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassesByPage(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TransactionClass> GetAllTransactionClassesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionClassesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionClass> GetAllTransactionClassesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionClass, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
            {
				IQueryable<TransactionClass> query =  db.TransactionClasses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionClass> baseListReturnType = new BaseListReturnType<TransactionClass>();

                IQueryable<TransactionClass> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionClass" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionClass, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionClassList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionDetailPresetsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionDetailPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionPresetsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionClass1DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionClass1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionClass2DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionClass2"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionDetailsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionDetails"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap = false, Func<TransactionClass, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionDetailPresetsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassWitDetails(new List<string>(){"TransactionDetailPresets"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionPresetsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassWitDetails(new List<string>(){"TransactionPresets"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionClass1Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassWitDetails(new List<string>(){"TransactionClass1"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionClass2Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassWitDetails(new List<string>(){"TransactionClass2"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionDetailsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassWitDetails(new List<string>(){"TransactionDetails"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionClassWitDetails(new List<string>(){"Transactions"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TransactionClass> GetAllTransactionClassWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionClassWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TransactionClass> GetAllTransactionClassWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionClass> query =  db.TransactionClasses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionClass> baseListReturnType = new BaseListReturnType<TransactionClass>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionClassList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TransactionClass GetTransactionClass(long idTransactionClass,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionClass(idTransactionClass, db,shouldRemap);
                }
            }
                        public TransactionClass GetTransactionClass(long idTransactionClass, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionClassSingle(db.TransactionClasses.Where(p => p.IdTransactionClass == idTransactionClass && p.IsDeactivated != true).FirstOrDefault());

                return db.TransactionClasses.Where(p => p.IdTransactionClass == idTransactionClass && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TransactionClass GetTransactionClassCustom( Expression<Func<TransactionClass, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionClassCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TransactionClass GetTransactionClassCustom( SubscriptionEntities db , Expression<Func<TransactionClass, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TransactionClass> query =  db.TransactionClasses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransactionClassSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TransactionClass> GetTransactionClassCustomList( Expression<Func<TransactionClass, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionClass, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionClassCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TransactionClass> GetTransactionClassCustomList(  SubscriptionEntities db , Expression<Func<TransactionClass, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionClass, dynamic> orderExpression = null)
			{
				IQueryable<TransactionClass> query =  db.TransactionClasses;
                BaseListReturnType<TransactionClass> baseListReturnType = new BaseListReturnType<TransactionClass>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionClassList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TransactionClass GetTransactionClassWithTransactionDetailPresetsDetails(long idTransactionClass,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionClassWithDetails(idTransactionClass,new List<string>(){"TransactionDetailPresets"},shouldRemap);
					}
				}

            //IdTransactionClass -- Many


							public TransactionClass GetTransactionClassWithTransactionPresetsDetails(long idTransactionClass,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionClassWithDetails(idTransactionClass,new List<string>(){"TransactionPresets"},shouldRemap);
					}
				}

            //IdTransactionClass -- Many


							public TransactionClass GetTransactionClassWithTransactionClass1Details(long idTransactionClass,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionClassWithDetails(idTransactionClass,new List<string>(){"TransactionClass1"},shouldRemap);
					}
				}

            //IdParentTransactionClass -- Many


							public TransactionClass GetTransactionClassWithTransactionClass2Details(long idTransactionClass,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionClassWithDetails(idTransactionClass,new List<string>(){"TransactionClass2"},shouldRemap);
					}
				}

            //IdParentTransactionClass -- ZeroOrOne

                public BaseListReturnType<TransactionClass> GetAllTransactionClassListByTransactionClass2(long idTransactionClass2)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionClassListByTransactionClass2(idTransactionClass2, db);
                    }
                }
                public BaseListReturnType<TransactionClass> GetAllTransactionClassListByTransactionClass2(long idTransactionClass2, SubscriptionEntities db)
                {
                    Expression<Func<TransactionClass, bool>> expression = property=> property.IdParentTransactionClass == idTransactionClass2 && property.IsDeactivated !=true;
                    return GetTransactionClassCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionClass> GetAllTransactionClassListByTransactionClass2ByPage(long idTransactionClass2, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionClassListByTransactionClass2ByPage(idTransactionClass2, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionClass> GetAllTransactionClassListByTransactionClass2ByPage(long idTransactionClass2, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionClass, bool>> expression = property => property.IdParentTransactionClass == idTransactionClass2 && property.IsDeactivated !=true;
                    return GetAllTransactionClassesByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TransactionClass GetTransactionClassWithTransactionDetailsDetails(long idTransactionClass,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionClassWithDetails(idTransactionClass,new List<string>(){"TransactionDetails"},shouldRemap);
					}
				}

            //IdTransactionClass -- Many


							public TransactionClass GetTransactionClassWithTransactionsDetails(long idTransactionClass,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionClassWithDetails(idTransactionClass,new List<string>(){"Transactions"},shouldRemap);
					}
				}

            //IdTransactionClass -- Many


			


			public TransactionClass GetTransactionClassWithDetails(long idTransactionClass, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionClassWithDetails(idTransactionClass, db,includes,shouldRemap);
                }
            }

            public TransactionClass GetTransactionClassWithDetails(long idTransactionClass, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionClass> query =  db.TransactionClasses;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransactionClassSingle(query
						.Where(p => p.IdTransactionClass == idTransactionClass && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransactionClass == idTransactionClass && p.IsDeactivated != true).FirstOrDefault();
            }

            public TransactionClass GetTransactionClassWitDetails(long idTransactionClass,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionClassWitDetails(idTransactionClass, db,shouldRemap);
                }
            }

            public TransactionClass GetTransactionClassWitDetails(long idTransactionClass, SubscriptionEntities db,bool shouldRemap = false)
            {
				TransactionClass _TransactionClass = db.TransactionClasses

					.Include("TransactionDetailPresets")
					.Include("TransactionPresets")
					.Include("TransactionClass1")
					.Include("TransactionClass2")
					.Include("TransactionDetails")
					.Include("Transactions")
								.Where(p => p.IdTransactionClass == idTransactionClass && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransactionClassSingle(_TransactionClass);

				return  _TransactionClass;
            }

            public List<TransactionClass> GetTransactionClassListByIdList(List<long> transactionClassIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionClassListByIdList(transactionClassIds, db);
                }
            }
            public List<TransactionClass> GetTransactionClassListByIdList(List<long> transactionClassIds, SubscriptionEntities db)
            {
                return db.TransactionClasses.Where(p => p.IsDeactivated != true && transactionClassIds.Contains(p.IdTransactionClass.Value)).ToList();
            }


            public void SaveTransactionClass(TransactionClass transactionClass)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransactionClass(transactionClass, db);
                }
            }

            public void SaveTransactionClass(TransactionClass transactionClass, SubscriptionEntities db)
            {
									if (transactionClass.TransactionClass2 != null) 
						DaoFactories.Instance.TransactionClassDao.SaveTransactionClass(transactionClass.TransactionClass2, db);
				                
                if (transactionClass.IdTransactionClass.HasValue){
					var transactionClassFromDb = db.TransactionClasses.Where(p => p.IdTransactionClass == transactionClass.IdTransactionClass).FirstOrDefault();
													transactionClassFromDb.IsDeactivated = transactionClass.IsDeactivated;
													transactionClassFromDb.Description = transactionClass.Description;
													transactionClassFromDb.IdParentTransactionClass = transactionClass.IdParentTransactionClass;
									}
                else{
                                                //fix for saving without duplicating items in db
                              transactionClass.TransactionClass2 = null;
                                                db.TransactionClasses.Add(transactionClass);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransactionClass(TransactionClass transactionClass)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransactionClass(transactionClass, db);
                }
            }

            public void SaveOnlyTransactionClass(TransactionClass transactionClass, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // transactionClass.TransactionClass2 = null;
                                            if (transactionClass.IdTransactionClass.HasValue){
					var transactionClassFromDb = db.TransactionClasses.Where(p => p.IdTransactionClass == transactionClass.IdTransactionClass).FirstOrDefault();
													transactionClassFromDb.IsDeactivated = transactionClass.IsDeactivated;
													transactionClassFromDb.Description = transactionClass.Description;
													transactionClassFromDb.IdParentTransactionClass = transactionClass.IdParentTransactionClass;
										 db.SaveChanges();

				}
                else{
					TransactionClass _transactionClass = new TransactionClass();
																	_transactionClass.IsDeactivated = transactionClass.IsDeactivated;
													_transactionClass.Description = transactionClass.Description;
													_transactionClass.IdParentTransactionClass = transactionClass.IdParentTransactionClass;
					

                    db.TransactionClasses.Add(_transactionClass);
					db.SaveChanges();
					transactionClass.IdTransactionClass =  _transactionClass.IdTransactionClass;
                    
                }
            }

            public void DeleteTransactionClass(TransactionClass transactionClass)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransactionClass(transactionClass, db);
                }
            }

            public void DeleteTransactionClass(TransactionClass transactionClass, SubscriptionEntities db)
            {
								var transactionClassFromDb = GetTransactionClass(transactionClass.IdTransactionClass.Value,db);
				transactionClassFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransactionClass(TransactionClass transactionClass)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransactionClass(transactionClass, db);
                }
            }

            public void DeletePermanentlyTransactionClass(TransactionClass transactionClass, SubscriptionEntities db)
            {
								var transactionClassFromDb = GetTransactionClass(transactionClass.IdTransactionClass.Value,db);
				
				db.TransactionClasses.Remove(transactionClassFromDb);
                db.SaveChanges();
            }


            
							public List<TransactionDetailPreset> UpdateTransactionDetailPresetsForTransactionClassWithoutSavingNewItem(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionClass)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDetailPresetsForTransactionClassWithoutSavingNewItem(newTransactionDetailPresets,idTransactionClass,db);
                                }
                            }

							public List<TransactionDetailPreset> UpdateTransactionDetailPresetsForTransactionClassWithoutSavingNewItem(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionClass, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDetailPreset, bool>> expressionBuilder = p => p.IdTransactionClass == idTransactionClass;
                                var oldTransactionDetailPresets = DaoFactories.Instance.TransactionDetailPresetDao.GetTransactionDetailPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDetailPresets.EntityList.Select(pc => pc.IdTransactionDetailPreset).Except(newTransactionDetailPresets.Where(pc => pc.IdTransactionDetailPreset.HasValue).Select(pc => pc.IdTransactionDetailPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionDetailPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDetailPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionDetailPresets;
                            }


                            public List<TransactionDetailPreset> UpdateTransactionDetailPresetsForTransactionClass(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionClass)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDetailPresetsForTransactionClass(newTransactionDetailPresets,idTransactionClass,db);
                                }
                            }

                            public List<TransactionDetailPreset> UpdateTransactionDetailPresetsForTransactionClass(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionClass, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDetailPreset, bool>> expressionBuilder = p => p.IdTransactionClass == idTransactionClass;
                                var oldTransactionDetailPresets = DaoFactories.Instance.TransactionDetailPresetDao.GetTransactionDetailPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDetailPresets.EntityList.Select(pc => pc.IdTransactionDetailPreset).Except(newTransactionDetailPresets.Where(pc => pc.IdTransactionDetailPreset.HasValue).Select(pc => pc.IdTransactionDetailPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionDetailPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDetailPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionDetailPresets.ForEach(pc =>
                                {
                                    pc.IdTransactionClass = idTransactionClass;
                                    DaoFactories.Instance.TransactionDetailPresetDao.SaveOnlyTransactionDetailPreset(pc, db);
                                });
                                return newTransactionDetailPresets;
                            }

                        
							public List<TransactionPreset> UpdateTransactionPresetsForTransactionClassWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idTransactionClass)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionPresetsForTransactionClassWithoutSavingNewItem(newTransactionPresets,idTransactionClass,db);
                                }
                            }

							public List<TransactionPreset> UpdateTransactionPresetsForTransactionClassWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idTransactionClass, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionPreset, bool>> expressionBuilder = p => p.IdTransactionClass == idTransactionClass;
                                var oldTransactionPresets = DaoFactories.Instance.TransactionPresetDao.GetTransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionPresets.EntityList.Select(pc => pc.IdTransactionPreset).Except(newTransactionPresets.Where(pc => pc.IdTransactionPreset.HasValue).Select(pc => pc.IdTransactionPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionPresets;
                            }


                            public List<TransactionPreset> UpdateTransactionPresetsForTransactionClass(List<TransactionPreset> newTransactionPresets,long idTransactionClass)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionPresetsForTransactionClass(newTransactionPresets,idTransactionClass,db);
                                }
                            }

                            public List<TransactionPreset> UpdateTransactionPresetsForTransactionClass(List<TransactionPreset> newTransactionPresets,long idTransactionClass, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionPreset, bool>> expressionBuilder = p => p.IdTransactionClass == idTransactionClass;
                                var oldTransactionPresets = DaoFactories.Instance.TransactionPresetDao.GetTransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionPresets.EntityList.Select(pc => pc.IdTransactionPreset).Except(newTransactionPresets.Where(pc => pc.IdTransactionPreset.HasValue).Select(pc => pc.IdTransactionPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionPresets.ForEach(pc =>
                                {
                                    pc.IdTransactionClass = idTransactionClass;
                                    DaoFactories.Instance.TransactionPresetDao.SaveOnlyTransactionPreset(pc, db);
                                });
                                return newTransactionPresets;
                            }

                        
							public List<TransactionClass> UpdateTransactionClass1ForTransactionClassWithoutSavingNewItem(List<TransactionClass> newTransactionClass1,long idTransactionClass)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionClass1ForTransactionClassWithoutSavingNewItem(newTransactionClass1,idTransactionClass,db);
                                }
                            }

							public List<TransactionClass> UpdateTransactionClass1ForTransactionClassWithoutSavingNewItem(List<TransactionClass> newTransactionClass1,long idTransactionClass, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionClass, bool>> expressionBuilder = p => p.IdParentTransactionClass == idTransactionClass;
                                var oldTransactionClass1 = DaoFactories.Instance.TransactionClassDao.GetTransactionClassCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionClass1.EntityList.Select(pc => pc.IdTransactionClass).Except(newTransactionClass1.Where(pc => pc.IdTransactionClass.HasValue).Select(pc => pc.IdTransactionClass)).ToList();
                                var itemsTobeDeleted = oldTransactionClass1.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionClass)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionClass1;
                            }


                            public List<TransactionClass> UpdateTransactionClass1ForTransactionClass(List<TransactionClass> newTransactionClass1,long idTransactionClass)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionClass1ForTransactionClass(newTransactionClass1,idTransactionClass,db);
                                }
                            }

                            public List<TransactionClass> UpdateTransactionClass1ForTransactionClass(List<TransactionClass> newTransactionClass1,long idTransactionClass, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionClass, bool>> expressionBuilder = p => p.IdParentTransactionClass == idTransactionClass;
                                var oldTransactionClass1 = DaoFactories.Instance.TransactionClassDao.GetTransactionClassCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionClass1.EntityList.Select(pc => pc.IdTransactionClass).Except(newTransactionClass1.Where(pc => pc.IdTransactionClass.HasValue).Select(pc => pc.IdTransactionClass)).ToList();
                                var itemsTobeDeleted = oldTransactionClass1.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionClass)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionClass1.ForEach(pc =>
                                {
                                    pc.IdParentTransactionClass = idTransactionClass;
                                    DaoFactories.Instance.TransactionClassDao.SaveOnlyTransactionClass(pc, db);
                                });
                                return newTransactionClass1;
                            }

                        
							public List<TransactionDetail> UpdateTransactionDetailsForTransactionClassWithoutSavingNewItem(List<TransactionDetail> newTransactionDetails,long idTransactionClass)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDetailsForTransactionClassWithoutSavingNewItem(newTransactionDetails,idTransactionClass,db);
                                }
                            }

							public List<TransactionDetail> UpdateTransactionDetailsForTransactionClassWithoutSavingNewItem(List<TransactionDetail> newTransactionDetails,long idTransactionClass, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDetail, bool>> expressionBuilder = p => p.IdTransactionClass == idTransactionClass;
                                var oldTransactionDetails = DaoFactories.Instance.TransactionDetailDao.GetTransactionDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDetails.EntityList.Select(pc => pc.IdTransactionDetail).Except(newTransactionDetails.Where(pc => pc.IdTransactionDetail.HasValue).Select(pc => pc.IdTransactionDetail)).ToList();
                                var itemsTobeDeleted = oldTransactionDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionDetails;
                            }


                            public List<TransactionDetail> UpdateTransactionDetailsForTransactionClass(List<TransactionDetail> newTransactionDetails,long idTransactionClass)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDetailsForTransactionClass(newTransactionDetails,idTransactionClass,db);
                                }
                            }

                            public List<TransactionDetail> UpdateTransactionDetailsForTransactionClass(List<TransactionDetail> newTransactionDetails,long idTransactionClass, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDetail, bool>> expressionBuilder = p => p.IdTransactionClass == idTransactionClass;
                                var oldTransactionDetails = DaoFactories.Instance.TransactionDetailDao.GetTransactionDetailCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDetails.EntityList.Select(pc => pc.IdTransactionDetail).Except(newTransactionDetails.Where(pc => pc.IdTransactionDetail.HasValue).Select(pc => pc.IdTransactionDetail)).ToList();
                                var itemsTobeDeleted = oldTransactionDetails.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDetail)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionDetails.ForEach(pc =>
                                {
                                    pc.IdTransactionClass = idTransactionClass;
                                    DaoFactories.Instance.TransactionDetailDao.SaveOnlyTransactionDetail(pc, db);
                                });
                                return newTransactionDetails;
                            }

                        
							public List<Transaction> UpdateTransactionsForTransactionClassWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionClass)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForTransactionClassWithoutSavingNewItem(newTransactions,idTransactionClass,db);
                                }
                            }

							public List<Transaction> UpdateTransactionsForTransactionClassWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionClass, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdTransactionClass == idTransactionClass;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactions;
                            }


                            public List<Transaction> UpdateTransactionsForTransactionClass(List<Transaction> newTransactions,long idTransactionClass)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForTransactionClass(newTransactions,idTransactionClass,db);
                                }
                            }

                            public List<Transaction> UpdateTransactionsForTransactionClass(List<Transaction> newTransactions,long idTransactionClass, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdTransactionClass == idTransactionClass;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactions.ForEach(pc =>
                                {
                                    pc.IdTransactionClass = idTransactionClass;
                                    DaoFactories.Instance.TransactionDao.SaveOnlyTransaction(pc, db);
                                });
                                return newTransactions;
                            }

                        


    



		}
			public partial class TransactionDetailDao :ITransactionDetailDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TransactionDetailDao(){
			
			}

			public TransactionDetailDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TransactionDetail> GetAllTransactionDetails(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDetails(db, shouldRemap);
                }
            }

            public List<TransactionDetail> GetAllTransactionDetails(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionDetailList(db.TransactionDetails.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TransactionDetails.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDetailsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDetail, dynamic> orderExpression = null)
            {
				IQueryable<TransactionDetail> query =  db.TransactionDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionDetail> baseListReturnType = new BaseListReturnType<TransactionDetail>();

                IQueryable<TransactionDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionDetail" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionDetail, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Remarks.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsWithProductDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null,bool shouldRemap = false, Func<TransactionDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"Product"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null,bool shouldRemap = false, Func<TransactionDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsWithTransactionClassDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null,bool shouldRemap = false, Func<TransactionDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionClass"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDetail, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDetail, dynamic> orderExpression = null)
            {
				IQueryable<TransactionDetail> query =  db.TransactionDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionDetail> baseListReturnType = new BaseListReturnType<TransactionDetail>();

                IQueryable<TransactionDetail> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionDetail" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionDetail, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsWithProductDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null,bool shouldRemap = false, Func<TransactionDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Product"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsWithTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null,bool shouldRemap = false, Func<TransactionDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsWithTransactionClassDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null,bool shouldRemap = false, Func<TransactionDetail, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionClass"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsWithProductDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailWitDetails(new List<string>(){"Product"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsWithTransactionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailWitDetails(new List<string>(){"Transaction"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionDetail> GetAllTransactionDetailsWithTransactionClassDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailWitDetails(new List<string>(){"TransactionClass"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TransactionDetail> GetAllTransactionDetailWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDetailWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TransactionDetail> GetAllTransactionDetailWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionDetail> query =  db.TransactionDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionDetail> baseListReturnType = new BaseListReturnType<TransactionDetail>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDetailList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TransactionDetail GetTransactionDetail(long idTransactionDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDetail(idTransactionDetail, db,shouldRemap);
                }
            }
                        public TransactionDetail GetTransactionDetail(long idTransactionDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionDetailSingle(db.TransactionDetails.Where(p => p.IdTransactionDetail == idTransactionDetail && p.IsDeactivated != true).FirstOrDefault());

                return db.TransactionDetails.Where(p => p.IdTransactionDetail == idTransactionDetail && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TransactionDetail GetTransactionDetailCustom( Expression<Func<TransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionDetailCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TransactionDetail GetTransactionDetailCustom( SubscriptionEntities db , Expression<Func<TransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TransactionDetail> query =  db.TransactionDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransactionDetailSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TransactionDetail> GetTransactionDetailCustomList( Expression<Func<TransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionDetail, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionDetailCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TransactionDetail> GetTransactionDetailCustomList(  SubscriptionEntities db , Expression<Func<TransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionDetail, dynamic> orderExpression = null)
			{
				IQueryable<TransactionDetail> query =  db.TransactionDetails;
                BaseListReturnType<TransactionDetail> baseListReturnType = new BaseListReturnType<TransactionDetail>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDetailList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TransactionDetail GetTransactionDetailWithProductDetails(long idTransactionDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionDetailWithDetails(idTransactionDetail,new List<string>(){"Product"},shouldRemap);
					}
				}

            //IdProduct -- ZeroOrOne

                public BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByProduct(long idProduct)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDetailListByProduct(idProduct, db);
                    }
                }
                public BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByProduct(long idProduct, SubscriptionEntities db)
                {
                    Expression<Func<TransactionDetail, bool>> expression = property=> property.IdProduct == idProduct && property.IsDeactivated !=true;
                    return GetTransactionDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByProductByPage(long idProduct, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDetailListByProductByPage(idProduct, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByProductByPage(long idProduct, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionDetail, bool>> expression = property => property.IdProduct == idProduct && property.IsDeactivated !=true;
                    return GetAllTransactionDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TransactionDetail GetTransactionDetailWithTransactionDetails(long idTransactionDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionDetailWithDetails(idTransactionDetail,new List<string>(){"Transaction"},shouldRemap);
					}
				}

            //IdTransaction -- ZeroOrOne

                public BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByTransaction(long idTransaction)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDetailListByTransaction(idTransaction, db);
                    }
                }
                public BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByTransaction(long idTransaction, SubscriptionEntities db)
                {
                    Expression<Func<TransactionDetail, bool>> expression = property=> property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetTransactionDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDetailListByTransactionByPage(idTransaction, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionDetail, bool>> expression = property => property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetAllTransactionDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TransactionDetail GetTransactionDetailWithTransactionClassDetails(long idTransactionDetail,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionDetailWithDetails(idTransactionDetail,new List<string>(){"TransactionClass"},shouldRemap);
					}
				}

            //IdTransactionClass -- ZeroOrOne

                public BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByTransactionClass(long idTransactionClass)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDetailListByTransactionClass(idTransactionClass, db);
                    }
                }
                public BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByTransactionClass(long idTransactionClass, SubscriptionEntities db)
                {
                    Expression<Func<TransactionDetail, bool>> expression = property=> property.IdTransactionClass == idTransactionClass && property.IsDeactivated !=true;
                    return GetTransactionDetailCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByTransactionClassByPage(long idTransactionClass, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDetailListByTransactionClassByPage(idTransactionClass, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByTransactionClassByPage(long idTransactionClass, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionDetail, bool>> expression = property => property.IdTransactionClass == idTransactionClass && property.IsDeactivated !=true;
                    return GetAllTransactionDetailsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public TransactionDetail GetTransactionDetailWithDetails(long idTransactionDetail, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDetailWithDetails(idTransactionDetail, db,includes,shouldRemap);
                }
            }

            public TransactionDetail GetTransactionDetailWithDetails(long idTransactionDetail, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionDetail> query =  db.TransactionDetails;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransactionDetailSingle(query
						.Where(p => p.IdTransactionDetail == idTransactionDetail && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransactionDetail == idTransactionDetail && p.IsDeactivated != true).FirstOrDefault();
            }

            public TransactionDetail GetTransactionDetailWitDetails(long idTransactionDetail,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDetailWitDetails(idTransactionDetail, db,shouldRemap);
                }
            }

            public TransactionDetail GetTransactionDetailWitDetails(long idTransactionDetail, SubscriptionEntities db,bool shouldRemap = false)
            {
				TransactionDetail _TransactionDetail = db.TransactionDetails

					.Include("Product")
					.Include("Transaction")
					.Include("TransactionClass")
								.Where(p => p.IdTransactionDetail == idTransactionDetail && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransactionDetailSingle(_TransactionDetail);

				return  _TransactionDetail;
            }

            public List<TransactionDetail> GetTransactionDetailListByIdList(List<long> transactionDetailIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDetailListByIdList(transactionDetailIds, db);
                }
            }
            public List<TransactionDetail> GetTransactionDetailListByIdList(List<long> transactionDetailIds, SubscriptionEntities db)
            {
                return db.TransactionDetails.Where(p => p.IsDeactivated != true && transactionDetailIds.Contains(p.IdTransactionDetail.Value)).ToList();
            }


            public void SaveTransactionDetail(TransactionDetail transactionDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransactionDetail(transactionDetail, db);
                }
            }

            public void SaveTransactionDetail(TransactionDetail transactionDetail, SubscriptionEntities db)
            {
									if (transactionDetail.Product != null) 
						DaoFactories.Instance.ProductDao.SaveProduct(transactionDetail.Product, db);
									if (transactionDetail.Transaction != null) 
						DaoFactories.Instance.TransactionDao.SaveTransaction(transactionDetail.Transaction, db);
									if (transactionDetail.TransactionClass != null) 
						DaoFactories.Instance.TransactionClassDao.SaveTransactionClass(transactionDetail.TransactionClass, db);
				                
                if (transactionDetail.IdTransactionDetail.HasValue){
					var transactionDetailFromDb = db.TransactionDetails.Where(p => p.IdTransactionDetail == transactionDetail.IdTransactionDetail).FirstOrDefault();
													transactionDetailFromDb.IsDeactivated = transactionDetail.IsDeactivated;
													transactionDetailFromDb.IdTransaction = transactionDetail.IdTransaction;
													transactionDetailFromDb.IdProduct = transactionDetail.IdProduct;
													transactionDetailFromDb.Description = transactionDetail.Description;
													transactionDetailFromDb.Quantity = transactionDetail.Quantity;
													transactionDetailFromDb.Rate = transactionDetail.Rate;
													transactionDetailFromDb.IdTransactionClass = transactionDetail.IdTransactionClass;
													transactionDetailFromDb.Remarks = transactionDetail.Remarks;
									}
                else{
                                                //fix for saving without duplicating items in db
                              transactionDetail.Product = null;
                                                        //fix for saving without duplicating items in db
                              transactionDetail.Transaction = null;
                                                        //fix for saving without duplicating items in db
                              transactionDetail.TransactionClass = null;
                                                db.TransactionDetails.Add(transactionDetail);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransactionDetail(TransactionDetail transactionDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransactionDetail(transactionDetail, db);
                }
            }

            public void SaveOnlyTransactionDetail(TransactionDetail transactionDetail, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // transactionDetail.Product = null;
                                                        //fix for saving without duplicating items in db
                             // transactionDetail.Transaction = null;
                                                        //fix for saving without duplicating items in db
                             // transactionDetail.TransactionClass = null;
                                            if (transactionDetail.IdTransactionDetail.HasValue){
					var transactionDetailFromDb = db.TransactionDetails.Where(p => p.IdTransactionDetail == transactionDetail.IdTransactionDetail).FirstOrDefault();
													transactionDetailFromDb.IsDeactivated = transactionDetail.IsDeactivated;
													transactionDetailFromDb.IdTransaction = transactionDetail.IdTransaction;
													transactionDetailFromDb.IdProduct = transactionDetail.IdProduct;
													transactionDetailFromDb.Description = transactionDetail.Description;
													transactionDetailFromDb.Quantity = transactionDetail.Quantity;
													transactionDetailFromDb.Rate = transactionDetail.Rate;
													transactionDetailFromDb.IdTransactionClass = transactionDetail.IdTransactionClass;
													transactionDetailFromDb.Remarks = transactionDetail.Remarks;
										 db.SaveChanges();

				}
                else{
					TransactionDetail _transactionDetail = new TransactionDetail();
																	_transactionDetail.IsDeactivated = transactionDetail.IsDeactivated;
													_transactionDetail.IdTransaction = transactionDetail.IdTransaction;
													_transactionDetail.IdProduct = transactionDetail.IdProduct;
													_transactionDetail.Description = transactionDetail.Description;
													_transactionDetail.Quantity = transactionDetail.Quantity;
													_transactionDetail.Rate = transactionDetail.Rate;
													_transactionDetail.IdTransactionClass = transactionDetail.IdTransactionClass;
													_transactionDetail.Remarks = transactionDetail.Remarks;
					

                    db.TransactionDetails.Add(_transactionDetail);
					db.SaveChanges();
					transactionDetail.IdTransactionDetail =  _transactionDetail.IdTransactionDetail;
                    
                }
            }

            public void DeleteTransactionDetail(TransactionDetail transactionDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransactionDetail(transactionDetail, db);
                }
            }

            public void DeleteTransactionDetail(TransactionDetail transactionDetail, SubscriptionEntities db)
            {
								var transactionDetailFromDb = GetTransactionDetail(transactionDetail.IdTransactionDetail.Value,db);
				transactionDetailFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransactionDetail(TransactionDetail transactionDetail)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransactionDetail(transactionDetail, db);
                }
            }

            public void DeletePermanentlyTransactionDetail(TransactionDetail transactionDetail, SubscriptionEntities db)
            {
								var transactionDetailFromDb = GetTransactionDetail(transactionDetail.IdTransactionDetail.Value,db);
				
				db.TransactionDetails.Remove(transactionDetailFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class TransactionDetailPresetDao :ITransactionDetailPresetDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TransactionDetailPresetDao(){
			
			}

			public TransactionDetailPresetDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TransactionDetailPreset> GetAllTransactionDetailPresets(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDetailPresets(db, shouldRemap);
                }
            }

            public List<TransactionDetailPreset> GetAllTransactionDetailPresets(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionDetailPresetList(db.TransactionDetailPresets.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TransactionDetailPresets.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDetailPresetsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionDetailPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
            {
				IQueryable<TransactionDetailPreset> query =  db.TransactionDetailPresets;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionDetailPreset> baseListReturnType = new BaseListReturnType<TransactionDetailPreset>();

                IQueryable<TransactionDetailPreset> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionDetailPreset" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionDetailPreset, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDetailPresetList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsWithProductDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailPresetsByPage(sortingPagingInfo, db,expression,new List<string>(){"Product"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsWithTransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailPresetsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionPreset"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsWithTransactionClassDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailPresetsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionClass"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDetailPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionDetailPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
            {
				IQueryable<TransactionDetailPreset> query =  db.TransactionDetailPresets;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionDetailPreset> baseListReturnType = new BaseListReturnType<TransactionDetailPreset>();

                IQueryable<TransactionDetailPreset> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionDetailPreset" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionDetailPreset, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDetailPresetList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsWithProductDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Product"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsWithTransactionPresetDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionPreset"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsWithTransactionClassDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionClass"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsWithProductDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailPresetWitDetails(new List<string>(){"Product"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsWithTransactionPresetDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailPresetWitDetails(new List<string>(){"TransactionPreset"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsWithTransactionClassDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDetailPresetWitDetails(new List<string>(){"TransactionClass"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDetailPresetWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionDetailPreset> query =  db.TransactionDetailPresets;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionDetailPreset> baseListReturnType = new BaseListReturnType<TransactionDetailPreset>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDetailPresetList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TransactionDetailPreset GetTransactionDetailPreset(long idTransactionDetailPreset,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDetailPreset(idTransactionDetailPreset, db,shouldRemap);
                }
            }
                        public TransactionDetailPreset GetTransactionDetailPreset(long idTransactionDetailPreset, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionDetailPresetSingle(db.TransactionDetailPresets.Where(p => p.IdTransactionDetailPreset == idTransactionDetailPreset && p.IsDeactivated != true).FirstOrDefault());

                return db.TransactionDetailPresets.Where(p => p.IdTransactionDetailPreset == idTransactionDetailPreset && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TransactionDetailPreset GetTransactionDetailPresetCustom( Expression<Func<TransactionDetailPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionDetailPresetCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TransactionDetailPreset GetTransactionDetailPresetCustom( SubscriptionEntities db , Expression<Func<TransactionDetailPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TransactionDetailPreset> query =  db.TransactionDetailPresets;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransactionDetailPresetSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TransactionDetailPreset> GetTransactionDetailPresetCustomList( Expression<Func<TransactionDetailPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionDetailPreset, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionDetailPresetCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TransactionDetailPreset> GetTransactionDetailPresetCustomList(  SubscriptionEntities db , Expression<Func<TransactionDetailPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionDetailPreset, dynamic> orderExpression = null)
			{
				IQueryable<TransactionDetailPreset> query =  db.TransactionDetailPresets;
                BaseListReturnType<TransactionDetailPreset> baseListReturnType = new BaseListReturnType<TransactionDetailPreset>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDetailPresetList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TransactionDetailPreset GetTransactionDetailPresetWithProductDetails(long idTransactionDetailPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionDetailPresetWithDetails(idTransactionDetailPreset,new List<string>(){"Product"},shouldRemap);
					}
				}

            //IdProduct -- ZeroOrOne

                public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByProduct(long idProduct)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDetailPresetListByProduct(idProduct, db);
                    }
                }
                public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByProduct(long idProduct, SubscriptionEntities db)
                {
                    Expression<Func<TransactionDetailPreset, bool>> expression = property=> property.IdProduct == idProduct && property.IsDeactivated !=true;
                    return GetTransactionDetailPresetCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByProductByPage(long idProduct, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDetailPresetListByProductByPage(idProduct, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByProductByPage(long idProduct, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionDetailPreset, bool>> expression = property => property.IdProduct == idProduct && property.IsDeactivated !=true;
                    return GetAllTransactionDetailPresetsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TransactionDetailPreset GetTransactionDetailPresetWithTransactionPresetDetails(long idTransactionDetailPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionDetailPresetWithDetails(idTransactionDetailPreset,new List<string>(){"TransactionPreset"},shouldRemap);
					}
				}

            //IdTransactionPreset -- ZeroOrOne

                public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByTransactionPreset(long idTransactionPreset)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDetailPresetListByTransactionPreset(idTransactionPreset, db);
                    }
                }
                public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByTransactionPreset(long idTransactionPreset, SubscriptionEntities db)
                {
                    Expression<Func<TransactionDetailPreset, bool>> expression = property=> property.IdTransactionPreset == idTransactionPreset && property.IsDeactivated !=true;
                    return GetTransactionDetailPresetCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByTransactionPresetByPage(long idTransactionPreset, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDetailPresetListByTransactionPresetByPage(idTransactionPreset, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByTransactionPresetByPage(long idTransactionPreset, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionDetailPreset, bool>> expression = property => property.IdTransactionPreset == idTransactionPreset && property.IsDeactivated !=true;
                    return GetAllTransactionDetailPresetsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TransactionDetailPreset GetTransactionDetailPresetWithTransactionClassDetails(long idTransactionDetailPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionDetailPresetWithDetails(idTransactionDetailPreset,new List<string>(){"TransactionClass"},shouldRemap);
					}
				}

            //IdTransactionClass -- ZeroOrOne

                public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByTransactionClass(long idTransactionClass)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDetailPresetListByTransactionClass(idTransactionClass, db);
                    }
                }
                public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByTransactionClass(long idTransactionClass, SubscriptionEntities db)
                {
                    Expression<Func<TransactionDetailPreset, bool>> expression = property=> property.IdTransactionClass == idTransactionClass && property.IsDeactivated !=true;
                    return GetTransactionDetailPresetCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByTransactionClassByPage(long idTransactionClass, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDetailPresetListByTransactionClassByPage(idTransactionClass, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByTransactionClassByPage(long idTransactionClass, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionDetailPreset, bool>> expression = property => property.IdTransactionClass == idTransactionClass && property.IsDeactivated !=true;
                    return GetAllTransactionDetailPresetsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public TransactionDetailPreset GetTransactionDetailPresetWithDetails(long idTransactionDetailPreset, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDetailPresetWithDetails(idTransactionDetailPreset, db,includes,shouldRemap);
                }
            }

            public TransactionDetailPreset GetTransactionDetailPresetWithDetails(long idTransactionDetailPreset, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionDetailPreset> query =  db.TransactionDetailPresets;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransactionDetailPresetSingle(query
						.Where(p => p.IdTransactionDetailPreset == idTransactionDetailPreset && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransactionDetailPreset == idTransactionDetailPreset && p.IsDeactivated != true).FirstOrDefault();
            }

            public TransactionDetailPreset GetTransactionDetailPresetWitDetails(long idTransactionDetailPreset,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDetailPresetWitDetails(idTransactionDetailPreset, db,shouldRemap);
                }
            }

            public TransactionDetailPreset GetTransactionDetailPresetWitDetails(long idTransactionDetailPreset, SubscriptionEntities db,bool shouldRemap = false)
            {
				TransactionDetailPreset _TransactionDetailPreset = db.TransactionDetailPresets

					.Include("Product")
					.Include("TransactionPreset")
					.Include("TransactionClass")
								.Where(p => p.IdTransactionDetailPreset == idTransactionDetailPreset && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransactionDetailPresetSingle(_TransactionDetailPreset);

				return  _TransactionDetailPreset;
            }

            public List<TransactionDetailPreset> GetTransactionDetailPresetListByIdList(List<long> transactionDetailPresetIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDetailPresetListByIdList(transactionDetailPresetIds, db);
                }
            }
            public List<TransactionDetailPreset> GetTransactionDetailPresetListByIdList(List<long> transactionDetailPresetIds, SubscriptionEntities db)
            {
                return db.TransactionDetailPresets.Where(p => p.IsDeactivated != true && transactionDetailPresetIds.Contains(p.IdTransactionDetailPreset.Value)).ToList();
            }


            public void SaveTransactionDetailPreset(TransactionDetailPreset transactionDetailPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransactionDetailPreset(transactionDetailPreset, db);
                }
            }

            public void SaveTransactionDetailPreset(TransactionDetailPreset transactionDetailPreset, SubscriptionEntities db)
            {
									if (transactionDetailPreset.Product != null) 
						DaoFactories.Instance.ProductDao.SaveProduct(transactionDetailPreset.Product, db);
									if (transactionDetailPreset.TransactionPreset != null) 
						DaoFactories.Instance.TransactionPresetDao.SaveTransactionPreset(transactionDetailPreset.TransactionPreset, db);
									if (transactionDetailPreset.TransactionClass != null) 
						DaoFactories.Instance.TransactionClassDao.SaveTransactionClass(transactionDetailPreset.TransactionClass, db);
				                
                if (transactionDetailPreset.IdTransactionDetailPreset.HasValue){
					var transactionDetailPresetFromDb = db.TransactionDetailPresets.Where(p => p.IdTransactionDetailPreset == transactionDetailPreset.IdTransactionDetailPreset).FirstOrDefault();
													transactionDetailPresetFromDb.IsDeactivated = transactionDetailPreset.IsDeactivated;
													transactionDetailPresetFromDb.IdTransactionPreset = transactionDetailPreset.IdTransactionPreset;
													transactionDetailPresetFromDb.IdProduct = transactionDetailPreset.IdProduct;
													transactionDetailPresetFromDb.Description = transactionDetailPreset.Description;
													transactionDetailPresetFromDb.Quantity = transactionDetailPreset.Quantity;
													transactionDetailPresetFromDb.Rate = transactionDetailPreset.Rate;
													transactionDetailPresetFromDb.IdTransactionClass = transactionDetailPreset.IdTransactionClass;
									}
                else{
                                                //fix for saving without duplicating items in db
                              transactionDetailPreset.Product = null;
                                                        //fix for saving without duplicating items in db
                              transactionDetailPreset.TransactionPreset = null;
                                                        //fix for saving without duplicating items in db
                              transactionDetailPreset.TransactionClass = null;
                                                db.TransactionDetailPresets.Add(transactionDetailPreset);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransactionDetailPreset(TransactionDetailPreset transactionDetailPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransactionDetailPreset(transactionDetailPreset, db);
                }
            }

            public void SaveOnlyTransactionDetailPreset(TransactionDetailPreset transactionDetailPreset, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // transactionDetailPreset.Product = null;
                                                        //fix for saving without duplicating items in db
                             // transactionDetailPreset.TransactionPreset = null;
                                                        //fix for saving without duplicating items in db
                             // transactionDetailPreset.TransactionClass = null;
                                            if (transactionDetailPreset.IdTransactionDetailPreset.HasValue){
					var transactionDetailPresetFromDb = db.TransactionDetailPresets.Where(p => p.IdTransactionDetailPreset == transactionDetailPreset.IdTransactionDetailPreset).FirstOrDefault();
													transactionDetailPresetFromDb.IsDeactivated = transactionDetailPreset.IsDeactivated;
													transactionDetailPresetFromDb.IdTransactionPreset = transactionDetailPreset.IdTransactionPreset;
													transactionDetailPresetFromDb.IdProduct = transactionDetailPreset.IdProduct;
													transactionDetailPresetFromDb.Description = transactionDetailPreset.Description;
													transactionDetailPresetFromDb.Quantity = transactionDetailPreset.Quantity;
													transactionDetailPresetFromDb.Rate = transactionDetailPreset.Rate;
													transactionDetailPresetFromDb.IdTransactionClass = transactionDetailPreset.IdTransactionClass;
										 db.SaveChanges();

				}
                else{
					TransactionDetailPreset _transactionDetailPreset = new TransactionDetailPreset();
																	_transactionDetailPreset.IsDeactivated = transactionDetailPreset.IsDeactivated;
													_transactionDetailPreset.IdTransactionPreset = transactionDetailPreset.IdTransactionPreset;
													_transactionDetailPreset.IdProduct = transactionDetailPreset.IdProduct;
													_transactionDetailPreset.Description = transactionDetailPreset.Description;
													_transactionDetailPreset.Quantity = transactionDetailPreset.Quantity;
													_transactionDetailPreset.Rate = transactionDetailPreset.Rate;
													_transactionDetailPreset.IdTransactionClass = transactionDetailPreset.IdTransactionClass;
					

                    db.TransactionDetailPresets.Add(_transactionDetailPreset);
					db.SaveChanges();
					transactionDetailPreset.IdTransactionDetailPreset =  _transactionDetailPreset.IdTransactionDetailPreset;
                    
                }
            }

            public void DeleteTransactionDetailPreset(TransactionDetailPreset transactionDetailPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransactionDetailPreset(transactionDetailPreset, db);
                }
            }

            public void DeleteTransactionDetailPreset(TransactionDetailPreset transactionDetailPreset, SubscriptionEntities db)
            {
								var transactionDetailPresetFromDb = GetTransactionDetailPreset(transactionDetailPreset.IdTransactionDetailPreset.Value,db);
				transactionDetailPresetFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransactionDetailPreset(TransactionDetailPreset transactionDetailPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransactionDetailPreset(transactionDetailPreset, db);
                }
            }

            public void DeletePermanentlyTransactionDetailPreset(TransactionDetailPreset transactionDetailPreset, SubscriptionEntities db)
            {
								var transactionDetailPresetFromDb = GetTransactionDetailPreset(transactionDetailPreset.IdTransactionDetailPreset.Value,db);
				
				db.TransactionDetailPresets.Remove(transactionDetailPresetFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class TransactionDueDao :ITransactionDueDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TransactionDueDao(){
			
			}

			public TransactionDueDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TransactionDue> GetAllTransactionDues(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDues(db, shouldRemap);
                }
            }

            public List<TransactionDue> GetAllTransactionDues(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionDueList(db.TransactionDues.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TransactionDues.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TransactionDue> GetAllTransactionDuesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDue, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDuesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionDue> GetAllTransactionDuesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionDue, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDue, dynamic> orderExpression = null)
            {
				IQueryable<TransactionDue> query =  db.TransactionDues;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionDue> baseListReturnType = new BaseListReturnType<TransactionDue>();

                IQueryable<TransactionDue> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionDue" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionDue, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDueList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionDue> GetAllTransactionDuesWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue, bool>> expression = null,bool shouldRemap = false, Func<TransactionDue, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDuesByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionDue> GetAllTransactionDuesWithTransactionDue_TransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue, bool>> expression = null,bool shouldRemap = false, Func<TransactionDue, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDuesByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionDue_Transaction"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TransactionDue> GetAllTransactionDuesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDue, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDuesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionDue> GetAllTransactionDuesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionDue, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDue, dynamic> orderExpression = null)
            {
				IQueryable<TransactionDue> query =  db.TransactionDues;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionDue> baseListReturnType = new BaseListReturnType<TransactionDue>();

                IQueryable<TransactionDue> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionDue" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionDue, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDueList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionDue> GetAllTransactionDuesWithTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue, bool>> expression = null,bool shouldRemap = false, Func<TransactionDue, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDuesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionDue> GetAllTransactionDuesWithTransactionDue_TransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue, bool>> expression = null,bool shouldRemap = false, Func<TransactionDue, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDuesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionDue_Transaction"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TransactionDue> GetAllTransactionDuesWithTransactionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDueWitDetails(new List<string>(){"Transaction"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionDue> GetAllTransactionDuesWithTransactionDue_TransactionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDueWitDetails(new List<string>(){"TransactionDue_Transaction"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TransactionDue> GetAllTransactionDueWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDueWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TransactionDue> GetAllTransactionDueWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionDue> query =  db.TransactionDues;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionDue> baseListReturnType = new BaseListReturnType<TransactionDue>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDueList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TransactionDue GetTransactionDue(long idTransactionDue,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDue(idTransactionDue, db,shouldRemap);
                }
            }
                        public TransactionDue GetTransactionDue(long idTransactionDue, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionDueSingle(db.TransactionDues.Where(p => p.IdTransactionDue == idTransactionDue && p.IsDeactivated != true).FirstOrDefault());

                return db.TransactionDues.Where(p => p.IdTransactionDue == idTransactionDue && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TransactionDue GetTransactionDueCustom( Expression<Func<TransactionDue, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionDueCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TransactionDue GetTransactionDueCustom( SubscriptionEntities db , Expression<Func<TransactionDue, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TransactionDue> query =  db.TransactionDues;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransactionDueSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TransactionDue> GetTransactionDueCustomList( Expression<Func<TransactionDue, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionDue, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionDueCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TransactionDue> GetTransactionDueCustomList(  SubscriptionEntities db , Expression<Func<TransactionDue, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionDue, dynamic> orderExpression = null)
			{
				IQueryable<TransactionDue> query =  db.TransactionDues;
                BaseListReturnType<TransactionDue> baseListReturnType = new BaseListReturnType<TransactionDue>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDueList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TransactionDue GetTransactionDueWithTransactionDetails(long idTransactionDue,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionDueWithDetails(idTransactionDue,new List<string>(){"Transaction"},shouldRemap);
					}
				}

            //IdTransaction -- ZeroOrOne

                public BaseListReturnType<TransactionDue> GetAllTransactionDueListByTransaction(long idTransaction)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDueListByTransaction(idTransaction, db);
                    }
                }
                public BaseListReturnType<TransactionDue> GetAllTransactionDueListByTransaction(long idTransaction, SubscriptionEntities db)
                {
                    Expression<Func<TransactionDue, bool>> expression = property=> property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetTransactionDueCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionDue> GetAllTransactionDueListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDueListByTransactionByPage(idTransaction, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionDue> GetAllTransactionDueListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionDue, bool>> expression = property => property.IdTransaction == idTransaction && property.IsDeactivated !=true;
                    return GetAllTransactionDuesByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TransactionDue GetTransactionDueWithTransactionDue_TransactionDetails(long idTransactionDue,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionDueWithDetails(idTransactionDue,new List<string>(){"TransactionDue_Transaction"},shouldRemap);
					}
				}

            //IdTransactionDue -- Many


			


			public TransactionDue GetTransactionDueWithDetails(long idTransactionDue, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDueWithDetails(idTransactionDue, db,includes,shouldRemap);
                }
            }

            public TransactionDue GetTransactionDueWithDetails(long idTransactionDue, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionDue> query =  db.TransactionDues;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransactionDueSingle(query
						.Where(p => p.IdTransactionDue == idTransactionDue && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransactionDue == idTransactionDue && p.IsDeactivated != true).FirstOrDefault();
            }

            public TransactionDue GetTransactionDueWitDetails(long idTransactionDue,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDueWitDetails(idTransactionDue, db,shouldRemap);
                }
            }

            public TransactionDue GetTransactionDueWitDetails(long idTransactionDue, SubscriptionEntities db,bool shouldRemap = false)
            {
				TransactionDue _TransactionDue = db.TransactionDues

					.Include("Transaction")
					.Include("TransactionDue_Transaction")
								.Where(p => p.IdTransactionDue == idTransactionDue && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransactionDueSingle(_TransactionDue);

				return  _TransactionDue;
            }

            public List<TransactionDue> GetTransactionDueListByIdList(List<long> transactionDueIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDueListByIdList(transactionDueIds, db);
                }
            }
            public List<TransactionDue> GetTransactionDueListByIdList(List<long> transactionDueIds, SubscriptionEntities db)
            {
                return db.TransactionDues.Where(p => p.IsDeactivated != true && transactionDueIds.Contains(p.IdTransactionDue.Value)).ToList();
            }


            public void SaveTransactionDue(TransactionDue transactionDue)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransactionDue(transactionDue, db);
                }
            }

            public void SaveTransactionDue(TransactionDue transactionDue, SubscriptionEntities db)
            {
									if (transactionDue.Transaction != null) 
						DaoFactories.Instance.TransactionDao.SaveTransaction(transactionDue.Transaction, db);
				                
                if (transactionDue.IdTransactionDue.HasValue){
					var transactionDueFromDb = db.TransactionDues.Where(p => p.IdTransactionDue == transactionDue.IdTransactionDue).FirstOrDefault();
													transactionDueFromDb.IdTransaction = transactionDue.IdTransaction;
													transactionDueFromDb.DueDate = transactionDue.DueDate;
													transactionDueFromDb.AmountDue = transactionDue.AmountDue;
													transactionDueFromDb.AmountRemaining = transactionDue.AmountRemaining;
													transactionDueFromDb.IsDeactivated = transactionDue.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              transactionDue.Transaction = null;
                                                db.TransactionDues.Add(transactionDue);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransactionDue(TransactionDue transactionDue)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransactionDue(transactionDue, db);
                }
            }

            public void SaveOnlyTransactionDue(TransactionDue transactionDue, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // transactionDue.Transaction = null;
                                            if (transactionDue.IdTransactionDue.HasValue){
					var transactionDueFromDb = db.TransactionDues.Where(p => p.IdTransactionDue == transactionDue.IdTransactionDue).FirstOrDefault();
													transactionDueFromDb.IdTransaction = transactionDue.IdTransaction;
													transactionDueFromDb.DueDate = transactionDue.DueDate;
													transactionDueFromDb.AmountDue = transactionDue.AmountDue;
													transactionDueFromDb.AmountRemaining = transactionDue.AmountRemaining;
													transactionDueFromDb.IsDeactivated = transactionDue.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					TransactionDue _transactionDue = new TransactionDue();
																	_transactionDue.IdTransaction = transactionDue.IdTransaction;
													_transactionDue.DueDate = transactionDue.DueDate;
													_transactionDue.AmountDue = transactionDue.AmountDue;
													_transactionDue.AmountRemaining = transactionDue.AmountRemaining;
													_transactionDue.IsDeactivated = transactionDue.IsDeactivated;
					

                    db.TransactionDues.Add(_transactionDue);
					db.SaveChanges();
					transactionDue.IdTransactionDue =  _transactionDue.IdTransactionDue;
                    
                }
            }

            public void DeleteTransactionDue(TransactionDue transactionDue)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransactionDue(transactionDue, db);
                }
            }

            public void DeleteTransactionDue(TransactionDue transactionDue, SubscriptionEntities db)
            {
								var transactionDueFromDb = GetTransactionDue(transactionDue.IdTransactionDue.Value,db);
				transactionDueFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransactionDue(TransactionDue transactionDue)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransactionDue(transactionDue, db);
                }
            }

            public void DeletePermanentlyTransactionDue(TransactionDue transactionDue, SubscriptionEntities db)
            {
								var transactionDueFromDb = GetTransactionDue(transactionDue.IdTransactionDue.Value,db);
				
				db.TransactionDues.Remove(transactionDueFromDb);
                db.SaveChanges();
            }


            
							public List<TransactionDue_Transaction> UpdateTransactionDue_TransactionForTransactionDueWithoutSavingNewItem(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransactionDue)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDue_TransactionForTransactionDueWithoutSavingNewItem(newTransactionDue_Transaction,idTransactionDue,db);
                                }
                            }

							public List<TransactionDue_Transaction> UpdateTransactionDue_TransactionForTransactionDueWithoutSavingNewItem(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransactionDue, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDue_Transaction, bool>> expressionBuilder = p => p.IdTransactionDue == idTransactionDue;
                                var oldTransactionDue_Transaction = DaoFactories.Instance.TransactionDue_TransactionDao.GetTransactionDue_TransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDue_Transaction.EntityList.Select(pc => pc.IdTransactionDue_Transaction).Except(newTransactionDue_Transaction.Where(pc => pc.IdTransactionDue_Transaction.HasValue).Select(pc => pc.IdTransactionDue_Transaction)).ToList();
                                var itemsTobeDeleted = oldTransactionDue_Transaction.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDue_Transaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionDue_Transaction;
                            }


                            public List<TransactionDue_Transaction> UpdateTransactionDue_TransactionForTransactionDue(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransactionDue)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDue_TransactionForTransactionDue(newTransactionDue_Transaction,idTransactionDue,db);
                                }
                            }

                            public List<TransactionDue_Transaction> UpdateTransactionDue_TransactionForTransactionDue(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransactionDue, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDue_Transaction, bool>> expressionBuilder = p => p.IdTransactionDue == idTransactionDue;
                                var oldTransactionDue_Transaction = DaoFactories.Instance.TransactionDue_TransactionDao.GetTransactionDue_TransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDue_Transaction.EntityList.Select(pc => pc.IdTransactionDue_Transaction).Except(newTransactionDue_Transaction.Where(pc => pc.IdTransactionDue_Transaction.HasValue).Select(pc => pc.IdTransactionDue_Transaction)).ToList();
                                var itemsTobeDeleted = oldTransactionDue_Transaction.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDue_Transaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionDue_Transaction.ForEach(pc =>
                                {
                                    pc.IdTransactionDue = idTransactionDue;
                                    DaoFactories.Instance.TransactionDue_TransactionDao.SaveOnlyTransactionDue_Transaction(pc, db);
                                });
                                return newTransactionDue_Transaction;
                            }

                        


    



		}
			public partial class TransactionDue_TransactionDao :ITransactionDue_TransactionDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TransactionDue_TransactionDao(){
			
			}

			public TransactionDue_TransactionDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TransactionDue_Transaction> GetAllTransactionDue_Transaction(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDue_Transaction(db, shouldRemap);
                }
            }

            public List<TransactionDue_Transaction> GetAllTransactionDue_Transaction(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionDue_TransactionList(db.TransactionDue_Transaction.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TransactionDue_Transaction.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue_Transaction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDue_Transaction, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDue_TransactionByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionDue_Transaction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDue_Transaction, dynamic> orderExpression = null)
            {
				IQueryable<TransactionDue_Transaction> query =  db.TransactionDue_Transaction;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionDue_Transaction> baseListReturnType = new BaseListReturnType<TransactionDue_Transaction>();

                IQueryable<TransactionDue_Transaction> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionDue_Transaction" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionDue_Transaction, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDue_TransactionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionWithTransactionDueDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue_Transaction, bool>> expression = null,bool shouldRemap = false, Func<TransactionDue_Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDue_TransactionByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionDue"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue_Transaction, bool>> expression = null,bool shouldRemap = false, Func<TransactionDue_Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDue_TransactionByPage(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue_Transaction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDue_Transaction, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDue_TransactionByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionDue_Transaction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionDue_Transaction, dynamic> orderExpression = null)
            {
				IQueryable<TransactionDue_Transaction> query =  db.TransactionDue_Transaction;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionDue_Transaction> baseListReturnType = new BaseListReturnType<TransactionDue_Transaction>();

                IQueryable<TransactionDue_Transaction> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionDue_Transaction" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionDue_Transaction, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDue_TransactionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionWithTransactionDueDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue_Transaction, bool>> expression = null,bool shouldRemap = false, Func<TransactionDue_Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDue_TransactionByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionDue"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionWithTransactionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue_Transaction, bool>> expression = null,bool shouldRemap = false, Func<TransactionDue_Transaction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDue_TransactionByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionWithTransactionDueDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDue_TransactionWitDetails(new List<string>(){"TransactionDue"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionWithTransactionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionDue_TransactionWitDetails(new List<string>(){"Transaction"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionDue_TransactionWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionDue_Transaction> query =  db.TransactionDue_Transaction;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionDue_Transaction> baseListReturnType = new BaseListReturnType<TransactionDue_Transaction>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDue_TransactionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TransactionDue_Transaction GetTransactionDue_Transaction(long idTransactionDue_Transaction,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDue_Transaction(idTransactionDue_Transaction, db,shouldRemap);
                }
            }
                        public TransactionDue_Transaction GetTransactionDue_Transaction(long idTransactionDue_Transaction, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionDue_TransactionSingle(db.TransactionDue_Transaction.Where(p => p.IdTransactionDue_Transaction == idTransactionDue_Transaction && p.IsDeactivated != true).FirstOrDefault());

                return db.TransactionDue_Transaction.Where(p => p.IdTransactionDue_Transaction == idTransactionDue_Transaction && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TransactionDue_Transaction GetTransactionDue_TransactionCustom( Expression<Func<TransactionDue_Transaction, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionDue_TransactionCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TransactionDue_Transaction GetTransactionDue_TransactionCustom( SubscriptionEntities db , Expression<Func<TransactionDue_Transaction, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TransactionDue_Transaction> query =  db.TransactionDue_Transaction;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransactionDue_TransactionSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TransactionDue_Transaction> GetTransactionDue_TransactionCustomList( Expression<Func<TransactionDue_Transaction, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionDue_Transaction, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionDue_TransactionCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TransactionDue_Transaction> GetTransactionDue_TransactionCustomList(  SubscriptionEntities db , Expression<Func<TransactionDue_Transaction, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionDue_Transaction, dynamic> orderExpression = null)
			{
				IQueryable<TransactionDue_Transaction> query =  db.TransactionDue_Transaction;
                BaseListReturnType<TransactionDue_Transaction> baseListReturnType = new BaseListReturnType<TransactionDue_Transaction>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionDue_TransactionList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TransactionDue_Transaction GetTransactionDue_TransactionWithTransactionDueDetails(long idTransactionDue_Transaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionDue_TransactionWithDetails(idTransactionDue_Transaction,new List<string>(){"TransactionDue"},shouldRemap);
					}
				}

            //IdTransactionDue -- ZeroOrOne

                public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionListByTransactionDue(long idTransactionDue)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDue_TransactionListByTransactionDue(idTransactionDue, db);
                    }
                }
                public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionListByTransactionDue(long idTransactionDue, SubscriptionEntities db)
                {
                    Expression<Func<TransactionDue_Transaction, bool>> expression = property=> property.IdTransactionDue == idTransactionDue && property.IsDeactivated !=true;
                    return GetTransactionDue_TransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionListByTransactionDueByPage(long idTransactionDue, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDue_TransactionListByTransactionDueByPage(idTransactionDue, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionListByTransactionDueByPage(long idTransactionDue, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionDue_Transaction, bool>> expression = property => property.IdTransactionDue == idTransactionDue && property.IsDeactivated !=true;
                    return GetAllTransactionDue_TransactionByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TransactionDue_Transaction GetTransactionDue_TransactionWithTransactionDetails(long idTransactionDue_Transaction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionDue_TransactionWithDetails(idTransactionDue_Transaction,new List<string>(){"Transaction"},shouldRemap);
					}
				}

            //IdTransactionDone -- ZeroOrOne

                public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionListByTransaction(long idTransaction)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDue_TransactionListByTransaction(idTransaction, db);
                    }
                }
                public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionListByTransaction(long idTransaction, SubscriptionEntities db)
                {
                    Expression<Func<TransactionDue_Transaction, bool>> expression = property=> property.IdTransactionDone == idTransaction && property.IsDeactivated !=true;
                    return GetTransactionDue_TransactionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionDue_TransactionListByTransactionByPage(idTransaction, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionListByTransactionByPage(long idTransaction, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionDue_Transaction, bool>> expression = property => property.IdTransactionDone == idTransaction && property.IsDeactivated !=true;
                    return GetAllTransactionDue_TransactionByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public TransactionDue_Transaction GetTransactionDue_TransactionWithDetails(long idTransactionDue_Transaction, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDue_TransactionWithDetails(idTransactionDue_Transaction, db,includes,shouldRemap);
                }
            }

            public TransactionDue_Transaction GetTransactionDue_TransactionWithDetails(long idTransactionDue_Transaction, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionDue_Transaction> query =  db.TransactionDue_Transaction;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransactionDue_TransactionSingle(query
						.Where(p => p.IdTransactionDue_Transaction == idTransactionDue_Transaction && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransactionDue_Transaction == idTransactionDue_Transaction && p.IsDeactivated != true).FirstOrDefault();
            }

            public TransactionDue_Transaction GetTransactionDue_TransactionWitDetails(long idTransactionDue_Transaction,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDue_TransactionWitDetails(idTransactionDue_Transaction, db,shouldRemap);
                }
            }

            public TransactionDue_Transaction GetTransactionDue_TransactionWitDetails(long idTransactionDue_Transaction, SubscriptionEntities db,bool shouldRemap = false)
            {
				TransactionDue_Transaction _TransactionDue_Transaction = db.TransactionDue_Transaction

					.Include("TransactionDue")
					.Include("Transaction")
								.Where(p => p.IdTransactionDue_Transaction == idTransactionDue_Transaction && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransactionDue_TransactionSingle(_TransactionDue_Transaction);

				return  _TransactionDue_Transaction;
            }

            public List<TransactionDue_Transaction> GetTransactionDue_TransactionListByIdList(List<long> transactionDue_TransactionIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionDue_TransactionListByIdList(transactionDue_TransactionIds, db);
                }
            }
            public List<TransactionDue_Transaction> GetTransactionDue_TransactionListByIdList(List<long> transactionDue_TransactionIds, SubscriptionEntities db)
            {
                return db.TransactionDue_Transaction.Where(p => p.IsDeactivated != true && transactionDue_TransactionIds.Contains(p.IdTransactionDue_Transaction.Value)).ToList();
            }


            public void SaveTransactionDue_Transaction(TransactionDue_Transaction transactionDue_Transaction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransactionDue_Transaction(transactionDue_Transaction, db);
                }
            }

            public void SaveTransactionDue_Transaction(TransactionDue_Transaction transactionDue_Transaction, SubscriptionEntities db)
            {
									if (transactionDue_Transaction.TransactionDue != null) 
						DaoFactories.Instance.TransactionDueDao.SaveTransactionDue(transactionDue_Transaction.TransactionDue, db);
									if (transactionDue_Transaction.Transaction != null) 
						DaoFactories.Instance.TransactionDao.SaveTransaction(transactionDue_Transaction.Transaction, db);
				                
                if (transactionDue_Transaction.IdTransactionDue_Transaction.HasValue){
					var transactionDue_TransactionFromDb = db.TransactionDue_Transaction.Where(p => p.IdTransactionDue_Transaction == transactionDue_Transaction.IdTransactionDue_Transaction).FirstOrDefault();
													transactionDue_TransactionFromDb.IsDeactivated = transactionDue_Transaction.IsDeactivated;
													transactionDue_TransactionFromDb.IdTransactionDone = transactionDue_Transaction.IdTransactionDone;
													transactionDue_TransactionFromDb.IdTransactionDue = transactionDue_Transaction.IdTransactionDue;
									}
                else{
                                                //fix for saving without duplicating items in db
                              transactionDue_Transaction.TransactionDue = null;
                                                        //fix for saving without duplicating items in db
                              transactionDue_Transaction.Transaction = null;
                                                db.TransactionDue_Transaction.Add(transactionDue_Transaction);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransactionDue_Transaction(TransactionDue_Transaction transactionDue_Transaction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransactionDue_Transaction(transactionDue_Transaction, db);
                }
            }

            public void SaveOnlyTransactionDue_Transaction(TransactionDue_Transaction transactionDue_Transaction, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // transactionDue_Transaction.TransactionDue = null;
                                                        //fix for saving without duplicating items in db
                             // transactionDue_Transaction.Transaction = null;
                                            if (transactionDue_Transaction.IdTransactionDue_Transaction.HasValue){
					var transactionDue_TransactionFromDb = db.TransactionDue_Transaction.Where(p => p.IdTransactionDue_Transaction == transactionDue_Transaction.IdTransactionDue_Transaction).FirstOrDefault();
													transactionDue_TransactionFromDb.IsDeactivated = transactionDue_Transaction.IsDeactivated;
													transactionDue_TransactionFromDb.IdTransactionDone = transactionDue_Transaction.IdTransactionDone;
													transactionDue_TransactionFromDb.IdTransactionDue = transactionDue_Transaction.IdTransactionDue;
										 db.SaveChanges();

				}
                else{
					TransactionDue_Transaction _transactionDue_Transaction = new TransactionDue_Transaction();
																	_transactionDue_Transaction.IsDeactivated = transactionDue_Transaction.IsDeactivated;
													_transactionDue_Transaction.IdTransactionDone = transactionDue_Transaction.IdTransactionDone;
													_transactionDue_Transaction.IdTransactionDue = transactionDue_Transaction.IdTransactionDue;
					

                    db.TransactionDue_Transaction.Add(_transactionDue_Transaction);
					db.SaveChanges();
					transactionDue_Transaction.IdTransactionDue_Transaction =  _transactionDue_Transaction.IdTransactionDue_Transaction;
                    
                }
            }

            public void DeleteTransactionDue_Transaction(TransactionDue_Transaction transactionDue_Transaction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransactionDue_Transaction(transactionDue_Transaction, db);
                }
            }

            public void DeleteTransactionDue_Transaction(TransactionDue_Transaction transactionDue_Transaction, SubscriptionEntities db)
            {
								var transactionDue_TransactionFromDb = GetTransactionDue_Transaction(transactionDue_Transaction.IdTransactionDue_Transaction.Value,db);
				transactionDue_TransactionFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransactionDue_Transaction(TransactionDue_Transaction transactionDue_Transaction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransactionDue_Transaction(transactionDue_Transaction, db);
                }
            }

            public void DeletePermanentlyTransactionDue_Transaction(TransactionDue_Transaction transactionDue_Transaction, SubscriptionEntities db)
            {
								var transactionDue_TransactionFromDb = GetTransactionDue_Transaction(transactionDue_Transaction.IdTransactionDue_Transaction.Value,db);
				
				db.TransactionDue_Transaction.Remove(transactionDue_TransactionFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class TransactionPresetDao :ITransactionPresetDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TransactionPresetDao(){
			
			}

			public TransactionPresetDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TransactionPreset> GetAllTransactionPresets(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionPresets(db, shouldRemap);
                }
            }

            public List<TransactionPreset> GetAllTransactionPresets(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionPresetList(db.TransactionPresets.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TransactionPresets.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionPresetsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
            {
				IQueryable<TransactionPreset> query =  db.TransactionPresets;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionPreset> baseListReturnType = new BaseListReturnType<TransactionPreset>();

                IQueryable<TransactionPreset> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionPreset" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionPreset, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionPresetList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithBankStatementHitList_TransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementHitList_TransactionPreset"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithBankStatementStagingHit_TransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHit_TransactionPreset"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionDetailPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionDetailPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithCustomerDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPage(sortingPagingInfo, db,expression,new List<string>(){"Customer"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionAccountDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionAccount"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionClassDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionClass"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionTemplateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionTemplate"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionType"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
            {
				IQueryable<TransactionPreset> query =  db.TransactionPresets;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionPreset> baseListReturnType = new BaseListReturnType<TransactionPreset>();

                IQueryable<TransactionPreset> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionPreset" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionPreset, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionPresetList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithBankStatementHitList_TransactionPresetDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementHitList_TransactionPreset"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithBankStatementStagingHit_TransactionPresetDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagingHit_TransactionPreset"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionDetailPresetsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionDetailPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithCustomerDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Customer"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionAccountDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionAccount"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionClassDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionClass"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionTemplateDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionTemplate"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionTypeDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap = false, Func<TransactionPreset, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionType"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithBankStatementHitList_TransactionPresetDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetWitDetails(new List<string>(){"BankStatementHitList_TransactionPreset"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithBankStatementStagingHit_TransactionPresetDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetWitDetails(new List<string>(){"BankStatementStagingHit_TransactionPreset"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionDetailPresetsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetWitDetails(new List<string>(){"TransactionDetailPresets"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithCustomerDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetWitDetails(new List<string>(){"Customer"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionAccountDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetWitDetails(new List<string>(){"TransactionAccount"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionClassDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetWitDetails(new List<string>(){"TransactionClass"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionTemplateDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetWitDetails(new List<string>(){"TransactionTemplate"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionTypeDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionPresetWitDetails(new List<string>(){"TransactionType"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TransactionPreset> GetAllTransactionPresetWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionPresetWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TransactionPreset> GetAllTransactionPresetWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionPreset> query =  db.TransactionPresets;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionPreset> baseListReturnType = new BaseListReturnType<TransactionPreset>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionPresetList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TransactionPreset GetTransactionPreset(long idTransactionPreset,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionPreset(idTransactionPreset, db,shouldRemap);
                }
            }
                        public TransactionPreset GetTransactionPreset(long idTransactionPreset, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionPresetSingle(db.TransactionPresets.Where(p => p.IdTransactionPreset == idTransactionPreset && p.IsDeactivated != true).FirstOrDefault());

                return db.TransactionPresets.Where(p => p.IdTransactionPreset == idTransactionPreset && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TransactionPreset GetTransactionPresetCustom( Expression<Func<TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionPresetCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TransactionPreset GetTransactionPresetCustom( SubscriptionEntities db , Expression<Func<TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TransactionPreset> query =  db.TransactionPresets;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransactionPresetSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TransactionPreset> GetTransactionPresetCustomList( Expression<Func<TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionPreset, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionPresetCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TransactionPreset> GetTransactionPresetCustomList(  SubscriptionEntities db , Expression<Func<TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionPreset, dynamic> orderExpression = null)
			{
				IQueryable<TransactionPreset> query =  db.TransactionPresets;
                BaseListReturnType<TransactionPreset> baseListReturnType = new BaseListReturnType<TransactionPreset>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionPresetList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TransactionPreset GetTransactionPresetWithBankStatementHitList_TransactionPresetDetails(long idTransactionPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionPresetWithDetails(idTransactionPreset,new List<string>(){"BankStatementHitList_TransactionPreset"},shouldRemap);
					}
				}

            //IdTransactionPreset -- Many


							public TransactionPreset GetTransactionPresetWithBankStatementStagingHit_TransactionPresetDetails(long idTransactionPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionPresetWithDetails(idTransactionPreset,new List<string>(){"BankStatementStagingHit_TransactionPreset"},shouldRemap);
					}
				}

            //IdTransactionPreset -- Many


							public TransactionPreset GetTransactionPresetWithTransactionDetailPresetsDetails(long idTransactionPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionPresetWithDetails(idTransactionPreset,new List<string>(){"TransactionDetailPresets"},shouldRemap);
					}
				}

            //IdTransactionPreset -- Many


							public TransactionPreset GetTransactionPresetWithCustomerDetails(long idTransactionPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionPresetWithDetails(idTransactionPreset,new List<string>(){"Customer"},shouldRemap);
					}
				}

            //IdCustomer -- ZeroOrOne

                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByCustomer(long idCustomer)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionPresetListByCustomer(idCustomer, db);
                    }
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByCustomer(long idCustomer, SubscriptionEntities db)
                {
                    Expression<Func<TransactionPreset, bool>> expression = property=> property.IdCustomer == idCustomer && property.IsDeactivated !=true;
                    return GetTransactionPresetCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByCustomerByPage(long idCustomer, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionPresetListByCustomerByPage(idCustomer, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByCustomerByPage(long idCustomer, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionPreset, bool>> expression = property => property.IdCustomer == idCustomer && property.IsDeactivated !=true;
                    return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TransactionPreset GetTransactionPresetWithTransactionAccountDetails(long idTransactionPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionPresetWithDetails(idTransactionPreset,new List<string>(){"TransactionAccount"},shouldRemap);
					}
				}

            //IdTransactionAccount -- ZeroOrOne

                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionAccount(long idTransactionAccount)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionPresetListByTransactionAccount(idTransactionAccount, db);
                    }
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionAccount(long idTransactionAccount, SubscriptionEntities db)
                {
                    Expression<Func<TransactionPreset, bool>> expression = property=> property.IdTransactionAccount == idTransactionAccount && property.IsDeactivated !=true;
                    return GetTransactionPresetCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionAccountByPage(long idTransactionAccount, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionPresetListByTransactionAccountByPage(idTransactionAccount, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionAccountByPage(long idTransactionAccount, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionPreset, bool>> expression = property => property.IdTransactionAccount == idTransactionAccount && property.IsDeactivated !=true;
                    return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TransactionPreset GetTransactionPresetWithTransactionClassDetails(long idTransactionPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionPresetWithDetails(idTransactionPreset,new List<string>(){"TransactionClass"},shouldRemap);
					}
				}

            //IdTransactionClass -- ZeroOrOne

                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionClass(long idTransactionClass)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionPresetListByTransactionClass(idTransactionClass, db);
                    }
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionClass(long idTransactionClass, SubscriptionEntities db)
                {
                    Expression<Func<TransactionPreset, bool>> expression = property=> property.IdTransactionClass == idTransactionClass && property.IsDeactivated !=true;
                    return GetTransactionPresetCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionClassByPage(long idTransactionClass, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionPresetListByTransactionClassByPage(idTransactionClass, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionClassByPage(long idTransactionClass, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionPreset, bool>> expression = property => property.IdTransactionClass == idTransactionClass && property.IsDeactivated !=true;
                    return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TransactionPreset GetTransactionPresetWithTransactionTemplateDetails(long idTransactionPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionPresetWithDetails(idTransactionPreset,new List<string>(){"TransactionTemplate"},shouldRemap);
					}
				}

            //IdTransactionTemplate -- ZeroOrOne

                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionTemplate(long idTransactionTemplate)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionPresetListByTransactionTemplate(idTransactionTemplate, db);
                    }
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionTemplate(long idTransactionTemplate, SubscriptionEntities db)
                {
                    Expression<Func<TransactionPreset, bool>> expression = property=> property.IdTransactionTemplate == idTransactionTemplate && property.IsDeactivated !=true;
                    return GetTransactionPresetCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionTemplateByPage(long idTransactionTemplate, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionPresetListByTransactionTemplateByPage(idTransactionTemplate, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionTemplateByPage(long idTransactionTemplate, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionPreset, bool>> expression = property => property.IdTransactionTemplate == idTransactionTemplate && property.IsDeactivated !=true;
                    return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public TransactionPreset GetTransactionPresetWithTransactionTypeDetails(long idTransactionPreset,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionPresetWithDetails(idTransactionPreset,new List<string>(){"TransactionType"},shouldRemap);
					}
				}

            //IdTransactionType -- ZeroOrOne

                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionType(long idTransactionType)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionPresetListByTransactionType(idTransactionType, db);
                    }
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionType(long idTransactionType, SubscriptionEntities db)
                {
                    Expression<Func<TransactionPreset, bool>> expression = property=> property.IdTransactionType == idTransactionType && property.IsDeactivated !=true;
                    return GetTransactionPresetCustomList(db, expression, null, true);
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionTypeByPage(long idTransactionType, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllTransactionPresetListByTransactionTypeByPage(idTransactionType, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionTypeByPage(long idTransactionType, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<TransactionPreset, bool>> expression = property => property.IdTransactionType == idTransactionType && property.IsDeactivated !=true;
                    return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public TransactionPreset GetTransactionPresetWithDetails(long idTransactionPreset, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionPresetWithDetails(idTransactionPreset, db,includes,shouldRemap);
                }
            }

            public TransactionPreset GetTransactionPresetWithDetails(long idTransactionPreset, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionPreset> query =  db.TransactionPresets;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransactionPresetSingle(query
						.Where(p => p.IdTransactionPreset == idTransactionPreset && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransactionPreset == idTransactionPreset && p.IsDeactivated != true).FirstOrDefault();
            }

            public TransactionPreset GetTransactionPresetWitDetails(long idTransactionPreset,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionPresetWitDetails(idTransactionPreset, db,shouldRemap);
                }
            }

            public TransactionPreset GetTransactionPresetWitDetails(long idTransactionPreset, SubscriptionEntities db,bool shouldRemap = false)
            {
				TransactionPreset _TransactionPreset = db.TransactionPresets

					.Include("BankStatementHitList_TransactionPreset")
					.Include("BankStatementStagingHit_TransactionPreset")
					.Include("TransactionDetailPresets")
					.Include("Customer")
					.Include("TransactionAccount")
					.Include("TransactionClass")
					.Include("TransactionTemplate")
					.Include("TransactionType")
								.Where(p => p.IdTransactionPreset == idTransactionPreset && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransactionPresetSingle(_TransactionPreset);

				return  _TransactionPreset;
            }

            public List<TransactionPreset> GetTransactionPresetListByIdList(List<long> transactionPresetIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionPresetListByIdList(transactionPresetIds, db);
                }
            }
            public List<TransactionPreset> GetTransactionPresetListByIdList(List<long> transactionPresetIds, SubscriptionEntities db)
            {
                return db.TransactionPresets.Where(p => p.IsDeactivated != true && transactionPresetIds.Contains(p.IdTransactionPreset.Value)).ToList();
            }


            public void SaveTransactionPreset(TransactionPreset transactionPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransactionPreset(transactionPreset, db);
                }
            }

            public void SaveTransactionPreset(TransactionPreset transactionPreset, SubscriptionEntities db)
            {
									if (transactionPreset.Customer != null) 
						DaoFactories.Instance.CustomerDao.SaveCustomer(transactionPreset.Customer, db);
									if (transactionPreset.TransactionAccount != null) 
						DaoFactories.Instance.TransactionAccountDao.SaveTransactionAccount(transactionPreset.TransactionAccount, db);
									if (transactionPreset.TransactionClass != null) 
						DaoFactories.Instance.TransactionClassDao.SaveTransactionClass(transactionPreset.TransactionClass, db);
									if (transactionPreset.TransactionTemplate != null) 
						DaoFactories.Instance.TransactionTemplateDao.SaveTransactionTemplate(transactionPreset.TransactionTemplate, db);
									if (transactionPreset.TransactionType != null) 
						DaoFactories.Instance.TransactionTypeDao.SaveTransactionType(transactionPreset.TransactionType, db);
				                
                if (transactionPreset.IdTransactionPreset.HasValue){
					var transactionPresetFromDb = db.TransactionPresets.Where(p => p.IdTransactionPreset == transactionPreset.IdTransactionPreset).FirstOrDefault();
													transactionPresetFromDb.IdTransactionType = transactionPreset.IdTransactionType;
													transactionPresetFromDb.IsDeactivated = transactionPreset.IsDeactivated;
													transactionPresetFromDb.IdCustomer = transactionPreset.IdCustomer;
													transactionPresetFromDb.IdTransactionClass = transactionPreset.IdTransactionClass;
													transactionPresetFromDb.IdTransactionTemplate = transactionPreset.IdTransactionTemplate;
													transactionPresetFromDb.IdTransactionAccount = transactionPreset.IdTransactionAccount;
													transactionPresetFromDb.TotalAmount = transactionPreset.TotalAmount;
									}
                else{
                                                //fix for saving without duplicating items in db
                              transactionPreset.Customer = null;
                                                        //fix for saving without duplicating items in db
                              transactionPreset.TransactionAccount = null;
                                                        //fix for saving without duplicating items in db
                              transactionPreset.TransactionClass = null;
                                                        //fix for saving without duplicating items in db
                              transactionPreset.TransactionTemplate = null;
                                                        //fix for saving without duplicating items in db
                              transactionPreset.TransactionType = null;
                                                db.TransactionPresets.Add(transactionPreset);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransactionPreset(TransactionPreset transactionPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransactionPreset(transactionPreset, db);
                }
            }

            public void SaveOnlyTransactionPreset(TransactionPreset transactionPreset, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // transactionPreset.Customer = null;
                                                        //fix for saving without duplicating items in db
                             // transactionPreset.TransactionAccount = null;
                                                        //fix for saving without duplicating items in db
                             // transactionPreset.TransactionClass = null;
                                                        //fix for saving without duplicating items in db
                             // transactionPreset.TransactionTemplate = null;
                                                        //fix for saving without duplicating items in db
                             // transactionPreset.TransactionType = null;
                                            if (transactionPreset.IdTransactionPreset.HasValue){
					var transactionPresetFromDb = db.TransactionPresets.Where(p => p.IdTransactionPreset == transactionPreset.IdTransactionPreset).FirstOrDefault();
													transactionPresetFromDb.IdTransactionType = transactionPreset.IdTransactionType;
													transactionPresetFromDb.IsDeactivated = transactionPreset.IsDeactivated;
													transactionPresetFromDb.IdCustomer = transactionPreset.IdCustomer;
													transactionPresetFromDb.IdTransactionClass = transactionPreset.IdTransactionClass;
													transactionPresetFromDb.IdTransactionTemplate = transactionPreset.IdTransactionTemplate;
													transactionPresetFromDb.IdTransactionAccount = transactionPreset.IdTransactionAccount;
													transactionPresetFromDb.TotalAmount = transactionPreset.TotalAmount;
										 db.SaveChanges();

				}
                else{
					TransactionPreset _transactionPreset = new TransactionPreset();
																	_transactionPreset.IdTransactionType = transactionPreset.IdTransactionType;
													_transactionPreset.IsDeactivated = transactionPreset.IsDeactivated;
													_transactionPreset.IdCustomer = transactionPreset.IdCustomer;
													_transactionPreset.IdTransactionClass = transactionPreset.IdTransactionClass;
													_transactionPreset.IdTransactionTemplate = transactionPreset.IdTransactionTemplate;
													_transactionPreset.IdTransactionAccount = transactionPreset.IdTransactionAccount;
													_transactionPreset.TotalAmount = transactionPreset.TotalAmount;
					

                    db.TransactionPresets.Add(_transactionPreset);
					db.SaveChanges();
					transactionPreset.IdTransactionPreset =  _transactionPreset.IdTransactionPreset;
                    
                }
            }

            public void DeleteTransactionPreset(TransactionPreset transactionPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransactionPreset(transactionPreset, db);
                }
            }

            public void DeleteTransactionPreset(TransactionPreset transactionPreset, SubscriptionEntities db)
            {
								var transactionPresetFromDb = GetTransactionPreset(transactionPreset.IdTransactionPreset.Value,db);
				transactionPresetFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransactionPreset(TransactionPreset transactionPreset)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransactionPreset(transactionPreset, db);
                }
            }

            public void DeletePermanentlyTransactionPreset(TransactionPreset transactionPreset, SubscriptionEntities db)
            {
								var transactionPresetFromDb = GetTransactionPreset(transactionPreset.IdTransactionPreset.Value,db);
				
				db.TransactionPresets.Remove(transactionPresetFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementHitList_TransactionPreset> UpdateBankStatementHitList_TransactionPresetForTransactionPresetWithoutSavingNewItem(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idTransactionPreset)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementHitList_TransactionPresetForTransactionPresetWithoutSavingNewItem(newBankStatementHitList_TransactionPreset,idTransactionPreset,db);
                                }
                            }

							public List<BankStatementHitList_TransactionPreset> UpdateBankStatementHitList_TransactionPresetForTransactionPresetWithoutSavingNewItem(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idTransactionPreset, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementHitList_TransactionPreset, bool>> expressionBuilder = p => p.IdTransactionPreset == idTransactionPreset;
                                var oldBankStatementHitList_TransactionPreset = DaoFactories.Instance.BankStatementHitList_TransactionPresetDao.GetBankStatementHitList_TransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementHitList_TransactionPreset.EntityList.Select(pc => pc.IdBankStatementHitList_TransactionPreset).Except(newBankStatementHitList_TransactionPreset.Where(pc => pc.IdBankStatementHitList_TransactionPreset.HasValue).Select(pc => pc.IdBankStatementHitList_TransactionPreset)).ToList();
                                var itemsTobeDeleted = oldBankStatementHitList_TransactionPreset.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementHitList_TransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementHitList_TransactionPreset;
                            }


                            public List<BankStatementHitList_TransactionPreset> UpdateBankStatementHitList_TransactionPresetForTransactionPreset(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idTransactionPreset)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementHitList_TransactionPresetForTransactionPreset(newBankStatementHitList_TransactionPreset,idTransactionPreset,db);
                                }
                            }

                            public List<BankStatementHitList_TransactionPreset> UpdateBankStatementHitList_TransactionPresetForTransactionPreset(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idTransactionPreset, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementHitList_TransactionPreset, bool>> expressionBuilder = p => p.IdTransactionPreset == idTransactionPreset;
                                var oldBankStatementHitList_TransactionPreset = DaoFactories.Instance.BankStatementHitList_TransactionPresetDao.GetBankStatementHitList_TransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementHitList_TransactionPreset.EntityList.Select(pc => pc.IdBankStatementHitList_TransactionPreset).Except(newBankStatementHitList_TransactionPreset.Where(pc => pc.IdBankStatementHitList_TransactionPreset.HasValue).Select(pc => pc.IdBankStatementHitList_TransactionPreset)).ToList();
                                var itemsTobeDeleted = oldBankStatementHitList_TransactionPreset.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementHitList_TransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementHitList_TransactionPreset.ForEach(pc =>
                                {
                                    pc.IdTransactionPreset = idTransactionPreset;
                                    DaoFactories.Instance.BankStatementHitList_TransactionPresetDao.SaveOnlyBankStatementHitList_TransactionPreset(pc, db);
                                });
                                return newBankStatementHitList_TransactionPreset;
                            }

                        
							public List<BankStatementStagingHit_TransactionPreset> UpdateBankStatementStagingHit_TransactionPresetForTransactionPresetWithoutSavingNewItem(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idTransactionPreset)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingHit_TransactionPresetForTransactionPresetWithoutSavingNewItem(newBankStatementStagingHit_TransactionPreset,idTransactionPreset,db);
                                }
                            }

							public List<BankStatementStagingHit_TransactionPreset> UpdateBankStatementStagingHit_TransactionPresetForTransactionPresetWithoutSavingNewItem(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idTransactionPreset, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expressionBuilder = p => p.IdTransactionPreset == idTransactionPreset;
                                var oldBankStatementStagingHit_TransactionPreset = DaoFactories.Instance.BankStatementStagingHit_TransactionPresetDao.GetBankStatementStagingHit_TransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingHit_TransactionPreset.EntityList.Select(pc => pc.IdBankStatementStagingHit_TransactionPreset).Except(newBankStatementStagingHit_TransactionPreset.Where(pc => pc.IdBankStatementStagingHit_TransactionPreset.HasValue).Select(pc => pc.IdBankStatementStagingHit_TransactionPreset)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingHit_TransactionPreset.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingHit_TransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagingHit_TransactionPreset;
                            }


                            public List<BankStatementStagingHit_TransactionPreset> UpdateBankStatementStagingHit_TransactionPresetForTransactionPreset(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idTransactionPreset)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingHit_TransactionPresetForTransactionPreset(newBankStatementStagingHit_TransactionPreset,idTransactionPreset,db);
                                }
                            }

                            public List<BankStatementStagingHit_TransactionPreset> UpdateBankStatementStagingHit_TransactionPresetForTransactionPreset(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idTransactionPreset, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expressionBuilder = p => p.IdTransactionPreset == idTransactionPreset;
                                var oldBankStatementStagingHit_TransactionPreset = DaoFactories.Instance.BankStatementStagingHit_TransactionPresetDao.GetBankStatementStagingHit_TransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagingHit_TransactionPreset.EntityList.Select(pc => pc.IdBankStatementStagingHit_TransactionPreset).Except(newBankStatementStagingHit_TransactionPreset.Where(pc => pc.IdBankStatementStagingHit_TransactionPreset.HasValue).Select(pc => pc.IdBankStatementStagingHit_TransactionPreset)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagingHit_TransactionPreset.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStagingHit_TransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagingHit_TransactionPreset.ForEach(pc =>
                                {
                                    pc.IdTransactionPreset = idTransactionPreset;
                                    DaoFactories.Instance.BankStatementStagingHit_TransactionPresetDao.SaveOnlyBankStatementStagingHit_TransactionPreset(pc, db);
                                });
                                return newBankStatementStagingHit_TransactionPreset;
                            }

                        
							public List<TransactionDetailPreset> UpdateTransactionDetailPresetsForTransactionPresetWithoutSavingNewItem(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionPreset)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDetailPresetsForTransactionPresetWithoutSavingNewItem(newTransactionDetailPresets,idTransactionPreset,db);
                                }
                            }

							public List<TransactionDetailPreset> UpdateTransactionDetailPresetsForTransactionPresetWithoutSavingNewItem(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionPreset, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDetailPreset, bool>> expressionBuilder = p => p.IdTransactionPreset == idTransactionPreset;
                                var oldTransactionDetailPresets = DaoFactories.Instance.TransactionDetailPresetDao.GetTransactionDetailPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDetailPresets.EntityList.Select(pc => pc.IdTransactionDetailPreset).Except(newTransactionDetailPresets.Where(pc => pc.IdTransactionDetailPreset.HasValue).Select(pc => pc.IdTransactionDetailPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionDetailPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDetailPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionDetailPresets;
                            }


                            public List<TransactionDetailPreset> UpdateTransactionDetailPresetsForTransactionPreset(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionPreset)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionDetailPresetsForTransactionPreset(newTransactionDetailPresets,idTransactionPreset,db);
                                }
                            }

                            public List<TransactionDetailPreset> UpdateTransactionDetailPresetsForTransactionPreset(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionPreset, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionDetailPreset, bool>> expressionBuilder = p => p.IdTransactionPreset == idTransactionPreset;
                                var oldTransactionDetailPresets = DaoFactories.Instance.TransactionDetailPresetDao.GetTransactionDetailPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionDetailPresets.EntityList.Select(pc => pc.IdTransactionDetailPreset).Except(newTransactionDetailPresets.Where(pc => pc.IdTransactionDetailPreset.HasValue).Select(pc => pc.IdTransactionDetailPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionDetailPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionDetailPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionDetailPresets.ForEach(pc =>
                                {
                                    pc.IdTransactionPreset = idTransactionPreset;
                                    DaoFactories.Instance.TransactionDetailPresetDao.SaveOnlyTransactionDetailPreset(pc, db);
                                });
                                return newTransactionDetailPresets;
                            }

                        


    



		}
			public partial class TransactionStateDao :ITransactionStateDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TransactionStateDao(){
			
			}

			public TransactionStateDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TransactionState> GetAllTransactionStates(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionStates(db, shouldRemap);
                }
            }

            public List<TransactionState> GetAllTransactionStates(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionStateList(db.TransactionStates.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TransactionStates.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TransactionState> GetAllTransactionStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionStatesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionState> GetAllTransactionStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionState, dynamic> orderExpression = null)
            {
				IQueryable<TransactionState> query =  db.TransactionStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionState> baseListReturnType = new BaseListReturnType<TransactionState>();

                IQueryable<TransactionState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionState" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionState, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionState> GetAllTransactionStatesWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionState, bool>> expression = null,bool shouldRemap = false, Func<TransactionState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionStatesByPage(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TransactionState> GetAllTransactionStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionStatesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionState> GetAllTransactionStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionState, dynamic> orderExpression = null)
            {
				IQueryable<TransactionState> query =  db.TransactionStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionState> baseListReturnType = new BaseListReturnType<TransactionState>();

                IQueryable<TransactionState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionState" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionState, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionState> GetAllTransactionStatesWithTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionState, bool>> expression = null,bool shouldRemap = false, Func<TransactionState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionStatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TransactionState> GetAllTransactionStatesWithTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionStateWitDetails(new List<string>(){"Transactions"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TransactionState> GetAllTransactionStateWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionStateWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TransactionState> GetAllTransactionStateWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionState> query =  db.TransactionStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionState> baseListReturnType = new BaseListReturnType<TransactionState>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TransactionState GetTransactionState(long idTransactionState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionState(idTransactionState, db,shouldRemap);
                }
            }
                        public TransactionState GetTransactionState(long idTransactionState, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionStateSingle(db.TransactionStates.Where(p => p.IdTransactionState == idTransactionState && p.IsDeactivated != true).FirstOrDefault());

                return db.TransactionStates.Where(p => p.IdTransactionState == idTransactionState && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TransactionState GetTransactionStateCustom( Expression<Func<TransactionState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionStateCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TransactionState GetTransactionStateCustom( SubscriptionEntities db , Expression<Func<TransactionState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TransactionState> query =  db.TransactionStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransactionStateSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TransactionState> GetTransactionStateCustomList( Expression<Func<TransactionState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionState, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionStateCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TransactionState> GetTransactionStateCustomList(  SubscriptionEntities db , Expression<Func<TransactionState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionState, dynamic> orderExpression = null)
			{
				IQueryable<TransactionState> query =  db.TransactionStates;
                BaseListReturnType<TransactionState> baseListReturnType = new BaseListReturnType<TransactionState>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionStateList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TransactionState GetTransactionStateWithTransactionsDetails(long idTransactionState,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionStateWithDetails(idTransactionState,new List<string>(){"Transactions"},shouldRemap);
					}
				}

            //IdTransactionState -- Many


			


			public TransactionState GetTransactionStateWithDetails(long idTransactionState, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionStateWithDetails(idTransactionState, db,includes,shouldRemap);
                }
            }

            public TransactionState GetTransactionStateWithDetails(long idTransactionState, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionState> query =  db.TransactionStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransactionStateSingle(query
						.Where(p => p.IdTransactionState == idTransactionState && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransactionState == idTransactionState && p.IsDeactivated != true).FirstOrDefault();
            }

            public TransactionState GetTransactionStateWitDetails(long idTransactionState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionStateWitDetails(idTransactionState, db,shouldRemap);
                }
            }

            public TransactionState GetTransactionStateWitDetails(long idTransactionState, SubscriptionEntities db,bool shouldRemap = false)
            {
				TransactionState _TransactionState = db.TransactionStates

					.Include("Transactions")
								.Where(p => p.IdTransactionState == idTransactionState && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransactionStateSingle(_TransactionState);

				return  _TransactionState;
            }

            public List<TransactionState> GetTransactionStateListByIdList(List<long> transactionStateIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionStateListByIdList(transactionStateIds, db);
                }
            }
            public List<TransactionState> GetTransactionStateListByIdList(List<long> transactionStateIds, SubscriptionEntities db)
            {
                return db.TransactionStates.Where(p => p.IsDeactivated != true && transactionStateIds.Contains(p.IdTransactionState.Value)).ToList();
            }


            public void SaveTransactionState(TransactionState transactionState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransactionState(transactionState, db);
                }
            }

            public void SaveTransactionState(TransactionState transactionState, SubscriptionEntities db)
            {
				                
                if (transactionState.IdTransactionState.HasValue){
					var transactionStateFromDb = db.TransactionStates.Where(p => p.IdTransactionState == transactionState.IdTransactionState).FirstOrDefault();
													transactionStateFromDb.IsDeactivated = transactionState.IsDeactivated;
													transactionStateFromDb.Description = transactionState.Description;
									}
                else{
                                        db.TransactionStates.Add(transactionState);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransactionState(TransactionState transactionState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransactionState(transactionState, db);
                }
            }

            public void SaveOnlyTransactionState(TransactionState transactionState, SubscriptionEntities db)
            {
			                    if (transactionState.IdTransactionState.HasValue){
					var transactionStateFromDb = db.TransactionStates.Where(p => p.IdTransactionState == transactionState.IdTransactionState).FirstOrDefault();
													transactionStateFromDb.IsDeactivated = transactionState.IsDeactivated;
													transactionStateFromDb.Description = transactionState.Description;
										 db.SaveChanges();

				}
                else{
					TransactionState _transactionState = new TransactionState();
																	_transactionState.IsDeactivated = transactionState.IsDeactivated;
													_transactionState.Description = transactionState.Description;
					

                    db.TransactionStates.Add(_transactionState);
					db.SaveChanges();
					transactionState.IdTransactionState =  _transactionState.IdTransactionState;
                    
                }
            }

            public void DeleteTransactionState(TransactionState transactionState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransactionState(transactionState, db);
                }
            }

            public void DeleteTransactionState(TransactionState transactionState, SubscriptionEntities db)
            {
								var transactionStateFromDb = GetTransactionState(transactionState.IdTransactionState.Value,db);
				transactionStateFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransactionState(TransactionState transactionState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransactionState(transactionState, db);
                }
            }

            public void DeletePermanentlyTransactionState(TransactionState transactionState, SubscriptionEntities db)
            {
								var transactionStateFromDb = GetTransactionState(transactionState.IdTransactionState.Value,db);
				
				db.TransactionStates.Remove(transactionStateFromDb);
                db.SaveChanges();
            }


            
							public List<Transaction> UpdateTransactionsForTransactionStateWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForTransactionStateWithoutSavingNewItem(newTransactions,idTransactionState,db);
                                }
                            }

							public List<Transaction> UpdateTransactionsForTransactionStateWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionState, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdTransactionState == idTransactionState;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactions;
                            }


                            public List<Transaction> UpdateTransactionsForTransactionState(List<Transaction> newTransactions,long idTransactionState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForTransactionState(newTransactions,idTransactionState,db);
                                }
                            }

                            public List<Transaction> UpdateTransactionsForTransactionState(List<Transaction> newTransactions,long idTransactionState, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdTransactionState == idTransactionState;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactions.ForEach(pc =>
                                {
                                    pc.IdTransactionState = idTransactionState;
                                    DaoFactories.Instance.TransactionDao.SaveOnlyTransaction(pc, db);
                                });
                                return newTransactions;
                            }

                        


    



		}
			public partial class TransactionTemplateDao :ITransactionTemplateDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TransactionTemplateDao(){
			
			}

			public TransactionTemplateDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TransactionTemplate> GetAllTransactionTemplates(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionTemplates(db, shouldRemap);
                }
            }

            public List<TransactionTemplate> GetAllTransactionTemplates(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionTemplateList(db.TransactionTemplates.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TransactionTemplates.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionTemplate, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionTemplatesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionTemplate, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionTemplate, dynamic> orderExpression = null)
            {
				IQueryable<TransactionTemplate> query =  db.TransactionTemplates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionTemplate> baseListReturnType = new BaseListReturnType<TransactionTemplate>();

                IQueryable<TransactionTemplate> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionTemplate" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionTemplate, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionTemplateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesWithTransactionPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null,bool shouldRemap = false, Func<TransactionTemplate, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTemplatesByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesWithBanksDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null,bool shouldRemap = false, Func<TransactionTemplate, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTemplatesByPage(sortingPagingInfo, db,expression,new List<string>(){"Banks"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null,bool shouldRemap = false, Func<TransactionTemplate, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTemplatesByPage(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionTemplate, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionTemplatesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionTemplate, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionTemplate, dynamic> orderExpression = null)
            {
				IQueryable<TransactionTemplate> query =  db.TransactionTemplates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionTemplate> baseListReturnType = new BaseListReturnType<TransactionTemplate>();

                IQueryable<TransactionTemplate> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionTemplate" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionTemplate, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionTemplateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesWithTransactionPresetsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null,bool shouldRemap = false, Func<TransactionTemplate, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTemplatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesWithBanksDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null,bool shouldRemap = false, Func<TransactionTemplate, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTemplatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Banks"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesWithTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null,bool shouldRemap = false, Func<TransactionTemplate, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTemplatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesWithTransactionPresetsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTemplateWitDetails(new List<string>(){"TransactionPresets"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesWithBanksDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTemplateWitDetails(new List<string>(){"Banks"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesWithTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTemplateWitDetails(new List<string>(){"Transactions"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplateWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionTemplateWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TransactionTemplate> GetAllTransactionTemplateWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionTemplate> query =  db.TransactionTemplates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionTemplate> baseListReturnType = new BaseListReturnType<TransactionTemplate>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionTemplateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TransactionTemplate GetTransactionTemplate(long idTransactionTemplate,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionTemplate(idTransactionTemplate, db,shouldRemap);
                }
            }
                        public TransactionTemplate GetTransactionTemplate(long idTransactionTemplate, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionTemplateSingle(db.TransactionTemplates.Where(p => p.IdTransactionTemplate == idTransactionTemplate && p.IsDeactivated != true).FirstOrDefault());

                return db.TransactionTemplates.Where(p => p.IdTransactionTemplate == idTransactionTemplate && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TransactionTemplate GetTransactionTemplateCustom( Expression<Func<TransactionTemplate, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionTemplateCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TransactionTemplate GetTransactionTemplateCustom( SubscriptionEntities db , Expression<Func<TransactionTemplate, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TransactionTemplate> query =  db.TransactionTemplates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransactionTemplateSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TransactionTemplate> GetTransactionTemplateCustomList( Expression<Func<TransactionTemplate, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionTemplate, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionTemplateCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TransactionTemplate> GetTransactionTemplateCustomList(  SubscriptionEntities db , Expression<Func<TransactionTemplate, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionTemplate, dynamic> orderExpression = null)
			{
				IQueryable<TransactionTemplate> query =  db.TransactionTemplates;
                BaseListReturnType<TransactionTemplate> baseListReturnType = new BaseListReturnType<TransactionTemplate>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionTemplateList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TransactionTemplate GetTransactionTemplateWithTransactionPresetsDetails(long idTransactionTemplate,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionTemplateWithDetails(idTransactionTemplate,new List<string>(){"TransactionPresets"},shouldRemap);
					}
				}

            //IdTransactionTemplate -- Many


							public TransactionTemplate GetTransactionTemplateWithBanksDetails(long idTransactionTemplate,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionTemplateWithDetails(idTransactionTemplate,new List<string>(){"Banks"},shouldRemap);
					}
				}

            //IdTransactionTemplate -- Many


							public TransactionTemplate GetTransactionTemplateWithTransactionsDetails(long idTransactionTemplate,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionTemplateWithDetails(idTransactionTemplate,new List<string>(){"Transactions"},shouldRemap);
					}
				}

            //IdTransactionTemplate -- Many


			


			public TransactionTemplate GetTransactionTemplateWithDetails(long idTransactionTemplate, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionTemplateWithDetails(idTransactionTemplate, db,includes,shouldRemap);
                }
            }

            public TransactionTemplate GetTransactionTemplateWithDetails(long idTransactionTemplate, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionTemplate> query =  db.TransactionTemplates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransactionTemplateSingle(query
						.Where(p => p.IdTransactionTemplate == idTransactionTemplate && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransactionTemplate == idTransactionTemplate && p.IsDeactivated != true).FirstOrDefault();
            }

            public TransactionTemplate GetTransactionTemplateWitDetails(long idTransactionTemplate,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionTemplateWitDetails(idTransactionTemplate, db,shouldRemap);
                }
            }

            public TransactionTemplate GetTransactionTemplateWitDetails(long idTransactionTemplate, SubscriptionEntities db,bool shouldRemap = false)
            {
				TransactionTemplate _TransactionTemplate = db.TransactionTemplates

					.Include("TransactionPresets")
					.Include("Banks")
					.Include("Transactions")
								.Where(p => p.IdTransactionTemplate == idTransactionTemplate && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransactionTemplateSingle(_TransactionTemplate);

				return  _TransactionTemplate;
            }

            public List<TransactionTemplate> GetTransactionTemplateListByIdList(List<long> transactionTemplateIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionTemplateListByIdList(transactionTemplateIds, db);
                }
            }
            public List<TransactionTemplate> GetTransactionTemplateListByIdList(List<long> transactionTemplateIds, SubscriptionEntities db)
            {
                return db.TransactionTemplates.Where(p => p.IsDeactivated != true && transactionTemplateIds.Contains(p.IdTransactionTemplate.Value)).ToList();
            }


            public void SaveTransactionTemplate(TransactionTemplate transactionTemplate)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransactionTemplate(transactionTemplate, db);
                }
            }

            public void SaveTransactionTemplate(TransactionTemplate transactionTemplate, SubscriptionEntities db)
            {
				                
                if (transactionTemplate.IdTransactionTemplate.HasValue){
					var transactionTemplateFromDb = db.TransactionTemplates.Where(p => p.IdTransactionTemplate == transactionTemplate.IdTransactionTemplate).FirstOrDefault();
													transactionTemplateFromDb.IsDeactivated = transactionTemplate.IsDeactivated;
													transactionTemplateFromDb.Description = transactionTemplate.Description;
									}
                else{
                                        db.TransactionTemplates.Add(transactionTemplate);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransactionTemplate(TransactionTemplate transactionTemplate)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransactionTemplate(transactionTemplate, db);
                }
            }

            public void SaveOnlyTransactionTemplate(TransactionTemplate transactionTemplate, SubscriptionEntities db)
            {
			                    if (transactionTemplate.IdTransactionTemplate.HasValue){
					var transactionTemplateFromDb = db.TransactionTemplates.Where(p => p.IdTransactionTemplate == transactionTemplate.IdTransactionTemplate).FirstOrDefault();
													transactionTemplateFromDb.IsDeactivated = transactionTemplate.IsDeactivated;
													transactionTemplateFromDb.Description = transactionTemplate.Description;
										 db.SaveChanges();

				}
                else{
					TransactionTemplate _transactionTemplate = new TransactionTemplate();
																	_transactionTemplate.IsDeactivated = transactionTemplate.IsDeactivated;
													_transactionTemplate.Description = transactionTemplate.Description;
					

                    db.TransactionTemplates.Add(_transactionTemplate);
					db.SaveChanges();
					transactionTemplate.IdTransactionTemplate =  _transactionTemplate.IdTransactionTemplate;
                    
                }
            }

            public void DeleteTransactionTemplate(TransactionTemplate transactionTemplate)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransactionTemplate(transactionTemplate, db);
                }
            }

            public void DeleteTransactionTemplate(TransactionTemplate transactionTemplate, SubscriptionEntities db)
            {
								var transactionTemplateFromDb = GetTransactionTemplate(transactionTemplate.IdTransactionTemplate.Value,db);
				transactionTemplateFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransactionTemplate(TransactionTemplate transactionTemplate)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransactionTemplate(transactionTemplate, db);
                }
            }

            public void DeletePermanentlyTransactionTemplate(TransactionTemplate transactionTemplate, SubscriptionEntities db)
            {
								var transactionTemplateFromDb = GetTransactionTemplate(transactionTemplate.IdTransactionTemplate.Value,db);
				
				db.TransactionTemplates.Remove(transactionTemplateFromDb);
                db.SaveChanges();
            }


            
							public List<TransactionPreset> UpdateTransactionPresetsForTransactionTemplateWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idTransactionTemplate)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionPresetsForTransactionTemplateWithoutSavingNewItem(newTransactionPresets,idTransactionTemplate,db);
                                }
                            }

							public List<TransactionPreset> UpdateTransactionPresetsForTransactionTemplateWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idTransactionTemplate, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionPreset, bool>> expressionBuilder = p => p.IdTransactionTemplate == idTransactionTemplate;
                                var oldTransactionPresets = DaoFactories.Instance.TransactionPresetDao.GetTransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionPresets.EntityList.Select(pc => pc.IdTransactionPreset).Except(newTransactionPresets.Where(pc => pc.IdTransactionPreset.HasValue).Select(pc => pc.IdTransactionPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionPresets;
                            }


                            public List<TransactionPreset> UpdateTransactionPresetsForTransactionTemplate(List<TransactionPreset> newTransactionPresets,long idTransactionTemplate)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionPresetsForTransactionTemplate(newTransactionPresets,idTransactionTemplate,db);
                                }
                            }

                            public List<TransactionPreset> UpdateTransactionPresetsForTransactionTemplate(List<TransactionPreset> newTransactionPresets,long idTransactionTemplate, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionPreset, bool>> expressionBuilder = p => p.IdTransactionTemplate == idTransactionTemplate;
                                var oldTransactionPresets = DaoFactories.Instance.TransactionPresetDao.GetTransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionPresets.EntityList.Select(pc => pc.IdTransactionPreset).Except(newTransactionPresets.Where(pc => pc.IdTransactionPreset.HasValue).Select(pc => pc.IdTransactionPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionPresets.ForEach(pc =>
                                {
                                    pc.IdTransactionTemplate = idTransactionTemplate;
                                    DaoFactories.Instance.TransactionPresetDao.SaveOnlyTransactionPreset(pc, db);
                                });
                                return newTransactionPresets;
                            }

                        
							public List<Bank> UpdateBanksForTransactionTemplateWithoutSavingNewItem(List<Bank> newBanks,long idTransactionTemplate)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBanksForTransactionTemplateWithoutSavingNewItem(newBanks,idTransactionTemplate,db);
                                }
                            }

							public List<Bank> UpdateBanksForTransactionTemplateWithoutSavingNewItem(List<Bank> newBanks,long idTransactionTemplate, SubscriptionEntities  db)
                            {
                                Expression<Func<Bank, bool>> expressionBuilder = p => p.IdTransactionTemplate == idTransactionTemplate;
                                var oldBanks = DaoFactories.Instance.BankDao.GetBankCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBanks.EntityList.Select(pc => pc.IdBank).Except(newBanks.Where(pc => pc.IdBank.HasValue).Select(pc => pc.IdBank)).ToList();
                                var itemsTobeDeleted = oldBanks.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBank)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBanks;
                            }


                            public List<Bank> UpdateBanksForTransactionTemplate(List<Bank> newBanks,long idTransactionTemplate)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBanksForTransactionTemplate(newBanks,idTransactionTemplate,db);
                                }
                            }

                            public List<Bank> UpdateBanksForTransactionTemplate(List<Bank> newBanks,long idTransactionTemplate, SubscriptionEntities  db)
                            {
                                Expression<Func<Bank, bool>> expressionBuilder = p => p.IdTransactionTemplate == idTransactionTemplate;
                                var oldBanks = DaoFactories.Instance.BankDao.GetBankCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBanks.EntityList.Select(pc => pc.IdBank).Except(newBanks.Where(pc => pc.IdBank.HasValue).Select(pc => pc.IdBank)).ToList();
                                var itemsTobeDeleted = oldBanks.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBank)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBanks.ForEach(pc =>
                                {
                                    pc.IdTransactionTemplate = idTransactionTemplate;
                                    DaoFactories.Instance.BankDao.SaveOnlyBank(pc, db);
                                });
                                return newBanks;
                            }

                        
							public List<Transaction> UpdateTransactionsForTransactionTemplateWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionTemplate)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForTransactionTemplateWithoutSavingNewItem(newTransactions,idTransactionTemplate,db);
                                }
                            }

							public List<Transaction> UpdateTransactionsForTransactionTemplateWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionTemplate, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdTransactionTemplate == idTransactionTemplate;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactions;
                            }


                            public List<Transaction> UpdateTransactionsForTransactionTemplate(List<Transaction> newTransactions,long idTransactionTemplate)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForTransactionTemplate(newTransactions,idTransactionTemplate,db);
                                }
                            }

                            public List<Transaction> UpdateTransactionsForTransactionTemplate(List<Transaction> newTransactions,long idTransactionTemplate, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdTransactionTemplate == idTransactionTemplate;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactions.ForEach(pc =>
                                {
                                    pc.IdTransactionTemplate = idTransactionTemplate;
                                    DaoFactories.Instance.TransactionDao.SaveOnlyTransaction(pc, db);
                                });
                                return newTransactions;
                            }

                        


    



		}
			public partial class TransactionTypeDao :ITransactionTypeDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public TransactionTypeDao(){
			
			}

			public TransactionTypeDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<TransactionType> GetAllTransactionTypes(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionTypes(db, shouldRemap);
                }
            }

            public List<TransactionType> GetAllTransactionTypes(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionTypeList(db.TransactionTypes.Where(p => p.IsDeactivated != true).ToList());
				
				return db.TransactionTypes.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<TransactionType> GetAllTransactionTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionTypesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionType> GetAllTransactionTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionType, dynamic> orderExpression = null)
            {
				IQueryable<TransactionType> query =  db.TransactionTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionType> baseListReturnType = new BaseListReturnType<TransactionType>();

                IQueryable<TransactionType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionType" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionType, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionType> GetAllTransactionTypesWithTransactionPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionType, bool>> expression = null,bool shouldRemap = false, Func<TransactionType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionType> GetAllTransactionTypesWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionType, bool>> expression = null,bool shouldRemap = false, Func<TransactionType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTypesByPage(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<TransactionType> GetAllTransactionTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionType, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionTypesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<TransactionType> GetAllTransactionTypesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<TransactionType, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<TransactionType, dynamic> orderExpression = null)
            {
				IQueryable<TransactionType> query =  db.TransactionTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionType> baseListReturnType = new BaseListReturnType<TransactionType>();

                IQueryable<TransactionType> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdTransactionType" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<TransactionType, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<TransactionType> GetAllTransactionTypesWithTransactionPresetsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionType, bool>> expression = null,bool shouldRemap = false, Func<TransactionType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<TransactionType> GetAllTransactionTypesWithTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionType, bool>> expression = null,bool shouldRemap = false, Func<TransactionType, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTypesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<TransactionType> GetAllTransactionTypesWithTransactionPresetsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTypeWitDetails(new List<string>(){"TransactionPresets"},shouldRemap);
					}
				}
							public BaseListReturnType<TransactionType> GetAllTransactionTypesWithTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllTransactionTypeWitDetails(new List<string>(){"Transactions"},shouldRemap);
					}
				}
			

			public BaseListReturnType<TransactionType> GetAllTransactionTypeWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllTransactionTypeWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<TransactionType> GetAllTransactionTypeWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionType> query =  db.TransactionTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<TransactionType> baseListReturnType = new BaseListReturnType<TransactionType>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionTypeList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public TransactionType GetTransactionType(long idTransactionType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionType(idTransactionType, db,shouldRemap);
                }
            }
                        public TransactionType GetTransactionType(long idTransactionType, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapTransactionTypeSingle(db.TransactionTypes.Where(p => p.IdTransactionType == idTransactionType && p.IsDeactivated != true).FirstOrDefault());

                return db.TransactionTypes.Where(p => p.IdTransactionType == idTransactionType && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public TransactionType GetTransactionTypeCustom( Expression<Func<TransactionType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionTypeCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public TransactionType GetTransactionTypeCustom( SubscriptionEntities db , Expression<Func<TransactionType, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<TransactionType> query =  db.TransactionTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapTransactionTypeSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<TransactionType> GetTransactionTypeCustomList( Expression<Func<TransactionType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionType, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetTransactionTypeCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<TransactionType> GetTransactionTypeCustomList(  SubscriptionEntities db , Expression<Func<TransactionType, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<TransactionType, dynamic> orderExpression = null)
			{
				IQueryable<TransactionType> query =  db.TransactionTypes;
                BaseListReturnType<TransactionType> baseListReturnType = new BaseListReturnType<TransactionType>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapTransactionTypeList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public TransactionType GetTransactionTypeWithTransactionPresetsDetails(long idTransactionType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionTypeWithDetails(idTransactionType,new List<string>(){"TransactionPresets"},shouldRemap);
					}
				}

            //IdTransactionType -- Many


							public TransactionType GetTransactionTypeWithTransactionsDetails(long idTransactionType,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetTransactionTypeWithDetails(idTransactionType,new List<string>(){"Transactions"},shouldRemap);
					}
				}

            //IdTransactionType -- Many


			


			public TransactionType GetTransactionTypeWithDetails(long idTransactionType, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionTypeWithDetails(idTransactionType, db,includes,shouldRemap);
                }
            }

            public TransactionType GetTransactionTypeWithDetails(long idTransactionType, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<TransactionType> query =  db.TransactionTypes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapTransactionTypeSingle(query
						.Where(p => p.IdTransactionType == idTransactionType && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdTransactionType == idTransactionType && p.IsDeactivated != true).FirstOrDefault();
            }

            public TransactionType GetTransactionTypeWitDetails(long idTransactionType,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionTypeWitDetails(idTransactionType, db,shouldRemap);
                }
            }

            public TransactionType GetTransactionTypeWitDetails(long idTransactionType, SubscriptionEntities db,bool shouldRemap = false)
            {
				TransactionType _TransactionType = db.TransactionTypes

					.Include("TransactionPresets")
					.Include("Transactions")
								.Where(p => p.IdTransactionType == idTransactionType && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapTransactionTypeSingle(_TransactionType);

				return  _TransactionType;
            }

            public List<TransactionType> GetTransactionTypeListByIdList(List<long> transactionTypeIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetTransactionTypeListByIdList(transactionTypeIds, db);
                }
            }
            public List<TransactionType> GetTransactionTypeListByIdList(List<long> transactionTypeIds, SubscriptionEntities db)
            {
                return db.TransactionTypes.Where(p => p.IsDeactivated != true && transactionTypeIds.Contains(p.IdTransactionType.Value)).ToList();
            }


            public void SaveTransactionType(TransactionType transactionType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveTransactionType(transactionType, db);
                }
            }

            public void SaveTransactionType(TransactionType transactionType, SubscriptionEntities db)
            {
				                
                if (transactionType.IdTransactionType.HasValue){
					var transactionTypeFromDb = db.TransactionTypes.Where(p => p.IdTransactionType == transactionType.IdTransactionType).FirstOrDefault();
													transactionTypeFromDb.Description = transactionType.Description;
													transactionTypeFromDb.IsDeactivated = transactionType.IsDeactivated;
									}
                else{
                                        db.TransactionTypes.Add(transactionType);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyTransactionType(TransactionType transactionType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyTransactionType(transactionType, db);
                }
            }

            public void SaveOnlyTransactionType(TransactionType transactionType, SubscriptionEntities db)
            {
			                    if (transactionType.IdTransactionType.HasValue){
					var transactionTypeFromDb = db.TransactionTypes.Where(p => p.IdTransactionType == transactionType.IdTransactionType).FirstOrDefault();
													transactionTypeFromDb.Description = transactionType.Description;
													transactionTypeFromDb.IsDeactivated = transactionType.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					TransactionType _transactionType = new TransactionType();
																	_transactionType.Description = transactionType.Description;
													_transactionType.IsDeactivated = transactionType.IsDeactivated;
					

                    db.TransactionTypes.Add(_transactionType);
					db.SaveChanges();
					transactionType.IdTransactionType =  _transactionType.IdTransactionType;
                    
                }
            }

            public void DeleteTransactionType(TransactionType transactionType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteTransactionType(transactionType, db);
                }
            }

            public void DeleteTransactionType(TransactionType transactionType, SubscriptionEntities db)
            {
								var transactionTypeFromDb = GetTransactionType(transactionType.IdTransactionType.Value,db);
				transactionTypeFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyTransactionType(TransactionType transactionType)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyTransactionType(transactionType, db);
                }
            }

            public void DeletePermanentlyTransactionType(TransactionType transactionType, SubscriptionEntities db)
            {
								var transactionTypeFromDb = GetTransactionType(transactionType.IdTransactionType.Value,db);
				
				db.TransactionTypes.Remove(transactionTypeFromDb);
                db.SaveChanges();
            }


            
							public List<TransactionPreset> UpdateTransactionPresetsForTransactionTypeWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idTransactionType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionPresetsForTransactionTypeWithoutSavingNewItem(newTransactionPresets,idTransactionType,db);
                                }
                            }

							public List<TransactionPreset> UpdateTransactionPresetsForTransactionTypeWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idTransactionType, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionPreset, bool>> expressionBuilder = p => p.IdTransactionType == idTransactionType;
                                var oldTransactionPresets = DaoFactories.Instance.TransactionPresetDao.GetTransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionPresets.EntityList.Select(pc => pc.IdTransactionPreset).Except(newTransactionPresets.Where(pc => pc.IdTransactionPreset.HasValue).Select(pc => pc.IdTransactionPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactionPresets;
                            }


                            public List<TransactionPreset> UpdateTransactionPresetsForTransactionType(List<TransactionPreset> newTransactionPresets,long idTransactionType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionPresetsForTransactionType(newTransactionPresets,idTransactionType,db);
                                }
                            }

                            public List<TransactionPreset> UpdateTransactionPresetsForTransactionType(List<TransactionPreset> newTransactionPresets,long idTransactionType, SubscriptionEntities  db)
                            {
                                Expression<Func<TransactionPreset, bool>> expressionBuilder = p => p.IdTransactionType == idTransactionType;
                                var oldTransactionPresets = DaoFactories.Instance.TransactionPresetDao.GetTransactionPresetCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactionPresets.EntityList.Select(pc => pc.IdTransactionPreset).Except(newTransactionPresets.Where(pc => pc.IdTransactionPreset.HasValue).Select(pc => pc.IdTransactionPreset)).ToList();
                                var itemsTobeDeleted = oldTransactionPresets.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransactionPreset)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactionPresets.ForEach(pc =>
                                {
                                    pc.IdTransactionType = idTransactionType;
                                    DaoFactories.Instance.TransactionPresetDao.SaveOnlyTransactionPreset(pc, db);
                                });
                                return newTransactionPresets;
                            }

                        
							public List<Transaction> UpdateTransactionsForTransactionTypeWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForTransactionTypeWithoutSavingNewItem(newTransactions,idTransactionType,db);
                                }
                            }

							public List<Transaction> UpdateTransactionsForTransactionTypeWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionType, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdTransactionType == idTransactionType;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactions;
                            }


                            public List<Transaction> UpdateTransactionsForTransactionType(List<Transaction> newTransactions,long idTransactionType)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForTransactionType(newTransactions,idTransactionType,db);
                                }
                            }

                            public List<Transaction> UpdateTransactionsForTransactionType(List<Transaction> newTransactions,long idTransactionType, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdTransactionType == idTransactionType;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactions.ForEach(pc =>
                                {
                                    pc.IdTransactionType = idTransactionType;
                                    DaoFactories.Instance.TransactionDao.SaveOnlyTransaction(pc, db);
                                });
                                return newTransactions;
                            }

                        


    



		}
			public partial class UserDao :IUserDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public UserDao(){
			
			}

			public UserDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<User> GetAllUsers(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUsers(db, shouldRemap);
                }
            }

            public List<User> GetAllUsers(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapUserList(db.Users.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Users.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<User> GetAllUsersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUsersByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<User> GetAllUsersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<User, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
            {
				IQueryable<User> query =  db.Users;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<User> baseListReturnType = new BaseListReturnType<User>();

                IQueryable<User> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdUser" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<User, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Email.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Email.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.PasswordHash.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.SecurityStamp.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.PhoneNumber.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.UserName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.FirstName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.LastName.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUserList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<User> GetAllUsersWithBankStatementStagingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPage(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithOrdersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPage(sortingPagingInfo, db,expression,new List<string>(){"Orders"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithPaymentsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPage(sortingPagingInfo, db,expression,new List<string>(){"Payments"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithReceiptsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPage(sortingPagingInfo, db,expression,new List<string>(){"Receipts"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithRequestType_UserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPage(sortingPagingInfo, db,expression,new List<string>(){"RequestType_User"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPage(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithPersonDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPage(sortingPagingInfo, db,expression,new List<string>(){"Person"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<User> GetAllUsersByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUsersByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<User> GetAllUsersByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<User, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
            {
				IQueryable<User> query =  db.Users;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<User> baseListReturnType = new BaseListReturnType<User>();

                IQueryable<User> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdUser" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<User, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUserList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<User> GetAllUsersWithBankStatementStagingsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithOrdersDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Orders"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithPaymentsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Payments"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithReceiptsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Receipts"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithRequestType_UserDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"RequestType_User"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithTransactionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithPersonDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap = false, Func<User, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUsersByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Person"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<User> GetAllUsersWithBankStatementStagingsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUserWitDetails(new List<string>(){"BankStatementStagings"},shouldRemap);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithOrdersDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUserWitDetails(new List<string>(){"Orders"},shouldRemap);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithPaymentsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUserWitDetails(new List<string>(){"Payments"},shouldRemap);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithReceiptsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUserWitDetails(new List<string>(){"Receipts"},shouldRemap);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithRequestType_UserDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUserWitDetails(new List<string>(){"RequestType_User"},shouldRemap);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithTransactionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUserWitDetails(new List<string>(){"Transactions"},shouldRemap);
					}
				}
							public BaseListReturnType<User> GetAllUsersWithPersonDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUserWitDetails(new List<string>(){"Person"},shouldRemap);
					}
				}
			

			public BaseListReturnType<User> GetAllUserWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUserWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<User> GetAllUserWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<User> query =  db.Users;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<User> baseListReturnType = new BaseListReturnType<User>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUserList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public User GetUser(long idUser,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser(idUser, db,shouldRemap);
                }
            }
                        public User GetUser(long idUser, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapUserSingle(db.Users.Where(p => p.IdUser == idUser && p.IsDeactivated != true).FirstOrDefault());

                return db.Users.Where(p => p.IdUser == idUser && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public User GetUserCustom( Expression<Func<User, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetUserCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public User GetUserCustom( SubscriptionEntities db , Expression<Func<User, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<User> query =  db.Users;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapUserSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<User> GetUserCustomList( Expression<Func<User, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<User, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetUserCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<User> GetUserCustomList(  SubscriptionEntities db , Expression<Func<User, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<User, dynamic> orderExpression = null)
			{
				IQueryable<User> query =  db.Users;
                BaseListReturnType<User> baseListReturnType = new BaseListReturnType<User>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUserList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public User GetUserWithBankStatementStagingsDetails(long idUser,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetUserWithDetails(idUser,new List<string>(){"BankStatementStagings"},shouldRemap);
					}
				}

            //IdUserUploadedBy -- Many


							public User GetUserWithOrdersDetails(long idUser,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetUserWithDetails(idUser,new List<string>(){"Orders"},shouldRemap);
					}
				}

            //IdUserAuthor -- Many


							public User GetUserWithPaymentsDetails(long idUser,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetUserWithDetails(idUser,new List<string>(){"Payments"},shouldRemap);
					}
				}

            //IdUserAuthor -- Many


							public User GetUserWithReceiptsDetails(long idUser,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetUserWithDetails(idUser,new List<string>(){"Receipts"},shouldRemap);
					}
				}

            //IdUser -- Many


							public User GetUserWithRequestType_UserDetails(long idUser,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetUserWithDetails(idUser,new List<string>(){"RequestType_User"},shouldRemap);
					}
				}

            //IdUser -- Many


							public User GetUserWithTransactionsDetails(long idUser,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetUserWithDetails(idUser,new List<string>(){"Transactions"},shouldRemap);
					}
				}

            //IdUserAuthor -- Many


							public User GetUserWithPersonDetails(long idUser,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetUserWithDetails(idUser,new List<string>(){"Person"},shouldRemap);
					}
				}

            //IdPerson -- ZeroOrOne

                public BaseListReturnType<User> GetAllUserListByPerson(long idPerson)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllUserListByPerson(idPerson, db);
                    }
                }
                public BaseListReturnType<User> GetAllUserListByPerson(long idPerson, SubscriptionEntities db)
                {
                    Expression<Func<User, bool>> expression = property=> property.IdPerson == idPerson && property.IsDeactivated !=true;
                    return GetUserCustomList(db, expression, null, true);
                }
                public BaseListReturnType<User> GetAllUserListByPersonByPage(long idPerson, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllUserListByPersonByPage(idPerson, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<User> GetAllUserListByPersonByPage(long idPerson, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<User, bool>> expression = property => property.IdPerson == idPerson && property.IsDeactivated !=true;
                    return GetAllUsersByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public User GetUserWithDetails(long idUser, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUserWithDetails(idUser, db,includes,shouldRemap);
                }
            }

            public User GetUserWithDetails(long idUser, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<User> query =  db.Users;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapUserSingle(query
						.Where(p => p.IdUser == idUser && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdUser == idUser && p.IsDeactivated != true).FirstOrDefault();
            }

            public User GetUserWitDetails(long idUser,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUserWitDetails(idUser, db,shouldRemap);
                }
            }

            public User GetUserWitDetails(long idUser, SubscriptionEntities db,bool shouldRemap = false)
            {
				User _User = db.Users

					.Include("BankStatementStagings")
					.Include("Orders")
					.Include("Payments")
					.Include("Receipts")
					.Include("RequestType_User")
					.Include("Transactions")
					.Include("Person")
								.Where(p => p.IdUser == idUser && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapUserSingle(_User);

				return  _User;
            }

            public List<User> GetUserListByIdList(List<long> userIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUserListByIdList(userIds, db);
                }
            }
            public List<User> GetUserListByIdList(List<long> userIds, SubscriptionEntities db)
            {
                return db.Users.Where(p => p.IsDeactivated != true && userIds.Contains(p.IdUser.Value)).ToList();
            }


            public void SaveUser(User user)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveUser(user, db);
                }
            }

            public void SaveUser(User user, SubscriptionEntities db)
            {
									if (user.Person != null) 
						DaoFactories.Instance.PersonDao.SavePerson(user.Person, db);
				                
                if (user.IdUser.HasValue){
					var userFromDb = db.Users.Where(p => p.IdUser == user.IdUser).FirstOrDefault();
													userFromDb.Email = user.Email;
													userFromDb.PasswordHash = user.PasswordHash;
													userFromDb.SecurityStamp = user.SecurityStamp;
													userFromDb.PhoneNumber = user.PhoneNumber;
													userFromDb.LockoutEnabled = user.LockoutEnabled;
													userFromDb.UserName = user.UserName;
													userFromDb.IsDeactivated = user.IsDeactivated;
													userFromDb.IdPerson = user.IdPerson;
													userFromDb.FirstName = user.FirstName;
													userFromDb.LastName = user.LastName;
													userFromDb.NeedPasswordChange = user.NeedPasswordChange;
													userFromDb.EmailConfirmed = user.EmailConfirmed;
													userFromDb.PhoneNumberConfirmed = user.PhoneNumberConfirmed;
													userFromDb.TwoFactorEnabled = user.TwoFactorEnabled;
													userFromDb.LockoutEndDateUtc = user.LockoutEndDateUtc;
													userFromDb.AccessFailedCount = user.AccessFailedCount;
									}
                else{
                                                //fix for saving without duplicating items in db
                              user.Person = null;
                                                db.Users.Add(user);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyUser(User user)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyUser(user, db);
                }
            }

            public void SaveOnlyUser(User user, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // user.Person = null;
                                            if (user.IdUser.HasValue){
					var userFromDb = db.Users.Where(p => p.IdUser == user.IdUser).FirstOrDefault();
													userFromDb.Email = user.Email;
													userFromDb.PasswordHash = user.PasswordHash;
													userFromDb.SecurityStamp = user.SecurityStamp;
													userFromDb.PhoneNumber = user.PhoneNumber;
													userFromDb.LockoutEnabled = user.LockoutEnabled;
													userFromDb.UserName = user.UserName;
													userFromDb.IsDeactivated = user.IsDeactivated;
													userFromDb.IdPerson = user.IdPerson;
													userFromDb.FirstName = user.FirstName;
													userFromDb.LastName = user.LastName;
													userFromDb.NeedPasswordChange = user.NeedPasswordChange;
													userFromDb.EmailConfirmed = user.EmailConfirmed;
													userFromDb.PhoneNumberConfirmed = user.PhoneNumberConfirmed;
													userFromDb.TwoFactorEnabled = user.TwoFactorEnabled;
													userFromDb.LockoutEndDateUtc = user.LockoutEndDateUtc;
													userFromDb.AccessFailedCount = user.AccessFailedCount;
										 db.SaveChanges();

				}
                else{
					User _user = new User();
																	_user.Email = user.Email;
													_user.PasswordHash = user.PasswordHash;
													_user.SecurityStamp = user.SecurityStamp;
													_user.PhoneNumber = user.PhoneNumber;
													_user.LockoutEnabled = user.LockoutEnabled;
													_user.UserName = user.UserName;
													_user.IsDeactivated = user.IsDeactivated;
													_user.IdPerson = user.IdPerson;
													_user.FirstName = user.FirstName;
													_user.LastName = user.LastName;
													_user.NeedPasswordChange = user.NeedPasswordChange;
													_user.EmailConfirmed = user.EmailConfirmed;
													_user.PhoneNumberConfirmed = user.PhoneNumberConfirmed;
													_user.TwoFactorEnabled = user.TwoFactorEnabled;
													_user.LockoutEndDateUtc = user.LockoutEndDateUtc;
													_user.AccessFailedCount = user.AccessFailedCount;
					

                    db.Users.Add(_user);
					db.SaveChanges();
					user.IdUser =  _user.IdUser;
                    
                }
            }

            public void DeleteUser(User user)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteUser(user, db);
                }
            }

            public void DeleteUser(User user, SubscriptionEntities db)
            {
								var userFromDb = GetUser(user.IdUser.Value,db);
				userFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyUser(User user)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyUser(user, db);
                }
            }

            public void DeletePermanentlyUser(User user, SubscriptionEntities db)
            {
								var userFromDb = GetUser(user.IdUser.Value,db);
				
				db.Users.Remove(userFromDb);
                db.SaveChanges();
            }


            
							public List<BankStatementStaging> UpdateBankStatementStagingsForUserWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idUser)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingsForUserWithoutSavingNewItem(newBankStatementStagings,idUser,db);
                                }
                            }

							public List<BankStatementStaging> UpdateBankStatementStagingsForUserWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idUser, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStaging, bool>> expressionBuilder = p => p.IdUserUploadedBy == idUser;
                                var oldBankStatementStagings = DaoFactories.Instance.BankStatementStagingDao.GetBankStatementStagingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagings.EntityList.Select(pc => pc.IdBankStatementStaging).Except(newBankStatementStagings.Where(pc => pc.IdBankStatementStaging.HasValue).Select(pc => pc.IdBankStatementStaging)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStaging)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newBankStatementStagings;
                            }


                            public List<BankStatementStaging> UpdateBankStatementStagingsForUser(List<BankStatementStaging> newBankStatementStagings,long idUser)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateBankStatementStagingsForUser(newBankStatementStagings,idUser,db);
                                }
                            }

                            public List<BankStatementStaging> UpdateBankStatementStagingsForUser(List<BankStatementStaging> newBankStatementStagings,long idUser, SubscriptionEntities  db)
                            {
                                Expression<Func<BankStatementStaging, bool>> expressionBuilder = p => p.IdUserUploadedBy == idUser;
                                var oldBankStatementStagings = DaoFactories.Instance.BankStatementStagingDao.GetBankStatementStagingCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldBankStatementStagings.EntityList.Select(pc => pc.IdBankStatementStaging).Except(newBankStatementStagings.Where(pc => pc.IdBankStatementStaging.HasValue).Select(pc => pc.IdBankStatementStaging)).ToList();
                                var itemsTobeDeleted = oldBankStatementStagings.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdBankStatementStaging)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newBankStatementStagings.ForEach(pc =>
                                {
                                    pc.IdUserUploadedBy = idUser;
                                    DaoFactories.Instance.BankStatementStagingDao.SaveOnlyBankStatementStaging(pc, db);
                                });
                                return newBankStatementStagings;
                            }

                        
							public List<Order> UpdateOrdersForUserWithoutSavingNewItem(List<Order> newOrders,long idUser)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrdersForUserWithoutSavingNewItem(newOrders,idUser,db);
                                }
                            }

							public List<Order> UpdateOrdersForUserWithoutSavingNewItem(List<Order> newOrders,long idUser, SubscriptionEntities  db)
                            {
                                Expression<Func<Order, bool>> expressionBuilder = p => p.IdUserAuthor == idUser;
                                var oldOrders = DaoFactories.Instance.OrderDao.GetOrderCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrders.EntityList.Select(pc => pc.IdOrder).Except(newOrders.Where(pc => pc.IdOrder.HasValue).Select(pc => pc.IdOrder)).ToList();
                                var itemsTobeDeleted = oldOrders.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrder)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newOrders;
                            }


                            public List<Order> UpdateOrdersForUser(List<Order> newOrders,long idUser)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateOrdersForUser(newOrders,idUser,db);
                                }
                            }

                            public List<Order> UpdateOrdersForUser(List<Order> newOrders,long idUser, SubscriptionEntities  db)
                            {
                                Expression<Func<Order, bool>> expressionBuilder = p => p.IdUserAuthor == idUser;
                                var oldOrders = DaoFactories.Instance.OrderDao.GetOrderCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldOrders.EntityList.Select(pc => pc.IdOrder).Except(newOrders.Where(pc => pc.IdOrder.HasValue).Select(pc => pc.IdOrder)).ToList();
                                var itemsTobeDeleted = oldOrders.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdOrder)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newOrders.ForEach(pc =>
                                {
                                    pc.IdUserAuthor = idUser;
                                    DaoFactories.Instance.OrderDao.SaveOnlyOrder(pc, db);
                                });
                                return newOrders;
                            }

                        
							public List<Payment> UpdatePaymentsForUserWithoutSavingNewItem(List<Payment> newPayments,long idUser)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePaymentsForUserWithoutSavingNewItem(newPayments,idUser,db);
                                }
                            }

							public List<Payment> UpdatePaymentsForUserWithoutSavingNewItem(List<Payment> newPayments,long idUser, SubscriptionEntities  db)
                            {
                                Expression<Func<Payment, bool>> expressionBuilder = p => p.IdUserAuthor == idUser;
                                var oldPayments = DaoFactories.Instance.PaymentDao.GetPaymentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPayments.EntityList.Select(pc => pc.IdPayment).Except(newPayments.Where(pc => pc.IdPayment.HasValue).Select(pc => pc.IdPayment)).ToList();
                                var itemsTobeDeleted = oldPayments.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPayment)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newPayments;
                            }


                            public List<Payment> UpdatePaymentsForUser(List<Payment> newPayments,long idUser)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdatePaymentsForUser(newPayments,idUser,db);
                                }
                            }

                            public List<Payment> UpdatePaymentsForUser(List<Payment> newPayments,long idUser, SubscriptionEntities  db)
                            {
                                Expression<Func<Payment, bool>> expressionBuilder = p => p.IdUserAuthor == idUser;
                                var oldPayments = DaoFactories.Instance.PaymentDao.GetPaymentCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldPayments.EntityList.Select(pc => pc.IdPayment).Except(newPayments.Where(pc => pc.IdPayment.HasValue).Select(pc => pc.IdPayment)).ToList();
                                var itemsTobeDeleted = oldPayments.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdPayment)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newPayments.ForEach(pc =>
                                {
                                    pc.IdUserAuthor = idUser;
                                    DaoFactories.Instance.PaymentDao.SaveOnlyPayment(pc, db);
                                });
                                return newPayments;
                            }

                        
							public List<Receipt> UpdateReceiptsForUserWithoutSavingNewItem(List<Receipt> newReceipts,long idUser)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateReceiptsForUserWithoutSavingNewItem(newReceipts,idUser,db);
                                }
                            }

							public List<Receipt> UpdateReceiptsForUserWithoutSavingNewItem(List<Receipt> newReceipts,long idUser, SubscriptionEntities  db)
                            {
                                Expression<Func<Receipt, bool>> expressionBuilder = p => p.IdUser == idUser;
                                var oldReceipts = DaoFactories.Instance.ReceiptDao.GetReceiptCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldReceipts.EntityList.Select(pc => pc.IdReceipt).Except(newReceipts.Where(pc => pc.IdReceipt.HasValue).Select(pc => pc.IdReceipt)).ToList();
                                var itemsTobeDeleted = oldReceipts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdReceipt)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newReceipts;
                            }


                            public List<Receipt> UpdateReceiptsForUser(List<Receipt> newReceipts,long idUser)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateReceiptsForUser(newReceipts,idUser,db);
                                }
                            }

                            public List<Receipt> UpdateReceiptsForUser(List<Receipt> newReceipts,long idUser, SubscriptionEntities  db)
                            {
                                Expression<Func<Receipt, bool>> expressionBuilder = p => p.IdUser == idUser;
                                var oldReceipts = DaoFactories.Instance.ReceiptDao.GetReceiptCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldReceipts.EntityList.Select(pc => pc.IdReceipt).Except(newReceipts.Where(pc => pc.IdReceipt.HasValue).Select(pc => pc.IdReceipt)).ToList();
                                var itemsTobeDeleted = oldReceipts.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdReceipt)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newReceipts.ForEach(pc =>
                                {
                                    pc.IdUser = idUser;
                                    DaoFactories.Instance.ReceiptDao.SaveOnlyReceipt(pc, db);
                                });
                                return newReceipts;
                            }

                        
							public List<RequestType_User> UpdateRequestType_UserForUserWithoutSavingNewItem(List<RequestType_User> newRequestType_User,long idUser)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestType_UserForUserWithoutSavingNewItem(newRequestType_User,idUser,db);
                                }
                            }

							public List<RequestType_User> UpdateRequestType_UserForUserWithoutSavingNewItem(List<RequestType_User> newRequestType_User,long idUser, SubscriptionEntities  db)
                            {
                                Expression<Func<RequestType_User, bool>> expressionBuilder = p => p.IdUser == idUser;
                                var oldRequestType_User = DaoFactories.Instance.RequestType_UserDao.GetRequestType_UserCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequestType_User.EntityList.Select(pc => pc.IdRequestType_User).Except(newRequestType_User.Where(pc => pc.IdRequestType_User.HasValue).Select(pc => pc.IdRequestType_User)).ToList();
                                var itemsTobeDeleted = oldRequestType_User.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequestType_User)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newRequestType_User;
                            }


                            public List<RequestType_User> UpdateRequestType_UserForUser(List<RequestType_User> newRequestType_User,long idUser)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestType_UserForUser(newRequestType_User,idUser,db);
                                }
                            }

                            public List<RequestType_User> UpdateRequestType_UserForUser(List<RequestType_User> newRequestType_User,long idUser, SubscriptionEntities  db)
                            {
                                Expression<Func<RequestType_User, bool>> expressionBuilder = p => p.IdUser == idUser;
                                var oldRequestType_User = DaoFactories.Instance.RequestType_UserDao.GetRequestType_UserCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequestType_User.EntityList.Select(pc => pc.IdRequestType_User).Except(newRequestType_User.Where(pc => pc.IdRequestType_User.HasValue).Select(pc => pc.IdRequestType_User)).ToList();
                                var itemsTobeDeleted = oldRequestType_User.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequestType_User)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newRequestType_User.ForEach(pc =>
                                {
                                    pc.IdUser = idUser;
                                    DaoFactories.Instance.RequestType_UserDao.SaveOnlyRequestType_User(pc, db);
                                });
                                return newRequestType_User;
                            }

                        
							public List<Transaction> UpdateTransactionsForUserWithoutSavingNewItem(List<Transaction> newTransactions,long idUser)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForUserWithoutSavingNewItem(newTransactions,idUser,db);
                                }
                            }

							public List<Transaction> UpdateTransactionsForUserWithoutSavingNewItem(List<Transaction> newTransactions,long idUser, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdUserAuthor == idUser;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newTransactions;
                            }


                            public List<Transaction> UpdateTransactionsForUser(List<Transaction> newTransactions,long idUser)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateTransactionsForUser(newTransactions,idUser,db);
                                }
                            }

                            public List<Transaction> UpdateTransactionsForUser(List<Transaction> newTransactions,long idUser, SubscriptionEntities  db)
                            {
                                Expression<Func<Transaction, bool>> expressionBuilder = p => p.IdUserAuthor == idUser;
                                var oldTransactions = DaoFactories.Instance.TransactionDao.GetTransactionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldTransactions.EntityList.Select(pc => pc.IdTransaction).Except(newTransactions.Where(pc => pc.IdTransaction.HasValue).Select(pc => pc.IdTransaction)).ToList();
                                var itemsTobeDeleted = oldTransactions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdTransaction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newTransactions.ForEach(pc =>
                                {
                                    pc.IdUserAuthor = idUser;
                                    DaoFactories.Instance.TransactionDao.SaveOnlyTransaction(pc, db);
                                });
                                return newTransactions;
                            }

                        


    



		}
			public partial class User_PermissionDao :IUser_PermissionDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public User_PermissionDao(){
			
			}

			public User_PermissionDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<User_Permission> GetAllUser_Permission(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUser_Permission(db, shouldRemap);
                }
            }

            public List<User_Permission> GetAllUser_Permission(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapUser_PermissionList(db.User_Permission.Where(p => p.IsDeactivated != true).ToList());
				
				return db.User_Permission.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<User_Permission> GetAllUser_PermissionByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User_Permission, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUser_PermissionByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<User_Permission> GetAllUser_PermissionByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<User_Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User_Permission, dynamic> orderExpression = null)
            {
				IQueryable<User_Permission> query =  db.User_Permission;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<User_Permission> baseListReturnType = new BaseListReturnType<User_Permission>();

                IQueryable<User_Permission> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdUser_Permission" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<User_Permission, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUser_PermissionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<User_Permission> GetAllUser_PermissionWithPermissionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Permission, bool>> expression = null,bool shouldRemap = false, Func<User_Permission, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUser_PermissionByPage(sortingPagingInfo, db,expression,new List<string>(){"Permission"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<User_Permission> GetAllUser_PermissionByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User_Permission, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUser_PermissionByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<User_Permission> GetAllUser_PermissionByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<User_Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User_Permission, dynamic> orderExpression = null)
            {
				IQueryable<User_Permission> query =  db.User_Permission;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<User_Permission> baseListReturnType = new BaseListReturnType<User_Permission>();

                IQueryable<User_Permission> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdUser_Permission" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<User_Permission, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUser_PermissionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<User_Permission> GetAllUser_PermissionWithPermissionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Permission, bool>> expression = null,bool shouldRemap = false, Func<User_Permission, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUser_PermissionByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Permission"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<User_Permission> GetAllUser_PermissionWithPermissionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUser_PermissionWitDetails(new List<string>(){"Permission"},shouldRemap);
					}
				}
			

			public BaseListReturnType<User_Permission> GetAllUser_PermissionWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUser_PermissionWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<User_Permission> GetAllUser_PermissionWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<User_Permission> query =  db.User_Permission;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<User_Permission> baseListReturnType = new BaseListReturnType<User_Permission>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUser_PermissionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public User_Permission GetUser_Permission(long idUser_Permission,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser_Permission(idUser_Permission, db,shouldRemap);
                }
            }
                        public User_Permission GetUser_Permission(long idUser_Permission, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapUser_PermissionSingle(db.User_Permission.Where(p => p.IdUser_Permission == idUser_Permission && p.IsDeactivated != true).FirstOrDefault());

                return db.User_Permission.Where(p => p.IdUser_Permission == idUser_Permission && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public User_Permission GetUser_PermissionCustom( Expression<Func<User_Permission, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetUser_PermissionCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public User_Permission GetUser_PermissionCustom( SubscriptionEntities db , Expression<Func<User_Permission, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<User_Permission> query =  db.User_Permission;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapUser_PermissionSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<User_Permission> GetUser_PermissionCustomList( Expression<Func<User_Permission, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<User_Permission, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetUser_PermissionCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<User_Permission> GetUser_PermissionCustomList(  SubscriptionEntities db , Expression<Func<User_Permission, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<User_Permission, dynamic> orderExpression = null)
			{
				IQueryable<User_Permission> query =  db.User_Permission;
                BaseListReturnType<User_Permission> baseListReturnType = new BaseListReturnType<User_Permission>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUser_PermissionList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public User_Permission GetUser_PermissionWithPermissionDetails(long idUser_Permission,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetUser_PermissionWithDetails(idUser_Permission,new List<string>(){"Permission"},shouldRemap);
					}
				}

            //IdPermission -- ZeroOrOne

                public BaseListReturnType<User_Permission> GetAllUser_PermissionListByPermission(long idPermission)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllUser_PermissionListByPermission(idPermission, db);
                    }
                }
                public BaseListReturnType<User_Permission> GetAllUser_PermissionListByPermission(long idPermission, SubscriptionEntities db)
                {
                    Expression<Func<User_Permission, bool>> expression = property=> property.IdPermission == idPermission && property.IsDeactivated !=true;
                    return GetUser_PermissionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<User_Permission> GetAllUser_PermissionListByPermissionByPage(long idPermission, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllUser_PermissionListByPermissionByPage(idPermission, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<User_Permission> GetAllUser_PermissionListByPermissionByPage(long idPermission, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<User_Permission, bool>> expression = property => property.IdPermission == idPermission && property.IsDeactivated !=true;
                    return GetAllUser_PermissionByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public User_Permission GetUser_PermissionWithDetails(long idUser_Permission, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser_PermissionWithDetails(idUser_Permission, db,includes,shouldRemap);
                }
            }

            public User_Permission GetUser_PermissionWithDetails(long idUser_Permission, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<User_Permission> query =  db.User_Permission;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapUser_PermissionSingle(query
						.Where(p => p.IdUser_Permission == idUser_Permission && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdUser_Permission == idUser_Permission && p.IsDeactivated != true).FirstOrDefault();
            }

            public User_Permission GetUser_PermissionWitDetails(long idUser_Permission,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser_PermissionWitDetails(idUser_Permission, db,shouldRemap);
                }
            }

            public User_Permission GetUser_PermissionWitDetails(long idUser_Permission, SubscriptionEntities db,bool shouldRemap = false)
            {
				User_Permission _User_Permission = db.User_Permission

					.Include("Permission")
								.Where(p => p.IdUser_Permission == idUser_Permission && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapUser_PermissionSingle(_User_Permission);

				return  _User_Permission;
            }

            public List<User_Permission> GetUser_PermissionListByIdList(List<long> user_PermissionIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser_PermissionListByIdList(user_PermissionIds, db);
                }
            }
            public List<User_Permission> GetUser_PermissionListByIdList(List<long> user_PermissionIds, SubscriptionEntities db)
            {
                return db.User_Permission.Where(p => p.IsDeactivated != true && user_PermissionIds.Contains(p.IdUser_Permission.Value)).ToList();
            }


            public void SaveUser_Permission(User_Permission user_Permission)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveUser_Permission(user_Permission, db);
                }
            }

            public void SaveUser_Permission(User_Permission user_Permission, SubscriptionEntities db)
            {
									if (user_Permission.Permission != null) 
						DaoFactories.Instance.PermissionDao.SavePermission(user_Permission.Permission, db);
				                
                if (user_Permission.IdUser_Permission.HasValue){
					var user_PermissionFromDb = db.User_Permission.Where(p => p.IdUser_Permission == user_Permission.IdUser_Permission).FirstOrDefault();
													user_PermissionFromDb.IdUser = user_Permission.IdUser;
													user_PermissionFromDb.IdPermission = user_Permission.IdPermission;
													user_PermissionFromDb.IsDeactivated = user_Permission.IsDeactivated;
													user_PermissionFromDb.IsAllowed = user_Permission.IsAllowed;
									}
                else{
                                                //fix for saving without duplicating items in db
                              user_Permission.Permission = null;
                                                db.User_Permission.Add(user_Permission);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyUser_Permission(User_Permission user_Permission)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyUser_Permission(user_Permission, db);
                }
            }

            public void SaveOnlyUser_Permission(User_Permission user_Permission, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // user_Permission.Permission = null;
                                            if (user_Permission.IdUser_Permission.HasValue){
					var user_PermissionFromDb = db.User_Permission.Where(p => p.IdUser_Permission == user_Permission.IdUser_Permission).FirstOrDefault();
													user_PermissionFromDb.IdUser = user_Permission.IdUser;
													user_PermissionFromDb.IdPermission = user_Permission.IdPermission;
													user_PermissionFromDb.IsDeactivated = user_Permission.IsDeactivated;
													user_PermissionFromDb.IsAllowed = user_Permission.IsAllowed;
										 db.SaveChanges();

				}
                else{
					User_Permission _user_Permission = new User_Permission();
																	_user_Permission.IdUser = user_Permission.IdUser;
													_user_Permission.IdPermission = user_Permission.IdPermission;
													_user_Permission.IsDeactivated = user_Permission.IsDeactivated;
													_user_Permission.IsAllowed = user_Permission.IsAllowed;
					

                    db.User_Permission.Add(_user_Permission);
					db.SaveChanges();
					user_Permission.IdUser_Permission =  _user_Permission.IdUser_Permission;
                    
                }
            }

            public void DeleteUser_Permission(User_Permission user_Permission)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteUser_Permission(user_Permission, db);
                }
            }

            public void DeleteUser_Permission(User_Permission user_Permission, SubscriptionEntities db)
            {
								var user_PermissionFromDb = GetUser_Permission(user_Permission.IdUser_Permission.Value,db);
				user_PermissionFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyUser_Permission(User_Permission user_Permission)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyUser_Permission(user_Permission, db);
                }
            }

            public void DeletePermanentlyUser_Permission(User_Permission user_Permission, SubscriptionEntities db)
            {
								var user_PermissionFromDb = GetUser_Permission(user_Permission.IdUser_Permission.Value,db);
				
				db.User_Permission.Remove(user_PermissionFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class User_RoleDao :IUser_RoleDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public User_RoleDao(){
			
			}

			public User_RoleDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<User_Role> GetAllUser_Role(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUser_Role(db, shouldRemap);
                }
            }

            public List<User_Role> GetAllUser_Role(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapUser_RoleList(db.User_Role.Where(p => p.IsDeactivated != true).ToList());
				
				return db.User_Role.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<User_Role> GetAllUser_RoleByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Role, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User_Role, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUser_RoleByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<User_Role> GetAllUser_RoleByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<User_Role, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User_Role, dynamic> orderExpression = null)
            {
				IQueryable<User_Role> query =  db.User_Role;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<User_Role> baseListReturnType = new BaseListReturnType<User_Role>();

                IQueryable<User_Role> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdUser" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<User_Role, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUser_RoleList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<User_Role> GetAllUser_RoleWithRoleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Role, bool>> expression = null,bool shouldRemap = false, Func<User_Role, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUser_RoleByPage(sortingPagingInfo, db,expression,new List<string>(){"Role"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<User_Role> GetAllUser_RoleByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Role, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User_Role, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUser_RoleByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<User_Role> GetAllUser_RoleByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<User_Role, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User_Role, dynamic> orderExpression = null)
            {
				IQueryable<User_Role> query =  db.User_Role;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<User_Role> baseListReturnType = new BaseListReturnType<User_Role>();

                IQueryable<User_Role> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdUser" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<User_Role, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUser_RoleList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<User_Role> GetAllUser_RoleWithRoleDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Role, bool>> expression = null,bool shouldRemap = false, Func<User_Role, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUser_RoleByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Role"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<User_Role> GetAllUser_RoleWithRoleDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllUser_RoleWitDetails(new List<string>(){"Role"},shouldRemap);
					}
				}
			

			public BaseListReturnType<User_Role> GetAllUser_RoleWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUser_RoleWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<User_Role> GetAllUser_RoleWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<User_Role> query =  db.User_Role;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<User_Role> baseListReturnType = new BaseListReturnType<User_Role>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUser_RoleList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public User_Role GetUser_Role(long idUser_Role,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser_Role(idUser_Role, db,shouldRemap);
                }
            }
                        public User_Role GetUser_Role(long idUser_Role, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapUser_RoleSingle(db.User_Role.Where(p => p.IdUser == idUser_Role && p.IsDeactivated != true).FirstOrDefault());

                return db.User_Role.Where(p => p.IdUser == idUser_Role && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public User_Role GetUser_RoleCustom( Expression<Func<User_Role, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetUser_RoleCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public User_Role GetUser_RoleCustom( SubscriptionEntities db , Expression<Func<User_Role, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<User_Role> query =  db.User_Role;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapUser_RoleSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<User_Role> GetUser_RoleCustomList( Expression<Func<User_Role, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<User_Role, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetUser_RoleCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<User_Role> GetUser_RoleCustomList(  SubscriptionEntities db , Expression<Func<User_Role, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<User_Role, dynamic> orderExpression = null)
			{
				IQueryable<User_Role> query =  db.User_Role;
                BaseListReturnType<User_Role> baseListReturnType = new BaseListReturnType<User_Role>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUser_RoleList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public User_Role GetUser_RoleWithRoleDetails(long idUser_Role,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetUser_RoleWithDetails(idUser_Role,new List<string>(){"Role"},shouldRemap);
					}
				}

            //IdRole -- One


			


			public User_Role GetUser_RoleWithDetails(long idUser_Role, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser_RoleWithDetails(idUser_Role, db,includes,shouldRemap);
                }
            }

            public User_Role GetUser_RoleWithDetails(long idUser_Role, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<User_Role> query =  db.User_Role;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapUser_RoleSingle(query
						.Where(p => p.IdUser == idUser_Role && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdUser == idUser_Role && p.IsDeactivated != true).FirstOrDefault();
            }

            public User_Role GetUser_RoleWitDetails(long idUser_Role,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser_RoleWitDetails(idUser_Role, db,shouldRemap);
                }
            }

            public User_Role GetUser_RoleWitDetails(long idUser_Role, SubscriptionEntities db,bool shouldRemap = false)
            {
				User_Role _User_Role = db.User_Role

					.Include("Role")
								.Where(p => p.IdUser == idUser_Role && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapUser_RoleSingle(_User_Role);

				return  _User_Role;
            }

            public List<User_Role> GetUser_RoleListByIdList(List<long> user_RoleIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser_RoleListByIdList(user_RoleIds, db);
                }
            }
            public List<User_Role> GetUser_RoleListByIdList(List<long> user_RoleIds, SubscriptionEntities db)
            {
                return db.User_Role.Where(p => p.IsDeactivated != true && user_RoleIds.Contains(p.IdUser.Value)).ToList();
            }


            public void SaveUser_Role(User_Role user_Role)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveUser_Role(user_Role, db);
                }
            }

            public void SaveUser_Role(User_Role user_Role, SubscriptionEntities db)
            {
									if (user_Role.Role != null) 
						DaoFactories.Instance.RoleDao.SaveRole(user_Role.Role, db);
				                
                if (user_Role.IdUser.HasValue){
					var user_RoleFromDb = db.User_Role.Where(p => p.IdUser == user_Role.IdUser).FirstOrDefault();
													user_RoleFromDb.IsDeactivated = user_Role.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              user_Role.Role = null;
                                                db.User_Role.Add(user_Role);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyUser_Role(User_Role user_Role)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyUser_Role(user_Role, db);
                }
            }

            public void SaveOnlyUser_Role(User_Role user_Role, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // user_Role.Role = null;
                                            if (user_Role.IdUser.HasValue){
					var user_RoleFromDb = db.User_Role.Where(p => p.IdUser == user_Role.IdUser).FirstOrDefault();
													user_RoleFromDb.IsDeactivated = user_Role.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					User_Role _user_Role = new User_Role();
																	_user_Role.IsDeactivated = user_Role.IsDeactivated;
					

                    db.User_Role.Add(_user_Role);
					db.SaveChanges();
					user_Role.IdUser =  _user_Role.IdUser;
                    
                }
            }

            public void DeleteUser_Role(User_Role user_Role)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteUser_Role(user_Role, db);
                }
            }

            public void DeleteUser_Role(User_Role user_Role, SubscriptionEntities db)
            {
								var user_RoleFromDb = GetUser_Role(user_Role.IdUser.Value,db);
				user_RoleFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyUser_Role(User_Role user_Role)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyUser_Role(user_Role, db);
                }
            }

            public void DeletePermanentlyUser_Role(User_Role user_Role, SubscriptionEntities db)
            {
								var user_RoleFromDb = GetUser_Role(user_Role.IdUser.Value,db);
				
				db.User_Role.Remove(user_RoleFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class User_SocialNetworkDao :IUser_SocialNetworkDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public User_SocialNetworkDao(){
			
			}

			public User_SocialNetworkDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<User_SocialNetwork> GetAllUser_SocialNetwork(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUser_SocialNetwork(db, shouldRemap);
                }
            }

            public List<User_SocialNetwork> GetAllUser_SocialNetwork(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapUser_SocialNetworkList(db.User_SocialNetwork.Where(p => p.IsDeactivated != true).ToList());
				
				return db.User_SocialNetwork.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<User_SocialNetwork> GetAllUser_SocialNetworkByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_SocialNetwork, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User_SocialNetwork, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUser_SocialNetworkByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<User_SocialNetwork> GetAllUser_SocialNetworkByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<User_SocialNetwork, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User_SocialNetwork, dynamic> orderExpression = null)
            {
				IQueryable<User_SocialNetwork> query =  db.User_SocialNetwork;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<User_SocialNetwork> baseListReturnType = new BaseListReturnType<User_SocialNetwork>();

                IQueryable<User_SocialNetwork> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdUser_SocialNetwork" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<User_SocialNetwork, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.SocialNetworkId.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.SocialNetworkId.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUser_SocialNetworkList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

			



            public BaseListReturnType<User_SocialNetwork> GetAllUser_SocialNetworkByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_SocialNetwork, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User_SocialNetwork, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUser_SocialNetworkByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<User_SocialNetwork> GetAllUser_SocialNetworkByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<User_SocialNetwork, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<User_SocialNetwork, dynamic> orderExpression = null)
            {
				IQueryable<User_SocialNetwork> query =  db.User_SocialNetwork;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<User_SocialNetwork> baseListReturnType = new BaseListReturnType<User_SocialNetwork>();

                IQueryable<User_SocialNetwork> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdUser_SocialNetwork" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<User_SocialNetwork, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUser_SocialNetworkList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

			






			

			public BaseListReturnType<User_SocialNetwork> GetAllUser_SocialNetworkWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllUser_SocialNetworkWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<User_SocialNetwork> GetAllUser_SocialNetworkWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<User_SocialNetwork> query =  db.User_SocialNetwork;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<User_SocialNetwork> baseListReturnType = new BaseListReturnType<User_SocialNetwork>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUser_SocialNetworkList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public User_SocialNetwork GetUser_SocialNetwork(long idUser_SocialNetwork,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser_SocialNetwork(idUser_SocialNetwork, db,shouldRemap);
                }
            }
                        public User_SocialNetwork GetUser_SocialNetwork(long idUser_SocialNetwork, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapUser_SocialNetworkSingle(db.User_SocialNetwork.Where(p => p.IdUser_SocialNetwork == idUser_SocialNetwork && p.IsDeactivated != true).FirstOrDefault());

                return db.User_SocialNetwork.Where(p => p.IdUser_SocialNetwork == idUser_SocialNetwork && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public User_SocialNetwork GetUser_SocialNetworkCustom( Expression<Func<User_SocialNetwork, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetUser_SocialNetworkCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public User_SocialNetwork GetUser_SocialNetworkCustom( SubscriptionEntities db , Expression<Func<User_SocialNetwork, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<User_SocialNetwork> query =  db.User_SocialNetwork;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapUser_SocialNetworkSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<User_SocialNetwork> GetUser_SocialNetworkCustomList( Expression<Func<User_SocialNetwork, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<User_SocialNetwork, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetUser_SocialNetworkCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<User_SocialNetwork> GetUser_SocialNetworkCustomList(  SubscriptionEntities db , Expression<Func<User_SocialNetwork, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<User_SocialNetwork, dynamic> orderExpression = null)
			{
				IQueryable<User_SocialNetwork> query =  db.User_SocialNetwork;
                BaseListReturnType<User_SocialNetwork> baseListReturnType = new BaseListReturnType<User_SocialNetwork>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapUser_SocialNetworkList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
			


			public User_SocialNetwork GetUser_SocialNetworkWithDetails(long idUser_SocialNetwork, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser_SocialNetworkWithDetails(idUser_SocialNetwork, db,includes,shouldRemap);
                }
            }

            public User_SocialNetwork GetUser_SocialNetworkWithDetails(long idUser_SocialNetwork, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<User_SocialNetwork> query =  db.User_SocialNetwork;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapUser_SocialNetworkSingle(query
						.Where(p => p.IdUser_SocialNetwork == idUser_SocialNetwork && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdUser_SocialNetwork == idUser_SocialNetwork && p.IsDeactivated != true).FirstOrDefault();
            }

            public User_SocialNetwork GetUser_SocialNetworkWitDetails(long idUser_SocialNetwork,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser_SocialNetworkWitDetails(idUser_SocialNetwork, db,shouldRemap);
                }
            }

            public User_SocialNetwork GetUser_SocialNetworkWitDetails(long idUser_SocialNetwork, SubscriptionEntities db,bool shouldRemap = false)
            {
				User_SocialNetwork _User_SocialNetwork = db.User_SocialNetwork

								.Where(p => p.IdUser_SocialNetwork == idUser_SocialNetwork && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapUser_SocialNetworkSingle(_User_SocialNetwork);

				return  _User_SocialNetwork;
            }

            public List<User_SocialNetwork> GetUser_SocialNetworkListByIdList(List<long> user_SocialNetworkIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetUser_SocialNetworkListByIdList(user_SocialNetworkIds, db);
                }
            }
            public List<User_SocialNetwork> GetUser_SocialNetworkListByIdList(List<long> user_SocialNetworkIds, SubscriptionEntities db)
            {
                return db.User_SocialNetwork.Where(p => p.IsDeactivated != true && user_SocialNetworkIds.Contains(p.IdUser_SocialNetwork.Value)).ToList();
            }


            public void SaveUser_SocialNetwork(User_SocialNetwork user_SocialNetwork)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveUser_SocialNetwork(user_SocialNetwork, db);
                }
            }

            public void SaveUser_SocialNetwork(User_SocialNetwork user_SocialNetwork, SubscriptionEntities db)
            {
				                
                if (user_SocialNetwork.IdUser_SocialNetwork.HasValue){
					var user_SocialNetworkFromDb = db.User_SocialNetwork.Where(p => p.IdUser_SocialNetwork == user_SocialNetwork.IdUser_SocialNetwork).FirstOrDefault();
													user_SocialNetworkFromDb.IdUser = user_SocialNetwork.IdUser;
													user_SocialNetworkFromDb.IdSocialNetwork = user_SocialNetwork.IdSocialNetwork;
													user_SocialNetworkFromDb.IsDeactivated = user_SocialNetwork.IsDeactivated;
													user_SocialNetworkFromDb.SocialNetworkId = user_SocialNetwork.SocialNetworkId;
									}
                else{
                                        db.User_SocialNetwork.Add(user_SocialNetwork);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyUser_SocialNetwork(User_SocialNetwork user_SocialNetwork)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyUser_SocialNetwork(user_SocialNetwork, db);
                }
            }

            public void SaveOnlyUser_SocialNetwork(User_SocialNetwork user_SocialNetwork, SubscriptionEntities db)
            {
			                    if (user_SocialNetwork.IdUser_SocialNetwork.HasValue){
					var user_SocialNetworkFromDb = db.User_SocialNetwork.Where(p => p.IdUser_SocialNetwork == user_SocialNetwork.IdUser_SocialNetwork).FirstOrDefault();
													user_SocialNetworkFromDb.IdUser = user_SocialNetwork.IdUser;
													user_SocialNetworkFromDb.IdSocialNetwork = user_SocialNetwork.IdSocialNetwork;
													user_SocialNetworkFromDb.IsDeactivated = user_SocialNetwork.IsDeactivated;
													user_SocialNetworkFromDb.SocialNetworkId = user_SocialNetwork.SocialNetworkId;
										 db.SaveChanges();

				}
                else{
					User_SocialNetwork _user_SocialNetwork = new User_SocialNetwork();
																	_user_SocialNetwork.IdUser = user_SocialNetwork.IdUser;
													_user_SocialNetwork.IdSocialNetwork = user_SocialNetwork.IdSocialNetwork;
													_user_SocialNetwork.IsDeactivated = user_SocialNetwork.IsDeactivated;
													_user_SocialNetwork.SocialNetworkId = user_SocialNetwork.SocialNetworkId;
					

                    db.User_SocialNetwork.Add(_user_SocialNetwork);
					db.SaveChanges();
					user_SocialNetwork.IdUser_SocialNetwork =  _user_SocialNetwork.IdUser_SocialNetwork;
                    
                }
            }

            public void DeleteUser_SocialNetwork(User_SocialNetwork user_SocialNetwork)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteUser_SocialNetwork(user_SocialNetwork, db);
                }
            }

            public void DeleteUser_SocialNetwork(User_SocialNetwork user_SocialNetwork, SubscriptionEntities db)
            {
								var user_SocialNetworkFromDb = GetUser_SocialNetwork(user_SocialNetwork.IdUser_SocialNetwork.Value,db);
				user_SocialNetworkFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyUser_SocialNetwork(User_SocialNetwork user_SocialNetwork)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyUser_SocialNetwork(user_SocialNetwork, db);
                }
            }

            public void DeletePermanentlyUser_SocialNetwork(User_SocialNetwork user_SocialNetwork, SubscriptionEntities db)
            {
								var user_SocialNetworkFromDb = GetUser_SocialNetwork(user_SocialNetwork.IdUser_SocialNetwork.Value,db);
				
				db.User_SocialNetwork.Remove(user_SocialNetworkFromDb);
                db.SaveChanges();
            }


            


    



		}
			public partial class WorkflowDao :IWorkflowDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public WorkflowDao(){
			
			}

			public WorkflowDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<Workflow> GetAllWorkflows(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflows(db, shouldRemap);
                }
            }

            public List<Workflow> GetAllWorkflows(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapWorkflowList(db.Workflows.Where(p => p.IsDeactivated != true).ToList());
				
				return db.Workflows.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<Workflow> GetAllWorkflowsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Workflow> GetAllWorkflowsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Workflow, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
            {
				IQueryable<Workflow> query =  db.Workflows;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Workflow> baseListReturnType = new BaseListReturnType<Workflow>();

                IQueryable<Workflow> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdWorkflow" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Workflow, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.WorkflowCode.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Workflow> GetAllWorkflowsWithApprovalMessagesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowsByPage(sortingPagingInfo, db,expression,new List<string>(){"ApprovalMessages"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Workflow> GetAllWorkflowsWithRequestTypesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowsByPage(sortingPagingInfo, db,expression,new List<string>(){"RequestTypes"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Workflow> GetAllWorkflowsWithWorkflowActionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowsByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowActions"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Workflow> GetAllWorkflowsWithWorkflowRolesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowsByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowRoles"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Workflow> GetAllWorkflowsWithWorkflowStatesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowsByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowStates"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<Workflow> GetAllWorkflowsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<Workflow> GetAllWorkflowsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<Workflow, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
            {
				IQueryable<Workflow> query =  db.Workflows;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Workflow> baseListReturnType = new BaseListReturnType<Workflow>();

                IQueryable<Workflow> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdWorkflow" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<Workflow, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<Workflow> GetAllWorkflowsWithApprovalMessagesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"ApprovalMessages"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Workflow> GetAllWorkflowsWithRequestTypesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"RequestTypes"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Workflow> GetAllWorkflowsWithWorkflowActionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowActions"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Workflow> GetAllWorkflowsWithWorkflowRolesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowRoles"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<Workflow> GetAllWorkflowsWithWorkflowStatesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap = false, Func<Workflow, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowStates"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<Workflow> GetAllWorkflowsWithApprovalMessagesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowWitDetails(new List<string>(){"ApprovalMessages"},shouldRemap);
					}
				}
							public BaseListReturnType<Workflow> GetAllWorkflowsWithRequestTypesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowWitDetails(new List<string>(){"RequestTypes"},shouldRemap);
					}
				}
							public BaseListReturnType<Workflow> GetAllWorkflowsWithWorkflowActionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowWitDetails(new List<string>(){"WorkflowActions"},shouldRemap);
					}
				}
							public BaseListReturnType<Workflow> GetAllWorkflowsWithWorkflowRolesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowWitDetails(new List<string>(){"WorkflowRoles"},shouldRemap);
					}
				}
							public BaseListReturnType<Workflow> GetAllWorkflowsWithWorkflowStatesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowWitDetails(new List<string>(){"WorkflowStates"},shouldRemap);
					}
				}
			

			public BaseListReturnType<Workflow> GetAllWorkflowWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<Workflow> GetAllWorkflowWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Workflow> query =  db.Workflows;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<Workflow> baseListReturnType = new BaseListReturnType<Workflow>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public Workflow GetWorkflow(long idWorkflow,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflow(idWorkflow, db,shouldRemap);
                }
            }
                        public Workflow GetWorkflow(long idWorkflow, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapWorkflowSingle(db.Workflows.Where(p => p.IdWorkflow == idWorkflow && p.IsDeactivated != true).FirstOrDefault());

                return db.Workflows.Where(p => p.IdWorkflow == idWorkflow && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public Workflow GetWorkflowCustom( Expression<Func<Workflow, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetWorkflowCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public Workflow GetWorkflowCustom( SubscriptionEntities db , Expression<Func<Workflow, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<Workflow> query =  db.Workflows;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapWorkflowSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<Workflow> GetWorkflowCustomList( Expression<Func<Workflow, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Workflow, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetWorkflowCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<Workflow> GetWorkflowCustomList(  SubscriptionEntities db , Expression<Func<Workflow, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<Workflow, dynamic> orderExpression = null)
			{
				IQueryable<Workflow> query =  db.Workflows;
                BaseListReturnType<Workflow> baseListReturnType = new BaseListReturnType<Workflow>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public Workflow GetWorkflowWithApprovalMessagesDetails(long idWorkflow,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowWithDetails(idWorkflow,new List<string>(){"ApprovalMessages"},shouldRemap);
					}
				}

            //IdWorkflowToInitiate -- Many


							public Workflow GetWorkflowWithRequestTypesDetails(long idWorkflow,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowWithDetails(idWorkflow,new List<string>(){"RequestTypes"},shouldRemap);
					}
				}

            //IdWorkflow -- Many


							public Workflow GetWorkflowWithWorkflowActionsDetails(long idWorkflow,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowWithDetails(idWorkflow,new List<string>(){"WorkflowActions"},shouldRemap);
					}
				}

            //IdWorkflow -- Many


							public Workflow GetWorkflowWithWorkflowRolesDetails(long idWorkflow,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowWithDetails(idWorkflow,new List<string>(){"WorkflowRoles"},shouldRemap);
					}
				}

            //IdWorkflow -- Many


							public Workflow GetWorkflowWithWorkflowStatesDetails(long idWorkflow,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowWithDetails(idWorkflow,new List<string>(){"WorkflowStates"},shouldRemap);
					}
				}

            //IdWorkflow -- Many


			


			public Workflow GetWorkflowWithDetails(long idWorkflow, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowWithDetails(idWorkflow, db,includes,shouldRemap);
                }
            }

            public Workflow GetWorkflowWithDetails(long idWorkflow, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<Workflow> query =  db.Workflows;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapWorkflowSingle(query
						.Where(p => p.IdWorkflow == idWorkflow && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdWorkflow == idWorkflow && p.IsDeactivated != true).FirstOrDefault();
            }

            public Workflow GetWorkflowWitDetails(long idWorkflow,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowWitDetails(idWorkflow, db,shouldRemap);
                }
            }

            public Workflow GetWorkflowWitDetails(long idWorkflow, SubscriptionEntities db,bool shouldRemap = false)
            {
				Workflow _Workflow = db.Workflows

					.Include("ApprovalMessages")
					.Include("RequestTypes")
					.Include("WorkflowActions")
					.Include("WorkflowRoles")
					.Include("WorkflowStates")
								.Where(p => p.IdWorkflow == idWorkflow && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapWorkflowSingle(_Workflow);

				return  _Workflow;
            }

            public List<Workflow> GetWorkflowListByIdList(List<long> workflowIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowListByIdList(workflowIds, db);
                }
            }
            public List<Workflow> GetWorkflowListByIdList(List<long> workflowIds, SubscriptionEntities db)
            {
                return db.Workflows.Where(p => p.IsDeactivated != true && workflowIds.Contains(p.IdWorkflow.Value)).ToList();
            }


            public void SaveWorkflow(Workflow workflow)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveWorkflow(workflow, db);
                }
            }

            public void SaveWorkflow(Workflow workflow, SubscriptionEntities db)
            {
				                
                if (workflow.IdWorkflow.HasValue){
					var workflowFromDb = db.Workflows.Where(p => p.IdWorkflow == workflow.IdWorkflow).FirstOrDefault();
													workflowFromDb.Description = workflow.Description;
													workflowFromDb.WorkflowCode = workflow.WorkflowCode;
													workflowFromDb.DisplayOrder = workflow.DisplayOrder;
													workflowFromDb.IsDeactivated = workflow.IsDeactivated;
									}
                else{
                                        db.Workflows.Add(workflow);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyWorkflow(Workflow workflow)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyWorkflow(workflow, db);
                }
            }

            public void SaveOnlyWorkflow(Workflow workflow, SubscriptionEntities db)
            {
			                    if (workflow.IdWorkflow.HasValue){
					var workflowFromDb = db.Workflows.Where(p => p.IdWorkflow == workflow.IdWorkflow).FirstOrDefault();
													workflowFromDb.Description = workflow.Description;
													workflowFromDb.WorkflowCode = workflow.WorkflowCode;
													workflowFromDb.DisplayOrder = workflow.DisplayOrder;
													workflowFromDb.IsDeactivated = workflow.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					Workflow _workflow = new Workflow();
																	_workflow.Description = workflow.Description;
													_workflow.WorkflowCode = workflow.WorkflowCode;
													_workflow.DisplayOrder = workflow.DisplayOrder;
													_workflow.IsDeactivated = workflow.IsDeactivated;
					

                    db.Workflows.Add(_workflow);
					db.SaveChanges();
					workflow.IdWorkflow =  _workflow.IdWorkflow;
                    
                }
            }

            public void DeleteWorkflow(Workflow workflow)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteWorkflow(workflow, db);
                }
            }

            public void DeleteWorkflow(Workflow workflow, SubscriptionEntities db)
            {
								var workflowFromDb = GetWorkflow(workflow.IdWorkflow.Value,db);
				workflowFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyWorkflow(Workflow workflow)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyWorkflow(workflow, db);
                }
            }

            public void DeletePermanentlyWorkflow(Workflow workflow, SubscriptionEntities db)
            {
								var workflowFromDb = GetWorkflow(workflow.IdWorkflow.Value,db);
				
				db.Workflows.Remove(workflowFromDb);
                db.SaveChanges();
            }


            
							public List<ApprovalMessage> UpdateApprovalMessagesForWorkflowWithoutSavingNewItem(List<ApprovalMessage> newApprovalMessages,long idWorkflow)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateApprovalMessagesForWorkflowWithoutSavingNewItem(newApprovalMessages,idWorkflow,db);
                                }
                            }

							public List<ApprovalMessage> UpdateApprovalMessagesForWorkflowWithoutSavingNewItem(List<ApprovalMessage> newApprovalMessages,long idWorkflow, SubscriptionEntities  db)
                            {
                                Expression<Func<ApprovalMessage, bool>> expressionBuilder = p => p.IdWorkflowToInitiate == idWorkflow;
                                var oldApprovalMessages = DaoFactories.Instance.ApprovalMessageDao.GetApprovalMessageCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldApprovalMessages.EntityList.Select(pc => pc.IdApprovalMessage).Except(newApprovalMessages.Where(pc => pc.IdApprovalMessage.HasValue).Select(pc => pc.IdApprovalMessage)).ToList();
                                var itemsTobeDeleted = oldApprovalMessages.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdApprovalMessage)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newApprovalMessages;
                            }


                            public List<ApprovalMessage> UpdateApprovalMessagesForWorkflow(List<ApprovalMessage> newApprovalMessages,long idWorkflow)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateApprovalMessagesForWorkflow(newApprovalMessages,idWorkflow,db);
                                }
                            }

                            public List<ApprovalMessage> UpdateApprovalMessagesForWorkflow(List<ApprovalMessage> newApprovalMessages,long idWorkflow, SubscriptionEntities  db)
                            {
                                Expression<Func<ApprovalMessage, bool>> expressionBuilder = p => p.IdWorkflowToInitiate == idWorkflow;
                                var oldApprovalMessages = DaoFactories.Instance.ApprovalMessageDao.GetApprovalMessageCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldApprovalMessages.EntityList.Select(pc => pc.IdApprovalMessage).Except(newApprovalMessages.Where(pc => pc.IdApprovalMessage.HasValue).Select(pc => pc.IdApprovalMessage)).ToList();
                                var itemsTobeDeleted = oldApprovalMessages.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdApprovalMessage)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newApprovalMessages.ForEach(pc =>
                                {
                                    pc.IdWorkflowToInitiate = idWorkflow;
                                    DaoFactories.Instance.ApprovalMessageDao.SaveOnlyApprovalMessage(pc, db);
                                });
                                return newApprovalMessages;
                            }

                        
							public List<RequestType> UpdateRequestTypesForWorkflowWithoutSavingNewItem(List<RequestType> newRequestTypes,long idWorkflow)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestTypesForWorkflowWithoutSavingNewItem(newRequestTypes,idWorkflow,db);
                                }
                            }

							public List<RequestType> UpdateRequestTypesForWorkflowWithoutSavingNewItem(List<RequestType> newRequestTypes,long idWorkflow, SubscriptionEntities  db)
                            {
                                Expression<Func<RequestType, bool>> expressionBuilder = p => p.IdWorkflow == idWorkflow;
                                var oldRequestTypes = DaoFactories.Instance.RequestTypeDao.GetRequestTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequestTypes.EntityList.Select(pc => pc.IdRequestType).Except(newRequestTypes.Where(pc => pc.IdRequestType.HasValue).Select(pc => pc.IdRequestType)).ToList();
                                var itemsTobeDeleted = oldRequestTypes.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequestType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newRequestTypes;
                            }


                            public List<RequestType> UpdateRequestTypesForWorkflow(List<RequestType> newRequestTypes,long idWorkflow)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestTypesForWorkflow(newRequestTypes,idWorkflow,db);
                                }
                            }

                            public List<RequestType> UpdateRequestTypesForWorkflow(List<RequestType> newRequestTypes,long idWorkflow, SubscriptionEntities  db)
                            {
                                Expression<Func<RequestType, bool>> expressionBuilder = p => p.IdWorkflow == idWorkflow;
                                var oldRequestTypes = DaoFactories.Instance.RequestTypeDao.GetRequestTypeCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequestTypes.EntityList.Select(pc => pc.IdRequestType).Except(newRequestTypes.Where(pc => pc.IdRequestType.HasValue).Select(pc => pc.IdRequestType)).ToList();
                                var itemsTobeDeleted = oldRequestTypes.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequestType)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newRequestTypes.ForEach(pc =>
                                {
                                    pc.IdWorkflow = idWorkflow;
                                    DaoFactories.Instance.RequestTypeDao.SaveOnlyRequestType(pc, db);
                                });
                                return newRequestTypes;
                            }

                        
							public List<WorkflowAction> UpdateWorkflowActionsForWorkflowWithoutSavingNewItem(List<WorkflowAction> newWorkflowActions,long idWorkflow)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowActionsForWorkflowWithoutSavingNewItem(newWorkflowActions,idWorkflow,db);
                                }
                            }

							public List<WorkflowAction> UpdateWorkflowActionsForWorkflowWithoutSavingNewItem(List<WorkflowAction> newWorkflowActions,long idWorkflow, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowAction, bool>> expressionBuilder = p => p.IdWorkflow == idWorkflow;
                                var oldWorkflowActions = DaoFactories.Instance.WorkflowActionDao.GetWorkflowActionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowActions.EntityList.Select(pc => pc.IdWorkflowAction).Except(newWorkflowActions.Where(pc => pc.IdWorkflowAction.HasValue).Select(pc => pc.IdWorkflowAction)).ToList();
                                var itemsTobeDeleted = oldWorkflowActions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowAction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newWorkflowActions;
                            }


                            public List<WorkflowAction> UpdateWorkflowActionsForWorkflow(List<WorkflowAction> newWorkflowActions,long idWorkflow)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowActionsForWorkflow(newWorkflowActions,idWorkflow,db);
                                }
                            }

                            public List<WorkflowAction> UpdateWorkflowActionsForWorkflow(List<WorkflowAction> newWorkflowActions,long idWorkflow, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowAction, bool>> expressionBuilder = p => p.IdWorkflow == idWorkflow;
                                var oldWorkflowActions = DaoFactories.Instance.WorkflowActionDao.GetWorkflowActionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowActions.EntityList.Select(pc => pc.IdWorkflowAction).Except(newWorkflowActions.Where(pc => pc.IdWorkflowAction.HasValue).Select(pc => pc.IdWorkflowAction)).ToList();
                                var itemsTobeDeleted = oldWorkflowActions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowAction)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newWorkflowActions.ForEach(pc =>
                                {
                                    pc.IdWorkflow = idWorkflow;
                                    DaoFactories.Instance.WorkflowActionDao.SaveOnlyWorkflowAction(pc, db);
                                });
                                return newWorkflowActions;
                            }

                        
							public List<WorkflowRole> UpdateWorkflowRolesForWorkflowWithoutSavingNewItem(List<WorkflowRole> newWorkflowRoles,long idWorkflow)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowRolesForWorkflowWithoutSavingNewItem(newWorkflowRoles,idWorkflow,db);
                                }
                            }

							public List<WorkflowRole> UpdateWorkflowRolesForWorkflowWithoutSavingNewItem(List<WorkflowRole> newWorkflowRoles,long idWorkflow, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowRole, bool>> expressionBuilder = p => p.IdWorkflow == idWorkflow;
                                var oldWorkflowRoles = DaoFactories.Instance.WorkflowRoleDao.GetWorkflowRoleCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowRoles.EntityList.Select(pc => pc.IdWorkflowRole).Except(newWorkflowRoles.Where(pc => pc.IdWorkflowRole.HasValue).Select(pc => pc.IdWorkflowRole)).ToList();
                                var itemsTobeDeleted = oldWorkflowRoles.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowRole)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newWorkflowRoles;
                            }


                            public List<WorkflowRole> UpdateWorkflowRolesForWorkflow(List<WorkflowRole> newWorkflowRoles,long idWorkflow)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowRolesForWorkflow(newWorkflowRoles,idWorkflow,db);
                                }
                            }

                            public List<WorkflowRole> UpdateWorkflowRolesForWorkflow(List<WorkflowRole> newWorkflowRoles,long idWorkflow, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowRole, bool>> expressionBuilder = p => p.IdWorkflow == idWorkflow;
                                var oldWorkflowRoles = DaoFactories.Instance.WorkflowRoleDao.GetWorkflowRoleCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowRoles.EntityList.Select(pc => pc.IdWorkflowRole).Except(newWorkflowRoles.Where(pc => pc.IdWorkflowRole.HasValue).Select(pc => pc.IdWorkflowRole)).ToList();
                                var itemsTobeDeleted = oldWorkflowRoles.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowRole)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newWorkflowRoles.ForEach(pc =>
                                {
                                    pc.IdWorkflow = idWorkflow;
                                    DaoFactories.Instance.WorkflowRoleDao.SaveOnlyWorkflowRole(pc, db);
                                });
                                return newWorkflowRoles;
                            }

                        
							public List<WorkflowState> UpdateWorkflowStatesForWorkflowWithoutSavingNewItem(List<WorkflowState> newWorkflowStates,long idWorkflow)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowStatesForWorkflowWithoutSavingNewItem(newWorkflowStates,idWorkflow,db);
                                }
                            }

							public List<WorkflowState> UpdateWorkflowStatesForWorkflowWithoutSavingNewItem(List<WorkflowState> newWorkflowStates,long idWorkflow, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowState, bool>> expressionBuilder = p => p.IdWorkflow == idWorkflow;
                                var oldWorkflowStates = DaoFactories.Instance.WorkflowStateDao.GetWorkflowStateCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowStates.EntityList.Select(pc => pc.IdWorkflowState).Except(newWorkflowStates.Where(pc => pc.IdWorkflowState.HasValue).Select(pc => pc.IdWorkflowState)).ToList();
                                var itemsTobeDeleted = oldWorkflowStates.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowState)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newWorkflowStates;
                            }


                            public List<WorkflowState> UpdateWorkflowStatesForWorkflow(List<WorkflowState> newWorkflowStates,long idWorkflow)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowStatesForWorkflow(newWorkflowStates,idWorkflow,db);
                                }
                            }

                            public List<WorkflowState> UpdateWorkflowStatesForWorkflow(List<WorkflowState> newWorkflowStates,long idWorkflow, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowState, bool>> expressionBuilder = p => p.IdWorkflow == idWorkflow;
                                var oldWorkflowStates = DaoFactories.Instance.WorkflowStateDao.GetWorkflowStateCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowStates.EntityList.Select(pc => pc.IdWorkflowState).Except(newWorkflowStates.Where(pc => pc.IdWorkflowState.HasValue).Select(pc => pc.IdWorkflowState)).ToList();
                                var itemsTobeDeleted = oldWorkflowStates.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowState)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newWorkflowStates.ForEach(pc =>
                                {
                                    pc.IdWorkflow = idWorkflow;
                                    DaoFactories.Instance.WorkflowStateDao.SaveOnlyWorkflowState(pc, db);
                                });
                                return newWorkflowStates;
                            }

                        


    



		}
			public partial class WorkflowActionDao :IWorkflowActionDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public WorkflowActionDao(){
			
			}

			public WorkflowActionDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<WorkflowAction> GetAllWorkflowActions(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowActions(db, shouldRemap);
                }
            }

            public List<WorkflowAction> GetAllWorkflowActions(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapWorkflowActionList(db.WorkflowActions.Where(p => p.IsDeactivated != true).ToList());
				
				return db.WorkflowActions.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowAction, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowActionsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<WorkflowAction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowAction, dynamic> orderExpression = null)
            {
				IQueryable<WorkflowAction> query =  db.WorkflowActions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowAction> baseListReturnType = new BaseListReturnType<WorkflowAction>();

                IQueryable<WorkflowAction> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdWorkflowAction" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<WorkflowAction, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.WorkflowActionCode.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowActionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsWithApprovalMessagesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null,bool shouldRemap = false, Func<WorkflowAction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowActionsByPage(sortingPagingInfo, db,expression,new List<string>(){"ApprovalMessages"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsWithWorkflowDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null,bool shouldRemap = false, Func<WorkflowAction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowActionsByPage(sortingPagingInfo, db,expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsWithWorkflowTransitionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null,bool shouldRemap = false, Func<WorkflowAction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowActionsByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowTransitions"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowAction, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowActionsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<WorkflowAction, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowAction, dynamic> orderExpression = null)
            {
				IQueryable<WorkflowAction> query =  db.WorkflowActions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowAction> baseListReturnType = new BaseListReturnType<WorkflowAction>();

                IQueryable<WorkflowAction> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdWorkflowAction" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<WorkflowAction, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowActionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsWithApprovalMessagesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null,bool shouldRemap = false, Func<WorkflowAction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowActionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"ApprovalMessages"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsWithWorkflowDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null,bool shouldRemap = false, Func<WorkflowAction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowActionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsWithWorkflowTransitionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null,bool shouldRemap = false, Func<WorkflowAction, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowActionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowTransitions"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsWithApprovalMessagesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowActionWitDetails(new List<string>(){"ApprovalMessages"},shouldRemap);
					}
				}
							public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsWithWorkflowDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowActionWitDetails(new List<string>(){"Workflow"},shouldRemap);
					}
				}
							public BaseListReturnType<WorkflowAction> GetAllWorkflowActionsWithWorkflowTransitionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowActionWitDetails(new List<string>(){"WorkflowTransitions"},shouldRemap);
					}
				}
			

			public BaseListReturnType<WorkflowAction> GetAllWorkflowActionWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowActionWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<WorkflowAction> GetAllWorkflowActionWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<WorkflowAction> query =  db.WorkflowActions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowAction> baseListReturnType = new BaseListReturnType<WorkflowAction>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowActionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public WorkflowAction GetWorkflowAction(long idWorkflowAction,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowAction(idWorkflowAction, db,shouldRemap);
                }
            }
                        public WorkflowAction GetWorkflowAction(long idWorkflowAction, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapWorkflowActionSingle(db.WorkflowActions.Where(p => p.IdWorkflowAction == idWorkflowAction && p.IsDeactivated != true).FirstOrDefault());

                return db.WorkflowActions.Where(p => p.IdWorkflowAction == idWorkflowAction && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public WorkflowAction GetWorkflowActionCustom( Expression<Func<WorkflowAction, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetWorkflowActionCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public WorkflowAction GetWorkflowActionCustom( SubscriptionEntities db , Expression<Func<WorkflowAction, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<WorkflowAction> query =  db.WorkflowActions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapWorkflowActionSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<WorkflowAction> GetWorkflowActionCustomList( Expression<Func<WorkflowAction, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<WorkflowAction, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetWorkflowActionCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<WorkflowAction> GetWorkflowActionCustomList(  SubscriptionEntities db , Expression<Func<WorkflowAction, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<WorkflowAction, dynamic> orderExpression = null)
			{
				IQueryable<WorkflowAction> query =  db.WorkflowActions;
                BaseListReturnType<WorkflowAction> baseListReturnType = new BaseListReturnType<WorkflowAction>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowActionList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public WorkflowAction GetWorkflowActionWithApprovalMessagesDetails(long idWorkflowAction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowActionWithDetails(idWorkflowAction,new List<string>(){"ApprovalMessages"},shouldRemap);
					}
				}

            //IdWorkflowAction -- Many


							public WorkflowAction GetWorkflowActionWithWorkflowDetails(long idWorkflowAction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowActionWithDetails(idWorkflowAction,new List<string>(){"Workflow"},shouldRemap);
					}
				}

            //IdWorkflow -- ZeroOrOne

                public BaseListReturnType<WorkflowAction> GetAllWorkflowActionListByWorkflow(long idWorkflow)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowActionListByWorkflow(idWorkflow, db);
                    }
                }
                public BaseListReturnType<WorkflowAction> GetAllWorkflowActionListByWorkflow(long idWorkflow, SubscriptionEntities db)
                {
                    Expression<Func<WorkflowAction, bool>> expression = property=> property.IdWorkflow == idWorkflow && property.IsDeactivated !=true;
                    return GetWorkflowActionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<WorkflowAction> GetAllWorkflowActionListByWorkflowByPage(long idWorkflow, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowActionListByWorkflowByPage(idWorkflow, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<WorkflowAction> GetAllWorkflowActionListByWorkflowByPage(long idWorkflow, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<WorkflowAction, bool>> expression = property => property.IdWorkflow == idWorkflow && property.IsDeactivated !=true;
                    return GetAllWorkflowActionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public WorkflowAction GetWorkflowActionWithWorkflowTransitionsDetails(long idWorkflowAction,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowActionWithDetails(idWorkflowAction,new List<string>(){"WorkflowTransitions"},shouldRemap);
					}
				}

            //IdWorkflowAction -- Many


			


			public WorkflowAction GetWorkflowActionWithDetails(long idWorkflowAction, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowActionWithDetails(idWorkflowAction, db,includes,shouldRemap);
                }
            }

            public WorkflowAction GetWorkflowActionWithDetails(long idWorkflowAction, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<WorkflowAction> query =  db.WorkflowActions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapWorkflowActionSingle(query
						.Where(p => p.IdWorkflowAction == idWorkflowAction && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdWorkflowAction == idWorkflowAction && p.IsDeactivated != true).FirstOrDefault();
            }

            public WorkflowAction GetWorkflowActionWitDetails(long idWorkflowAction,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowActionWitDetails(idWorkflowAction, db,shouldRemap);
                }
            }

            public WorkflowAction GetWorkflowActionWitDetails(long idWorkflowAction, SubscriptionEntities db,bool shouldRemap = false)
            {
				WorkflowAction _WorkflowAction = db.WorkflowActions

					.Include("ApprovalMessages")
					.Include("Workflow")
					.Include("WorkflowTransitions")
								.Where(p => p.IdWorkflowAction == idWorkflowAction && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapWorkflowActionSingle(_WorkflowAction);

				return  _WorkflowAction;
            }

            public List<WorkflowAction> GetWorkflowActionListByIdList(List<long> workflowActionIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowActionListByIdList(workflowActionIds, db);
                }
            }
            public List<WorkflowAction> GetWorkflowActionListByIdList(List<long> workflowActionIds, SubscriptionEntities db)
            {
                return db.WorkflowActions.Where(p => p.IsDeactivated != true && workflowActionIds.Contains(p.IdWorkflowAction.Value)).ToList();
            }


            public void SaveWorkflowAction(WorkflowAction workflowAction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveWorkflowAction(workflowAction, db);
                }
            }

            public void SaveWorkflowAction(WorkflowAction workflowAction, SubscriptionEntities db)
            {
									if (workflowAction.Workflow != null) 
						DaoFactories.Instance.WorkflowDao.SaveWorkflow(workflowAction.Workflow, db);
				                
                if (workflowAction.IdWorkflowAction.HasValue){
					var workflowActionFromDb = db.WorkflowActions.Where(p => p.IdWorkflowAction == workflowAction.IdWorkflowAction).FirstOrDefault();
													workflowActionFromDb.Description = workflowAction.Description;
													workflowActionFromDb.WorkflowActionCode = workflowAction.WorkflowActionCode;
													workflowActionFromDb.DisplayOrder = workflowAction.DisplayOrder;
													workflowActionFromDb.IdWorkflow = workflowAction.IdWorkflow;
													workflowActionFromDb.IsDeactivated = workflowAction.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              workflowAction.Workflow = null;
                                                db.WorkflowActions.Add(workflowAction);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyWorkflowAction(WorkflowAction workflowAction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyWorkflowAction(workflowAction, db);
                }
            }

            public void SaveOnlyWorkflowAction(WorkflowAction workflowAction, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // workflowAction.Workflow = null;
                                            if (workflowAction.IdWorkflowAction.HasValue){
					var workflowActionFromDb = db.WorkflowActions.Where(p => p.IdWorkflowAction == workflowAction.IdWorkflowAction).FirstOrDefault();
													workflowActionFromDb.Description = workflowAction.Description;
													workflowActionFromDb.WorkflowActionCode = workflowAction.WorkflowActionCode;
													workflowActionFromDb.DisplayOrder = workflowAction.DisplayOrder;
													workflowActionFromDb.IdWorkflow = workflowAction.IdWorkflow;
													workflowActionFromDb.IsDeactivated = workflowAction.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					WorkflowAction _workflowAction = new WorkflowAction();
																	_workflowAction.Description = workflowAction.Description;
													_workflowAction.WorkflowActionCode = workflowAction.WorkflowActionCode;
													_workflowAction.DisplayOrder = workflowAction.DisplayOrder;
													_workflowAction.IdWorkflow = workflowAction.IdWorkflow;
													_workflowAction.IsDeactivated = workflowAction.IsDeactivated;
					

                    db.WorkflowActions.Add(_workflowAction);
					db.SaveChanges();
					workflowAction.IdWorkflowAction =  _workflowAction.IdWorkflowAction;
                    
                }
            }

            public void DeleteWorkflowAction(WorkflowAction workflowAction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteWorkflowAction(workflowAction, db);
                }
            }

            public void DeleteWorkflowAction(WorkflowAction workflowAction, SubscriptionEntities db)
            {
								var workflowActionFromDb = GetWorkflowAction(workflowAction.IdWorkflowAction.Value,db);
				workflowActionFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyWorkflowAction(WorkflowAction workflowAction)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyWorkflowAction(workflowAction, db);
                }
            }

            public void DeletePermanentlyWorkflowAction(WorkflowAction workflowAction, SubscriptionEntities db)
            {
								var workflowActionFromDb = GetWorkflowAction(workflowAction.IdWorkflowAction.Value,db);
				
				db.WorkflowActions.Remove(workflowActionFromDb);
                db.SaveChanges();
            }


            
							public List<ApprovalMessage> UpdateApprovalMessagesForWorkflowActionWithoutSavingNewItem(List<ApprovalMessage> newApprovalMessages,long idWorkflowAction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateApprovalMessagesForWorkflowActionWithoutSavingNewItem(newApprovalMessages,idWorkflowAction,db);
                                }
                            }

							public List<ApprovalMessage> UpdateApprovalMessagesForWorkflowActionWithoutSavingNewItem(List<ApprovalMessage> newApprovalMessages,long idWorkflowAction, SubscriptionEntities  db)
                            {
                                Expression<Func<ApprovalMessage, bool>> expressionBuilder = p => p.IdWorkflowAction == idWorkflowAction;
                                var oldApprovalMessages = DaoFactories.Instance.ApprovalMessageDao.GetApprovalMessageCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldApprovalMessages.EntityList.Select(pc => pc.IdApprovalMessage).Except(newApprovalMessages.Where(pc => pc.IdApprovalMessage.HasValue).Select(pc => pc.IdApprovalMessage)).ToList();
                                var itemsTobeDeleted = oldApprovalMessages.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdApprovalMessage)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newApprovalMessages;
                            }


                            public List<ApprovalMessage> UpdateApprovalMessagesForWorkflowAction(List<ApprovalMessage> newApprovalMessages,long idWorkflowAction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateApprovalMessagesForWorkflowAction(newApprovalMessages,idWorkflowAction,db);
                                }
                            }

                            public List<ApprovalMessage> UpdateApprovalMessagesForWorkflowAction(List<ApprovalMessage> newApprovalMessages,long idWorkflowAction, SubscriptionEntities  db)
                            {
                                Expression<Func<ApprovalMessage, bool>> expressionBuilder = p => p.IdWorkflowAction == idWorkflowAction;
                                var oldApprovalMessages = DaoFactories.Instance.ApprovalMessageDao.GetApprovalMessageCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldApprovalMessages.EntityList.Select(pc => pc.IdApprovalMessage).Except(newApprovalMessages.Where(pc => pc.IdApprovalMessage.HasValue).Select(pc => pc.IdApprovalMessage)).ToList();
                                var itemsTobeDeleted = oldApprovalMessages.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdApprovalMessage)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newApprovalMessages.ForEach(pc =>
                                {
                                    pc.IdWorkflowAction = idWorkflowAction;
                                    DaoFactories.Instance.ApprovalMessageDao.SaveOnlyApprovalMessage(pc, db);
                                });
                                return newApprovalMessages;
                            }

                        
							public List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowActionWithoutSavingNewItem(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowAction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowTransitionsForWorkflowActionWithoutSavingNewItem(newWorkflowTransitions,idWorkflowAction,db);
                                }
                            }

							public List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowActionWithoutSavingNewItem(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowAction, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowTransition, bool>> expressionBuilder = p => p.IdWorkflowAction == idWorkflowAction;
                                var oldWorkflowTransitions = DaoFactories.Instance.WorkflowTransitionDao.GetWorkflowTransitionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowTransitions.EntityList.Select(pc => pc.IdWorkflowTransition).Except(newWorkflowTransitions.Where(pc => pc.IdWorkflowTransition.HasValue).Select(pc => pc.IdWorkflowTransition)).ToList();
                                var itemsTobeDeleted = oldWorkflowTransitions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowTransition)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newWorkflowTransitions;
                            }


                            public List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowAction(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowAction)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowTransitionsForWorkflowAction(newWorkflowTransitions,idWorkflowAction,db);
                                }
                            }

                            public List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowAction(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowAction, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowTransition, bool>> expressionBuilder = p => p.IdWorkflowAction == idWorkflowAction;
                                var oldWorkflowTransitions = DaoFactories.Instance.WorkflowTransitionDao.GetWorkflowTransitionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowTransitions.EntityList.Select(pc => pc.IdWorkflowTransition).Except(newWorkflowTransitions.Where(pc => pc.IdWorkflowTransition.HasValue).Select(pc => pc.IdWorkflowTransition)).ToList();
                                var itemsTobeDeleted = oldWorkflowTransitions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowTransition)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newWorkflowTransitions.ForEach(pc =>
                                {
                                    pc.IdWorkflowAction = idWorkflowAction;
                                    DaoFactories.Instance.WorkflowTransitionDao.SaveOnlyWorkflowTransition(pc, db);
                                });
                                return newWorkflowTransitions;
                            }

                        


    



		}
			public partial class WorkflowRoleDao :IWorkflowRoleDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public WorkflowRoleDao(){
			
			}

			public WorkflowRoleDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<WorkflowRole> GetAllWorkflowRoles(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowRoles(db, shouldRemap);
                }
            }

            public List<WorkflowRole> GetAllWorkflowRoles(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapWorkflowRoleList(db.WorkflowRoles.Where(p => p.IsDeactivated != true).ToList());
				
				return db.WorkflowRoles.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<WorkflowRole> GetAllWorkflowRolesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowRole, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowRole, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowRolesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<WorkflowRole> GetAllWorkflowRolesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<WorkflowRole, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowRole, dynamic> orderExpression = null)
            {
				IQueryable<WorkflowRole> query =  db.WorkflowRoles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowRole> baseListReturnType = new BaseListReturnType<WorkflowRole>();

                IQueryable<WorkflowRole> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdWorkflowRole" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<WorkflowRole, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.WorkflowRoleCode.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowRoleList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<WorkflowRole> GetAllWorkflowRolesWithWorkflowDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowRole, bool>> expression = null,bool shouldRemap = false, Func<WorkflowRole, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowRolesByPage(sortingPagingInfo, db,expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowRole> GetAllWorkflowRolesWithWorkflowTransitionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowRole, bool>> expression = null,bool shouldRemap = false, Func<WorkflowRole, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowRolesByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowTransitions"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<WorkflowRole> GetAllWorkflowRolesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowRole, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowRole, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowRolesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<WorkflowRole> GetAllWorkflowRolesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<WorkflowRole, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowRole, dynamic> orderExpression = null)
            {
				IQueryable<WorkflowRole> query =  db.WorkflowRoles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowRole> baseListReturnType = new BaseListReturnType<WorkflowRole>();

                IQueryable<WorkflowRole> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdWorkflowRole" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<WorkflowRole, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowRoleList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<WorkflowRole> GetAllWorkflowRolesWithWorkflowDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowRole, bool>> expression = null,bool shouldRemap = false, Func<WorkflowRole, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowRolesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowRole> GetAllWorkflowRolesWithWorkflowTransitionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowRole, bool>> expression = null,bool shouldRemap = false, Func<WorkflowRole, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowRolesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowTransitions"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<WorkflowRole> GetAllWorkflowRolesWithWorkflowDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowRoleWitDetails(new List<string>(){"Workflow"},shouldRemap);
					}
				}
							public BaseListReturnType<WorkflowRole> GetAllWorkflowRolesWithWorkflowTransitionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowRoleWitDetails(new List<string>(){"WorkflowTransitions"},shouldRemap);
					}
				}
			

			public BaseListReturnType<WorkflowRole> GetAllWorkflowRoleWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowRoleWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<WorkflowRole> GetAllWorkflowRoleWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<WorkflowRole> query =  db.WorkflowRoles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowRole> baseListReturnType = new BaseListReturnType<WorkflowRole>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowRoleList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public WorkflowRole GetWorkflowRole(long idWorkflowRole,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowRole(idWorkflowRole, db,shouldRemap);
                }
            }
                        public WorkflowRole GetWorkflowRole(long idWorkflowRole, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapWorkflowRoleSingle(db.WorkflowRoles.Where(p => p.IdWorkflowRole == idWorkflowRole && p.IsDeactivated != true).FirstOrDefault());

                return db.WorkflowRoles.Where(p => p.IdWorkflowRole == idWorkflowRole && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public WorkflowRole GetWorkflowRoleCustom( Expression<Func<WorkflowRole, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetWorkflowRoleCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public WorkflowRole GetWorkflowRoleCustom( SubscriptionEntities db , Expression<Func<WorkflowRole, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<WorkflowRole> query =  db.WorkflowRoles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapWorkflowRoleSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<WorkflowRole> GetWorkflowRoleCustomList( Expression<Func<WorkflowRole, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<WorkflowRole, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetWorkflowRoleCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<WorkflowRole> GetWorkflowRoleCustomList(  SubscriptionEntities db , Expression<Func<WorkflowRole, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<WorkflowRole, dynamic> orderExpression = null)
			{
				IQueryable<WorkflowRole> query =  db.WorkflowRoles;
                BaseListReturnType<WorkflowRole> baseListReturnType = new BaseListReturnType<WorkflowRole>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowRoleList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public WorkflowRole GetWorkflowRoleWithWorkflowDetails(long idWorkflowRole,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowRoleWithDetails(idWorkflowRole,new List<string>(){"Workflow"},shouldRemap);
					}
				}

            //IdWorkflow -- ZeroOrOne

                public BaseListReturnType<WorkflowRole> GetAllWorkflowRoleListByWorkflow(long idWorkflow)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowRoleListByWorkflow(idWorkflow, db);
                    }
                }
                public BaseListReturnType<WorkflowRole> GetAllWorkflowRoleListByWorkflow(long idWorkflow, SubscriptionEntities db)
                {
                    Expression<Func<WorkflowRole, bool>> expression = property=> property.IdWorkflow == idWorkflow && property.IsDeactivated !=true;
                    return GetWorkflowRoleCustomList(db, expression, null, true);
                }
                public BaseListReturnType<WorkflowRole> GetAllWorkflowRoleListByWorkflowByPage(long idWorkflow, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowRoleListByWorkflowByPage(idWorkflow, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<WorkflowRole> GetAllWorkflowRoleListByWorkflowByPage(long idWorkflow, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<WorkflowRole, bool>> expression = property => property.IdWorkflow == idWorkflow && property.IsDeactivated !=true;
                    return GetAllWorkflowRolesByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public WorkflowRole GetWorkflowRoleWithWorkflowTransitionsDetails(long idWorkflowRole,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowRoleWithDetails(idWorkflowRole,new List<string>(){"WorkflowTransitions"},shouldRemap);
					}
				}

            //IdWorkflowRole -- Many


			


			public WorkflowRole GetWorkflowRoleWithDetails(long idWorkflowRole, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowRoleWithDetails(idWorkflowRole, db,includes,shouldRemap);
                }
            }

            public WorkflowRole GetWorkflowRoleWithDetails(long idWorkflowRole, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<WorkflowRole> query =  db.WorkflowRoles;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapWorkflowRoleSingle(query
						.Where(p => p.IdWorkflowRole == idWorkflowRole && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdWorkflowRole == idWorkflowRole && p.IsDeactivated != true).FirstOrDefault();
            }

            public WorkflowRole GetWorkflowRoleWitDetails(long idWorkflowRole,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowRoleWitDetails(idWorkflowRole, db,shouldRemap);
                }
            }

            public WorkflowRole GetWorkflowRoleWitDetails(long idWorkflowRole, SubscriptionEntities db,bool shouldRemap = false)
            {
				WorkflowRole _WorkflowRole = db.WorkflowRoles

					.Include("Workflow")
					.Include("WorkflowTransitions")
								.Where(p => p.IdWorkflowRole == idWorkflowRole && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapWorkflowRoleSingle(_WorkflowRole);

				return  _WorkflowRole;
            }

            public List<WorkflowRole> GetWorkflowRoleListByIdList(List<long> workflowRoleIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowRoleListByIdList(workflowRoleIds, db);
                }
            }
            public List<WorkflowRole> GetWorkflowRoleListByIdList(List<long> workflowRoleIds, SubscriptionEntities db)
            {
                return db.WorkflowRoles.Where(p => p.IsDeactivated != true && workflowRoleIds.Contains(p.IdWorkflowRole.Value)).ToList();
            }


            public void SaveWorkflowRole(WorkflowRole workflowRole)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveWorkflowRole(workflowRole, db);
                }
            }

            public void SaveWorkflowRole(WorkflowRole workflowRole, SubscriptionEntities db)
            {
									if (workflowRole.Workflow != null) 
						DaoFactories.Instance.WorkflowDao.SaveWorkflow(workflowRole.Workflow, db);
				                
                if (workflowRole.IdWorkflowRole.HasValue){
					var workflowRoleFromDb = db.WorkflowRoles.Where(p => p.IdWorkflowRole == workflowRole.IdWorkflowRole).FirstOrDefault();
													workflowRoleFromDb.Description = workflowRole.Description;
													workflowRoleFromDb.WorkflowRoleCode = workflowRole.WorkflowRoleCode;
													workflowRoleFromDb.DisplayOrder = workflowRole.DisplayOrder;
													workflowRoleFromDb.IdWorkflow = workflowRole.IdWorkflow;
													workflowRoleFromDb.IsDeactivated = workflowRole.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              workflowRole.Workflow = null;
                                                db.WorkflowRoles.Add(workflowRole);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyWorkflowRole(WorkflowRole workflowRole)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyWorkflowRole(workflowRole, db);
                }
            }

            public void SaveOnlyWorkflowRole(WorkflowRole workflowRole, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // workflowRole.Workflow = null;
                                            if (workflowRole.IdWorkflowRole.HasValue){
					var workflowRoleFromDb = db.WorkflowRoles.Where(p => p.IdWorkflowRole == workflowRole.IdWorkflowRole).FirstOrDefault();
													workflowRoleFromDb.Description = workflowRole.Description;
													workflowRoleFromDb.WorkflowRoleCode = workflowRole.WorkflowRoleCode;
													workflowRoleFromDb.DisplayOrder = workflowRole.DisplayOrder;
													workflowRoleFromDb.IdWorkflow = workflowRole.IdWorkflow;
													workflowRoleFromDb.IsDeactivated = workflowRole.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					WorkflowRole _workflowRole = new WorkflowRole();
																	_workflowRole.Description = workflowRole.Description;
													_workflowRole.WorkflowRoleCode = workflowRole.WorkflowRoleCode;
													_workflowRole.DisplayOrder = workflowRole.DisplayOrder;
													_workflowRole.IdWorkflow = workflowRole.IdWorkflow;
													_workflowRole.IsDeactivated = workflowRole.IsDeactivated;
					

                    db.WorkflowRoles.Add(_workflowRole);
					db.SaveChanges();
					workflowRole.IdWorkflowRole =  _workflowRole.IdWorkflowRole;
                    
                }
            }

            public void DeleteWorkflowRole(WorkflowRole workflowRole)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteWorkflowRole(workflowRole, db);
                }
            }

            public void DeleteWorkflowRole(WorkflowRole workflowRole, SubscriptionEntities db)
            {
								var workflowRoleFromDb = GetWorkflowRole(workflowRole.IdWorkflowRole.Value,db);
				workflowRoleFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyWorkflowRole(WorkflowRole workflowRole)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyWorkflowRole(workflowRole, db);
                }
            }

            public void DeletePermanentlyWorkflowRole(WorkflowRole workflowRole, SubscriptionEntities db)
            {
								var workflowRoleFromDb = GetWorkflowRole(workflowRole.IdWorkflowRole.Value,db);
				
				db.WorkflowRoles.Remove(workflowRoleFromDb);
                db.SaveChanges();
            }


            
							public List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowRoleWithoutSavingNewItem(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowRole)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowTransitionsForWorkflowRoleWithoutSavingNewItem(newWorkflowTransitions,idWorkflowRole,db);
                                }
                            }

							public List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowRoleWithoutSavingNewItem(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowRole, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowTransition, bool>> expressionBuilder = p => p.IdWorkflowRole == idWorkflowRole;
                                var oldWorkflowTransitions = DaoFactories.Instance.WorkflowTransitionDao.GetWorkflowTransitionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowTransitions.EntityList.Select(pc => pc.IdWorkflowTransition).Except(newWorkflowTransitions.Where(pc => pc.IdWorkflowTransition.HasValue).Select(pc => pc.IdWorkflowTransition)).ToList();
                                var itemsTobeDeleted = oldWorkflowTransitions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowTransition)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newWorkflowTransitions;
                            }


                            public List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowRole(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowRole)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowTransitionsForWorkflowRole(newWorkflowTransitions,idWorkflowRole,db);
                                }
                            }

                            public List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowRole(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowRole, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowTransition, bool>> expressionBuilder = p => p.IdWorkflowRole == idWorkflowRole;
                                var oldWorkflowTransitions = DaoFactories.Instance.WorkflowTransitionDao.GetWorkflowTransitionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowTransitions.EntityList.Select(pc => pc.IdWorkflowTransition).Except(newWorkflowTransitions.Where(pc => pc.IdWorkflowTransition.HasValue).Select(pc => pc.IdWorkflowTransition)).ToList();
                                var itemsTobeDeleted = oldWorkflowTransitions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowTransition)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newWorkflowTransitions.ForEach(pc =>
                                {
                                    pc.IdWorkflowRole = idWorkflowRole;
                                    DaoFactories.Instance.WorkflowTransitionDao.SaveOnlyWorkflowTransition(pc, db);
                                });
                                return newWorkflowTransitions;
                            }

                        


    



		}
			public partial class WorkflowStateDao :IWorkflowStateDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public WorkflowStateDao(){
			
			}

			public WorkflowStateDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<WorkflowState> GetAllWorkflowStates(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowStates(db, shouldRemap);
                }
            }

            public List<WorkflowState> GetAllWorkflowStates(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapWorkflowStateList(db.WorkflowStates.Where(p => p.IsDeactivated != true).ToList());
				
				return db.WorkflowStates.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<WorkflowState> GetAllWorkflowStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowStatesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<WorkflowState> GetAllWorkflowStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<WorkflowState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowState, dynamic> orderExpression = null)
            {
				IQueryable<WorkflowState> query =  db.WorkflowStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowState> baseListReturnType = new BaseListReturnType<WorkflowState>();

                IQueryable<WorkflowState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdWorkflowState" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<WorkflowState, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Description.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.WorkflowStateCode.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithRequestsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null,bool shouldRemap = false, Func<WorkflowState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowStatesByPage(sortingPagingInfo, db,expression,new List<string>(){"Requests"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithWorkflowDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null,bool shouldRemap = false, Func<WorkflowState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowStatesByPage(sortingPagingInfo, db,expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithWorkflowTransitionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null,bool shouldRemap = false, Func<WorkflowState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowStatesByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowTransitions"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithWorkflowTransitions1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null,bool shouldRemap = false, Func<WorkflowState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowStatesByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowTransitions1"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<WorkflowState> GetAllWorkflowStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowState, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowStatesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<WorkflowState> GetAllWorkflowStatesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<WorkflowState, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowState, dynamic> orderExpression = null)
            {
				IQueryable<WorkflowState> query =  db.WorkflowStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowState> baseListReturnType = new BaseListReturnType<WorkflowState>();

                IQueryable<WorkflowState> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdWorkflowState" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<WorkflowState, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithRequestsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null,bool shouldRemap = false, Func<WorkflowState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowStatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Requests"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithWorkflowDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null,bool shouldRemap = false, Func<WorkflowState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowStatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithWorkflowTransitionsDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null,bool shouldRemap = false, Func<WorkflowState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowStatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowTransitions"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithWorkflowTransitions1DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null,bool shouldRemap = false, Func<WorkflowState, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowStatesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowTransitions1"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithRequestsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowStateWitDetails(new List<string>(){"Requests"},shouldRemap);
					}
				}
							public BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithWorkflowDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowStateWitDetails(new List<string>(){"Workflow"},shouldRemap);
					}
				}
							public BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithWorkflowTransitionsDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowStateWitDetails(new List<string>(){"WorkflowTransitions"},shouldRemap);
					}
				}
							public BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithWorkflowTransitions1Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowStateWitDetails(new List<string>(){"WorkflowTransitions1"},shouldRemap);
					}
				}
			

			public BaseListReturnType<WorkflowState> GetAllWorkflowStateWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowStateWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<WorkflowState> GetAllWorkflowStateWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<WorkflowState> query =  db.WorkflowStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowState> baseListReturnType = new BaseListReturnType<WorkflowState>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowStateList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public WorkflowState GetWorkflowState(long idWorkflowState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowState(idWorkflowState, db,shouldRemap);
                }
            }
                        public WorkflowState GetWorkflowState(long idWorkflowState, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapWorkflowStateSingle(db.WorkflowStates.Where(p => p.IdWorkflowState == idWorkflowState && p.IsDeactivated != true).FirstOrDefault());

                return db.WorkflowStates.Where(p => p.IdWorkflowState == idWorkflowState && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public WorkflowState GetWorkflowStateCustom( Expression<Func<WorkflowState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetWorkflowStateCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public WorkflowState GetWorkflowStateCustom( SubscriptionEntities db , Expression<Func<WorkflowState, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<WorkflowState> query =  db.WorkflowStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapWorkflowStateSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<WorkflowState> GetWorkflowStateCustomList( Expression<Func<WorkflowState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<WorkflowState, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetWorkflowStateCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<WorkflowState> GetWorkflowStateCustomList(  SubscriptionEntities db , Expression<Func<WorkflowState, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<WorkflowState, dynamic> orderExpression = null)
			{
				IQueryable<WorkflowState> query =  db.WorkflowStates;
                BaseListReturnType<WorkflowState> baseListReturnType = new BaseListReturnType<WorkflowState>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowStateList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public WorkflowState GetWorkflowStateWithRequestsDetails(long idWorkflowState,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowStateWithDetails(idWorkflowState,new List<string>(){"Requests"},shouldRemap);
					}
				}

            //IdWorkflowState -- Many


							public WorkflowState GetWorkflowStateWithWorkflowDetails(long idWorkflowState,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowStateWithDetails(idWorkflowState,new List<string>(){"Workflow"},shouldRemap);
					}
				}

            //IdWorkflow -- ZeroOrOne

                public BaseListReturnType<WorkflowState> GetAllWorkflowStateListByWorkflow(long idWorkflow)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowStateListByWorkflow(idWorkflow, db);
                    }
                }
                public BaseListReturnType<WorkflowState> GetAllWorkflowStateListByWorkflow(long idWorkflow, SubscriptionEntities db)
                {
                    Expression<Func<WorkflowState, bool>> expression = property=> property.IdWorkflow == idWorkflow && property.IsDeactivated !=true;
                    return GetWorkflowStateCustomList(db, expression, null, true);
                }
                public BaseListReturnType<WorkflowState> GetAllWorkflowStateListByWorkflowByPage(long idWorkflow, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowStateListByWorkflowByPage(idWorkflow, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<WorkflowState> GetAllWorkflowStateListByWorkflowByPage(long idWorkflow, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<WorkflowState, bool>> expression = property => property.IdWorkflow == idWorkflow && property.IsDeactivated !=true;
                    return GetAllWorkflowStatesByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public WorkflowState GetWorkflowStateWithWorkflowTransitionsDetails(long idWorkflowState,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowStateWithDetails(idWorkflowState,new List<string>(){"WorkflowTransitions"},shouldRemap);
					}
				}

            //IdWorkflowStateInitial -- Many


							public WorkflowState GetWorkflowStateWithWorkflowTransitions1Details(long idWorkflowState,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowStateWithDetails(idWorkflowState,new List<string>(){"WorkflowTransitions1"},shouldRemap);
					}
				}

            //IdWorkflowStateFinal -- Many


			


			public WorkflowState GetWorkflowStateWithDetails(long idWorkflowState, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowStateWithDetails(idWorkflowState, db,includes,shouldRemap);
                }
            }

            public WorkflowState GetWorkflowStateWithDetails(long idWorkflowState, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<WorkflowState> query =  db.WorkflowStates;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapWorkflowStateSingle(query
						.Where(p => p.IdWorkflowState == idWorkflowState && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdWorkflowState == idWorkflowState && p.IsDeactivated != true).FirstOrDefault();
            }

            public WorkflowState GetWorkflowStateWitDetails(long idWorkflowState,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowStateWitDetails(idWorkflowState, db,shouldRemap);
                }
            }

            public WorkflowState GetWorkflowStateWitDetails(long idWorkflowState, SubscriptionEntities db,bool shouldRemap = false)
            {
				WorkflowState _WorkflowState = db.WorkflowStates

					.Include("Requests")
					.Include("Workflow")
					.Include("WorkflowTransitions")
					.Include("WorkflowTransitions1")
								.Where(p => p.IdWorkflowState == idWorkflowState && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapWorkflowStateSingle(_WorkflowState);

				return  _WorkflowState;
            }

            public List<WorkflowState> GetWorkflowStateListByIdList(List<long> workflowStateIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowStateListByIdList(workflowStateIds, db);
                }
            }
            public List<WorkflowState> GetWorkflowStateListByIdList(List<long> workflowStateIds, SubscriptionEntities db)
            {
                return db.WorkflowStates.Where(p => p.IsDeactivated != true && workflowStateIds.Contains(p.IdWorkflowState.Value)).ToList();
            }


            public void SaveWorkflowState(WorkflowState workflowState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveWorkflowState(workflowState, db);
                }
            }

            public void SaveWorkflowState(WorkflowState workflowState, SubscriptionEntities db)
            {
									if (workflowState.Workflow != null) 
						DaoFactories.Instance.WorkflowDao.SaveWorkflow(workflowState.Workflow, db);
				                
                if (workflowState.IdWorkflowState.HasValue){
					var workflowStateFromDb = db.WorkflowStates.Where(p => p.IdWorkflowState == workflowState.IdWorkflowState).FirstOrDefault();
													workflowStateFromDb.Description = workflowState.Description;
													workflowStateFromDb.WorkflowStateCode = workflowState.WorkflowStateCode;
													workflowStateFromDb.DisplayOrder = workflowState.DisplayOrder;
													workflowStateFromDb.IdWorkflow = workflowState.IdWorkflow;
													workflowStateFromDb.IsDeactivated = workflowState.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              workflowState.Workflow = null;
                                                db.WorkflowStates.Add(workflowState);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyWorkflowState(WorkflowState workflowState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyWorkflowState(workflowState, db);
                }
            }

            public void SaveOnlyWorkflowState(WorkflowState workflowState, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // workflowState.Workflow = null;
                                            if (workflowState.IdWorkflowState.HasValue){
					var workflowStateFromDb = db.WorkflowStates.Where(p => p.IdWorkflowState == workflowState.IdWorkflowState).FirstOrDefault();
													workflowStateFromDb.Description = workflowState.Description;
													workflowStateFromDb.WorkflowStateCode = workflowState.WorkflowStateCode;
													workflowStateFromDb.DisplayOrder = workflowState.DisplayOrder;
													workflowStateFromDb.IdWorkflow = workflowState.IdWorkflow;
													workflowStateFromDb.IsDeactivated = workflowState.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					WorkflowState _workflowState = new WorkflowState();
																	_workflowState.Description = workflowState.Description;
													_workflowState.WorkflowStateCode = workflowState.WorkflowStateCode;
													_workflowState.DisplayOrder = workflowState.DisplayOrder;
													_workflowState.IdWorkflow = workflowState.IdWorkflow;
													_workflowState.IsDeactivated = workflowState.IsDeactivated;
					

                    db.WorkflowStates.Add(_workflowState);
					db.SaveChanges();
					workflowState.IdWorkflowState =  _workflowState.IdWorkflowState;
                    
                }
            }

            public void DeleteWorkflowState(WorkflowState workflowState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteWorkflowState(workflowState, db);
                }
            }

            public void DeleteWorkflowState(WorkflowState workflowState, SubscriptionEntities db)
            {
								var workflowStateFromDb = GetWorkflowState(workflowState.IdWorkflowState.Value,db);
				workflowStateFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyWorkflowState(WorkflowState workflowState)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyWorkflowState(workflowState, db);
                }
            }

            public void DeletePermanentlyWorkflowState(WorkflowState workflowState, SubscriptionEntities db)
            {
								var workflowStateFromDb = GetWorkflowState(workflowState.IdWorkflowState.Value,db);
				
				db.WorkflowStates.Remove(workflowStateFromDb);
                db.SaveChanges();
            }


            
							public List<Request> UpdateRequestsForWorkflowStateWithoutSavingNewItem(List<Request> newRequests,long idWorkflowState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestsForWorkflowStateWithoutSavingNewItem(newRequests,idWorkflowState,db);
                                }
                            }

							public List<Request> UpdateRequestsForWorkflowStateWithoutSavingNewItem(List<Request> newRequests,long idWorkflowState, SubscriptionEntities  db)
                            {
                                Expression<Func<Request, bool>> expressionBuilder = p => p.IdWorkflowState == idWorkflowState;
                                var oldRequests = DaoFactories.Instance.RequestDao.GetRequestCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequests.EntityList.Select(pc => pc.IdRequest).Except(newRequests.Where(pc => pc.IdRequest.HasValue).Select(pc => pc.IdRequest)).ToList();
                                var itemsTobeDeleted = oldRequests.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequest)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newRequests;
                            }


                            public List<Request> UpdateRequestsForWorkflowState(List<Request> newRequests,long idWorkflowState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateRequestsForWorkflowState(newRequests,idWorkflowState,db);
                                }
                            }

                            public List<Request> UpdateRequestsForWorkflowState(List<Request> newRequests,long idWorkflowState, SubscriptionEntities  db)
                            {
                                Expression<Func<Request, bool>> expressionBuilder = p => p.IdWorkflowState == idWorkflowState;
                                var oldRequests = DaoFactories.Instance.RequestDao.GetRequestCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldRequests.EntityList.Select(pc => pc.IdRequest).Except(newRequests.Where(pc => pc.IdRequest.HasValue).Select(pc => pc.IdRequest)).ToList();
                                var itemsTobeDeleted = oldRequests.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdRequest)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newRequests.ForEach(pc =>
                                {
                                    pc.IdWorkflowState = idWorkflowState;
                                    DaoFactories.Instance.RequestDao.SaveOnlyRequest(pc, db);
                                });
                                return newRequests;
                            }

                        
							public List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowStateWithoutSavingNewItem(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowTransitionsForWorkflowStateWithoutSavingNewItem(newWorkflowTransitions,idWorkflowState,db);
                                }
                            }

							public List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowStateWithoutSavingNewItem(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowTransition, bool>> expressionBuilder = p => p.IdWorkflowStateInitial == idWorkflowState;
                                var oldWorkflowTransitions = DaoFactories.Instance.WorkflowTransitionDao.GetWorkflowTransitionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowTransitions.EntityList.Select(pc => pc.IdWorkflowTransition).Except(newWorkflowTransitions.Where(pc => pc.IdWorkflowTransition.HasValue).Select(pc => pc.IdWorkflowTransition)).ToList();
                                var itemsTobeDeleted = oldWorkflowTransitions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowTransition)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newWorkflowTransitions;
                            }


                            public List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowState(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowTransitionsForWorkflowState(newWorkflowTransitions,idWorkflowState,db);
                                }
                            }

                            public List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowState(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowTransition, bool>> expressionBuilder = p => p.IdWorkflowStateInitial == idWorkflowState;
                                var oldWorkflowTransitions = DaoFactories.Instance.WorkflowTransitionDao.GetWorkflowTransitionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowTransitions.EntityList.Select(pc => pc.IdWorkflowTransition).Except(newWorkflowTransitions.Where(pc => pc.IdWorkflowTransition.HasValue).Select(pc => pc.IdWorkflowTransition)).ToList();
                                var itemsTobeDeleted = oldWorkflowTransitions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowTransition)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newWorkflowTransitions.ForEach(pc =>
                                {
                                    pc.IdWorkflowStateInitial = idWorkflowState;
                                    DaoFactories.Instance.WorkflowTransitionDao.SaveOnlyWorkflowTransition(pc, db);
                                });
                                return newWorkflowTransitions;
                            }

                        
							public List<WorkflowTransition> UpdateWorkflowTransitions1ForWorkflowStateWithoutSavingNewItem(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowTransitions1ForWorkflowStateWithoutSavingNewItem(newWorkflowTransitions,idWorkflowState,db);
                                }
                            }

							public List<WorkflowTransition> UpdateWorkflowTransitions1ForWorkflowStateWithoutSavingNewItem(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowTransition, bool>> expressionBuilder = p => p.IdWorkflowStateFinal == idWorkflowState;
                                var oldWorkflowTransitions = DaoFactories.Instance.WorkflowTransitionDao.GetWorkflowTransitionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowTransitions.EntityList.Select(pc => pc.IdWorkflowTransition).Except(newWorkflowTransitions.Where(pc => pc.IdWorkflowTransition.HasValue).Select(pc => pc.IdWorkflowTransition)).ToList();
                                var itemsTobeDeleted = oldWorkflowTransitions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowTransition)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newWorkflowTransitions;
                            }


                            public List<WorkflowTransition> UpdateWorkflowTransitions1ForWorkflowState(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowTransitions1ForWorkflowState(newWorkflowTransitions,idWorkflowState,db);
                                }
                            }

                            public List<WorkflowTransition> UpdateWorkflowTransitions1ForWorkflowState(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowTransition, bool>> expressionBuilder = p => p.IdWorkflowStateFinal == idWorkflowState;
                                var oldWorkflowTransitions = DaoFactories.Instance.WorkflowTransitionDao.GetWorkflowTransitionCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowTransitions.EntityList.Select(pc => pc.IdWorkflowTransition).Except(newWorkflowTransitions.Where(pc => pc.IdWorkflowTransition.HasValue).Select(pc => pc.IdWorkflowTransition)).ToList();
                                var itemsTobeDeleted = oldWorkflowTransitions.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowTransition)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newWorkflowTransitions.ForEach(pc =>
                                {
                                    pc.IdWorkflowStateFinal = idWorkflowState;
                                    DaoFactories.Instance.WorkflowTransitionDao.SaveOnlyWorkflowTransition(pc, db);
                                });
                                return newWorkflowTransitions;
                            }

                        


    



		}
			public partial class WorkflowTransitionDao :IWorkflowTransitionDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public WorkflowTransitionDao(){
			
			}

			public WorkflowTransitionDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<WorkflowTransition> GetAllWorkflowTransitions(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowTransitions(db, shouldRemap);
                }
            }

            public List<WorkflowTransition> GetAllWorkflowTransitions(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapWorkflowTransitionList(db.WorkflowTransitions.Where(p => p.IsDeactivated != true).ToList());
				
				return db.WorkflowTransitions.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowTransitionsByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<WorkflowTransition, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
            {
				IQueryable<WorkflowTransition> query =  db.WorkflowTransitions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowTransition> baseListReturnType = new BaseListReturnType<WorkflowTransition>();

                IQueryable<WorkflowTransition> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdWorkflowTransition" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<WorkflowTransition, bool>> expressionBuilder = expression;

                                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowTransitionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowActionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionsByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowAction"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowRoleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionsByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowRole"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionsByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowState1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionsByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowState1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowTransitionOnExecutesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionsByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowTransitionOnExecutes"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowTransitionsByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<WorkflowTransition, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
            {
				IQueryable<WorkflowTransition> query =  db.WorkflowTransitions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowTransition> baseListReturnType = new BaseListReturnType<WorkflowTransition>();

                IQueryable<WorkflowTransition> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdWorkflowTransition" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<WorkflowTransition, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowTransitionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowActionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowAction"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowRoleDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowRole"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowStateDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowState"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowState1DetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowState1"},shouldRemap,orderExpression);
					}
				}
							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowTransitionOnExecutesDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap = false, Func<WorkflowTransition, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionsByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowTransitionOnExecutes"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowActionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionWitDetails(new List<string>(){"WorkflowAction"},shouldRemap);
					}
				}
							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowRoleDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionWitDetails(new List<string>(){"WorkflowRole"},shouldRemap);
					}
				}
							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowStateDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionWitDetails(new List<string>(){"WorkflowState"},shouldRemap);
					}
				}
							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowState1Details(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionWitDetails(new List<string>(){"WorkflowState1"},shouldRemap);
					}
				}
							public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowTransitionOnExecutesDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionWitDetails(new List<string>(){"WorkflowTransitionOnExecutes"},shouldRemap);
					}
				}
			

			public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowTransitionWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<WorkflowTransition> query =  db.WorkflowTransitions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowTransition> baseListReturnType = new BaseListReturnType<WorkflowTransition>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowTransitionList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public WorkflowTransition GetWorkflowTransition(long idWorkflowTransition,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowTransition(idWorkflowTransition, db,shouldRemap);
                }
            }
                        public WorkflowTransition GetWorkflowTransition(long idWorkflowTransition, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapWorkflowTransitionSingle(db.WorkflowTransitions.Where(p => p.IdWorkflowTransition == idWorkflowTransition && p.IsDeactivated != true).FirstOrDefault());

                return db.WorkflowTransitions.Where(p => p.IdWorkflowTransition == idWorkflowTransition && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public WorkflowTransition GetWorkflowTransitionCustom( Expression<Func<WorkflowTransition, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetWorkflowTransitionCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public WorkflowTransition GetWorkflowTransitionCustom( SubscriptionEntities db , Expression<Func<WorkflowTransition, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<WorkflowTransition> query =  db.WorkflowTransitions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapWorkflowTransitionSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<WorkflowTransition> GetWorkflowTransitionCustomList( Expression<Func<WorkflowTransition, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<WorkflowTransition, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetWorkflowTransitionCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<WorkflowTransition> GetWorkflowTransitionCustomList(  SubscriptionEntities db , Expression<Func<WorkflowTransition, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<WorkflowTransition, dynamic> orderExpression = null)
			{
				IQueryable<WorkflowTransition> query =  db.WorkflowTransitions;
                BaseListReturnType<WorkflowTransition> baseListReturnType = new BaseListReturnType<WorkflowTransition>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowTransitionList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public WorkflowTransition GetWorkflowTransitionWithWorkflowActionDetails(long idWorkflowTransition,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowTransitionWithDetails(idWorkflowTransition,new List<string>(){"WorkflowAction"},shouldRemap);
					}
				}

            //IdWorkflowAction -- ZeroOrOne

                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowAction(long idWorkflowAction)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowTransitionListByWorkflowAction(idWorkflowAction, db);
                    }
                }
                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowAction(long idWorkflowAction, SubscriptionEntities db)
                {
                    Expression<Func<WorkflowTransition, bool>> expression = property=> property.IdWorkflowAction == idWorkflowAction && property.IsDeactivated !=true;
                    return GetWorkflowTransitionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowActionByPage(long idWorkflowAction, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowTransitionListByWorkflowActionByPage(idWorkflowAction, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowActionByPage(long idWorkflowAction, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<WorkflowTransition, bool>> expression = property => property.IdWorkflowAction == idWorkflowAction && property.IsDeactivated !=true;
                    return GetAllWorkflowTransitionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public WorkflowTransition GetWorkflowTransitionWithWorkflowRoleDetails(long idWorkflowTransition,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowTransitionWithDetails(idWorkflowTransition,new List<string>(){"WorkflowRole"},shouldRemap);
					}
				}

            //IdWorkflowRole -- ZeroOrOne

                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowRole(long idWorkflowRole)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowTransitionListByWorkflowRole(idWorkflowRole, db);
                    }
                }
                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowRole(long idWorkflowRole, SubscriptionEntities db)
                {
                    Expression<Func<WorkflowTransition, bool>> expression = property=> property.IdWorkflowRole == idWorkflowRole && property.IsDeactivated !=true;
                    return GetWorkflowTransitionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowRoleByPage(long idWorkflowRole, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowTransitionListByWorkflowRoleByPage(idWorkflowRole, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowRoleByPage(long idWorkflowRole, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<WorkflowTransition, bool>> expression = property => property.IdWorkflowRole == idWorkflowRole && property.IsDeactivated !=true;
                    return GetAllWorkflowTransitionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public WorkflowTransition GetWorkflowTransitionWithWorkflowStateDetails(long idWorkflowTransition,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowTransitionWithDetails(idWorkflowTransition,new List<string>(){"WorkflowState"},shouldRemap);
					}
				}

            //IdWorkflowStateInitial -- ZeroOrOne

                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowState(long idWorkflowState)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowTransitionListByWorkflowState(idWorkflowState, db);
                    }
                }
                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowState(long idWorkflowState, SubscriptionEntities db)
                {
                    Expression<Func<WorkflowTransition, bool>> expression = property=> property.IdWorkflowStateInitial == idWorkflowState && property.IsDeactivated !=true;
                    return GetWorkflowTransitionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowStateByPage(long idWorkflowState, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowTransitionListByWorkflowStateByPage(idWorkflowState, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowStateByPage(long idWorkflowState, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<WorkflowTransition, bool>> expression = property => property.IdWorkflowStateInitial == idWorkflowState && property.IsDeactivated !=true;
                    return GetAllWorkflowTransitionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public WorkflowTransition GetWorkflowTransitionWithWorkflowState1Details(long idWorkflowTransition,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowTransitionWithDetails(idWorkflowTransition,new List<string>(){"WorkflowState1"},shouldRemap);
					}
				}

            //IdWorkflowStateFinal -- ZeroOrOne

                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowState1(long idWorkflowState1)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowTransitionListByWorkflowState1(idWorkflowState1, db);
                    }
                }
                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowState1(long idWorkflowState1, SubscriptionEntities db)
                {
                    Expression<Func<WorkflowTransition, bool>> expression = property=> property.IdWorkflowStateFinal == idWorkflowState1 && property.IsDeactivated !=true;
                    return GetWorkflowTransitionCustomList(db, expression, null, true);
                }
                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowState1ByPage(long idWorkflowState1, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowTransitionListByWorkflowState1ByPage(idWorkflowState1, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowState1ByPage(long idWorkflowState1, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<WorkflowTransition, bool>> expression = property => property.IdWorkflowStateFinal == idWorkflowState1 && property.IsDeactivated !=true;
                    return GetAllWorkflowTransitionsByPage(sortingPagingInfo, expression,  null, true);
                }
            

							public WorkflowTransition GetWorkflowTransitionWithWorkflowTransitionOnExecutesDetails(long idWorkflowTransition,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowTransitionWithDetails(idWorkflowTransition,new List<string>(){"WorkflowTransitionOnExecutes"},shouldRemap);
					}
				}

            //IdWorkflowTransition -- Many


			


			public WorkflowTransition GetWorkflowTransitionWithDetails(long idWorkflowTransition, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowTransitionWithDetails(idWorkflowTransition, db,includes,shouldRemap);
                }
            }

            public WorkflowTransition GetWorkflowTransitionWithDetails(long idWorkflowTransition, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<WorkflowTransition> query =  db.WorkflowTransitions;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapWorkflowTransitionSingle(query
						.Where(p => p.IdWorkflowTransition == idWorkflowTransition && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdWorkflowTransition == idWorkflowTransition && p.IsDeactivated != true).FirstOrDefault();
            }

            public WorkflowTransition GetWorkflowTransitionWitDetails(long idWorkflowTransition,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowTransitionWitDetails(idWorkflowTransition, db,shouldRemap);
                }
            }

            public WorkflowTransition GetWorkflowTransitionWitDetails(long idWorkflowTransition, SubscriptionEntities db,bool shouldRemap = false)
            {
				WorkflowTransition _WorkflowTransition = db.WorkflowTransitions

					.Include("WorkflowAction")
					.Include("WorkflowRole")
					.Include("WorkflowState")
					.Include("WorkflowState1")
					.Include("WorkflowTransitionOnExecutes")
								.Where(p => p.IdWorkflowTransition == idWorkflowTransition && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapWorkflowTransitionSingle(_WorkflowTransition);

				return  _WorkflowTransition;
            }

            public List<WorkflowTransition> GetWorkflowTransitionListByIdList(List<long> workflowTransitionIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowTransitionListByIdList(workflowTransitionIds, db);
                }
            }
            public List<WorkflowTransition> GetWorkflowTransitionListByIdList(List<long> workflowTransitionIds, SubscriptionEntities db)
            {
                return db.WorkflowTransitions.Where(p => p.IsDeactivated != true && workflowTransitionIds.Contains(p.IdWorkflowTransition.Value)).ToList();
            }


            public void SaveWorkflowTransition(WorkflowTransition workflowTransition)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveWorkflowTransition(workflowTransition, db);
                }
            }

            public void SaveWorkflowTransition(WorkflowTransition workflowTransition, SubscriptionEntities db)
            {
									if (workflowTransition.WorkflowAction != null) 
						DaoFactories.Instance.WorkflowActionDao.SaveWorkflowAction(workflowTransition.WorkflowAction, db);
									if (workflowTransition.WorkflowRole != null) 
						DaoFactories.Instance.WorkflowRoleDao.SaveWorkflowRole(workflowTransition.WorkflowRole, db);
									if (workflowTransition.WorkflowState != null) 
						DaoFactories.Instance.WorkflowStateDao.SaveWorkflowState(workflowTransition.WorkflowState, db);
									if (workflowTransition.WorkflowState1 != null) 
						DaoFactories.Instance.WorkflowStateDao.SaveWorkflowState(workflowTransition.WorkflowState1, db);
				                
                if (workflowTransition.IdWorkflowTransition.HasValue){
					var workflowTransitionFromDb = db.WorkflowTransitions.Where(p => p.IdWorkflowTransition == workflowTransition.IdWorkflowTransition).FirstOrDefault();
													workflowTransitionFromDb.IdWorkflowStateInitial = workflowTransition.IdWorkflowStateInitial;
													workflowTransitionFromDb.IdWorkflowAction = workflowTransition.IdWorkflowAction;
													workflowTransitionFromDb.IdWorkflowStateFinal = workflowTransition.IdWorkflowStateFinal;
													workflowTransitionFromDb.IdWorkflowRole = workflowTransition.IdWorkflowRole;
													workflowTransitionFromDb.IsDeactivated = workflowTransition.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              workflowTransition.WorkflowAction = null;
                                                        //fix for saving without duplicating items in db
                              workflowTransition.WorkflowRole = null;
                                                        //fix for saving without duplicating items in db
                              workflowTransition.WorkflowState = null;
                                                        //fix for saving without duplicating items in db
                              workflowTransition.WorkflowState1 = null;
                                                db.WorkflowTransitions.Add(workflowTransition);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyWorkflowTransition(WorkflowTransition workflowTransition)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyWorkflowTransition(workflowTransition, db);
                }
            }

            public void SaveOnlyWorkflowTransition(WorkflowTransition workflowTransition, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // workflowTransition.WorkflowAction = null;
                                                        //fix for saving without duplicating items in db
                             // workflowTransition.WorkflowRole = null;
                                                        //fix for saving without duplicating items in db
                             // workflowTransition.WorkflowState = null;
                                                        //fix for saving without duplicating items in db
                             // workflowTransition.WorkflowState1 = null;
                                            if (workflowTransition.IdWorkflowTransition.HasValue){
					var workflowTransitionFromDb = db.WorkflowTransitions.Where(p => p.IdWorkflowTransition == workflowTransition.IdWorkflowTransition).FirstOrDefault();
													workflowTransitionFromDb.IdWorkflowStateInitial = workflowTransition.IdWorkflowStateInitial;
													workflowTransitionFromDb.IdWorkflowAction = workflowTransition.IdWorkflowAction;
													workflowTransitionFromDb.IdWorkflowStateFinal = workflowTransition.IdWorkflowStateFinal;
													workflowTransitionFromDb.IdWorkflowRole = workflowTransition.IdWorkflowRole;
													workflowTransitionFromDb.IsDeactivated = workflowTransition.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					WorkflowTransition _workflowTransition = new WorkflowTransition();
																	_workflowTransition.IdWorkflowStateInitial = workflowTransition.IdWorkflowStateInitial;
													_workflowTransition.IdWorkflowAction = workflowTransition.IdWorkflowAction;
													_workflowTransition.IdWorkflowStateFinal = workflowTransition.IdWorkflowStateFinal;
													_workflowTransition.IdWorkflowRole = workflowTransition.IdWorkflowRole;
													_workflowTransition.IsDeactivated = workflowTransition.IsDeactivated;
					

                    db.WorkflowTransitions.Add(_workflowTransition);
					db.SaveChanges();
					workflowTransition.IdWorkflowTransition =  _workflowTransition.IdWorkflowTransition;
                    
                }
            }

            public void DeleteWorkflowTransition(WorkflowTransition workflowTransition)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteWorkflowTransition(workflowTransition, db);
                }
            }

            public void DeleteWorkflowTransition(WorkflowTransition workflowTransition, SubscriptionEntities db)
            {
								var workflowTransitionFromDb = GetWorkflowTransition(workflowTransition.IdWorkflowTransition.Value,db);
				workflowTransitionFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyWorkflowTransition(WorkflowTransition workflowTransition)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyWorkflowTransition(workflowTransition, db);
                }
            }

            public void DeletePermanentlyWorkflowTransition(WorkflowTransition workflowTransition, SubscriptionEntities db)
            {
								var workflowTransitionFromDb = GetWorkflowTransition(workflowTransition.IdWorkflowTransition.Value,db);
				
				db.WorkflowTransitions.Remove(workflowTransitionFromDb);
                db.SaveChanges();
            }


            
							public List<WorkflowTransitionOnExecute> UpdateWorkflowTransitionOnExecutesForWorkflowTransitionWithoutSavingNewItem(List<WorkflowTransitionOnExecute> newWorkflowTransitionOnExecutes,long idWorkflowTransition)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowTransitionOnExecutesForWorkflowTransitionWithoutSavingNewItem(newWorkflowTransitionOnExecutes,idWorkflowTransition,db);
                                }
                            }

							public List<WorkflowTransitionOnExecute> UpdateWorkflowTransitionOnExecutesForWorkflowTransitionWithoutSavingNewItem(List<WorkflowTransitionOnExecute> newWorkflowTransitionOnExecutes,long idWorkflowTransition, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowTransitionOnExecute, bool>> expressionBuilder = p => p.IdWorkflowTransition == idWorkflowTransition;
                                var oldWorkflowTransitionOnExecutes = DaoFactories.Instance.WorkflowTransitionOnExecuteDao.GetWorkflowTransitionOnExecuteCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowTransitionOnExecutes.EntityList.Select(pc => pc.IdWorkflowTransitionOnExecute).Except(newWorkflowTransitionOnExecutes.Where(pc => pc.IdWorkflowTransitionOnExecute.HasValue).Select(pc => pc.IdWorkflowTransitionOnExecute)).ToList();
                                var itemsTobeDeleted = oldWorkflowTransitionOnExecutes.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowTransitionOnExecute)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                //db.SaveChanges();
                
                                return newWorkflowTransitionOnExecutes;
                            }


                            public List<WorkflowTransitionOnExecute> UpdateWorkflowTransitionOnExecutesForWorkflowTransition(List<WorkflowTransitionOnExecute> newWorkflowTransitionOnExecutes,long idWorkflowTransition)
                            {
                                using (SubscriptionEntities db = new SubscriptionEntities())
                                {
                                    return UpdateWorkflowTransitionOnExecutesForWorkflowTransition(newWorkflowTransitionOnExecutes,idWorkflowTransition,db);
                                }
                            }

                            public List<WorkflowTransitionOnExecute> UpdateWorkflowTransitionOnExecutesForWorkflowTransition(List<WorkflowTransitionOnExecute> newWorkflowTransitionOnExecutes,long idWorkflowTransition, SubscriptionEntities  db)
                            {
                                Expression<Func<WorkflowTransitionOnExecute, bool>> expressionBuilder = p => p.IdWorkflowTransition == idWorkflowTransition;
                                var oldWorkflowTransitionOnExecutes = DaoFactories.Instance.WorkflowTransitionOnExecuteDao.GetWorkflowTransitionOnExecuteCustomList(db,expressionBuilder);
                                
                                var idItemsTobeDeleted = oldWorkflowTransitionOnExecutes.EntityList.Select(pc => pc.IdWorkflowTransitionOnExecute).Except(newWorkflowTransitionOnExecutes.Where(pc => pc.IdWorkflowTransitionOnExecute.HasValue).Select(pc => pc.IdWorkflowTransitionOnExecute)).ToList();
                                var itemsTobeDeleted = oldWorkflowTransitionOnExecutes.EntityList.Where(pc => idItemsTobeDeleted.Contains(pc.IdWorkflowTransitionOnExecute)).ToList();

                                itemsTobeDeleted.ToList().ForEach(pc =>
                                {
                                    pc.IsDeactivated = true;
                                });
                                db.SaveChanges();
                                newWorkflowTransitionOnExecutes.ForEach(pc =>
                                {
                                    pc.IdWorkflowTransition = idWorkflowTransition;
                                    DaoFactories.Instance.WorkflowTransitionOnExecuteDao.SaveOnlyWorkflowTransitionOnExecute(pc, db);
                                });
                                return newWorkflowTransitionOnExecutes;
                            }

                        


    



		}
			public partial class WorkflowTransitionOnExecuteDao :IWorkflowTransitionOnExecuteDao
		{
			private EntityFramework.SubscriptionEntities _db ;
			public WorkflowTransitionOnExecuteDao(){
			
			}

			public WorkflowTransitionOnExecuteDao(EntityFramework.SubscriptionEntities db){
				_db = db;
			}


	        public List<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecutes(bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowTransitionOnExecutes(db, shouldRemap);
                }
            }

            public List<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecutes(SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapWorkflowTransitionOnExecuteList(db.WorkflowTransitionOnExecutes.Where(p => p.IsDeactivated != true).ToList());
				
				return db.WorkflowTransitionOnExecutes.Where(p => p.IsDeactivated != true).ToList();
            }

            public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecutesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransitionOnExecute, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowTransitionOnExecutesByPage(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecutesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<WorkflowTransitionOnExecute, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
            {
				IQueryable<WorkflowTransitionOnExecute> query =  db.WorkflowTransitionOnExecutes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowTransitionOnExecute> baseListReturnType = new BaseListReturnType<WorkflowTransitionOnExecute>();

                IQueryable<WorkflowTransitionOnExecute> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdWorkflowTransitionOnExecute" : sortingPagingInfo.SortField;
					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<WorkflowTransitionOnExecute, bool>> expressionBuilder = expression;

                    								if(expressionBuilder == null)
									 expressionBuilder = property => property.Action.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower());
								else
									expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.Action.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
								                    expressionBuilder = expressionBuilder.CombineWithOrElse(property => property.JsonContent.Trim().ToLower().Contains(sortingPagingInfo.Search.Trim().ToLower()));
						                        orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowTransitionOnExecuteList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecutesWithWorkflowTransitionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransitionOnExecute, bool>> expression = null,bool shouldRemap = false, Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionOnExecutesByPage(sortingPagingInfo, db,expression,new List<string>(){"WorkflowTransition"},shouldRemap,orderExpression);
					}
				}
			



            public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecutesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransitionOnExecute, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowTransitionOnExecutesByPageWithMyExpression(sortingPagingInfo, db,expression,includes,shouldRemap,orderExpression);
                }
            }

            public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecutesByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, SubscriptionEntities db, Expression<Func<WorkflowTransitionOnExecute, bool>> expression = null, List<string> includes = null,bool shouldRemap = false, Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
            {
				IQueryable<WorkflowTransitionOnExecute> query =  db.WorkflowTransitionOnExecutes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowTransitionOnExecute> baseListReturnType = new BaseListReturnType<WorkflowTransitionOnExecute>();

                IQueryable<WorkflowTransitionOnExecute> orderedQuery = null;
				if(orderExpression !=null){
					orderedQuery = query.OrderBy(orderExpression).AsQueryable(); 
				}
				else{
					string sortField =  String.IsNullOrEmpty(sortingPagingInfo.SortField) ? "IdWorkflowTransitionOnExecute" : sortingPagingInfo.SortField;

					if (sortingPagingInfo.SortByDesc)
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.DESC));
					else
						orderedQuery = query.OrderBy(DbUtilStringBuilder.BuildSortString(sortField, SortEnum.ASC));
				}
                if (!string.IsNullOrWhiteSpace(sortingPagingInfo.Search) || expression !=null){

                    Expression<Func<WorkflowTransitionOnExecute, bool>> expressionBuilder = expression;

            
                    orderedQuery = orderedQuery.Where(expressionBuilder);
                }
				orderedQuery = orderedQuery.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = orderedQuery.Count();
                
                if(sortingPagingInfo.PageSize == -1){
                    baseListReturnType.EntityList = orderedQuery.ToList();
                }else{
                    baseListReturnType.EntityList = orderedQuery.Skip(sortingPagingInfo.PageSize * sortingPagingInfo.CurrentPageIndex)
                        .Take(sortingPagingInfo.PageSize)
                        .ToList();
                    }
				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowTransitionOnExecuteList(baseListReturnType.EntityList);

                return baseListReturnType;
            }

							public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecutesWithWorkflowTransitionDetailsByPageWithMyExpression(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransitionOnExecute, bool>> expression = null,bool shouldRemap = false, Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionOnExecutesByPageWithMyExpression(sortingPagingInfo, db,expression,new List<string>(){"WorkflowTransition"},shouldRemap,orderExpression);
					}
				}
			






							public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecutesWithWorkflowTransitionDetails(bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetAllWorkflowTransitionOnExecuteWitDetails(new List<string>(){"WorkflowTransition"},shouldRemap);
					}
				}
			

			public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecuteWitDetails( List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetAllWorkflowTransitionOnExecuteWitDetails(db,includes,shouldRemap);
                }
            }


			public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecuteWitDetails( SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<WorkflowTransitionOnExecute> query =  db.WorkflowTransitionOnExecutes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

                BaseListReturnType<WorkflowTransitionOnExecute> baseListReturnType = new BaseListReturnType<WorkflowTransitionOnExecute>();


				query = query.Where(p => p.IsDeactivated != true);
                baseListReturnType.TotalCount = query.Count();
                
                baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowTransitionOnExecuteList(baseListReturnType.EntityList);

                return baseListReturnType;
            }


            public WorkflowTransitionOnExecute GetWorkflowTransitionOnExecute(long idWorkflowTransitionOnExecute,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowTransitionOnExecute(idWorkflowTransitionOnExecute, db,shouldRemap);
                }
            }
                        public WorkflowTransitionOnExecute GetWorkflowTransitionOnExecute(long idWorkflowTransitionOnExecute, SubscriptionEntities db,bool shouldRemap = false)
            {
				if(shouldRemap)
					return Mapper.MapWorkflowTransitionOnExecuteSingle(db.WorkflowTransitionOnExecutes.Where(p => p.IdWorkflowTransitionOnExecute == idWorkflowTransitionOnExecute && p.IsDeactivated != true).FirstOrDefault());

                return db.WorkflowTransitionOnExecutes.Where(p => p.IdWorkflowTransitionOnExecute == idWorkflowTransitionOnExecute && p.IsDeactivated != true).FirstOrDefault();
            }
			
			public WorkflowTransitionOnExecute GetWorkflowTransitionOnExecuteCustom( Expression<Func<WorkflowTransitionOnExecute, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetWorkflowTransitionOnExecuteCustom(db , expression,includes,shouldRemap);
                }			
			
			}
			public WorkflowTransitionOnExecute GetWorkflowTransitionOnExecuteCustom( SubscriptionEntities db , Expression<Func<WorkflowTransitionOnExecute, bool>> expression, List<string> includes = null,bool shouldRemap = false)
			{
				IQueryable<WorkflowTransitionOnExecute> query =  db.WorkflowTransitionOnExecutes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);
				
				if(shouldRemap)
					return Mapper.MapWorkflowTransitionOnExecuteSingle(query.FirstOrDefault());

				return query.FirstOrDefault();
			}


			public BaseListReturnType<WorkflowTransitionOnExecute> GetWorkflowTransitionOnExecuteCustomList( Expression<Func<WorkflowTransitionOnExecute, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
			{
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                     return GetWorkflowTransitionOnExecuteCustomList(db , expression,includes,shouldRemap,orderExpression);
                }			
			
			}
			public BaseListReturnType<WorkflowTransitionOnExecute> GetWorkflowTransitionOnExecuteCustomList(  SubscriptionEntities db , Expression<Func<WorkflowTransitionOnExecute, bool>> expression, List<string> includes = null,bool shouldRemap = false,Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
			{
				IQueryable<WorkflowTransitionOnExecute> query =  db.WorkflowTransitionOnExecutes;
                BaseListReturnType<WorkflowTransitionOnExecute> baseListReturnType = new BaseListReturnType<WorkflowTransitionOnExecute>();

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(expression != null)
					query = query.Where(expression);

				baseListReturnType.TotalCount = query.Count();
				baseListReturnType.EntityList = query.ToList();

				if(shouldRemap)
					baseListReturnType.EntityList = Mapper.MapWorkflowTransitionOnExecuteList(baseListReturnType.EntityList);

				return baseListReturnType;
			}
							public WorkflowTransitionOnExecute GetWorkflowTransitionOnExecuteWithWorkflowTransitionDetails(long idWorkflowTransitionOnExecute,bool shouldRemap = false)
				{
					using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
					{
						return GetWorkflowTransitionOnExecuteWithDetails(idWorkflowTransitionOnExecute,new List<string>(){"WorkflowTransition"},shouldRemap);
					}
				}

            //IdWorkflowTransition -- ZeroOrOne

                public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecuteListByWorkflowTransition(long idWorkflowTransition)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowTransitionOnExecuteListByWorkflowTransition(idWorkflowTransition, db);
                    }
                }
                public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecuteListByWorkflowTransition(long idWorkflowTransition, SubscriptionEntities db)
                {
                    Expression<Func<WorkflowTransitionOnExecute, bool>> expression = property=> property.IdWorkflowTransition == idWorkflowTransition && property.IsDeactivated !=true;
                    return GetWorkflowTransitionOnExecuteCustomList(db, expression, null, true);
                }
                public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecuteListByWorkflowTransitionByPage(long idWorkflowTransition, Business.Common.SortingPagingInfo sortingPagingInfo)
                {
                    using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                    {
                        return GetAllWorkflowTransitionOnExecuteListByWorkflowTransitionByPage(idWorkflowTransition, sortingPagingInfo, db);
                    }
                }
                public BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecuteListByWorkflowTransitionByPage(long idWorkflowTransition, Business.Common.SortingPagingInfo sortingPagingInfo,SubscriptionEntities db)
                {
                    Expression<Func<WorkflowTransitionOnExecute, bool>> expression = property => property.IdWorkflowTransition == idWorkflowTransition && property.IsDeactivated !=true;
                    return GetAllWorkflowTransitionOnExecutesByPage(sortingPagingInfo, expression,  null, true);
                }
            

			


			public WorkflowTransitionOnExecute GetWorkflowTransitionOnExecuteWithDetails(long idWorkflowTransitionOnExecute, List<string> includes = null,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowTransitionOnExecuteWithDetails(idWorkflowTransitionOnExecute, db,includes,shouldRemap);
                }
            }

            public WorkflowTransitionOnExecute GetWorkflowTransitionOnExecuteWithDetails(long idWorkflowTransitionOnExecute, SubscriptionEntities db, List<string> includes = null,bool shouldRemap = false)
            {
				IQueryable<WorkflowTransitionOnExecute> query =  db.WorkflowTransitionOnExecutes;

				if (includes != null)
				{
					query = query.WithIncludes(includes);
				}

				if(shouldRemap)
					return Mapper.MapWorkflowTransitionOnExecuteSingle(query
						.Where(p => p.IdWorkflowTransitionOnExecute == idWorkflowTransitionOnExecute && p.IsDeactivated != true).FirstOrDefault());

                return query
				.Where(p => p.IdWorkflowTransitionOnExecute == idWorkflowTransitionOnExecute && p.IsDeactivated != true).FirstOrDefault();
            }

            public WorkflowTransitionOnExecute GetWorkflowTransitionOnExecuteWitDetails(long idWorkflowTransitionOnExecute,bool shouldRemap = false)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowTransitionOnExecuteWitDetails(idWorkflowTransitionOnExecute, db,shouldRemap);
                }
            }

            public WorkflowTransitionOnExecute GetWorkflowTransitionOnExecuteWitDetails(long idWorkflowTransitionOnExecute, SubscriptionEntities db,bool shouldRemap = false)
            {
				WorkflowTransitionOnExecute _WorkflowTransitionOnExecute = db.WorkflowTransitionOnExecutes

					.Include("WorkflowTransition")
								.Where(p => p.IdWorkflowTransitionOnExecute == idWorkflowTransitionOnExecute && p.IsDeactivated != true).FirstOrDefault();

				if(shouldRemap)
					return Mapper.MapWorkflowTransitionOnExecuteSingle(_WorkflowTransitionOnExecute);

				return  _WorkflowTransitionOnExecute;
            }

            public List<WorkflowTransitionOnExecute> GetWorkflowTransitionOnExecuteListByIdList(List<long> workflowTransitionOnExecuteIds)
            {
                using (SubscriptionEntities db = new EntityFramework.SubscriptionEntities())
                {
                    return GetWorkflowTransitionOnExecuteListByIdList(workflowTransitionOnExecuteIds, db);
                }
            }
            public List<WorkflowTransitionOnExecute> GetWorkflowTransitionOnExecuteListByIdList(List<long> workflowTransitionOnExecuteIds, SubscriptionEntities db)
            {
                return db.WorkflowTransitionOnExecutes.Where(p => p.IsDeactivated != true && workflowTransitionOnExecuteIds.Contains(p.IdWorkflowTransitionOnExecute.Value)).ToList();
            }


            public void SaveWorkflowTransitionOnExecute(WorkflowTransitionOnExecute workflowTransitionOnExecute)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveWorkflowTransitionOnExecute(workflowTransitionOnExecute, db);
                }
            }

            public void SaveWorkflowTransitionOnExecute(WorkflowTransitionOnExecute workflowTransitionOnExecute, SubscriptionEntities db)
            {
									if (workflowTransitionOnExecute.WorkflowTransition != null) 
						DaoFactories.Instance.WorkflowTransitionDao.SaveWorkflowTransition(workflowTransitionOnExecute.WorkflowTransition, db);
				                
                if (workflowTransitionOnExecute.IdWorkflowTransitionOnExecute.HasValue){
					var workflowTransitionOnExecuteFromDb = db.WorkflowTransitionOnExecutes.Where(p => p.IdWorkflowTransitionOnExecute == workflowTransitionOnExecute.IdWorkflowTransitionOnExecute).FirstOrDefault();
													workflowTransitionOnExecuteFromDb.Action = workflowTransitionOnExecute.Action;
													workflowTransitionOnExecuteFromDb.IdWorkflowTransition = workflowTransitionOnExecute.IdWorkflowTransition;
													workflowTransitionOnExecuteFromDb.JsonContent = workflowTransitionOnExecute.JsonContent;
													workflowTransitionOnExecuteFromDb.IsDeactivated = workflowTransitionOnExecute.IsDeactivated;
									}
                else{
                                                //fix for saving without duplicating items in db
                              workflowTransitionOnExecute.WorkflowTransition = null;
                                                db.WorkflowTransitionOnExecutes.Add(workflowTransitionOnExecute);
                    
                }
                db.SaveChanges();
            }

			public void SaveOnlyWorkflowTransitionOnExecute(WorkflowTransitionOnExecute workflowTransitionOnExecute)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    SaveOnlyWorkflowTransitionOnExecute(workflowTransitionOnExecute, db);
                }
            }

            public void SaveOnlyWorkflowTransitionOnExecute(WorkflowTransitionOnExecute workflowTransitionOnExecute, SubscriptionEntities db)
            {
			                                //fix for saving without duplicating items in db
                             // workflowTransitionOnExecute.WorkflowTransition = null;
                                            if (workflowTransitionOnExecute.IdWorkflowTransitionOnExecute.HasValue){
					var workflowTransitionOnExecuteFromDb = db.WorkflowTransitionOnExecutes.Where(p => p.IdWorkflowTransitionOnExecute == workflowTransitionOnExecute.IdWorkflowTransitionOnExecute).FirstOrDefault();
													workflowTransitionOnExecuteFromDb.Action = workflowTransitionOnExecute.Action;
													workflowTransitionOnExecuteFromDb.IdWorkflowTransition = workflowTransitionOnExecute.IdWorkflowTransition;
													workflowTransitionOnExecuteFromDb.JsonContent = workflowTransitionOnExecute.JsonContent;
													workflowTransitionOnExecuteFromDb.IsDeactivated = workflowTransitionOnExecute.IsDeactivated;
										 db.SaveChanges();

				}
                else{
					WorkflowTransitionOnExecute _workflowTransitionOnExecute = new WorkflowTransitionOnExecute();
																	_workflowTransitionOnExecute.Action = workflowTransitionOnExecute.Action;
													_workflowTransitionOnExecute.IdWorkflowTransition = workflowTransitionOnExecute.IdWorkflowTransition;
													_workflowTransitionOnExecute.JsonContent = workflowTransitionOnExecute.JsonContent;
													_workflowTransitionOnExecute.IsDeactivated = workflowTransitionOnExecute.IsDeactivated;
					

                    db.WorkflowTransitionOnExecutes.Add(_workflowTransitionOnExecute);
					db.SaveChanges();
					workflowTransitionOnExecute.IdWorkflowTransitionOnExecute =  _workflowTransitionOnExecute.IdWorkflowTransitionOnExecute;
                    
                }
            }

            public void DeleteWorkflowTransitionOnExecute(WorkflowTransitionOnExecute workflowTransitionOnExecute)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeleteWorkflowTransitionOnExecute(workflowTransitionOnExecute, db);
                }
            }

            public void DeleteWorkflowTransitionOnExecute(WorkflowTransitionOnExecute workflowTransitionOnExecute, SubscriptionEntities db)
            {
								var workflowTransitionOnExecuteFromDb = GetWorkflowTransitionOnExecute(workflowTransitionOnExecute.IdWorkflowTransitionOnExecute.Value,db);
				workflowTransitionOnExecuteFromDb.IsDeactivated = true;
                db.SaveChanges();
            }


            public void DeletePermanentlyWorkflowTransitionOnExecute(WorkflowTransitionOnExecute workflowTransitionOnExecute)
            {
                using (SubscriptionEntities db = new SubscriptionEntities())
                {
                    DeletePermanentlyWorkflowTransitionOnExecute(workflowTransitionOnExecute, db);
                }
            }

            public void DeletePermanentlyWorkflowTransitionOnExecute(WorkflowTransitionOnExecute workflowTransitionOnExecute, SubscriptionEntities db)
            {
								var workflowTransitionOnExecuteFromDb = GetWorkflowTransitionOnExecute(workflowTransitionOnExecute.IdWorkflowTransitionOnExecute.Value,db);
				
				db.WorkflowTransitionOnExecutes.Remove(workflowTransitionOnExecuteFromDb);
                db.SaveChanges();
            }


            


    



		}
	}

