
using System;
using Subscription.Data;
using Subscription.Business;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Configuration;
using CoreWeb.Business.Common;
using Subscription.Business.Common;
using System.Linq.Expressions;
namespace Subscription.Service
{
    public partial class BaseService
    {
        private static Dictionary<string, object> DaoFactoryParameters
        {
            get
            {
                var dict = new Dictionary<string, object>();
                //dict[Constants.STR_MancoId] = "SATRIX";
                return dict;
            }
        }
        protected static readonly string daoProvider = ConfigurationManager.AppSettings.Get("DataProvider");
        protected static readonly IDaoFactory daoFactory = DaoFactories.GetFactory(daoProvider, DaoFactoryParameters);
    }

	public partial class AddressService: BaseService
	{
	    public BusinessResponse<List<Address>> GetAllAddresses(bool shouldRemap=false)
        {
            BusinessResponse<List<Address>> response = new BusinessResponse<List<Address>>();
		    try
		    {
			    response.Result = GetAllAddressesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Address> GetAllAddressesRaw(bool shouldRemap=false)
        {
            return daoFactory.AddressDao.GetAllAddresses(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Address>> GetAllAddressesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Address, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Address>> response = new BusinessResponse<BaseListReturnType<Address>>();
		    try
		    {
			    response.Result = GetAllAddressesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Address> GetAllAddressesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Address, dynamic> orderExpression = null)
        {
            return daoFactory.AddressDao.GetAllAddressesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Address>> GetAllAddressesWithCompanyLocationsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap=false, Func<Address, dynamic> orderExpression = null)
			{
				return GetAllAddressesByPage(sortingPagingInfo, expression,new List<string>(){"CompanyLocations"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Address>> GetAllAddressesWithCity1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap=false, Func<Address, dynamic> orderExpression = null)
			{
				return GetAllAddressesByPage(sortingPagingInfo, expression,new List<string>(){"City1"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Address>> GetAllAddressesWithCountryDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap=false, Func<Address, dynamic> orderExpression = null)
			{
				return GetAllAddressesByPage(sortingPagingInfo, expression,new List<string>(){"Country"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Address>> GetAllAddressesWithContactsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap=false, Func<Address, dynamic> orderExpression = null)
			{
				return GetAllAddressesByPage(sortingPagingInfo, expression,new List<string>(){"Contacts"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Address>> GetAllAddressesWithPerson_AddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Address, bool>> expression = null,bool shouldRemap=false, Func<Address, dynamic> orderExpression = null)
			{
				return GetAllAddressesByPage(sortingPagingInfo, expression,new List<string>(){"Person_Address"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Address>> GetAllAddressWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Address>> response = new BusinessResponse<BaseListReturnType<Address>>();
            try
            {
                response.Result = GetAllAddressWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Address> GetAllAddressWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.AddressDao.GetAllAddressWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Address>> GetAddressListByIdList(List<long> addressIds)
        {
            BusinessResponse<List<Address>> response = new BusinessResponse<List<Address>>();
            try
            {
                response.Result = GetAddressListByIdListRaw(addressIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Address> GetAddressListByIdListRaw(List<long> addressIds)
        {
            return daoFactory.AddressDao.GetAddressListByIdList(addressIds);
        }

					
		public BusinessResponse<BaseListReturnType<Address>> GetAllAddressesWithCompanyLocationsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Address>> response = new BusinessResponse<BaseListReturnType<Address>>();
            try
            {
                response.Result = GetAllAddressesWithCompanyLocationsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Address> GetAllAddressesWithCompanyLocationsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllAddressWitDetailsRaw(new List<string>() { "CompanyLocations" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Address>> GetAllAddressesWithCity1Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Address>> response = new BusinessResponse<BaseListReturnType<Address>>();
            try
            {
                response.Result = GetAllAddressesWithCity1DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Address> GetAllAddressesWithCity1DetailsRaw(bool shouldRemap=false)
        {
            return GetAllAddressWitDetailsRaw(new List<string>() { "City1" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Address>> GetAllAddressListByCity1(long idCity1)
        {
            BusinessResponse<BaseListReturnType<Address>> response = new BusinessResponse<BaseListReturnType<Address>>();
            try
            {
                response.Result = GetAllAddressListByCity1Raw(idCity1);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Address> GetAllAddressListByCity1Raw(long idCity1)
        {
            return daoFactory.AddressDao.GetAllAddressListByCity1(idCity1);
        }

        public BusinessResponse<BaseListReturnType<Address>> GetAllAddressListByCity1ByPage(long idCity1, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Address>> response = new BusinessResponse<BaseListReturnType<Address>>();
            try
            {
                response.Result = GetAllAddressListByCity1ByPageRaw(idCity1, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Address> GetAllAddressListByCity1ByPageRaw(long idCity1,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.AddressDao.GetAllAddressListByCity1ByPage(idCity1, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Address>> GetAllAddressesWithCountryDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Address>> response = new BusinessResponse<BaseListReturnType<Address>>();
            try
            {
                response.Result = GetAllAddressesWithCountryDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Address> GetAllAddressesWithCountryDetailsRaw(bool shouldRemap=false)
        {
            return GetAllAddressWitDetailsRaw(new List<string>() { "Country" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Address>> GetAllAddressListByCountry(long idCountry)
        {
            BusinessResponse<BaseListReturnType<Address>> response = new BusinessResponse<BaseListReturnType<Address>>();
            try
            {
                response.Result = GetAllAddressListByCountryRaw(idCountry);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Address> GetAllAddressListByCountryRaw(long idCountry)
        {
            return daoFactory.AddressDao.GetAllAddressListByCountry(idCountry);
        }

        public BusinessResponse<BaseListReturnType<Address>> GetAllAddressListByCountryByPage(long idCountry, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Address>> response = new BusinessResponse<BaseListReturnType<Address>>();
            try
            {
                response.Result = GetAllAddressListByCountryByPageRaw(idCountry, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Address> GetAllAddressListByCountryByPageRaw(long idCountry,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.AddressDao.GetAllAddressListByCountryByPage(idCountry, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Address>> GetAllAddressesWithContactsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Address>> response = new BusinessResponse<BaseListReturnType<Address>>();
            try
            {
                response.Result = GetAllAddressesWithContactsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Address> GetAllAddressesWithContactsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllAddressWitDetailsRaw(new List<string>() { "Contacts" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Address>> GetAllAddressesWithPerson_AddressDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Address>> response = new BusinessResponse<BaseListReturnType<Address>>();
            try
            {
                response.Result = GetAllAddressesWithPerson_AddressDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Address> GetAllAddressesWithPerson_AddressDetailsRaw(bool shouldRemap=false)
        {
            return GetAllAddressWitDetailsRaw(new List<string>() { "Person_Address" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<CompanyLocation>>  UpdateCompanyLocationsForAddressWithoutSavingNewItem(List<CompanyLocation> newCompanyLocations,long idAddress)
            {
                BusinessResponse<List<CompanyLocation>> response = new BusinessResponse<List<CompanyLocation>>();
                try
                {
                    response.Result = UpdateCompanyLocationsForAddressWithoutSavingNewItemRaw(newCompanyLocations, idAddress);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<CompanyLocation> UpdateCompanyLocationsForAddressWithoutSavingNewItemRaw(List<CompanyLocation> newCompanyLocations,long idAddress)
            {
                return daoFactory.AddressDao.UpdateCompanyLocationsForAddressWithoutSavingNewItem(newCompanyLocations,idAddress); 
            }



		    public BusinessResponse<List<CompanyLocation>>  UpdateCompanyLocationsForAddress(List<CompanyLocation> newCompanyLocations,long idAddress)
            {
                BusinessResponse<List<CompanyLocation>> response = new BusinessResponse<List<CompanyLocation>>();
                try
                {
                    response.Result = UpdateCompanyLocationsForAddressRaw(newCompanyLocations, idAddress);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<CompanyLocation> UpdateCompanyLocationsForAddressRaw(List<CompanyLocation> newCompanyLocations,long idAddress)
            {
                return daoFactory.AddressDao.UpdateCompanyLocationsForAddress(newCompanyLocations,idAddress); 
            }





		public BusinessResponse<Address> GetAddressWithCompanyLocationsDetails(long idAddress,bool shouldRemap=false)
        {
            BusinessResponse<Address> response = new BusinessResponse<Address>();
            try
            {
                response.Result = GetAddressWithCompanyLocationsDetailsRaw(idAddress,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Address GetAddressWithCompanyLocationsDetailsRaw(long idAddress,bool shouldRemap=false)
        {
            return GetAddressWitDetailsRaw(idAddress,new List<string>() { "CompanyLocations"},shouldRemap);
        }

		



		public BusinessResponse<Address> GetAddressWithCity1Details(long idAddress,bool shouldRemap=false)
        {
            BusinessResponse<Address> response = new BusinessResponse<Address>();
            try
            {
                response.Result = GetAddressWithCity1DetailsRaw(idAddress,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Address GetAddressWithCity1DetailsRaw(long idAddress,bool shouldRemap=false)
        {
            return GetAddressWitDetailsRaw(idAddress,new List<string>() { "City1"},shouldRemap);
        }

		



		public BusinessResponse<Address> GetAddressWithCountryDetails(long idAddress,bool shouldRemap=false)
        {
            BusinessResponse<Address> response = new BusinessResponse<Address>();
            try
            {
                response.Result = GetAddressWithCountryDetailsRaw(idAddress,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Address GetAddressWithCountryDetailsRaw(long idAddress,bool shouldRemap=false)
        {
            return GetAddressWitDetailsRaw(idAddress,new List<string>() { "Country"},shouldRemap);
        }

		
			public BusinessResponse<List<Contact>>  UpdateContactsForAddressWithoutSavingNewItem(List<Contact> newContacts,long idAddress)
            {
                BusinessResponse<List<Contact>> response = new BusinessResponse<List<Contact>>();
                try
                {
                    response.Result = UpdateContactsForAddressWithoutSavingNewItemRaw(newContacts, idAddress);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Contact> UpdateContactsForAddressWithoutSavingNewItemRaw(List<Contact> newContacts,long idAddress)
            {
                return daoFactory.AddressDao.UpdateContactsForAddressWithoutSavingNewItem(newContacts,idAddress); 
            }



		    public BusinessResponse<List<Contact>>  UpdateContactsForAddress(List<Contact> newContacts,long idAddress)
            {
                BusinessResponse<List<Contact>> response = new BusinessResponse<List<Contact>>();
                try
                {
                    response.Result = UpdateContactsForAddressRaw(newContacts, idAddress);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Contact> UpdateContactsForAddressRaw(List<Contact> newContacts,long idAddress)
            {
                return daoFactory.AddressDao.UpdateContactsForAddress(newContacts,idAddress); 
            }





		public BusinessResponse<Address> GetAddressWithContactsDetails(long idAddress,bool shouldRemap=false)
        {
            BusinessResponse<Address> response = new BusinessResponse<Address>();
            try
            {
                response.Result = GetAddressWithContactsDetailsRaw(idAddress,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Address GetAddressWithContactsDetailsRaw(long idAddress,bool shouldRemap=false)
        {
            return GetAddressWitDetailsRaw(idAddress,new List<string>() { "Contacts"},shouldRemap);
        }

		
			public BusinessResponse<List<Person_Address>>  UpdatePerson_AddressForAddressWithoutSavingNewItem(List<Person_Address> newPerson_Address,long idAddress)
            {
                BusinessResponse<List<Person_Address>> response = new BusinessResponse<List<Person_Address>>();
                try
                {
                    response.Result = UpdatePerson_AddressForAddressWithoutSavingNewItemRaw(newPerson_Address, idAddress);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Person_Address> UpdatePerson_AddressForAddressWithoutSavingNewItemRaw(List<Person_Address> newPerson_Address,long idAddress)
            {
                return daoFactory.AddressDao.UpdatePerson_AddressForAddressWithoutSavingNewItem(newPerson_Address,idAddress); 
            }



		    public BusinessResponse<List<Person_Address>>  UpdatePerson_AddressForAddress(List<Person_Address> newPerson_Address,long idAddress)
            {
                BusinessResponse<List<Person_Address>> response = new BusinessResponse<List<Person_Address>>();
                try
                {
                    response.Result = UpdatePerson_AddressForAddressRaw(newPerson_Address, idAddress);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Person_Address> UpdatePerson_AddressForAddressRaw(List<Person_Address> newPerson_Address,long idAddress)
            {
                return daoFactory.AddressDao.UpdatePerson_AddressForAddress(newPerson_Address,idAddress); 
            }





		public BusinessResponse<Address> GetAddressWithPerson_AddressDetails(long idAddress,bool shouldRemap=false)
        {
            BusinessResponse<Address> response = new BusinessResponse<Address>();
            try
            {
                response.Result = GetAddressWithPerson_AddressDetailsRaw(idAddress,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Address GetAddressWithPerson_AddressDetailsRaw(long idAddress,bool shouldRemap=false)
        {
            return GetAddressWitDetailsRaw(idAddress,new List<string>() { "Person_Address"},shouldRemap);
        }

		
        public BusinessResponse<Address> GetAddress(long idAddress,bool shouldRemap=false)
        {
            BusinessResponse<Address> response = new BusinessResponse<Address>();
		    try
		    {
			    response.Result = GetAddressesRaw(idAddress,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Address GetAddressesRaw(long idAddress,bool shouldRemap=false)
        {
            return daoFactory.AddressDao.GetAddress(idAddress,shouldRemap);
        }

        
        public BusinessResponse<Address> GetAddressWitDetails(long idAddress,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Address> response = new BusinessResponse<Address>();
		    try
		    {
			    response.Result = GetAddressWitDetailsRaw(idAddress,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Address GetAddressWitDetailsRaw(long idAddress,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.AddressDao.GetAddressWitDetails(idAddress,shouldRemap);
        }


		 public BusinessResponse<Address> GetAddressCustom( Expression<Func<Address, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Address> response = new BusinessResponse<Address>();
		    try
		    {
			    response.Result = GetAddressCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Address GetAddressCustomRaw( Expression<Func<Address, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.AddressDao.GetAddressCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Address>> GetAddressCustomList( Expression<Func<Address, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Address, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Address>> response = new BusinessResponse<BaseListReturnType<Address>>();
		    try
		    {
			    response.Result = GetAddressCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Address> GetAddressCustomListRaw( Expression<Func<Address, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Address, dynamic> orderExpression = null)
		{
            return daoFactory.AddressDao.GetAddressCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveAddress(Address address)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveAddressRaw(address);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveAddressRaw(Address address)
        {
            daoFactory.AddressDao.SaveAddress(address);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyAddress(Address address)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyAddressRaw(address);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyAddressRaw(Address address)
        {
            daoFactory.AddressDao.SaveOnlyAddress(address);
            return true;
        }

        public BusinessResponse<bool> DeleteAddress(Address address)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteAddressRaw(address);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteAddressRaw(Address address)
        {
            daoFactory.AddressDao.DeleteAddress(address);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyAddress(Address address)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyAddressRaw(address);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyAddressRaw(Address address)
        {
            daoFactory.AddressDao.DeletePermanentlyAddress(address);
            return true;
        }
	}
	public partial class ApprovalMessageService: BaseService
	{
	    public BusinessResponse<List<ApprovalMessage>> GetAllApprovalMessages(bool shouldRemap=false)
        {
            BusinessResponse<List<ApprovalMessage>> response = new BusinessResponse<List<ApprovalMessage>>();
		    try
		    {
			    response.Result = GetAllApprovalMessagesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<ApprovalMessage> GetAllApprovalMessagesRaw(bool shouldRemap=false)
        {
            return daoFactory.ApprovalMessageDao.GetAllApprovalMessages(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<ApprovalMessage>> GetAllApprovalMessagesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ApprovalMessage, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<ApprovalMessage, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<ApprovalMessage>> response = new BusinessResponse<BaseListReturnType<ApprovalMessage>>();
		    try
		    {
			    response.Result = GetAllApprovalMessagesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ApprovalMessage, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<ApprovalMessage, dynamic> orderExpression = null)
        {
            return daoFactory.ApprovalMessageDao.GetAllApprovalMessagesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<ApprovalMessage>> GetAllApprovalMessagesWithWorkflowActionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ApprovalMessage, bool>> expression = null,bool shouldRemap=false, Func<ApprovalMessage, dynamic> orderExpression = null)
			{
				return GetAllApprovalMessagesByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowAction"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<ApprovalMessage>> GetAllApprovalMessagesWithWorkflowDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ApprovalMessage, bool>> expression = null,bool shouldRemap=false, Func<ApprovalMessage, dynamic> orderExpression = null)
			{
				return GetAllApprovalMessagesByPage(sortingPagingInfo, expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<ApprovalMessage>> GetAllApprovalMessageWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ApprovalMessage>> response = new BusinessResponse<BaseListReturnType<ApprovalMessage>>();
            try
            {
                response.Result = GetAllApprovalMessageWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ApprovalMessage> GetAllApprovalMessageWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ApprovalMessageDao.GetAllApprovalMessageWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<ApprovalMessage>> GetApprovalMessageListByIdList(List<long> approvalMessageIds)
        {
            BusinessResponse<List<ApprovalMessage>> response = new BusinessResponse<List<ApprovalMessage>>();
            try
            {
                response.Result = GetApprovalMessageListByIdListRaw(approvalMessageIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<ApprovalMessage> GetApprovalMessageListByIdListRaw(List<long> approvalMessageIds)
        {
            return daoFactory.ApprovalMessageDao.GetApprovalMessageListByIdList(approvalMessageIds);
        }

					
		public BusinessResponse<BaseListReturnType<ApprovalMessage>> GetAllApprovalMessagesWithWorkflowActionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ApprovalMessage>> response = new BusinessResponse<BaseListReturnType<ApprovalMessage>>();
            try
            {
                response.Result = GetAllApprovalMessagesWithWorkflowActionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesWithWorkflowActionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllApprovalMessageWitDetailsRaw(new List<string>() { "WorkflowAction" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<ApprovalMessage>> GetAllApprovalMessageListByWorkflowAction(long idWorkflowAction)
        {
            BusinessResponse<BaseListReturnType<ApprovalMessage>> response = new BusinessResponse<BaseListReturnType<ApprovalMessage>>();
            try
            {
                response.Result = GetAllApprovalMessageListByWorkflowActionRaw(idWorkflowAction);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ApprovalMessage> GetAllApprovalMessageListByWorkflowActionRaw(long idWorkflowAction)
        {
            return daoFactory.ApprovalMessageDao.GetAllApprovalMessageListByWorkflowAction(idWorkflowAction);
        }

        public BusinessResponse<BaseListReturnType<ApprovalMessage>> GetAllApprovalMessageListByWorkflowActionByPage(long idWorkflowAction, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<ApprovalMessage>> response = new BusinessResponse<BaseListReturnType<ApprovalMessage>>();
            try
            {
                response.Result = GetAllApprovalMessageListByWorkflowActionByPageRaw(idWorkflowAction, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ApprovalMessage> GetAllApprovalMessageListByWorkflowActionByPageRaw(long idWorkflowAction,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.ApprovalMessageDao.GetAllApprovalMessageListByWorkflowActionByPage(idWorkflowAction, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<ApprovalMessage>> GetAllApprovalMessagesWithWorkflowDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ApprovalMessage>> response = new BusinessResponse<BaseListReturnType<ApprovalMessage>>();
            try
            {
                response.Result = GetAllApprovalMessagesWithWorkflowDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ApprovalMessage> GetAllApprovalMessagesWithWorkflowDetailsRaw(bool shouldRemap=false)
        {
            return GetAllApprovalMessageWitDetailsRaw(new List<string>() { "Workflow" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<ApprovalMessage>> GetAllApprovalMessageListByWorkflow(long idWorkflow)
        {
            BusinessResponse<BaseListReturnType<ApprovalMessage>> response = new BusinessResponse<BaseListReturnType<ApprovalMessage>>();
            try
            {
                response.Result = GetAllApprovalMessageListByWorkflowRaw(idWorkflow);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ApprovalMessage> GetAllApprovalMessageListByWorkflowRaw(long idWorkflow)
        {
            return daoFactory.ApprovalMessageDao.GetAllApprovalMessageListByWorkflow(idWorkflow);
        }

        public BusinessResponse<BaseListReturnType<ApprovalMessage>> GetAllApprovalMessageListByWorkflowByPage(long idWorkflow, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<ApprovalMessage>> response = new BusinessResponse<BaseListReturnType<ApprovalMessage>>();
            try
            {
                response.Result = GetAllApprovalMessageListByWorkflowByPageRaw(idWorkflow, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ApprovalMessage> GetAllApprovalMessageListByWorkflowByPageRaw(long idWorkflow,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.ApprovalMessageDao.GetAllApprovalMessageListByWorkflowByPage(idWorkflow, sortingPagingInfo);
        }

		
		



		public BusinessResponse<ApprovalMessage> GetApprovalMessageWithWorkflowActionDetails(long idApprovalMessage,bool shouldRemap=false)
        {
            BusinessResponse<ApprovalMessage> response = new BusinessResponse<ApprovalMessage>();
            try
            {
                response.Result = GetApprovalMessageWithWorkflowActionDetailsRaw(idApprovalMessage,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal ApprovalMessage GetApprovalMessageWithWorkflowActionDetailsRaw(long idApprovalMessage,bool shouldRemap=false)
        {
            return GetApprovalMessageWitDetailsRaw(idApprovalMessage,new List<string>() { "WorkflowAction"},shouldRemap);
        }

		



		public BusinessResponse<ApprovalMessage> GetApprovalMessageWithWorkflowDetails(long idApprovalMessage,bool shouldRemap=false)
        {
            BusinessResponse<ApprovalMessage> response = new BusinessResponse<ApprovalMessage>();
            try
            {
                response.Result = GetApprovalMessageWithWorkflowDetailsRaw(idApprovalMessage,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal ApprovalMessage GetApprovalMessageWithWorkflowDetailsRaw(long idApprovalMessage,bool shouldRemap=false)
        {
            return GetApprovalMessageWitDetailsRaw(idApprovalMessage,new List<string>() { "Workflow"},shouldRemap);
        }

		
        public BusinessResponse<ApprovalMessage> GetApprovalMessage(long idApprovalMessage,bool shouldRemap=false)
        {
            BusinessResponse<ApprovalMessage> response = new BusinessResponse<ApprovalMessage>();
		    try
		    {
			    response.Result = GetApprovalMessagesRaw(idApprovalMessage,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal ApprovalMessage GetApprovalMessagesRaw(long idApprovalMessage,bool shouldRemap=false)
        {
            return daoFactory.ApprovalMessageDao.GetApprovalMessage(idApprovalMessage,shouldRemap);
        }

        
        public BusinessResponse<ApprovalMessage> GetApprovalMessageWitDetails(long idApprovalMessage,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<ApprovalMessage> response = new BusinessResponse<ApprovalMessage>();
		    try
		    {
			    response.Result = GetApprovalMessageWitDetailsRaw(idApprovalMessage,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal ApprovalMessage GetApprovalMessageWitDetailsRaw(long idApprovalMessage,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ApprovalMessageDao.GetApprovalMessageWitDetails(idApprovalMessage,shouldRemap);
        }


		 public BusinessResponse<ApprovalMessage> GetApprovalMessageCustom( Expression<Func<ApprovalMessage, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<ApprovalMessage> response = new BusinessResponse<ApprovalMessage>();
		    try
		    {
			    response.Result = GetApprovalMessageCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal ApprovalMessage GetApprovalMessageCustomRaw( Expression<Func<ApprovalMessage, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.ApprovalMessageDao.GetApprovalMessageCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<ApprovalMessage>> GetApprovalMessageCustomList( Expression<Func<ApprovalMessage, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<ApprovalMessage, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<ApprovalMessage>> response = new BusinessResponse<BaseListReturnType<ApprovalMessage>>();
		    try
		    {
			    response.Result = GetApprovalMessageCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<ApprovalMessage> GetApprovalMessageCustomListRaw( Expression<Func<ApprovalMessage, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<ApprovalMessage, dynamic> orderExpression = null)
		{
            return daoFactory.ApprovalMessageDao.GetApprovalMessageCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveApprovalMessage(ApprovalMessage approvalMessage)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveApprovalMessageRaw(approvalMessage);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveApprovalMessageRaw(ApprovalMessage approvalMessage)
        {
            daoFactory.ApprovalMessageDao.SaveApprovalMessage(approvalMessage);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyApprovalMessage(ApprovalMessage approvalMessage)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyApprovalMessageRaw(approvalMessage);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyApprovalMessageRaw(ApprovalMessage approvalMessage)
        {
            daoFactory.ApprovalMessageDao.SaveOnlyApprovalMessage(approvalMessage);
            return true;
        }

        public BusinessResponse<bool> DeleteApprovalMessage(ApprovalMessage approvalMessage)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteApprovalMessageRaw(approvalMessage);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteApprovalMessageRaw(ApprovalMessage approvalMessage)
        {
            daoFactory.ApprovalMessageDao.DeleteApprovalMessage(approvalMessage);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyApprovalMessage(ApprovalMessage approvalMessage)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyApprovalMessageRaw(approvalMessage);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyApprovalMessageRaw(ApprovalMessage approvalMessage)
        {
            daoFactory.ApprovalMessageDao.DeletePermanentlyApprovalMessage(approvalMessage);
            return true;
        }
	}
	public partial class BankService: BaseService
	{
	    public BusinessResponse<List<Bank>> GetAllBanks(bool shouldRemap=false)
        {
            BusinessResponse<List<Bank>> response = new BusinessResponse<List<Bank>>();
		    try
		    {
			    response.Result = GetAllBanksRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Bank> GetAllBanksRaw(bool shouldRemap=false)
        {
            return daoFactory.BankDao.GetAllBanks(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Bank>> GetAllBanksByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Bank, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
		    try
		    {
			    response.Result = GetAllBanksByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBanksByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Bank, dynamic> orderExpression = null)
        {
            return daoFactory.BankDao.GetAllBanksByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Bank>> GetAllBanksWithBankStatementStagingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap=false, Func<Bank, dynamic> orderExpression = null)
			{
				return GetAllBanksByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Bank>> GetAllBanksWithPaymentMethodDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap=false, Func<Bank, dynamic> orderExpression = null)
			{
				return GetAllBanksByPage(sortingPagingInfo, expression,new List<string>(){"PaymentMethod"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Bank>> GetAllBanksWithTransactionAccountDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap=false, Func<Bank, dynamic> orderExpression = null)
			{
				return GetAllBanksByPage(sortingPagingInfo, expression,new List<string>(){"TransactionAccount"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Bank>> GetAllBanksWithTransactionTemplateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap=false, Func<Bank, dynamic> orderExpression = null)
			{
				return GetAllBanksByPage(sortingPagingInfo, expression,new List<string>(){"TransactionTemplate"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Bank>> GetAllBanksWithPaymentDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Bank, bool>> expression = null,bool shouldRemap=false, Func<Bank, dynamic> orderExpression = null)
			{
				return GetAllBanksByPage(sortingPagingInfo, expression,new List<string>(){"PaymentDetails"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Bank>> GetAllBankWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
            try
            {
                response.Result = GetAllBankWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBankWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankDao.GetAllBankWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Bank>> GetBankListByIdList(List<long> bankIds)
        {
            BusinessResponse<List<Bank>> response = new BusinessResponse<List<Bank>>();
            try
            {
                response.Result = GetBankListByIdListRaw(bankIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Bank> GetBankListByIdListRaw(List<long> bankIds)
        {
            return daoFactory.BankDao.GetBankListByIdList(bankIds);
        }

					
		public BusinessResponse<BaseListReturnType<Bank>> GetAllBanksWithBankStatementStagingsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
            try
            {
                response.Result = GetAllBanksWithBankStatementStagingsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBanksWithBankStatementStagingsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankWitDetailsRaw(new List<string>() { "BankStatementStagings" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Bank>> GetAllBanksWithPaymentMethodDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
            try
            {
                response.Result = GetAllBanksWithPaymentMethodDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBanksWithPaymentMethodDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankWitDetailsRaw(new List<string>() { "PaymentMethod" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Bank>> GetAllBankListByPaymentMethod(long idPaymentMethod)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
            try
            {
                response.Result = GetAllBankListByPaymentMethodRaw(idPaymentMethod);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBankListByPaymentMethodRaw(long idPaymentMethod)
        {
            return daoFactory.BankDao.GetAllBankListByPaymentMethod(idPaymentMethod);
        }

        public BusinessResponse<BaseListReturnType<Bank>> GetAllBankListByPaymentMethodByPage(long idPaymentMethod, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
            try
            {
                response.Result = GetAllBankListByPaymentMethodByPageRaw(idPaymentMethod, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBankListByPaymentMethodByPageRaw(long idPaymentMethod,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankDao.GetAllBankListByPaymentMethodByPage(idPaymentMethod, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Bank>> GetAllBanksWithTransactionAccountDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
            try
            {
                response.Result = GetAllBanksWithTransactionAccountDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBanksWithTransactionAccountDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankWitDetailsRaw(new List<string>() { "TransactionAccount" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Bank>> GetAllBankListByTransactionAccount(long idTransactionAccount)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
            try
            {
                response.Result = GetAllBankListByTransactionAccountRaw(idTransactionAccount);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBankListByTransactionAccountRaw(long idTransactionAccount)
        {
            return daoFactory.BankDao.GetAllBankListByTransactionAccount(idTransactionAccount);
        }

        public BusinessResponse<BaseListReturnType<Bank>> GetAllBankListByTransactionAccountByPage(long idTransactionAccount, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
            try
            {
                response.Result = GetAllBankListByTransactionAccountByPageRaw(idTransactionAccount, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBankListByTransactionAccountByPageRaw(long idTransactionAccount,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankDao.GetAllBankListByTransactionAccountByPage(idTransactionAccount, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Bank>> GetAllBanksWithTransactionTemplateDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
            try
            {
                response.Result = GetAllBanksWithTransactionTemplateDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBanksWithTransactionTemplateDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankWitDetailsRaw(new List<string>() { "TransactionTemplate" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Bank>> GetAllBankListByTransactionTemplate(long idTransactionTemplate)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
            try
            {
                response.Result = GetAllBankListByTransactionTemplateRaw(idTransactionTemplate);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBankListByTransactionTemplateRaw(long idTransactionTemplate)
        {
            return daoFactory.BankDao.GetAllBankListByTransactionTemplate(idTransactionTemplate);
        }

        public BusinessResponse<BaseListReturnType<Bank>> GetAllBankListByTransactionTemplateByPage(long idTransactionTemplate, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
            try
            {
                response.Result = GetAllBankListByTransactionTemplateByPageRaw(idTransactionTemplate, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBankListByTransactionTemplateByPageRaw(long idTransactionTemplate,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankDao.GetAllBankListByTransactionTemplateByPage(idTransactionTemplate, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Bank>> GetAllBanksWithPaymentDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
            try
            {
                response.Result = GetAllBanksWithPaymentDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Bank> GetAllBanksWithPaymentDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankWitDetailsRaw(new List<string>() { "PaymentDetails" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<BankStatementStaging>>  UpdateBankStatementStagingsForBankWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idBank)
            {
                BusinessResponse<List<BankStatementStaging>> response = new BusinessResponse<List<BankStatementStaging>>();
                try
                {
                    response.Result = UpdateBankStatementStagingsForBankWithoutSavingNewItemRaw(newBankStatementStagings, idBank);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStaging> UpdateBankStatementStagingsForBankWithoutSavingNewItemRaw(List<BankStatementStaging> newBankStatementStagings,long idBank)
            {
                return daoFactory.BankDao.UpdateBankStatementStagingsForBankWithoutSavingNewItem(newBankStatementStagings,idBank); 
            }



		    public BusinessResponse<List<BankStatementStaging>>  UpdateBankStatementStagingsForBank(List<BankStatementStaging> newBankStatementStagings,long idBank)
            {
                BusinessResponse<List<BankStatementStaging>> response = new BusinessResponse<List<BankStatementStaging>>();
                try
                {
                    response.Result = UpdateBankStatementStagingsForBankRaw(newBankStatementStagings, idBank);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStaging> UpdateBankStatementStagingsForBankRaw(List<BankStatementStaging> newBankStatementStagings,long idBank)
            {
                return daoFactory.BankDao.UpdateBankStatementStagingsForBank(newBankStatementStagings,idBank); 
            }





		public BusinessResponse<Bank> GetBankWithBankStatementStagingsDetails(long idBank,bool shouldRemap=false)
        {
            BusinessResponse<Bank> response = new BusinessResponse<Bank>();
            try
            {
                response.Result = GetBankWithBankStatementStagingsDetailsRaw(idBank,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Bank GetBankWithBankStatementStagingsDetailsRaw(long idBank,bool shouldRemap=false)
        {
            return GetBankWitDetailsRaw(idBank,new List<string>() { "BankStatementStagings"},shouldRemap);
        }

		



		public BusinessResponse<Bank> GetBankWithPaymentMethodDetails(long idBank,bool shouldRemap=false)
        {
            BusinessResponse<Bank> response = new BusinessResponse<Bank>();
            try
            {
                response.Result = GetBankWithPaymentMethodDetailsRaw(idBank,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Bank GetBankWithPaymentMethodDetailsRaw(long idBank,bool shouldRemap=false)
        {
            return GetBankWitDetailsRaw(idBank,new List<string>() { "PaymentMethod"},shouldRemap);
        }

		



		public BusinessResponse<Bank> GetBankWithTransactionAccountDetails(long idBank,bool shouldRemap=false)
        {
            BusinessResponse<Bank> response = new BusinessResponse<Bank>();
            try
            {
                response.Result = GetBankWithTransactionAccountDetailsRaw(idBank,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Bank GetBankWithTransactionAccountDetailsRaw(long idBank,bool shouldRemap=false)
        {
            return GetBankWitDetailsRaw(idBank,new List<string>() { "TransactionAccount"},shouldRemap);
        }

		



		public BusinessResponse<Bank> GetBankWithTransactionTemplateDetails(long idBank,bool shouldRemap=false)
        {
            BusinessResponse<Bank> response = new BusinessResponse<Bank>();
            try
            {
                response.Result = GetBankWithTransactionTemplateDetailsRaw(idBank,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Bank GetBankWithTransactionTemplateDetailsRaw(long idBank,bool shouldRemap=false)
        {
            return GetBankWitDetailsRaw(idBank,new List<string>() { "TransactionTemplate"},shouldRemap);
        }

		
			public BusinessResponse<List<PaymentDetail>>  UpdatePaymentDetailsForBankWithoutSavingNewItem(List<PaymentDetail> newPaymentDetails,long idBank)
            {
                BusinessResponse<List<PaymentDetail>> response = new BusinessResponse<List<PaymentDetail>>();
                try
                {
                    response.Result = UpdatePaymentDetailsForBankWithoutSavingNewItemRaw(newPaymentDetails, idBank);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<PaymentDetail> UpdatePaymentDetailsForBankWithoutSavingNewItemRaw(List<PaymentDetail> newPaymentDetails,long idBank)
            {
                return daoFactory.BankDao.UpdatePaymentDetailsForBankWithoutSavingNewItem(newPaymentDetails,idBank); 
            }



		    public BusinessResponse<List<PaymentDetail>>  UpdatePaymentDetailsForBank(List<PaymentDetail> newPaymentDetails,long idBank)
            {
                BusinessResponse<List<PaymentDetail>> response = new BusinessResponse<List<PaymentDetail>>();
                try
                {
                    response.Result = UpdatePaymentDetailsForBankRaw(newPaymentDetails, idBank);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<PaymentDetail> UpdatePaymentDetailsForBankRaw(List<PaymentDetail> newPaymentDetails,long idBank)
            {
                return daoFactory.BankDao.UpdatePaymentDetailsForBank(newPaymentDetails,idBank); 
            }





		public BusinessResponse<Bank> GetBankWithPaymentDetailsDetails(long idBank,bool shouldRemap=false)
        {
            BusinessResponse<Bank> response = new BusinessResponse<Bank>();
            try
            {
                response.Result = GetBankWithPaymentDetailsDetailsRaw(idBank,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Bank GetBankWithPaymentDetailsDetailsRaw(long idBank,bool shouldRemap=false)
        {
            return GetBankWitDetailsRaw(idBank,new List<string>() { "PaymentDetails"},shouldRemap);
        }

		
        public BusinessResponse<Bank> GetBank(long idBank,bool shouldRemap=false)
        {
            BusinessResponse<Bank> response = new BusinessResponse<Bank>();
		    try
		    {
			    response.Result = GetBanksRaw(idBank,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Bank GetBanksRaw(long idBank,bool shouldRemap=false)
        {
            return daoFactory.BankDao.GetBank(idBank,shouldRemap);
        }

        
        public BusinessResponse<Bank> GetBankWitDetails(long idBank,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Bank> response = new BusinessResponse<Bank>();
		    try
		    {
			    response.Result = GetBankWitDetailsRaw(idBank,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Bank GetBankWitDetailsRaw(long idBank,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankDao.GetBankWitDetails(idBank,shouldRemap);
        }


		 public BusinessResponse<Bank> GetBankCustom( Expression<Func<Bank, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Bank> response = new BusinessResponse<Bank>();
		    try
		    {
			    response.Result = GetBankCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Bank GetBankCustomRaw( Expression<Func<Bank, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.BankDao.GetBankCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Bank>> GetBankCustomList( Expression<Func<Bank, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Bank, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Bank>> response = new BusinessResponse<BaseListReturnType<Bank>>();
		    try
		    {
			    response.Result = GetBankCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Bank> GetBankCustomListRaw( Expression<Func<Bank, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Bank, dynamic> orderExpression = null)
		{
            return daoFactory.BankDao.GetBankCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveBank(Bank bank)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveBankRaw(bank);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveBankRaw(Bank bank)
        {
            daoFactory.BankDao.SaveBank(bank);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyBank(Bank bank)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyBankRaw(bank);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyBankRaw(Bank bank)
        {
            daoFactory.BankDao.SaveOnlyBank(bank);
            return true;
        }

        public BusinessResponse<bool> DeleteBank(Bank bank)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteBankRaw(bank);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteBankRaw(Bank bank)
        {
            daoFactory.BankDao.DeleteBank(bank);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyBank(Bank bank)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyBankRaw(bank);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyBankRaw(Bank bank)
        {
            daoFactory.BankDao.DeletePermanentlyBank(bank);
            return true;
        }
	}
	public partial class BankReconHitTypeService: BaseService
	{
	    public BusinessResponse<List<BankReconHitType>> GetAllBankReconHitTypes(bool shouldRemap=false)
        {
            BusinessResponse<List<BankReconHitType>> response = new BusinessResponse<List<BankReconHitType>>();
		    try
		    {
			    response.Result = GetAllBankReconHitTypesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<BankReconHitType> GetAllBankReconHitTypesRaw(bool shouldRemap=false)
        {
            return daoFactory.BankReconHitTypeDao.GetAllBankReconHitTypes(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<BankReconHitType>> GetAllBankReconHitTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconHitType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankReconHitType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<BankReconHitType>> response = new BusinessResponse<BaseListReturnType<BankReconHitType>>();
		    try
		    {
			    response.Result = GetAllBankReconHitTypesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<BankReconHitType> GetAllBankReconHitTypesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconHitType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankReconHitType, dynamic> orderExpression = null)
        {
            return daoFactory.BankReconHitTypeDao.GetAllBankReconHitTypesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<BankReconHitType>> GetAllBankReconHitTypesWithBankStatementStagingHitsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconHitType, bool>> expression = null,bool shouldRemap=false, Func<BankReconHitType, dynamic> orderExpression = null)
			{
				return GetAllBankReconHitTypesByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingHits"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<BankReconHitType>> GetAllBankReconHitTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankReconHitType>> response = new BusinessResponse<BaseListReturnType<BankReconHitType>>();
            try
            {
                response.Result = GetAllBankReconHitTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankReconHitType> GetAllBankReconHitTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankReconHitTypeDao.GetAllBankReconHitTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<BankReconHitType>> GetBankReconHitTypeListByIdList(List<long> bankReconHitTypeIds)
        {
            BusinessResponse<List<BankReconHitType>> response = new BusinessResponse<List<BankReconHitType>>();
            try
            {
                response.Result = GetBankReconHitTypeListByIdListRaw(bankReconHitTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<BankReconHitType> GetBankReconHitTypeListByIdListRaw(List<long> bankReconHitTypeIds)
        {
            return daoFactory.BankReconHitTypeDao.GetBankReconHitTypeListByIdList(bankReconHitTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<BankReconHitType>> GetAllBankReconHitTypesWithBankStatementStagingHitsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankReconHitType>> response = new BusinessResponse<BaseListReturnType<BankReconHitType>>();
            try
            {
                response.Result = GetAllBankReconHitTypesWithBankStatementStagingHitsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankReconHitType> GetAllBankReconHitTypesWithBankStatementStagingHitsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankReconHitTypeWitDetailsRaw(new List<string>() { "BankStatementStagingHits" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<BankStatementStagingHit>>  UpdateBankStatementStagingHitsForBankReconHitTypeWithoutSavingNewItem(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankReconHitType)
            {
                BusinessResponse<List<BankStatementStagingHit>> response = new BusinessResponse<List<BankStatementStagingHit>>();
                try
                {
                    response.Result = UpdateBankStatementStagingHitsForBankReconHitTypeWithoutSavingNewItemRaw(newBankStatementStagingHits, idBankReconHitType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankReconHitTypeWithoutSavingNewItemRaw(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankReconHitType)
            {
                return daoFactory.BankReconHitTypeDao.UpdateBankStatementStagingHitsForBankReconHitTypeWithoutSavingNewItem(newBankStatementStagingHits,idBankReconHitType); 
            }



		    public BusinessResponse<List<BankStatementStagingHit>>  UpdateBankStatementStagingHitsForBankReconHitType(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankReconHitType)
            {
                BusinessResponse<List<BankStatementStagingHit>> response = new BusinessResponse<List<BankStatementStagingHit>>();
                try
                {
                    response.Result = UpdateBankStatementStagingHitsForBankReconHitTypeRaw(newBankStatementStagingHits, idBankReconHitType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankReconHitTypeRaw(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankReconHitType)
            {
                return daoFactory.BankReconHitTypeDao.UpdateBankStatementStagingHitsForBankReconHitType(newBankStatementStagingHits,idBankReconHitType); 
            }





		public BusinessResponse<BankReconHitType> GetBankReconHitTypeWithBankStatementStagingHitsDetails(long idBankReconHitType,bool shouldRemap=false)
        {
            BusinessResponse<BankReconHitType> response = new BusinessResponse<BankReconHitType>();
            try
            {
                response.Result = GetBankReconHitTypeWithBankStatementStagingHitsDetailsRaw(idBankReconHitType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankReconHitType GetBankReconHitTypeWithBankStatementStagingHitsDetailsRaw(long idBankReconHitType,bool shouldRemap=false)
        {
            return GetBankReconHitTypeWitDetailsRaw(idBankReconHitType,new List<string>() { "BankStatementStagingHits"},shouldRemap);
        }

		
        public BusinessResponse<BankReconHitType> GetBankReconHitType(long idBankReconHitType,bool shouldRemap=false)
        {
            BusinessResponse<BankReconHitType> response = new BusinessResponse<BankReconHitType>();
		    try
		    {
			    response.Result = GetBankReconHitTypesRaw(idBankReconHitType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankReconHitType GetBankReconHitTypesRaw(long idBankReconHitType,bool shouldRemap=false)
        {
            return daoFactory.BankReconHitTypeDao.GetBankReconHitType(idBankReconHitType,shouldRemap);
        }

        
        public BusinessResponse<BankReconHitType> GetBankReconHitTypeWitDetails(long idBankReconHitType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BankReconHitType> response = new BusinessResponse<BankReconHitType>();
		    try
		    {
			    response.Result = GetBankReconHitTypeWitDetailsRaw(idBankReconHitType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankReconHitType GetBankReconHitTypeWitDetailsRaw(long idBankReconHitType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankReconHitTypeDao.GetBankReconHitTypeWitDetails(idBankReconHitType,shouldRemap);
        }


		 public BusinessResponse<BankReconHitType> GetBankReconHitTypeCustom( Expression<Func<BankReconHitType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<BankReconHitType> response = new BusinessResponse<BankReconHitType>();
		    try
		    {
			    response.Result = GetBankReconHitTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BankReconHitType GetBankReconHitTypeCustomRaw( Expression<Func<BankReconHitType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.BankReconHitTypeDao.GetBankReconHitTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<BankReconHitType>> GetBankReconHitTypeCustomList( Expression<Func<BankReconHitType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankReconHitType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<BankReconHitType>> response = new BusinessResponse<BaseListReturnType<BankReconHitType>>();
		    try
		    {
			    response.Result = GetBankReconHitTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<BankReconHitType> GetBankReconHitTypeCustomListRaw( Expression<Func<BankReconHitType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankReconHitType, dynamic> orderExpression = null)
		{
            return daoFactory.BankReconHitTypeDao.GetBankReconHitTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveBankReconHitType(BankReconHitType bankReconHitType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveBankReconHitTypeRaw(bankReconHitType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveBankReconHitTypeRaw(BankReconHitType bankReconHitType)
        {
            daoFactory.BankReconHitTypeDao.SaveBankReconHitType(bankReconHitType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyBankReconHitType(BankReconHitType bankReconHitType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyBankReconHitTypeRaw(bankReconHitType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyBankReconHitTypeRaw(BankReconHitType bankReconHitType)
        {
            daoFactory.BankReconHitTypeDao.SaveOnlyBankReconHitType(bankReconHitType);
            return true;
        }

        public BusinessResponse<bool> DeleteBankReconHitType(BankReconHitType bankReconHitType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteBankReconHitTypeRaw(bankReconHitType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteBankReconHitTypeRaw(BankReconHitType bankReconHitType)
        {
            daoFactory.BankReconHitTypeDao.DeleteBankReconHitType(bankReconHitType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyBankReconHitType(BankReconHitType bankReconHitType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyBankReconHitTypeRaw(bankReconHitType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyBankReconHitTypeRaw(BankReconHitType bankReconHitType)
        {
            daoFactory.BankReconHitTypeDao.DeletePermanentlyBankReconHitType(bankReconHitType);
            return true;
        }
	}
	public partial class BankReconOrderProcessStateService: BaseService
	{
	    public BusinessResponse<List<BankReconOrderProcessState>> GetAllBankReconOrderProcessStates(bool shouldRemap=false)
        {
            BusinessResponse<List<BankReconOrderProcessState>> response = new BusinessResponse<List<BankReconOrderProcessState>>();
		    try
		    {
			    response.Result = GetAllBankReconOrderProcessStatesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<BankReconOrderProcessState> GetAllBankReconOrderProcessStatesRaw(bool shouldRemap=false)
        {
            return daoFactory.BankReconOrderProcessStateDao.GetAllBankReconOrderProcessStates(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<BankReconOrderProcessState>> GetAllBankReconOrderProcessStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderProcessState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankReconOrderProcessState, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<BankReconOrderProcessState>> response = new BusinessResponse<BaseListReturnType<BankReconOrderProcessState>>();
		    try
		    {
			    response.Result = GetAllBankReconOrderProcessStatesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<BankReconOrderProcessState> GetAllBankReconOrderProcessStatesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderProcessState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankReconOrderProcessState, dynamic> orderExpression = null)
        {
            return daoFactory.BankReconOrderProcessStateDao.GetAllBankReconOrderProcessStatesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<BankReconOrderProcessState>> GetAllBankReconOrderProcessStatesWithBankStatementStagingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderProcessState, bool>> expression = null,bool shouldRemap=false, Func<BankReconOrderProcessState, dynamic> orderExpression = null)
			{
				return GetAllBankReconOrderProcessStatesByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<BankReconOrderProcessState>> GetAllBankReconOrderProcessStateWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankReconOrderProcessState>> response = new BusinessResponse<BaseListReturnType<BankReconOrderProcessState>>();
            try
            {
                response.Result = GetAllBankReconOrderProcessStateWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankReconOrderProcessState> GetAllBankReconOrderProcessStateWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankReconOrderProcessStateDao.GetAllBankReconOrderProcessStateWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<BankReconOrderProcessState>> GetBankReconOrderProcessStateListByIdList(List<long> bankReconOrderProcessStateIds)
        {
            BusinessResponse<List<BankReconOrderProcessState>> response = new BusinessResponse<List<BankReconOrderProcessState>>();
            try
            {
                response.Result = GetBankReconOrderProcessStateListByIdListRaw(bankReconOrderProcessStateIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<BankReconOrderProcessState> GetBankReconOrderProcessStateListByIdListRaw(List<long> bankReconOrderProcessStateIds)
        {
            return daoFactory.BankReconOrderProcessStateDao.GetBankReconOrderProcessStateListByIdList(bankReconOrderProcessStateIds);
        }

					
		public BusinessResponse<BaseListReturnType<BankReconOrderProcessState>> GetAllBankReconOrderProcessStatesWithBankStatementStagingsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankReconOrderProcessState>> response = new BusinessResponse<BaseListReturnType<BankReconOrderProcessState>>();
            try
            {
                response.Result = GetAllBankReconOrderProcessStatesWithBankStatementStagingsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankReconOrderProcessState> GetAllBankReconOrderProcessStatesWithBankStatementStagingsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankReconOrderProcessStateWitDetailsRaw(new List<string>() { "BankStatementStagings" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<BankStatementStaging>>  UpdateBankStatementStagingsForBankReconOrderProcessStateWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idBankReconOrderProcessState)
            {
                BusinessResponse<List<BankStatementStaging>> response = new BusinessResponse<List<BankStatementStaging>>();
                try
                {
                    response.Result = UpdateBankStatementStagingsForBankReconOrderProcessStateWithoutSavingNewItemRaw(newBankStatementStagings, idBankReconOrderProcessState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStaging> UpdateBankStatementStagingsForBankReconOrderProcessStateWithoutSavingNewItemRaw(List<BankStatementStaging> newBankStatementStagings,long idBankReconOrderProcessState)
            {
                return daoFactory.BankReconOrderProcessStateDao.UpdateBankStatementStagingsForBankReconOrderProcessStateWithoutSavingNewItem(newBankStatementStagings,idBankReconOrderProcessState); 
            }



		    public BusinessResponse<List<BankStatementStaging>>  UpdateBankStatementStagingsForBankReconOrderProcessState(List<BankStatementStaging> newBankStatementStagings,long idBankReconOrderProcessState)
            {
                BusinessResponse<List<BankStatementStaging>> response = new BusinessResponse<List<BankStatementStaging>>();
                try
                {
                    response.Result = UpdateBankStatementStagingsForBankReconOrderProcessStateRaw(newBankStatementStagings, idBankReconOrderProcessState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStaging> UpdateBankStatementStagingsForBankReconOrderProcessStateRaw(List<BankStatementStaging> newBankStatementStagings,long idBankReconOrderProcessState)
            {
                return daoFactory.BankReconOrderProcessStateDao.UpdateBankStatementStagingsForBankReconOrderProcessState(newBankStatementStagings,idBankReconOrderProcessState); 
            }





		public BusinessResponse<BankReconOrderProcessState> GetBankReconOrderProcessStateWithBankStatementStagingsDetails(long idBankReconOrderProcessState,bool shouldRemap=false)
        {
            BusinessResponse<BankReconOrderProcessState> response = new BusinessResponse<BankReconOrderProcessState>();
            try
            {
                response.Result = GetBankReconOrderProcessStateWithBankStatementStagingsDetailsRaw(idBankReconOrderProcessState,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankReconOrderProcessState GetBankReconOrderProcessStateWithBankStatementStagingsDetailsRaw(long idBankReconOrderProcessState,bool shouldRemap=false)
        {
            return GetBankReconOrderProcessStateWitDetailsRaw(idBankReconOrderProcessState,new List<string>() { "BankStatementStagings"},shouldRemap);
        }

		
        public BusinessResponse<BankReconOrderProcessState> GetBankReconOrderProcessState(long idBankReconOrderProcessState,bool shouldRemap=false)
        {
            BusinessResponse<BankReconOrderProcessState> response = new BusinessResponse<BankReconOrderProcessState>();
		    try
		    {
			    response.Result = GetBankReconOrderProcessStatesRaw(idBankReconOrderProcessState,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankReconOrderProcessState GetBankReconOrderProcessStatesRaw(long idBankReconOrderProcessState,bool shouldRemap=false)
        {
            return daoFactory.BankReconOrderProcessStateDao.GetBankReconOrderProcessState(idBankReconOrderProcessState,shouldRemap);
        }

        
        public BusinessResponse<BankReconOrderProcessState> GetBankReconOrderProcessStateWitDetails(long idBankReconOrderProcessState,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BankReconOrderProcessState> response = new BusinessResponse<BankReconOrderProcessState>();
		    try
		    {
			    response.Result = GetBankReconOrderProcessStateWitDetailsRaw(idBankReconOrderProcessState,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankReconOrderProcessState GetBankReconOrderProcessStateWitDetailsRaw(long idBankReconOrderProcessState,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankReconOrderProcessStateDao.GetBankReconOrderProcessStateWitDetails(idBankReconOrderProcessState,shouldRemap);
        }


		 public BusinessResponse<BankReconOrderProcessState> GetBankReconOrderProcessStateCustom( Expression<Func<BankReconOrderProcessState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<BankReconOrderProcessState> response = new BusinessResponse<BankReconOrderProcessState>();
		    try
		    {
			    response.Result = GetBankReconOrderProcessStateCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BankReconOrderProcessState GetBankReconOrderProcessStateCustomRaw( Expression<Func<BankReconOrderProcessState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.BankReconOrderProcessStateDao.GetBankReconOrderProcessStateCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<BankReconOrderProcessState>> GetBankReconOrderProcessStateCustomList( Expression<Func<BankReconOrderProcessState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankReconOrderProcessState, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<BankReconOrderProcessState>> response = new BusinessResponse<BaseListReturnType<BankReconOrderProcessState>>();
		    try
		    {
			    response.Result = GetBankReconOrderProcessStateCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<BankReconOrderProcessState> GetBankReconOrderProcessStateCustomListRaw( Expression<Func<BankReconOrderProcessState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankReconOrderProcessState, dynamic> orderExpression = null)
		{
            return daoFactory.BankReconOrderProcessStateDao.GetBankReconOrderProcessStateCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveBankReconOrderProcessState(BankReconOrderProcessState bankReconOrderProcessState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveBankReconOrderProcessStateRaw(bankReconOrderProcessState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveBankReconOrderProcessStateRaw(BankReconOrderProcessState bankReconOrderProcessState)
        {
            daoFactory.BankReconOrderProcessStateDao.SaveBankReconOrderProcessState(bankReconOrderProcessState);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyBankReconOrderProcessState(BankReconOrderProcessState bankReconOrderProcessState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyBankReconOrderProcessStateRaw(bankReconOrderProcessState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyBankReconOrderProcessStateRaw(BankReconOrderProcessState bankReconOrderProcessState)
        {
            daoFactory.BankReconOrderProcessStateDao.SaveOnlyBankReconOrderProcessState(bankReconOrderProcessState);
            return true;
        }

        public BusinessResponse<bool> DeleteBankReconOrderProcessState(BankReconOrderProcessState bankReconOrderProcessState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteBankReconOrderProcessStateRaw(bankReconOrderProcessState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteBankReconOrderProcessStateRaw(BankReconOrderProcessState bankReconOrderProcessState)
        {
            daoFactory.BankReconOrderProcessStateDao.DeleteBankReconOrderProcessState(bankReconOrderProcessState);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyBankReconOrderProcessState(BankReconOrderProcessState bankReconOrderProcessState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyBankReconOrderProcessStateRaw(bankReconOrderProcessState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyBankReconOrderProcessStateRaw(BankReconOrderProcessState bankReconOrderProcessState)
        {
            daoFactory.BankReconOrderProcessStateDao.DeletePermanentlyBankReconOrderProcessState(bankReconOrderProcessState);
            return true;
        }
	}
	public partial class BankReconOrderTypeService: BaseService
	{
	    public BusinessResponse<List<BankReconOrderType>> GetAllBankReconOrderTypes(bool shouldRemap=false)
        {
            BusinessResponse<List<BankReconOrderType>> response = new BusinessResponse<List<BankReconOrderType>>();
		    try
		    {
			    response.Result = GetAllBankReconOrderTypesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<BankReconOrderType> GetAllBankReconOrderTypesRaw(bool shouldRemap=false)
        {
            return daoFactory.BankReconOrderTypeDao.GetAllBankReconOrderTypes(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<BankReconOrderType>> GetAllBankReconOrderTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankReconOrderType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<BankReconOrderType>> response = new BusinessResponse<BaseListReturnType<BankReconOrderType>>();
		    try
		    {
			    response.Result = GetAllBankReconOrderTypesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<BankReconOrderType> GetAllBankReconOrderTypesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankReconOrderType, dynamic> orderExpression = null)
        {
            return daoFactory.BankReconOrderTypeDao.GetAllBankReconOrderTypesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<BankReconOrderType>> GetAllBankReconOrderTypesWithBankStatementStagingDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankReconOrderType, bool>> expression = null,bool shouldRemap=false, Func<BankReconOrderType, dynamic> orderExpression = null)
			{
				return GetAllBankReconOrderTypesByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingDetails"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<BankReconOrderType>> GetAllBankReconOrderTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankReconOrderType>> response = new BusinessResponse<BaseListReturnType<BankReconOrderType>>();
            try
            {
                response.Result = GetAllBankReconOrderTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankReconOrderType> GetAllBankReconOrderTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankReconOrderTypeDao.GetAllBankReconOrderTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<BankReconOrderType>> GetBankReconOrderTypeListByIdList(List<long> bankReconOrderTypeIds)
        {
            BusinessResponse<List<BankReconOrderType>> response = new BusinessResponse<List<BankReconOrderType>>();
            try
            {
                response.Result = GetBankReconOrderTypeListByIdListRaw(bankReconOrderTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<BankReconOrderType> GetBankReconOrderTypeListByIdListRaw(List<long> bankReconOrderTypeIds)
        {
            return daoFactory.BankReconOrderTypeDao.GetBankReconOrderTypeListByIdList(bankReconOrderTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<BankReconOrderType>> GetAllBankReconOrderTypesWithBankStatementStagingDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankReconOrderType>> response = new BusinessResponse<BaseListReturnType<BankReconOrderType>>();
            try
            {
                response.Result = GetAllBankReconOrderTypesWithBankStatementStagingDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankReconOrderType> GetAllBankReconOrderTypesWithBankStatementStagingDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankReconOrderTypeWitDetailsRaw(new List<string>() { "BankStatementStagingDetails" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<BankStatementStagingDetail>>  UpdateBankStatementStagingDetailsForBankReconOrderTypeWithoutSavingNewItem(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankReconOrderType)
            {
                BusinessResponse<List<BankStatementStagingDetail>> response = new BusinessResponse<List<BankStatementStagingDetail>>();
                try
                {
                    response.Result = UpdateBankStatementStagingDetailsForBankReconOrderTypeWithoutSavingNewItemRaw(newBankStatementStagingDetails, idBankReconOrderType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankReconOrderTypeWithoutSavingNewItemRaw(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankReconOrderType)
            {
                return daoFactory.BankReconOrderTypeDao.UpdateBankStatementStagingDetailsForBankReconOrderTypeWithoutSavingNewItem(newBankStatementStagingDetails,idBankReconOrderType); 
            }



		    public BusinessResponse<List<BankStatementStagingDetail>>  UpdateBankStatementStagingDetailsForBankReconOrderType(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankReconOrderType)
            {
                BusinessResponse<List<BankStatementStagingDetail>> response = new BusinessResponse<List<BankStatementStagingDetail>>();
                try
                {
                    response.Result = UpdateBankStatementStagingDetailsForBankReconOrderTypeRaw(newBankStatementStagingDetails, idBankReconOrderType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankReconOrderTypeRaw(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankReconOrderType)
            {
                return daoFactory.BankReconOrderTypeDao.UpdateBankStatementStagingDetailsForBankReconOrderType(newBankStatementStagingDetails,idBankReconOrderType); 
            }





		public BusinessResponse<BankReconOrderType> GetBankReconOrderTypeWithBankStatementStagingDetailsDetails(long idBankReconOrderType,bool shouldRemap=false)
        {
            BusinessResponse<BankReconOrderType> response = new BusinessResponse<BankReconOrderType>();
            try
            {
                response.Result = GetBankReconOrderTypeWithBankStatementStagingDetailsDetailsRaw(idBankReconOrderType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankReconOrderType GetBankReconOrderTypeWithBankStatementStagingDetailsDetailsRaw(long idBankReconOrderType,bool shouldRemap=false)
        {
            return GetBankReconOrderTypeWitDetailsRaw(idBankReconOrderType,new List<string>() { "BankStatementStagingDetails"},shouldRemap);
        }

		
        public BusinessResponse<BankReconOrderType> GetBankReconOrderType(long idBankReconOrderType,bool shouldRemap=false)
        {
            BusinessResponse<BankReconOrderType> response = new BusinessResponse<BankReconOrderType>();
		    try
		    {
			    response.Result = GetBankReconOrderTypesRaw(idBankReconOrderType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankReconOrderType GetBankReconOrderTypesRaw(long idBankReconOrderType,bool shouldRemap=false)
        {
            return daoFactory.BankReconOrderTypeDao.GetBankReconOrderType(idBankReconOrderType,shouldRemap);
        }

        
        public BusinessResponse<BankReconOrderType> GetBankReconOrderTypeWitDetails(long idBankReconOrderType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BankReconOrderType> response = new BusinessResponse<BankReconOrderType>();
		    try
		    {
			    response.Result = GetBankReconOrderTypeWitDetailsRaw(idBankReconOrderType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankReconOrderType GetBankReconOrderTypeWitDetailsRaw(long idBankReconOrderType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankReconOrderTypeDao.GetBankReconOrderTypeWitDetails(idBankReconOrderType,shouldRemap);
        }


		 public BusinessResponse<BankReconOrderType> GetBankReconOrderTypeCustom( Expression<Func<BankReconOrderType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<BankReconOrderType> response = new BusinessResponse<BankReconOrderType>();
		    try
		    {
			    response.Result = GetBankReconOrderTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BankReconOrderType GetBankReconOrderTypeCustomRaw( Expression<Func<BankReconOrderType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.BankReconOrderTypeDao.GetBankReconOrderTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<BankReconOrderType>> GetBankReconOrderTypeCustomList( Expression<Func<BankReconOrderType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankReconOrderType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<BankReconOrderType>> response = new BusinessResponse<BaseListReturnType<BankReconOrderType>>();
		    try
		    {
			    response.Result = GetBankReconOrderTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<BankReconOrderType> GetBankReconOrderTypeCustomListRaw( Expression<Func<BankReconOrderType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankReconOrderType, dynamic> orderExpression = null)
		{
            return daoFactory.BankReconOrderTypeDao.GetBankReconOrderTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveBankReconOrderType(BankReconOrderType bankReconOrderType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveBankReconOrderTypeRaw(bankReconOrderType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveBankReconOrderTypeRaw(BankReconOrderType bankReconOrderType)
        {
            daoFactory.BankReconOrderTypeDao.SaveBankReconOrderType(bankReconOrderType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyBankReconOrderType(BankReconOrderType bankReconOrderType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyBankReconOrderTypeRaw(bankReconOrderType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyBankReconOrderTypeRaw(BankReconOrderType bankReconOrderType)
        {
            daoFactory.BankReconOrderTypeDao.SaveOnlyBankReconOrderType(bankReconOrderType);
            return true;
        }

        public BusinessResponse<bool> DeleteBankReconOrderType(BankReconOrderType bankReconOrderType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteBankReconOrderTypeRaw(bankReconOrderType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteBankReconOrderTypeRaw(BankReconOrderType bankReconOrderType)
        {
            daoFactory.BankReconOrderTypeDao.DeleteBankReconOrderType(bankReconOrderType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyBankReconOrderType(BankReconOrderType bankReconOrderType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyBankReconOrderTypeRaw(bankReconOrderType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyBankReconOrderTypeRaw(BankReconOrderType bankReconOrderType)
        {
            daoFactory.BankReconOrderTypeDao.DeletePermanentlyBankReconOrderType(bankReconOrderType);
            return true;
        }
	}
	public partial class BankStatementHitListService: BaseService
	{
	    public BusinessResponse<List<BankStatementHitList>> GetAllBankStatementHitLists(bool shouldRemap=false)
        {
            BusinessResponse<List<BankStatementHitList>> response = new BusinessResponse<List<BankStatementHitList>>();
		    try
		    {
			    response.Result = GetAllBankStatementHitListsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<BankStatementHitList> GetAllBankStatementHitListsRaw(bool shouldRemap=false)
        {
            return daoFactory.BankStatementHitListDao.GetAllBankStatementHitLists(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetAllBankStatementHitListsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementHitList, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList>>();
		    try
		    {
			    response.Result = GetAllBankStatementHitListsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementHitList, dynamic> orderExpression = null)
        {
            return daoFactory.BankStatementHitListDao.GetAllBankStatementHitListsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetAllBankStatementHitListsWithBankStatementStagingDetailDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null,bool shouldRemap=false, Func<BankStatementHitList, dynamic> orderExpression = null)
			{
				return GetAllBankStatementHitListsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingDetail"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetAllBankStatementHitListsWithBankStatementHitList_TransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null,bool shouldRemap=false, Func<BankStatementHitList, dynamic> orderExpression = null)
			{
				return GetAllBankStatementHitListsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementHitList_TransactionPreset"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetAllBankStatementHitListsWithBankStatementStagingHitsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null,bool shouldRemap=false, Func<BankStatementHitList, dynamic> orderExpression = null)
			{
				return GetAllBankStatementHitListsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingHits"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetAllBankStatementHitListsWithTemporaryTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList, bool>> expression = null,bool shouldRemap=false, Func<BankStatementHitList, dynamic> orderExpression = null)
			{
				return GetAllBankStatementHitListsByPage(sortingPagingInfo, expression,new List<string>(){"TemporaryTransactions"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetAllBankStatementHitListWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList>>();
            try
            {
                response.Result = GetAllBankStatementHitListWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementHitListDao.GetAllBankStatementHitListWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<BankStatementHitList>> GetBankStatementHitListListByIdList(List<long> bankStatementHitListIds)
        {
            BusinessResponse<List<BankStatementHitList>> response = new BusinessResponse<List<BankStatementHitList>>();
            try
            {
                response.Result = GetBankStatementHitListListByIdListRaw(bankStatementHitListIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<BankStatementHitList> GetBankStatementHitListListByIdListRaw(List<long> bankStatementHitListIds)
        {
            return daoFactory.BankStatementHitListDao.GetBankStatementHitListListByIdList(bankStatementHitListIds);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetAllBankStatementHitListsWithBankStatementStagingDetailDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList>>();
            try
            {
                response.Result = GetAllBankStatementHitListsWithBankStatementStagingDetailDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithBankStatementStagingDetailDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementHitListWitDetailsRaw(new List<string>() { "BankStatementStagingDetail" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetAllBankStatementHitListListByBankStatementStagingDetail(long idBankStatementStagingDetail)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList>>();
            try
            {
                response.Result = GetAllBankStatementHitListListByBankStatementStagingDetailRaw(idBankStatementStagingDetail);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListListByBankStatementStagingDetailRaw(long idBankStatementStagingDetail)
        {
            return daoFactory.BankStatementHitListDao.GetAllBankStatementHitListListByBankStatementStagingDetail(idBankStatementStagingDetail);
        }

        public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetAllBankStatementHitListListByBankStatementStagingDetailByPage(long idBankStatementStagingDetail, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList>>();
            try
            {
                response.Result = GetAllBankStatementHitListListByBankStatementStagingDetailByPageRaw(idBankStatementStagingDetail, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListListByBankStatementStagingDetailByPageRaw(long idBankStatementStagingDetail,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementHitListDao.GetAllBankStatementHitListListByBankStatementStagingDetailByPage(idBankStatementStagingDetail, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetAllBankStatementHitListsWithBankStatementHitList_TransactionPresetDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList>>();
            try
            {
                response.Result = GetAllBankStatementHitListsWithBankStatementHitList_TransactionPresetDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithBankStatementHitList_TransactionPresetDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementHitListWitDetailsRaw(new List<string>() { "BankStatementHitList_TransactionPreset" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetAllBankStatementHitListsWithBankStatementStagingHitsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList>>();
            try
            {
                response.Result = GetAllBankStatementHitListsWithBankStatementStagingHitsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithBankStatementStagingHitsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementHitListWitDetailsRaw(new List<string>() { "BankStatementStagingHits" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetAllBankStatementHitListsWithTemporaryTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList>>();
            try
            {
                response.Result = GetAllBankStatementHitListsWithTemporaryTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList> GetAllBankStatementHitListsWithTemporaryTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementHitListWitDetailsRaw(new List<string>() { "TemporaryTransactions" }, shouldRemap);
        }
        
        






		



		public BusinessResponse<BankStatementHitList> GetBankStatementHitListWithBankStatementStagingDetailDetails(long idBankStatementHitList,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementHitList> response = new BusinessResponse<BankStatementHitList>();
            try
            {
                response.Result = GetBankStatementHitListWithBankStatementStagingDetailDetailsRaw(idBankStatementHitList,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementHitList GetBankStatementHitListWithBankStatementStagingDetailDetailsRaw(long idBankStatementHitList,bool shouldRemap=false)
        {
            return GetBankStatementHitListWitDetailsRaw(idBankStatementHitList,new List<string>() { "BankStatementStagingDetail"},shouldRemap);
        }

		
			public BusinessResponse<List<BankStatementHitList_TransactionPreset>>  UpdateBankStatementHitList_TransactionPresetForBankStatementHitListWithoutSavingNewItem(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idBankStatementHitList)
            {
                BusinessResponse<List<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<List<BankStatementHitList_TransactionPreset>>();
                try
                {
                    response.Result = UpdateBankStatementHitList_TransactionPresetForBankStatementHitListWithoutSavingNewItemRaw(newBankStatementHitList_TransactionPreset, idBankStatementHitList);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementHitList_TransactionPreset> UpdateBankStatementHitList_TransactionPresetForBankStatementHitListWithoutSavingNewItemRaw(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idBankStatementHitList)
            {
                return daoFactory.BankStatementHitListDao.UpdateBankStatementHitList_TransactionPresetForBankStatementHitListWithoutSavingNewItem(newBankStatementHitList_TransactionPreset,idBankStatementHitList); 
            }



		    public BusinessResponse<List<BankStatementHitList_TransactionPreset>>  UpdateBankStatementHitList_TransactionPresetForBankStatementHitList(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idBankStatementHitList)
            {
                BusinessResponse<List<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<List<BankStatementHitList_TransactionPreset>>();
                try
                {
                    response.Result = UpdateBankStatementHitList_TransactionPresetForBankStatementHitListRaw(newBankStatementHitList_TransactionPreset, idBankStatementHitList);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementHitList_TransactionPreset> UpdateBankStatementHitList_TransactionPresetForBankStatementHitListRaw(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idBankStatementHitList)
            {
                return daoFactory.BankStatementHitListDao.UpdateBankStatementHitList_TransactionPresetForBankStatementHitList(newBankStatementHitList_TransactionPreset,idBankStatementHitList); 
            }





		public BusinessResponse<BankStatementHitList> GetBankStatementHitListWithBankStatementHitList_TransactionPresetDetails(long idBankStatementHitList,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementHitList> response = new BusinessResponse<BankStatementHitList>();
            try
            {
                response.Result = GetBankStatementHitListWithBankStatementHitList_TransactionPresetDetailsRaw(idBankStatementHitList,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementHitList GetBankStatementHitListWithBankStatementHitList_TransactionPresetDetailsRaw(long idBankStatementHitList,bool shouldRemap=false)
        {
            return GetBankStatementHitListWitDetailsRaw(idBankStatementHitList,new List<string>() { "BankStatementHitList_TransactionPreset"},shouldRemap);
        }

		
			public BusinessResponse<List<BankStatementStagingHit>>  UpdateBankStatementStagingHitsForBankStatementHitListWithoutSavingNewItem(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementHitList)
            {
                BusinessResponse<List<BankStatementStagingHit>> response = new BusinessResponse<List<BankStatementStagingHit>>();
                try
                {
                    response.Result = UpdateBankStatementStagingHitsForBankStatementHitListWithoutSavingNewItemRaw(newBankStatementStagingHits, idBankStatementHitList);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankStatementHitListWithoutSavingNewItemRaw(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementHitList)
            {
                return daoFactory.BankStatementHitListDao.UpdateBankStatementStagingHitsForBankStatementHitListWithoutSavingNewItem(newBankStatementStagingHits,idBankStatementHitList); 
            }



		    public BusinessResponse<List<BankStatementStagingHit>>  UpdateBankStatementStagingHitsForBankStatementHitList(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementHitList)
            {
                BusinessResponse<List<BankStatementStagingHit>> response = new BusinessResponse<List<BankStatementStagingHit>>();
                try
                {
                    response.Result = UpdateBankStatementStagingHitsForBankStatementHitListRaw(newBankStatementStagingHits, idBankStatementHitList);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankStatementHitListRaw(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementHitList)
            {
                return daoFactory.BankStatementHitListDao.UpdateBankStatementStagingHitsForBankStatementHitList(newBankStatementStagingHits,idBankStatementHitList); 
            }





		public BusinessResponse<BankStatementHitList> GetBankStatementHitListWithBankStatementStagingHitsDetails(long idBankStatementHitList,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementHitList> response = new BusinessResponse<BankStatementHitList>();
            try
            {
                response.Result = GetBankStatementHitListWithBankStatementStagingHitsDetailsRaw(idBankStatementHitList,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementHitList GetBankStatementHitListWithBankStatementStagingHitsDetailsRaw(long idBankStatementHitList,bool shouldRemap=false)
        {
            return GetBankStatementHitListWitDetailsRaw(idBankStatementHitList,new List<string>() { "BankStatementStagingHits"},shouldRemap);
        }

		
			public BusinessResponse<List<TemporaryTransaction>>  UpdateTemporaryTransactionsForBankStatementHitListWithoutSavingNewItem(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementHitList)
            {
                BusinessResponse<List<TemporaryTransaction>> response = new BusinessResponse<List<TemporaryTransaction>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionsForBankStatementHitListWithoutSavingNewItemRaw(newTemporaryTransactions, idBankStatementHitList);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementHitListWithoutSavingNewItemRaw(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementHitList)
            {
                return daoFactory.BankStatementHitListDao.UpdateTemporaryTransactionsForBankStatementHitListWithoutSavingNewItem(newTemporaryTransactions,idBankStatementHitList); 
            }



		    public BusinessResponse<List<TemporaryTransaction>>  UpdateTemporaryTransactionsForBankStatementHitList(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementHitList)
            {
                BusinessResponse<List<TemporaryTransaction>> response = new BusinessResponse<List<TemporaryTransaction>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionsForBankStatementHitListRaw(newTemporaryTransactions, idBankStatementHitList);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementHitListRaw(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementHitList)
            {
                return daoFactory.BankStatementHitListDao.UpdateTemporaryTransactionsForBankStatementHitList(newTemporaryTransactions,idBankStatementHitList); 
            }





		public BusinessResponse<BankStatementHitList> GetBankStatementHitListWithTemporaryTransactionsDetails(long idBankStatementHitList,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementHitList> response = new BusinessResponse<BankStatementHitList>();
            try
            {
                response.Result = GetBankStatementHitListWithTemporaryTransactionsDetailsRaw(idBankStatementHitList,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementHitList GetBankStatementHitListWithTemporaryTransactionsDetailsRaw(long idBankStatementHitList,bool shouldRemap=false)
        {
            return GetBankStatementHitListWitDetailsRaw(idBankStatementHitList,new List<string>() { "TemporaryTransactions"},shouldRemap);
        }

		
        public BusinessResponse<BankStatementHitList> GetBankStatementHitList(long idBankStatementHitList,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementHitList> response = new BusinessResponse<BankStatementHitList>();
		    try
		    {
			    response.Result = GetBankStatementHitListsRaw(idBankStatementHitList,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementHitList GetBankStatementHitListsRaw(long idBankStatementHitList,bool shouldRemap=false)
        {
            return daoFactory.BankStatementHitListDao.GetBankStatementHitList(idBankStatementHitList,shouldRemap);
        }

        
        public BusinessResponse<BankStatementHitList> GetBankStatementHitListWitDetails(long idBankStatementHitList,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementHitList> response = new BusinessResponse<BankStatementHitList>();
		    try
		    {
			    response.Result = GetBankStatementHitListWitDetailsRaw(idBankStatementHitList,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementHitList GetBankStatementHitListWitDetailsRaw(long idBankStatementHitList,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementHitListDao.GetBankStatementHitListWitDetails(idBankStatementHitList,shouldRemap);
        }


		 public BusinessResponse<BankStatementHitList> GetBankStatementHitListCustom( Expression<Func<BankStatementHitList, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<BankStatementHitList> response = new BusinessResponse<BankStatementHitList>();
		    try
		    {
			    response.Result = GetBankStatementHitListCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BankStatementHitList GetBankStatementHitListCustomRaw( Expression<Func<BankStatementHitList, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.BankStatementHitListDao.GetBankStatementHitListCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<BankStatementHitList>> GetBankStatementHitListCustomList( Expression<Func<BankStatementHitList, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementHitList, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<BankStatementHitList>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList>>();
		    try
		    {
			    response.Result = GetBankStatementHitListCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<BankStatementHitList> GetBankStatementHitListCustomListRaw( Expression<Func<BankStatementHitList, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementHitList, dynamic> orderExpression = null)
		{
            return daoFactory.BankStatementHitListDao.GetBankStatementHitListCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveBankStatementHitList(BankStatementHitList bankStatementHitList)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveBankStatementHitListRaw(bankStatementHitList);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveBankStatementHitListRaw(BankStatementHitList bankStatementHitList)
        {
            daoFactory.BankStatementHitListDao.SaveBankStatementHitList(bankStatementHitList);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyBankStatementHitList(BankStatementHitList bankStatementHitList)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyBankStatementHitListRaw(bankStatementHitList);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyBankStatementHitListRaw(BankStatementHitList bankStatementHitList)
        {
            daoFactory.BankStatementHitListDao.SaveOnlyBankStatementHitList(bankStatementHitList);
            return true;
        }

        public BusinessResponse<bool> DeleteBankStatementHitList(BankStatementHitList bankStatementHitList)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteBankStatementHitListRaw(bankStatementHitList);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteBankStatementHitListRaw(BankStatementHitList bankStatementHitList)
        {
            daoFactory.BankStatementHitListDao.DeleteBankStatementHitList(bankStatementHitList);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyBankStatementHitList(BankStatementHitList bankStatementHitList)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyBankStatementHitListRaw(bankStatementHitList);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyBankStatementHitListRaw(BankStatementHitList bankStatementHitList)
        {
            daoFactory.BankStatementHitListDao.DeletePermanentlyBankStatementHitList(bankStatementHitList);
            return true;
        }
	}
	public partial class BankStatementHitList_TransactionPresetService: BaseService
	{
	    public BusinessResponse<List<BankStatementHitList_TransactionPreset>> GetAllBankStatementHitList_TransactionPreset(bool shouldRemap=false)
        {
            BusinessResponse<List<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<List<BankStatementHitList_TransactionPreset>>();
		    try
		    {
			    response.Result = GetAllBankStatementHitList_TransactionPresetRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetRaw(bool shouldRemap=false)
        {
            return daoFactory.BankStatementHitList_TransactionPresetDao.GetAllBankStatementHitList_TransactionPreset(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> GetAllBankStatementHitList_TransactionPresetByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>>();
		    try
		    {
			    response.Result = GetAllBankStatementHitList_TransactionPresetByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
        {
            return daoFactory.BankStatementHitList_TransactionPresetDao.GetAllBankStatementHitList_TransactionPresetByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> GetAllBankStatementHitList_TransactionPresetWithBankStatementHitListDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = null,bool shouldRemap=false, Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
			{
				return GetAllBankStatementHitList_TransactionPresetByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementHitList"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> GetAllBankStatementHitList_TransactionPresetWithTransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression = null,bool shouldRemap=false, Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
			{
				return GetAllBankStatementHitList_TransactionPresetByPage(sortingPagingInfo, expression,new List<string>(){"TransactionPreset"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> GetAllBankStatementHitList_TransactionPresetWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementHitList_TransactionPresetWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementHitList_TransactionPresetDao.GetAllBankStatementHitList_TransactionPresetWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<BankStatementHitList_TransactionPreset>> GetBankStatementHitList_TransactionPresetListByIdList(List<long> bankStatementHitList_TransactionPresetIds)
        {
            BusinessResponse<List<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<List<BankStatementHitList_TransactionPreset>>();
            try
            {
                response.Result = GetBankStatementHitList_TransactionPresetListByIdListRaw(bankStatementHitList_TransactionPresetIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<BankStatementHitList_TransactionPreset> GetBankStatementHitList_TransactionPresetListByIdListRaw(List<long> bankStatementHitList_TransactionPresetIds)
        {
            return daoFactory.BankStatementHitList_TransactionPresetDao.GetBankStatementHitList_TransactionPresetListByIdList(bankStatementHitList_TransactionPresetIds);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> GetAllBankStatementHitList_TransactionPresetWithBankStatementHitListDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementHitList_TransactionPresetWithBankStatementHitListDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetWithBankStatementHitListDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementHitList_TransactionPresetWitDetailsRaw(new List<string>() { "BankStatementHitList" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> GetAllBankStatementHitList_TransactionPresetListByBankStatementHitList(long idBankStatementHitList)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementHitList_TransactionPresetListByBankStatementHitListRaw(idBankStatementHitList);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetListByBankStatementHitListRaw(long idBankStatementHitList)
        {
            return daoFactory.BankStatementHitList_TransactionPresetDao.GetAllBankStatementHitList_TransactionPresetListByBankStatementHitList(idBankStatementHitList);
        }

        public BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> GetAllBankStatementHitList_TransactionPresetListByBankStatementHitListByPage(long idBankStatementHitList, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementHitList_TransactionPresetListByBankStatementHitListByPageRaw(idBankStatementHitList, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetListByBankStatementHitListByPageRaw(long idBankStatementHitList,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementHitList_TransactionPresetDao.GetAllBankStatementHitList_TransactionPresetListByBankStatementHitListByPage(idBankStatementHitList, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> GetAllBankStatementHitList_TransactionPresetWithTransactionPresetDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementHitList_TransactionPresetWithTransactionPresetDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetWithTransactionPresetDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementHitList_TransactionPresetWitDetailsRaw(new List<string>() { "TransactionPreset" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> GetAllBankStatementHitList_TransactionPresetListByTransactionPreset(long idTransactionPreset)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementHitList_TransactionPresetListByTransactionPresetRaw(idTransactionPreset);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetListByTransactionPresetRaw(long idTransactionPreset)
        {
            return daoFactory.BankStatementHitList_TransactionPresetDao.GetAllBankStatementHitList_TransactionPresetListByTransactionPreset(idTransactionPreset);
        }

        public BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> GetAllBankStatementHitList_TransactionPresetListByTransactionPresetByPage(long idTransactionPreset, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementHitList_TransactionPresetListByTransactionPresetByPageRaw(idTransactionPreset, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementHitList_TransactionPreset> GetAllBankStatementHitList_TransactionPresetListByTransactionPresetByPageRaw(long idTransactionPreset,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementHitList_TransactionPresetDao.GetAllBankStatementHitList_TransactionPresetListByTransactionPresetByPage(idTransactionPreset, sortingPagingInfo);
        }

		
		



		public BusinessResponse<BankStatementHitList_TransactionPreset> GetBankStatementHitList_TransactionPresetWithBankStatementHitListDetails(long idBankStatementHitList_TransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementHitList_TransactionPreset> response = new BusinessResponse<BankStatementHitList_TransactionPreset>();
            try
            {
                response.Result = GetBankStatementHitList_TransactionPresetWithBankStatementHitListDetailsRaw(idBankStatementHitList_TransactionPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetWithBankStatementHitListDetailsRaw(long idBankStatementHitList_TransactionPreset,bool shouldRemap=false)
        {
            return GetBankStatementHitList_TransactionPresetWitDetailsRaw(idBankStatementHitList_TransactionPreset,new List<string>() { "BankStatementHitList"},shouldRemap);
        }

		



		public BusinessResponse<BankStatementHitList_TransactionPreset> GetBankStatementHitList_TransactionPresetWithTransactionPresetDetails(long idBankStatementHitList_TransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementHitList_TransactionPreset> response = new BusinessResponse<BankStatementHitList_TransactionPreset>();
            try
            {
                response.Result = GetBankStatementHitList_TransactionPresetWithTransactionPresetDetailsRaw(idBankStatementHitList_TransactionPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetWithTransactionPresetDetailsRaw(long idBankStatementHitList_TransactionPreset,bool shouldRemap=false)
        {
            return GetBankStatementHitList_TransactionPresetWitDetailsRaw(idBankStatementHitList_TransactionPreset,new List<string>() { "TransactionPreset"},shouldRemap);
        }

		
        public BusinessResponse<BankStatementHitList_TransactionPreset> GetBankStatementHitList_TransactionPreset(long idBankStatementHitList_TransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementHitList_TransactionPreset> response = new BusinessResponse<BankStatementHitList_TransactionPreset>();
		    try
		    {
			    response.Result = GetBankStatementHitList_TransactionPresetRaw(idBankStatementHitList_TransactionPreset,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetRaw(long idBankStatementHitList_TransactionPreset,bool shouldRemap=false)
        {
            return daoFactory.BankStatementHitList_TransactionPresetDao.GetBankStatementHitList_TransactionPreset(idBankStatementHitList_TransactionPreset,shouldRemap);
        }

        
        public BusinessResponse<BankStatementHitList_TransactionPreset> GetBankStatementHitList_TransactionPresetWitDetails(long idBankStatementHitList_TransactionPreset,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementHitList_TransactionPreset> response = new BusinessResponse<BankStatementHitList_TransactionPreset>();
		    try
		    {
			    response.Result = GetBankStatementHitList_TransactionPresetWitDetailsRaw(idBankStatementHitList_TransactionPreset,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetWitDetailsRaw(long idBankStatementHitList_TransactionPreset,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementHitList_TransactionPresetDao.GetBankStatementHitList_TransactionPresetWitDetails(idBankStatementHitList_TransactionPreset,shouldRemap);
        }


		 public BusinessResponse<BankStatementHitList_TransactionPreset> GetBankStatementHitList_TransactionPresetCustom( Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<BankStatementHitList_TransactionPreset> response = new BusinessResponse<BankStatementHitList_TransactionPreset>();
		    try
		    {
			    response.Result = GetBankStatementHitList_TransactionPresetCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BankStatementHitList_TransactionPreset GetBankStatementHitList_TransactionPresetCustomRaw( Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.BankStatementHitList_TransactionPresetDao.GetBankStatementHitList_TransactionPresetCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> GetBankStatementHitList_TransactionPresetCustomList( Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementHitList_TransactionPreset>>();
		    try
		    {
			    response.Result = GetBankStatementHitList_TransactionPresetCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<BankStatementHitList_TransactionPreset> GetBankStatementHitList_TransactionPresetCustomListRaw( Expression<Func<BankStatementHitList_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementHitList_TransactionPreset, dynamic> orderExpression = null)
		{
            return daoFactory.BankStatementHitList_TransactionPresetDao.GetBankStatementHitList_TransactionPresetCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveBankStatementHitList_TransactionPreset(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveBankStatementHitList_TransactionPresetRaw(bankStatementHitList_TransactionPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveBankStatementHitList_TransactionPresetRaw(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset)
        {
            daoFactory.BankStatementHitList_TransactionPresetDao.SaveBankStatementHitList_TransactionPreset(bankStatementHitList_TransactionPreset);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyBankStatementHitList_TransactionPreset(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyBankStatementHitList_TransactionPresetRaw(bankStatementHitList_TransactionPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyBankStatementHitList_TransactionPresetRaw(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset)
        {
            daoFactory.BankStatementHitList_TransactionPresetDao.SaveOnlyBankStatementHitList_TransactionPreset(bankStatementHitList_TransactionPreset);
            return true;
        }

        public BusinessResponse<bool> DeleteBankStatementHitList_TransactionPreset(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteBankStatementHitList_TransactionPresetRaw(bankStatementHitList_TransactionPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteBankStatementHitList_TransactionPresetRaw(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset)
        {
            daoFactory.BankStatementHitList_TransactionPresetDao.DeleteBankStatementHitList_TransactionPreset(bankStatementHitList_TransactionPreset);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyBankStatementHitList_TransactionPreset(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyBankStatementHitList_TransactionPresetRaw(bankStatementHitList_TransactionPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyBankStatementHitList_TransactionPresetRaw(BankStatementHitList_TransactionPreset bankStatementHitList_TransactionPreset)
        {
            daoFactory.BankStatementHitList_TransactionPresetDao.DeletePermanentlyBankStatementHitList_TransactionPreset(bankStatementHitList_TransactionPreset);
            return true;
        }
	}
	public partial class BankStatementStagingService: BaseService
	{
	    public BusinessResponse<List<BankStatementStaging>> GetAllBankStatementStagings(bool shouldRemap=false)
        {
            BusinessResponse<List<BankStatementStaging>> response = new BusinessResponse<List<BankStatementStaging>>();
		    try
		    {
			    response.Result = GetAllBankStatementStagingsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<BankStatementStaging> GetAllBankStatementStagingsRaw(bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagings(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementStaging, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
		    try
		    {
			    response.Result = GetAllBankStatementStagingsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementStaging, dynamic> orderExpression = null)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagingsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsWithBankReconOrderProcessStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStaging, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingsByPage(sortingPagingInfo, expression,new List<string>(){"BankReconOrderProcessState"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsWithBankDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStaging, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingsByPage(sortingPagingInfo, expression,new List<string>(){"Bank"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsWithBankStatementStagingStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStaging, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingState"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsWithDocumentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStaging, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingsByPage(sortingPagingInfo, expression,new List<string>(){"Document"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsWithUserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStaging, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingsByPage(sortingPagingInfo, expression,new List<string>(){"User"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsWithBankStatementStagingDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStaging, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStaging, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingDetails"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagingWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<BankStatementStaging>> GetBankStatementStagingListByIdList(List<long> bankStatementStagingIds)
        {
            BusinessResponse<List<BankStatementStaging>> response = new BusinessResponse<List<BankStatementStaging>>();
            try
            {
                response.Result = GetBankStatementStagingListByIdListRaw(bankStatementStagingIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<BankStatementStaging> GetBankStatementStagingListByIdListRaw(List<long> bankStatementStagingIds)
        {
            return daoFactory.BankStatementStagingDao.GetBankStatementStagingListByIdList(bankStatementStagingIds);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsWithBankReconOrderProcessStateDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingsWithBankReconOrderProcessStateDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankReconOrderProcessStateDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingWitDetailsRaw(new List<string>() { "BankReconOrderProcessState" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingListByBankReconOrderProcessState(long idBankReconOrderProcessState)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingListByBankReconOrderProcessStateRaw(idBankReconOrderProcessState);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankReconOrderProcessStateRaw(long idBankReconOrderProcessState)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagingListByBankReconOrderProcessState(idBankReconOrderProcessState);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingListByBankReconOrderProcessStateByPage(long idBankReconOrderProcessState, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingListByBankReconOrderProcessStateByPageRaw(idBankReconOrderProcessState, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankReconOrderProcessStateByPageRaw(long idBankReconOrderProcessState,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagingListByBankReconOrderProcessStateByPage(idBankReconOrderProcessState, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsWithBankDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingsWithBankDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingWitDetailsRaw(new List<string>() { "Bank" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingListByBank(long idBank)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingListByBankRaw(idBank);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankRaw(long idBank)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagingListByBank(idBank);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingListByBankByPage(long idBank, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingListByBankByPageRaw(idBank, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankByPageRaw(long idBank,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagingListByBankByPage(idBank, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsWithBankStatementStagingStateDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingsWithBankStatementStagingStateDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankStatementStagingStateDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingWitDetailsRaw(new List<string>() { "BankStatementStagingState" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingListByBankStatementStagingState(long idBankStatementStagingState)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingListByBankStatementStagingStateRaw(idBankStatementStagingState);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankStatementStagingStateRaw(long idBankStatementStagingState)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagingListByBankStatementStagingState(idBankStatementStagingState);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingListByBankStatementStagingStateByPage(long idBankStatementStagingState, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingListByBankStatementStagingStateByPageRaw(idBankStatementStagingState, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByBankStatementStagingStateByPageRaw(long idBankStatementStagingState,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagingListByBankStatementStagingStateByPage(idBankStatementStagingState, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsWithDocumentDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingsWithDocumentDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithDocumentDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingWitDetailsRaw(new List<string>() { "Document" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingListByDocument(long idDocument)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingListByDocumentRaw(idDocument);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByDocumentRaw(long idDocument)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagingListByDocument(idDocument);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingListByDocumentByPage(long idDocument, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingListByDocumentByPageRaw(idDocument, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByDocumentByPageRaw(long idDocument,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagingListByDocumentByPage(idDocument, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsWithUserDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingsWithUserDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithUserDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingWitDetailsRaw(new List<string>() { "User" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingListByUser(long idUser)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingListByUserRaw(idUser);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByUserRaw(long idUser)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagingListByUser(idUser);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingListByUserByPage(long idUser, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingListByUserByPageRaw(idUser, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingListByUserByPageRaw(long idUser,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingDao.GetAllBankStatementStagingListByUserByPage(idUser, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetAllBankStatementStagingsWithBankStatementStagingDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
            try
            {
                response.Result = GetAllBankStatementStagingsWithBankStatementStagingDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStaging> GetAllBankStatementStagingsWithBankStatementStagingDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingWitDetailsRaw(new List<string>() { "BankStatementStagingDetails" }, shouldRemap);
        }
        
        






		



		public BusinessResponse<BankStatementStaging> GetBankStatementStagingWithBankReconOrderProcessStateDetails(long idBankStatementStaging,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStaging> response = new BusinessResponse<BankStatementStaging>();
            try
            {
                response.Result = GetBankStatementStagingWithBankReconOrderProcessStateDetailsRaw(idBankStatementStaging,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStaging GetBankStatementStagingWithBankReconOrderProcessStateDetailsRaw(long idBankStatementStaging,bool shouldRemap=false)
        {
            return GetBankStatementStagingWitDetailsRaw(idBankStatementStaging,new List<string>() { "BankReconOrderProcessState"},shouldRemap);
        }

		



		public BusinessResponse<BankStatementStaging> GetBankStatementStagingWithBankDetails(long idBankStatementStaging,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStaging> response = new BusinessResponse<BankStatementStaging>();
            try
            {
                response.Result = GetBankStatementStagingWithBankDetailsRaw(idBankStatementStaging,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStaging GetBankStatementStagingWithBankDetailsRaw(long idBankStatementStaging,bool shouldRemap=false)
        {
            return GetBankStatementStagingWitDetailsRaw(idBankStatementStaging,new List<string>() { "Bank"},shouldRemap);
        }

		



		public BusinessResponse<BankStatementStaging> GetBankStatementStagingWithBankStatementStagingStateDetails(long idBankStatementStaging,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStaging> response = new BusinessResponse<BankStatementStaging>();
            try
            {
                response.Result = GetBankStatementStagingWithBankStatementStagingStateDetailsRaw(idBankStatementStaging,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStaging GetBankStatementStagingWithBankStatementStagingStateDetailsRaw(long idBankStatementStaging,bool shouldRemap=false)
        {
            return GetBankStatementStagingWitDetailsRaw(idBankStatementStaging,new List<string>() { "BankStatementStagingState"},shouldRemap);
        }

		



		public BusinessResponse<BankStatementStaging> GetBankStatementStagingWithDocumentDetails(long idBankStatementStaging,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStaging> response = new BusinessResponse<BankStatementStaging>();
            try
            {
                response.Result = GetBankStatementStagingWithDocumentDetailsRaw(idBankStatementStaging,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStaging GetBankStatementStagingWithDocumentDetailsRaw(long idBankStatementStaging,bool shouldRemap=false)
        {
            return GetBankStatementStagingWitDetailsRaw(idBankStatementStaging,new List<string>() { "Document"},shouldRemap);
        }

		



		public BusinessResponse<BankStatementStaging> GetBankStatementStagingWithUserDetails(long idBankStatementStaging,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStaging> response = new BusinessResponse<BankStatementStaging>();
            try
            {
                response.Result = GetBankStatementStagingWithUserDetailsRaw(idBankStatementStaging,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStaging GetBankStatementStagingWithUserDetailsRaw(long idBankStatementStaging,bool shouldRemap=false)
        {
            return GetBankStatementStagingWitDetailsRaw(idBankStatementStaging,new List<string>() { "User"},shouldRemap);
        }

		
			public BusinessResponse<List<BankStatementStagingDetail>>  UpdateBankStatementStagingDetailsForBankStatementStagingWithoutSavingNewItem(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStaging)
            {
                BusinessResponse<List<BankStatementStagingDetail>> response = new BusinessResponse<List<BankStatementStagingDetail>>();
                try
                {
                    response.Result = UpdateBankStatementStagingDetailsForBankStatementStagingWithoutSavingNewItemRaw(newBankStatementStagingDetails, idBankStatementStaging);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankStatementStagingWithoutSavingNewItemRaw(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStaging)
            {
                return daoFactory.BankStatementStagingDao.UpdateBankStatementStagingDetailsForBankStatementStagingWithoutSavingNewItem(newBankStatementStagingDetails,idBankStatementStaging); 
            }



		    public BusinessResponse<List<BankStatementStagingDetail>>  UpdateBankStatementStagingDetailsForBankStatementStaging(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStaging)
            {
                BusinessResponse<List<BankStatementStagingDetail>> response = new BusinessResponse<List<BankStatementStagingDetail>>();
                try
                {
                    response.Result = UpdateBankStatementStagingDetailsForBankStatementStagingRaw(newBankStatementStagingDetails, idBankStatementStaging);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankStatementStagingRaw(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStaging)
            {
                return daoFactory.BankStatementStagingDao.UpdateBankStatementStagingDetailsForBankStatementStaging(newBankStatementStagingDetails,idBankStatementStaging); 
            }





		public BusinessResponse<BankStatementStaging> GetBankStatementStagingWithBankStatementStagingDetailsDetails(long idBankStatementStaging,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStaging> response = new BusinessResponse<BankStatementStaging>();
            try
            {
                response.Result = GetBankStatementStagingWithBankStatementStagingDetailsDetailsRaw(idBankStatementStaging,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStaging GetBankStatementStagingWithBankStatementStagingDetailsDetailsRaw(long idBankStatementStaging,bool shouldRemap=false)
        {
            return GetBankStatementStagingWitDetailsRaw(idBankStatementStaging,new List<string>() { "BankStatementStagingDetails"},shouldRemap);
        }

		
        public BusinessResponse<BankStatementStaging> GetBankStatementStaging(long idBankStatementStaging,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStaging> response = new BusinessResponse<BankStatementStaging>();
		    try
		    {
			    response.Result = GetBankStatementStagingsRaw(idBankStatementStaging,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementStaging GetBankStatementStagingsRaw(long idBankStatementStaging,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingDao.GetBankStatementStaging(idBankStatementStaging,shouldRemap);
        }

        
        public BusinessResponse<BankStatementStaging> GetBankStatementStagingWitDetails(long idBankStatementStaging,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStaging> response = new BusinessResponse<BankStatementStaging>();
		    try
		    {
			    response.Result = GetBankStatementStagingWitDetailsRaw(idBankStatementStaging,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementStaging GetBankStatementStagingWitDetailsRaw(long idBankStatementStaging,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingDao.GetBankStatementStagingWitDetails(idBankStatementStaging,shouldRemap);
        }


		 public BusinessResponse<BankStatementStaging> GetBankStatementStagingCustom( Expression<Func<BankStatementStaging, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<BankStatementStaging> response = new BusinessResponse<BankStatementStaging>();
		    try
		    {
			    response.Result = GetBankStatementStagingCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BankStatementStaging GetBankStatementStagingCustomRaw( Expression<Func<BankStatementStaging, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.BankStatementStagingDao.GetBankStatementStagingCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<BankStatementStaging>> GetBankStatementStagingCustomList( Expression<Func<BankStatementStaging, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementStaging, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<BankStatementStaging>> response = new BusinessResponse<BaseListReturnType<BankStatementStaging>>();
		    try
		    {
			    response.Result = GetBankStatementStagingCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<BankStatementStaging> GetBankStatementStagingCustomListRaw( Expression<Func<BankStatementStaging, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementStaging, dynamic> orderExpression = null)
		{
            return daoFactory.BankStatementStagingDao.GetBankStatementStagingCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveBankStatementStaging(BankStatementStaging bankStatementStaging)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveBankStatementStagingRaw(bankStatementStaging);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveBankStatementStagingRaw(BankStatementStaging bankStatementStaging)
        {
            daoFactory.BankStatementStagingDao.SaveBankStatementStaging(bankStatementStaging);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyBankStatementStaging(BankStatementStaging bankStatementStaging)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyBankStatementStagingRaw(bankStatementStaging);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyBankStatementStagingRaw(BankStatementStaging bankStatementStaging)
        {
            daoFactory.BankStatementStagingDao.SaveOnlyBankStatementStaging(bankStatementStaging);
            return true;
        }

        public BusinessResponse<bool> DeleteBankStatementStaging(BankStatementStaging bankStatementStaging)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteBankStatementStagingRaw(bankStatementStaging);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteBankStatementStagingRaw(BankStatementStaging bankStatementStaging)
        {
            daoFactory.BankStatementStagingDao.DeleteBankStatementStaging(bankStatementStaging);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyBankStatementStaging(BankStatementStaging bankStatementStaging)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyBankStatementStagingRaw(bankStatementStaging);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyBankStatementStagingRaw(BankStatementStaging bankStatementStaging)
        {
            daoFactory.BankStatementStagingDao.DeletePermanentlyBankStatementStaging(bankStatementStaging);
            return true;
        }
	}
	public partial class BankStatementStagingDetailService: BaseService
	{
	    public BusinessResponse<List<BankStatementStagingDetail>> GetAllBankStatementStagingDetails(bool shouldRemap=false)
        {
            BusinessResponse<List<BankStatementStagingDetail>> response = new BusinessResponse<List<BankStatementStagingDetail>>();
		    try
		    {
			    response.Result = GetAllBankStatementStagingDetailsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<BankStatementStagingDetail> GetAllBankStatementStagingDetailsRaw(bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingDetailDao.GetAllBankStatementStagingDetails(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
		    try
		    {
			    response.Result = GetAllBankStatementStagingDetailsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
        {
            return daoFactory.BankStatementStagingDetailDao.GetAllBankStatementStagingDetailsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithBankReconOrderTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, expression,new List<string>(){"BankReconOrderType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithBankStatementHitListsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementHitLists"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithBankStatementStagingDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStaging"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithBankStatementStagingDetailBatchDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingDetailBatch"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithBankStatementStagingHitsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingHits"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithTemporaryTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, expression,new List<string>(){"TemporaryTransactions"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithTransaction_BankStatementStagingDetailDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetail, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingDetail, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingDetailsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction_BankStatementStagingDetail"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingDetailDao.GetAllBankStatementStagingDetailWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<BankStatementStagingDetail>> GetBankStatementStagingDetailListByIdList(List<long> bankStatementStagingDetailIds)
        {
            BusinessResponse<List<BankStatementStagingDetail>> response = new BusinessResponse<List<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetBankStatementStagingDetailListByIdListRaw(bankStatementStagingDetailIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<BankStatementStagingDetail> GetBankStatementStagingDetailListByIdListRaw(List<long> bankStatementStagingDetailIds)
        {
            return daoFactory.BankStatementStagingDetailDao.GetBankStatementStagingDetailListByIdList(bankStatementStagingDetailIds);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithBankReconOrderTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailsWithBankReconOrderTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankReconOrderTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingDetailWitDetailsRaw(new List<string>() { "BankReconOrderType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailListByBankReconOrderType(long idBankReconOrderType)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailListByBankReconOrderTypeRaw(idBankReconOrderType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankReconOrderTypeRaw(long idBankReconOrderType)
        {
            return daoFactory.BankStatementStagingDetailDao.GetAllBankStatementStagingDetailListByBankReconOrderType(idBankReconOrderType);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailListByBankReconOrderTypeByPage(long idBankReconOrderType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailListByBankReconOrderTypeByPageRaw(idBankReconOrderType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankReconOrderTypeByPageRaw(long idBankReconOrderType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingDetailDao.GetAllBankStatementStagingDetailListByBankReconOrderTypeByPage(idBankReconOrderType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithBankStatementHitListsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailsWithBankStatementHitListsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementHitListsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingDetailWitDetailsRaw(new List<string>() { "BankStatementHitLists" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithBankStatementStagingDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailsWithBankStatementStagingDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementStagingDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingDetailWitDetailsRaw(new List<string>() { "BankStatementStaging" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailListByBankStatementStaging(long idBankStatementStaging)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailListByBankStatementStagingRaw(idBankStatementStaging);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankStatementStagingRaw(long idBankStatementStaging)
        {
            return daoFactory.BankStatementStagingDetailDao.GetAllBankStatementStagingDetailListByBankStatementStaging(idBankStatementStaging);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailListByBankStatementStagingByPage(long idBankStatementStaging, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailListByBankStatementStagingByPageRaw(idBankStatementStaging, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankStatementStagingByPageRaw(long idBankStatementStaging,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingDetailDao.GetAllBankStatementStagingDetailListByBankStatementStagingByPage(idBankStatementStaging, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithBankStatementStagingDetailBatchDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailsWithBankStatementStagingDetailBatchDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementStagingDetailBatchDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingDetailWitDetailsRaw(new List<string>() { "BankStatementStagingDetailBatch" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatch(long idBankStatementStagingDetailBatch)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatchRaw(idBankStatementStagingDetailBatch);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatchRaw(long idBankStatementStagingDetailBatch)
        {
            return daoFactory.BankStatementStagingDetailDao.GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatch(idBankStatementStagingDetailBatch);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatchByPage(long idBankStatementStagingDetailBatch, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatchByPageRaw(idBankStatementStagingDetailBatch, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatchByPageRaw(long idBankStatementStagingDetailBatch,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingDetailDao.GetAllBankStatementStagingDetailListByBankStatementStagingDetailBatchByPage(idBankStatementStagingDetailBatch, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithBankStatementStagingHitsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailsWithBankStatementStagingHitsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithBankStatementStagingHitsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingDetailWitDetailsRaw(new List<string>() { "BankStatementStagingHits" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithTemporaryTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailsWithTemporaryTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithTemporaryTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingDetailWitDetailsRaw(new List<string>() { "TemporaryTransactions" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetAllBankStatementStagingDetailsWithTransaction_BankStatementStagingDetailDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailsWithTransaction_BankStatementStagingDetailDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetail> GetAllBankStatementStagingDetailsWithTransaction_BankStatementStagingDetailDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingDetailWitDetailsRaw(new List<string>() { "Transaction_BankStatementStagingDetail" }, shouldRemap);
        }
        
        






		



		public BusinessResponse<BankStatementStagingDetail> GetBankStatementStagingDetailWithBankReconOrderTypeDetails(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetail> response = new BusinessResponse<BankStatementStagingDetail>();
            try
            {
                response.Result = GetBankStatementStagingDetailWithBankReconOrderTypeDetailsRaw(idBankStatementStagingDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingDetail GetBankStatementStagingDetailWithBankReconOrderTypeDetailsRaw(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            return GetBankStatementStagingDetailWitDetailsRaw(idBankStatementStagingDetail,new List<string>() { "BankReconOrderType"},shouldRemap);
        }

		
			public BusinessResponse<List<BankStatementHitList>>  UpdateBankStatementHitListsForBankStatementStagingDetailWithoutSavingNewItem(List<BankStatementHitList> newBankStatementHitLists,long idBankStatementStagingDetail)
            {
                BusinessResponse<List<BankStatementHitList>> response = new BusinessResponse<List<BankStatementHitList>>();
                try
                {
                    response.Result = UpdateBankStatementHitListsForBankStatementStagingDetailWithoutSavingNewItemRaw(newBankStatementHitLists, idBankStatementStagingDetail);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementHitList> UpdateBankStatementHitListsForBankStatementStagingDetailWithoutSavingNewItemRaw(List<BankStatementHitList> newBankStatementHitLists,long idBankStatementStagingDetail)
            {
                return daoFactory.BankStatementStagingDetailDao.UpdateBankStatementHitListsForBankStatementStagingDetailWithoutSavingNewItem(newBankStatementHitLists,idBankStatementStagingDetail); 
            }



		    public BusinessResponse<List<BankStatementHitList>>  UpdateBankStatementHitListsForBankStatementStagingDetail(List<BankStatementHitList> newBankStatementHitLists,long idBankStatementStagingDetail)
            {
                BusinessResponse<List<BankStatementHitList>> response = new BusinessResponse<List<BankStatementHitList>>();
                try
                {
                    response.Result = UpdateBankStatementHitListsForBankStatementStagingDetailRaw(newBankStatementHitLists, idBankStatementStagingDetail);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementHitList> UpdateBankStatementHitListsForBankStatementStagingDetailRaw(List<BankStatementHitList> newBankStatementHitLists,long idBankStatementStagingDetail)
            {
                return daoFactory.BankStatementStagingDetailDao.UpdateBankStatementHitListsForBankStatementStagingDetail(newBankStatementHitLists,idBankStatementStagingDetail); 
            }





		public BusinessResponse<BankStatementStagingDetail> GetBankStatementStagingDetailWithBankStatementHitListsDetails(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetail> response = new BusinessResponse<BankStatementStagingDetail>();
            try
            {
                response.Result = GetBankStatementStagingDetailWithBankStatementHitListsDetailsRaw(idBankStatementStagingDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingDetail GetBankStatementStagingDetailWithBankStatementHitListsDetailsRaw(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            return GetBankStatementStagingDetailWitDetailsRaw(idBankStatementStagingDetail,new List<string>() { "BankStatementHitLists"},shouldRemap);
        }

		



		public BusinessResponse<BankStatementStagingDetail> GetBankStatementStagingDetailWithBankStatementStagingDetails(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetail> response = new BusinessResponse<BankStatementStagingDetail>();
            try
            {
                response.Result = GetBankStatementStagingDetailWithBankStatementStagingDetailsRaw(idBankStatementStagingDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingDetail GetBankStatementStagingDetailWithBankStatementStagingDetailsRaw(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            return GetBankStatementStagingDetailWitDetailsRaw(idBankStatementStagingDetail,new List<string>() { "BankStatementStaging"},shouldRemap);
        }

		



		public BusinessResponse<BankStatementStagingDetail> GetBankStatementStagingDetailWithBankStatementStagingDetailBatchDetails(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetail> response = new BusinessResponse<BankStatementStagingDetail>();
            try
            {
                response.Result = GetBankStatementStagingDetailWithBankStatementStagingDetailBatchDetailsRaw(idBankStatementStagingDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingDetail GetBankStatementStagingDetailWithBankStatementStagingDetailBatchDetailsRaw(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            return GetBankStatementStagingDetailWitDetailsRaw(idBankStatementStagingDetail,new List<string>() { "BankStatementStagingDetailBatch"},shouldRemap);
        }

		
			public BusinessResponse<List<BankStatementStagingHit>>  UpdateBankStatementStagingHitsForBankStatementStagingDetailWithoutSavingNewItem(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementStagingDetail)
            {
                BusinessResponse<List<BankStatementStagingHit>> response = new BusinessResponse<List<BankStatementStagingHit>>();
                try
                {
                    response.Result = UpdateBankStatementStagingHitsForBankStatementStagingDetailWithoutSavingNewItemRaw(newBankStatementStagingHits, idBankStatementStagingDetail);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankStatementStagingDetailWithoutSavingNewItemRaw(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementStagingDetail)
            {
                return daoFactory.BankStatementStagingDetailDao.UpdateBankStatementStagingHitsForBankStatementStagingDetailWithoutSavingNewItem(newBankStatementStagingHits,idBankStatementStagingDetail); 
            }



		    public BusinessResponse<List<BankStatementStagingHit>>  UpdateBankStatementStagingHitsForBankStatementStagingDetail(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementStagingDetail)
            {
                BusinessResponse<List<BankStatementStagingHit>> response = new BusinessResponse<List<BankStatementStagingHit>>();
                try
                {
                    response.Result = UpdateBankStatementStagingHitsForBankStatementStagingDetailRaw(newBankStatementStagingHits, idBankStatementStagingDetail);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingHit> UpdateBankStatementStagingHitsForBankStatementStagingDetailRaw(List<BankStatementStagingHit> newBankStatementStagingHits,long idBankStatementStagingDetail)
            {
                return daoFactory.BankStatementStagingDetailDao.UpdateBankStatementStagingHitsForBankStatementStagingDetail(newBankStatementStagingHits,idBankStatementStagingDetail); 
            }





		public BusinessResponse<BankStatementStagingDetail> GetBankStatementStagingDetailWithBankStatementStagingHitsDetails(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetail> response = new BusinessResponse<BankStatementStagingDetail>();
            try
            {
                response.Result = GetBankStatementStagingDetailWithBankStatementStagingHitsDetailsRaw(idBankStatementStagingDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingDetail GetBankStatementStagingDetailWithBankStatementStagingHitsDetailsRaw(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            return GetBankStatementStagingDetailWitDetailsRaw(idBankStatementStagingDetail,new List<string>() { "BankStatementStagingHits"},shouldRemap);
        }

		
			public BusinessResponse<List<TemporaryTransaction>>  UpdateTemporaryTransactionsForBankStatementStagingDetailWithoutSavingNewItem(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingDetail)
            {
                BusinessResponse<List<TemporaryTransaction>> response = new BusinessResponse<List<TemporaryTransaction>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionsForBankStatementStagingDetailWithoutSavingNewItemRaw(newTemporaryTransactions, idBankStatementStagingDetail);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementStagingDetailWithoutSavingNewItemRaw(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingDetail)
            {
                return daoFactory.BankStatementStagingDetailDao.UpdateTemporaryTransactionsForBankStatementStagingDetailWithoutSavingNewItem(newTemporaryTransactions,idBankStatementStagingDetail); 
            }



		    public BusinessResponse<List<TemporaryTransaction>>  UpdateTemporaryTransactionsForBankStatementStagingDetail(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingDetail)
            {
                BusinessResponse<List<TemporaryTransaction>> response = new BusinessResponse<List<TemporaryTransaction>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionsForBankStatementStagingDetailRaw(newTemporaryTransactions, idBankStatementStagingDetail);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementStagingDetailRaw(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingDetail)
            {
                return daoFactory.BankStatementStagingDetailDao.UpdateTemporaryTransactionsForBankStatementStagingDetail(newTemporaryTransactions,idBankStatementStagingDetail); 
            }





		public BusinessResponse<BankStatementStagingDetail> GetBankStatementStagingDetailWithTemporaryTransactionsDetails(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetail> response = new BusinessResponse<BankStatementStagingDetail>();
            try
            {
                response.Result = GetBankStatementStagingDetailWithTemporaryTransactionsDetailsRaw(idBankStatementStagingDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingDetail GetBankStatementStagingDetailWithTemporaryTransactionsDetailsRaw(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            return GetBankStatementStagingDetailWitDetailsRaw(idBankStatementStagingDetail,new List<string>() { "TemporaryTransactions"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction_BankStatementStagingDetail>>  UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetailWithoutSavingNewItem(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idBankStatementStagingDetail)
            {
                BusinessResponse<List<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<List<Transaction_BankStatementStagingDetail>>();
                try
                {
                    response.Result = UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetailWithoutSavingNewItemRaw(newTransaction_BankStatementStagingDetail, idBankStatementStagingDetail);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction_BankStatementStagingDetail> UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetailWithoutSavingNewItemRaw(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idBankStatementStagingDetail)
            {
                return daoFactory.BankStatementStagingDetailDao.UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetailWithoutSavingNewItem(newTransaction_BankStatementStagingDetail,idBankStatementStagingDetail); 
            }



		    public BusinessResponse<List<Transaction_BankStatementStagingDetail>>  UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetail(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idBankStatementStagingDetail)
            {
                BusinessResponse<List<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<List<Transaction_BankStatementStagingDetail>>();
                try
                {
                    response.Result = UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetailRaw(newTransaction_BankStatementStagingDetail, idBankStatementStagingDetail);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction_BankStatementStagingDetail> UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetailRaw(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idBankStatementStagingDetail)
            {
                return daoFactory.BankStatementStagingDetailDao.UpdateTransaction_BankStatementStagingDetailForBankStatementStagingDetail(newTransaction_BankStatementStagingDetail,idBankStatementStagingDetail); 
            }





		public BusinessResponse<BankStatementStagingDetail> GetBankStatementStagingDetailWithTransaction_BankStatementStagingDetailDetails(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetail> response = new BusinessResponse<BankStatementStagingDetail>();
            try
            {
                response.Result = GetBankStatementStagingDetailWithTransaction_BankStatementStagingDetailDetailsRaw(idBankStatementStagingDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingDetail GetBankStatementStagingDetailWithTransaction_BankStatementStagingDetailDetailsRaw(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            return GetBankStatementStagingDetailWitDetailsRaw(idBankStatementStagingDetail,new List<string>() { "Transaction_BankStatementStagingDetail"},shouldRemap);
        }

		
        public BusinessResponse<BankStatementStagingDetail> GetBankStatementStagingDetail(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetail> response = new BusinessResponse<BankStatementStagingDetail>();
		    try
		    {
			    response.Result = GetBankStatementStagingDetailsRaw(idBankStatementStagingDetail,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementStagingDetail GetBankStatementStagingDetailsRaw(long idBankStatementStagingDetail,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingDetailDao.GetBankStatementStagingDetail(idBankStatementStagingDetail,shouldRemap);
        }

        
        public BusinessResponse<BankStatementStagingDetail> GetBankStatementStagingDetailWitDetails(long idBankStatementStagingDetail,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetail> response = new BusinessResponse<BankStatementStagingDetail>();
		    try
		    {
			    response.Result = GetBankStatementStagingDetailWitDetailsRaw(idBankStatementStagingDetail,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementStagingDetail GetBankStatementStagingDetailWitDetailsRaw(long idBankStatementStagingDetail,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingDetailDao.GetBankStatementStagingDetailWitDetails(idBankStatementStagingDetail,shouldRemap);
        }


		 public BusinessResponse<BankStatementStagingDetail> GetBankStatementStagingDetailCustom( Expression<Func<BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<BankStatementStagingDetail> response = new BusinessResponse<BankStatementStagingDetail>();
		    try
		    {
			    response.Result = GetBankStatementStagingDetailCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BankStatementStagingDetail GetBankStatementStagingDetailCustomRaw( Expression<Func<BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.BankStatementStagingDetailDao.GetBankStatementStagingDetailCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> GetBankStatementStagingDetailCustomList( Expression<Func<BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementStagingDetail, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetail>>();
		    try
		    {
			    response.Result = GetBankStatementStagingDetailCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<BankStatementStagingDetail> GetBankStatementStagingDetailCustomListRaw( Expression<Func<BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementStagingDetail, dynamic> orderExpression = null)
		{
            return daoFactory.BankStatementStagingDetailDao.GetBankStatementStagingDetailCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveBankStatementStagingDetail(BankStatementStagingDetail bankStatementStagingDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveBankStatementStagingDetailRaw(bankStatementStagingDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveBankStatementStagingDetailRaw(BankStatementStagingDetail bankStatementStagingDetail)
        {
            daoFactory.BankStatementStagingDetailDao.SaveBankStatementStagingDetail(bankStatementStagingDetail);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyBankStatementStagingDetail(BankStatementStagingDetail bankStatementStagingDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyBankStatementStagingDetailRaw(bankStatementStagingDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyBankStatementStagingDetailRaw(BankStatementStagingDetail bankStatementStagingDetail)
        {
            daoFactory.BankStatementStagingDetailDao.SaveOnlyBankStatementStagingDetail(bankStatementStagingDetail);
            return true;
        }

        public BusinessResponse<bool> DeleteBankStatementStagingDetail(BankStatementStagingDetail bankStatementStagingDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteBankStatementStagingDetailRaw(bankStatementStagingDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteBankStatementStagingDetailRaw(BankStatementStagingDetail bankStatementStagingDetail)
        {
            daoFactory.BankStatementStagingDetailDao.DeleteBankStatementStagingDetail(bankStatementStagingDetail);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyBankStatementStagingDetail(BankStatementStagingDetail bankStatementStagingDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyBankStatementStagingDetailRaw(bankStatementStagingDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyBankStatementStagingDetailRaw(BankStatementStagingDetail bankStatementStagingDetail)
        {
            daoFactory.BankStatementStagingDetailDao.DeletePermanentlyBankStatementStagingDetail(bankStatementStagingDetail);
            return true;
        }
	}
	public partial class BankStatementStagingDetailBatchService: BaseService
	{
	    public BusinessResponse<List<BankStatementStagingDetailBatch>> GetAllBankStatementStagingDetailBatches(bool shouldRemap=false)
        {
            BusinessResponse<List<BankStatementStagingDetailBatch>> response = new BusinessResponse<List<BankStatementStagingDetailBatch>>();
		    try
		    {
			    response.Result = GetAllBankStatementStagingDetailBatchesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesRaw(bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingDetailBatchDao.GetAllBankStatementStagingDetailBatches(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> GetAllBankStatementStagingDetailBatchesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetailBatch, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>>();
		    try
		    {
			    response.Result = GetAllBankStatementStagingDetailBatchesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetailBatch, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
        {
            return daoFactory.BankStatementStagingDetailBatchDao.GetAllBankStatementStagingDetailBatchesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> GetAllBankStatementStagingDetailBatchesWithBankStatementStagingDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetailBatch, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingDetailBatchesByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingDetails"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> GetAllBankStatementStagingDetailBatchesWithBankStatementStagingStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingDetailBatch, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingDetailBatchesByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingState"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> GetAllBankStatementStagingDetailBatchWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailBatchWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingDetailBatchDao.GetAllBankStatementStagingDetailBatchWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<BankStatementStagingDetailBatch>> GetBankStatementStagingDetailBatchListByIdList(List<long> bankStatementStagingDetailBatchIds)
        {
            BusinessResponse<List<BankStatementStagingDetailBatch>> response = new BusinessResponse<List<BankStatementStagingDetailBatch>>();
            try
            {
                response.Result = GetBankStatementStagingDetailBatchListByIdListRaw(bankStatementStagingDetailBatchIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<BankStatementStagingDetailBatch> GetBankStatementStagingDetailBatchListByIdListRaw(List<long> bankStatementStagingDetailBatchIds)
        {
            return daoFactory.BankStatementStagingDetailBatchDao.GetBankStatementStagingDetailBatchListByIdList(bankStatementStagingDetailBatchIds);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> GetAllBankStatementStagingDetailBatchesWithBankStatementStagingDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailBatchesWithBankStatementStagingDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesWithBankStatementStagingDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingDetailBatchWitDetailsRaw(new List<string>() { "BankStatementStagingDetails" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> GetAllBankStatementStagingDetailBatchesWithBankStatementStagingStateDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailBatchesWithBankStatementStagingStateDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchesWithBankStatementStagingStateDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingDetailBatchWitDetailsRaw(new List<string>() { "BankStatementStagingState" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> GetAllBankStatementStagingDetailBatchListByBankStatementStagingState(long idBankStatementStagingState)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailBatchListByBankStatementStagingStateRaw(idBankStatementStagingState);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchListByBankStatementStagingStateRaw(long idBankStatementStagingState)
        {
            return daoFactory.BankStatementStagingDetailBatchDao.GetAllBankStatementStagingDetailBatchListByBankStatementStagingState(idBankStatementStagingState);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> GetAllBankStatementStagingDetailBatchListByBankStatementStagingStateByPage(long idBankStatementStagingState, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>>();
            try
            {
                response.Result = GetAllBankStatementStagingDetailBatchListByBankStatementStagingStateByPageRaw(idBankStatementStagingState, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingDetailBatch> GetAllBankStatementStagingDetailBatchListByBankStatementStagingStateByPageRaw(long idBankStatementStagingState,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingDetailBatchDao.GetAllBankStatementStagingDetailBatchListByBankStatementStagingStateByPage(idBankStatementStagingState, sortingPagingInfo);
        }

		
		
			public BusinessResponse<List<BankStatementStagingDetail>>  UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatchWithoutSavingNewItem(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStagingDetailBatch)
            {
                BusinessResponse<List<BankStatementStagingDetail>> response = new BusinessResponse<List<BankStatementStagingDetail>>();
                try
                {
                    response.Result = UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatchWithoutSavingNewItemRaw(newBankStatementStagingDetails, idBankStatementStagingDetailBatch);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatchWithoutSavingNewItemRaw(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStagingDetailBatch)
            {
                return daoFactory.BankStatementStagingDetailBatchDao.UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatchWithoutSavingNewItem(newBankStatementStagingDetails,idBankStatementStagingDetailBatch); 
            }



		    public BusinessResponse<List<BankStatementStagingDetail>>  UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatch(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStagingDetailBatch)
            {
                BusinessResponse<List<BankStatementStagingDetail>> response = new BusinessResponse<List<BankStatementStagingDetail>>();
                try
                {
                    response.Result = UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatchRaw(newBankStatementStagingDetails, idBankStatementStagingDetailBatch);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingDetail> UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatchRaw(List<BankStatementStagingDetail> newBankStatementStagingDetails,long idBankStatementStagingDetailBatch)
            {
                return daoFactory.BankStatementStagingDetailBatchDao.UpdateBankStatementStagingDetailsForBankStatementStagingDetailBatch(newBankStatementStagingDetails,idBankStatementStagingDetailBatch); 
            }





		public BusinessResponse<BankStatementStagingDetailBatch> GetBankStatementStagingDetailBatchWithBankStatementStagingDetailsDetails(long idBankStatementStagingDetailBatch,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetailBatch> response = new BusinessResponse<BankStatementStagingDetailBatch>();
            try
            {
                response.Result = GetBankStatementStagingDetailBatchWithBankStatementStagingDetailsDetailsRaw(idBankStatementStagingDetailBatch,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchWithBankStatementStagingDetailsDetailsRaw(long idBankStatementStagingDetailBatch,bool shouldRemap=false)
        {
            return GetBankStatementStagingDetailBatchWitDetailsRaw(idBankStatementStagingDetailBatch,new List<string>() { "BankStatementStagingDetails"},shouldRemap);
        }

		



		public BusinessResponse<BankStatementStagingDetailBatch> GetBankStatementStagingDetailBatchWithBankStatementStagingStateDetails(long idBankStatementStagingDetailBatch,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetailBatch> response = new BusinessResponse<BankStatementStagingDetailBatch>();
            try
            {
                response.Result = GetBankStatementStagingDetailBatchWithBankStatementStagingStateDetailsRaw(idBankStatementStagingDetailBatch,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchWithBankStatementStagingStateDetailsRaw(long idBankStatementStagingDetailBatch,bool shouldRemap=false)
        {
            return GetBankStatementStagingDetailBatchWitDetailsRaw(idBankStatementStagingDetailBatch,new List<string>() { "BankStatementStagingState"},shouldRemap);
        }

		
        public BusinessResponse<BankStatementStagingDetailBatch> GetBankStatementStagingDetailBatch(long idBankStatementStagingDetailBatch,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetailBatch> response = new BusinessResponse<BankStatementStagingDetailBatch>();
		    try
		    {
			    response.Result = GetBankStatementStagingDetailBatchesRaw(idBankStatementStagingDetailBatch,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchesRaw(long idBankStatementStagingDetailBatch,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingDetailBatchDao.GetBankStatementStagingDetailBatch(idBankStatementStagingDetailBatch,shouldRemap);
        }

        
        public BusinessResponse<BankStatementStagingDetailBatch> GetBankStatementStagingDetailBatchWitDetails(long idBankStatementStagingDetailBatch,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingDetailBatch> response = new BusinessResponse<BankStatementStagingDetailBatch>();
		    try
		    {
			    response.Result = GetBankStatementStagingDetailBatchWitDetailsRaw(idBankStatementStagingDetailBatch,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchWitDetailsRaw(long idBankStatementStagingDetailBatch,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingDetailBatchDao.GetBankStatementStagingDetailBatchWitDetails(idBankStatementStagingDetailBatch,shouldRemap);
        }


		 public BusinessResponse<BankStatementStagingDetailBatch> GetBankStatementStagingDetailBatchCustom( Expression<Func<BankStatementStagingDetailBatch, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<BankStatementStagingDetailBatch> response = new BusinessResponse<BankStatementStagingDetailBatch>();
		    try
		    {
			    response.Result = GetBankStatementStagingDetailBatchCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BankStatementStagingDetailBatch GetBankStatementStagingDetailBatchCustomRaw( Expression<Func<BankStatementStagingDetailBatch, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.BankStatementStagingDetailBatchDao.GetBankStatementStagingDetailBatchCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> GetBankStatementStagingDetailBatchCustomList( Expression<Func<BankStatementStagingDetailBatch, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingDetailBatch>>();
		    try
		    {
			    response.Result = GetBankStatementStagingDetailBatchCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<BankStatementStagingDetailBatch> GetBankStatementStagingDetailBatchCustomListRaw( Expression<Func<BankStatementStagingDetailBatch, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementStagingDetailBatch, dynamic> orderExpression = null)
		{
            return daoFactory.BankStatementStagingDetailBatchDao.GetBankStatementStagingDetailBatchCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveBankStatementStagingDetailBatch(BankStatementStagingDetailBatch bankStatementStagingDetailBatch)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveBankStatementStagingDetailBatchRaw(bankStatementStagingDetailBatch);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveBankStatementStagingDetailBatchRaw(BankStatementStagingDetailBatch bankStatementStagingDetailBatch)
        {
            daoFactory.BankStatementStagingDetailBatchDao.SaveBankStatementStagingDetailBatch(bankStatementStagingDetailBatch);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyBankStatementStagingDetailBatch(BankStatementStagingDetailBatch bankStatementStagingDetailBatch)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyBankStatementStagingDetailBatchRaw(bankStatementStagingDetailBatch);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyBankStatementStagingDetailBatchRaw(BankStatementStagingDetailBatch bankStatementStagingDetailBatch)
        {
            daoFactory.BankStatementStagingDetailBatchDao.SaveOnlyBankStatementStagingDetailBatch(bankStatementStagingDetailBatch);
            return true;
        }

        public BusinessResponse<bool> DeleteBankStatementStagingDetailBatch(BankStatementStagingDetailBatch bankStatementStagingDetailBatch)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteBankStatementStagingDetailBatchRaw(bankStatementStagingDetailBatch);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteBankStatementStagingDetailBatchRaw(BankStatementStagingDetailBatch bankStatementStagingDetailBatch)
        {
            daoFactory.BankStatementStagingDetailBatchDao.DeleteBankStatementStagingDetailBatch(bankStatementStagingDetailBatch);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyBankStatementStagingDetailBatch(BankStatementStagingDetailBatch bankStatementStagingDetailBatch)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyBankStatementStagingDetailBatchRaw(bankStatementStagingDetailBatch);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyBankStatementStagingDetailBatchRaw(BankStatementStagingDetailBatch bankStatementStagingDetailBatch)
        {
            daoFactory.BankStatementStagingDetailBatchDao.DeletePermanentlyBankStatementStagingDetailBatch(bankStatementStagingDetailBatch);
            return true;
        }
	}
	public partial class BankStatementStagingHitService: BaseService
	{
	    public BusinessResponse<List<BankStatementStagingHit>> GetAllBankStatementStagingHits(bool shouldRemap=false)
        {
            BusinessResponse<List<BankStatementStagingHit>> response = new BusinessResponse<List<BankStatementStagingHit>>();
		    try
		    {
			    response.Result = GetAllBankStatementStagingHitsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<BankStatementStagingHit> GetAllBankStatementStagingHitsRaw(bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingHitDao.GetAllBankStatementStagingHits(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
		    try
		    {
			    response.Result = GetAllBankStatementStagingHitsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
        {
            return daoFactory.BankStatementStagingHitDao.GetAllBankStatementStagingHitsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsWithBankStatementHitListDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementHitList"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsWithBankStatementStagingDetailDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingDetail"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsWithBankReconHitTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, expression,new List<string>(){"BankReconHitType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsWithOrderDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, expression,new List<string>(){"Order"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsWithBankStatementStagingHit_TransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingHit_TransactionPreset"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsWithTemporaryTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingHit, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingHitsByPage(sortingPagingInfo, expression,new List<string>(){"TemporaryTransactions"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingHitDao.GetAllBankStatementStagingHitWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<BankStatementStagingHit>> GetBankStatementStagingHitListByIdList(List<long> bankStatementStagingHitIds)
        {
            BusinessResponse<List<BankStatementStagingHit>> response = new BusinessResponse<List<BankStatementStagingHit>>();
            try
            {
                response.Result = GetBankStatementStagingHitListByIdListRaw(bankStatementStagingHitIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<BankStatementStagingHit> GetBankStatementStagingHitListByIdListRaw(List<long> bankStatementStagingHitIds)
        {
            return daoFactory.BankStatementStagingHitDao.GetBankStatementStagingHitListByIdList(bankStatementStagingHitIds);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsWithBankStatementHitListDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitsWithBankStatementHitListDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankStatementHitListDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingHitWitDetailsRaw(new List<string>() { "BankStatementHitList" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitListByBankStatementHitList(long idBankStatementHitList)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitListByBankStatementHitListRaw(idBankStatementHitList);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankStatementHitListRaw(long idBankStatementHitList)
        {
            return daoFactory.BankStatementStagingHitDao.GetAllBankStatementStagingHitListByBankStatementHitList(idBankStatementHitList);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitListByBankStatementHitListByPage(long idBankStatementHitList, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitListByBankStatementHitListByPageRaw(idBankStatementHitList, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankStatementHitListByPageRaw(long idBankStatementHitList,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingHitDao.GetAllBankStatementStagingHitListByBankStatementHitListByPage(idBankStatementHitList, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsWithBankStatementStagingDetailDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitsWithBankStatementStagingDetailDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankStatementStagingDetailDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingHitWitDetailsRaw(new List<string>() { "BankStatementStagingDetail" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitListByBankStatementStagingDetail(long idBankStatementStagingDetail)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitListByBankStatementStagingDetailRaw(idBankStatementStagingDetail);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankStatementStagingDetailRaw(long idBankStatementStagingDetail)
        {
            return daoFactory.BankStatementStagingHitDao.GetAllBankStatementStagingHitListByBankStatementStagingDetail(idBankStatementStagingDetail);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitListByBankStatementStagingDetailByPage(long idBankStatementStagingDetail, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitListByBankStatementStagingDetailByPageRaw(idBankStatementStagingDetail, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankStatementStagingDetailByPageRaw(long idBankStatementStagingDetail,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingHitDao.GetAllBankStatementStagingHitListByBankStatementStagingDetailByPage(idBankStatementStagingDetail, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsWithBankReconHitTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitsWithBankReconHitTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankReconHitTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingHitWitDetailsRaw(new List<string>() { "BankReconHitType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitListByBankReconHitType(long idBankReconHitType)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitListByBankReconHitTypeRaw(idBankReconHitType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankReconHitTypeRaw(long idBankReconHitType)
        {
            return daoFactory.BankStatementStagingHitDao.GetAllBankStatementStagingHitListByBankReconHitType(idBankReconHitType);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitListByBankReconHitTypeByPage(long idBankReconHitType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitListByBankReconHitTypeByPageRaw(idBankReconHitType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByBankReconHitTypeByPageRaw(long idBankReconHitType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingHitDao.GetAllBankStatementStagingHitListByBankReconHitTypeByPage(idBankReconHitType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsWithOrderDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitsWithOrderDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithOrderDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingHitWitDetailsRaw(new List<string>() { "Order" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitListByOrder(long idOrder)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitListByOrderRaw(idOrder);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByOrderRaw(long idOrder)
        {
            return daoFactory.BankStatementStagingHitDao.GetAllBankStatementStagingHitListByOrder(idOrder);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitListByOrderByPage(long idOrder, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitListByOrderByPageRaw(idOrder, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitListByOrderByPageRaw(long idOrder,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingHitDao.GetAllBankStatementStagingHitListByOrderByPage(idOrder, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsWithBankStatementStagingHit_TransactionPresetDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitsWithBankStatementStagingHit_TransactionPresetDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithBankStatementStagingHit_TransactionPresetDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingHitWitDetailsRaw(new List<string>() { "BankStatementStagingHit_TransactionPreset" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetAllBankStatementStagingHitsWithTemporaryTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
            try
            {
                response.Result = GetAllBankStatementStagingHitsWithTemporaryTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit> GetAllBankStatementStagingHitsWithTemporaryTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingHitWitDetailsRaw(new List<string>() { "TemporaryTransactions" }, shouldRemap);
        }
        
        






		



		public BusinessResponse<BankStatementStagingHit> GetBankStatementStagingHitWithBankStatementHitListDetails(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingHit> response = new BusinessResponse<BankStatementStagingHit>();
            try
            {
                response.Result = GetBankStatementStagingHitWithBankStatementHitListDetailsRaw(idBankStatementStagingHit,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingHit GetBankStatementStagingHitWithBankStatementHitListDetailsRaw(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            return GetBankStatementStagingHitWitDetailsRaw(idBankStatementStagingHit,new List<string>() { "BankStatementHitList"},shouldRemap);
        }

		



		public BusinessResponse<BankStatementStagingHit> GetBankStatementStagingHitWithBankStatementStagingDetailDetails(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingHit> response = new BusinessResponse<BankStatementStagingHit>();
            try
            {
                response.Result = GetBankStatementStagingHitWithBankStatementStagingDetailDetailsRaw(idBankStatementStagingHit,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingHit GetBankStatementStagingHitWithBankStatementStagingDetailDetailsRaw(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            return GetBankStatementStagingHitWitDetailsRaw(idBankStatementStagingHit,new List<string>() { "BankStatementStagingDetail"},shouldRemap);
        }

		



		public BusinessResponse<BankStatementStagingHit> GetBankStatementStagingHitWithBankReconHitTypeDetails(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingHit> response = new BusinessResponse<BankStatementStagingHit>();
            try
            {
                response.Result = GetBankStatementStagingHitWithBankReconHitTypeDetailsRaw(idBankStatementStagingHit,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingHit GetBankStatementStagingHitWithBankReconHitTypeDetailsRaw(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            return GetBankStatementStagingHitWitDetailsRaw(idBankStatementStagingHit,new List<string>() { "BankReconHitType"},shouldRemap);
        }

		



		public BusinessResponse<BankStatementStagingHit> GetBankStatementStagingHitWithOrderDetails(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingHit> response = new BusinessResponse<BankStatementStagingHit>();
            try
            {
                response.Result = GetBankStatementStagingHitWithOrderDetailsRaw(idBankStatementStagingHit,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingHit GetBankStatementStagingHitWithOrderDetailsRaw(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            return GetBankStatementStagingHitWitDetailsRaw(idBankStatementStagingHit,new List<string>() { "Order"},shouldRemap);
        }

		
			public BusinessResponse<List<BankStatementStagingHit_TransactionPreset>>  UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHitWithoutSavingNewItem(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idBankStatementStagingHit)
            {
                BusinessResponse<List<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<List<BankStatementStagingHit_TransactionPreset>>();
                try
                {
                    response.Result = UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHitWithoutSavingNewItemRaw(newBankStatementStagingHit_TransactionPreset, idBankStatementStagingHit);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingHit_TransactionPreset> UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHitWithoutSavingNewItemRaw(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idBankStatementStagingHit)
            {
                return daoFactory.BankStatementStagingHitDao.UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHitWithoutSavingNewItem(newBankStatementStagingHit_TransactionPreset,idBankStatementStagingHit); 
            }



		    public BusinessResponse<List<BankStatementStagingHit_TransactionPreset>>  UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHit(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idBankStatementStagingHit)
            {
                BusinessResponse<List<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<List<BankStatementStagingHit_TransactionPreset>>();
                try
                {
                    response.Result = UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHitRaw(newBankStatementStagingHit_TransactionPreset, idBankStatementStagingHit);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingHit_TransactionPreset> UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHitRaw(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idBankStatementStagingHit)
            {
                return daoFactory.BankStatementStagingHitDao.UpdateBankStatementStagingHit_TransactionPresetForBankStatementStagingHit(newBankStatementStagingHit_TransactionPreset,idBankStatementStagingHit); 
            }





		public BusinessResponse<BankStatementStagingHit> GetBankStatementStagingHitWithBankStatementStagingHit_TransactionPresetDetails(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingHit> response = new BusinessResponse<BankStatementStagingHit>();
            try
            {
                response.Result = GetBankStatementStagingHitWithBankStatementStagingHit_TransactionPresetDetailsRaw(idBankStatementStagingHit,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingHit GetBankStatementStagingHitWithBankStatementStagingHit_TransactionPresetDetailsRaw(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            return GetBankStatementStagingHitWitDetailsRaw(idBankStatementStagingHit,new List<string>() { "BankStatementStagingHit_TransactionPreset"},shouldRemap);
        }

		
			public BusinessResponse<List<TemporaryTransaction>>  UpdateTemporaryTransactionsForBankStatementStagingHitWithoutSavingNewItem(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingHit)
            {
                BusinessResponse<List<TemporaryTransaction>> response = new BusinessResponse<List<TemporaryTransaction>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionsForBankStatementStagingHitWithoutSavingNewItemRaw(newTemporaryTransactions, idBankStatementStagingHit);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementStagingHitWithoutSavingNewItemRaw(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingHit)
            {
                return daoFactory.BankStatementStagingHitDao.UpdateTemporaryTransactionsForBankStatementStagingHitWithoutSavingNewItem(newTemporaryTransactions,idBankStatementStagingHit); 
            }



		    public BusinessResponse<List<TemporaryTransaction>>  UpdateTemporaryTransactionsForBankStatementStagingHit(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingHit)
            {
                BusinessResponse<List<TemporaryTransaction>> response = new BusinessResponse<List<TemporaryTransaction>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionsForBankStatementStagingHitRaw(newTemporaryTransactions, idBankStatementStagingHit);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransaction> UpdateTemporaryTransactionsForBankStatementStagingHitRaw(List<TemporaryTransaction> newTemporaryTransactions,long idBankStatementStagingHit)
            {
                return daoFactory.BankStatementStagingHitDao.UpdateTemporaryTransactionsForBankStatementStagingHit(newTemporaryTransactions,idBankStatementStagingHit); 
            }





		public BusinessResponse<BankStatementStagingHit> GetBankStatementStagingHitWithTemporaryTransactionsDetails(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingHit> response = new BusinessResponse<BankStatementStagingHit>();
            try
            {
                response.Result = GetBankStatementStagingHitWithTemporaryTransactionsDetailsRaw(idBankStatementStagingHit,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingHit GetBankStatementStagingHitWithTemporaryTransactionsDetailsRaw(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            return GetBankStatementStagingHitWitDetailsRaw(idBankStatementStagingHit,new List<string>() { "TemporaryTransactions"},shouldRemap);
        }

		
        public BusinessResponse<BankStatementStagingHit> GetBankStatementStagingHit(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingHit> response = new BusinessResponse<BankStatementStagingHit>();
		    try
		    {
			    response.Result = GetBankStatementStagingHitsRaw(idBankStatementStagingHit,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementStagingHit GetBankStatementStagingHitsRaw(long idBankStatementStagingHit,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingHitDao.GetBankStatementStagingHit(idBankStatementStagingHit,shouldRemap);
        }

        
        public BusinessResponse<BankStatementStagingHit> GetBankStatementStagingHitWitDetails(long idBankStatementStagingHit,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingHit> response = new BusinessResponse<BankStatementStagingHit>();
		    try
		    {
			    response.Result = GetBankStatementStagingHitWitDetailsRaw(idBankStatementStagingHit,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementStagingHit GetBankStatementStagingHitWitDetailsRaw(long idBankStatementStagingHit,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingHitDao.GetBankStatementStagingHitWitDetails(idBankStatementStagingHit,shouldRemap);
        }


		 public BusinessResponse<BankStatementStagingHit> GetBankStatementStagingHitCustom( Expression<Func<BankStatementStagingHit, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<BankStatementStagingHit> response = new BusinessResponse<BankStatementStagingHit>();
		    try
		    {
			    response.Result = GetBankStatementStagingHitCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BankStatementStagingHit GetBankStatementStagingHitCustomRaw( Expression<Func<BankStatementStagingHit, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.BankStatementStagingHitDao.GetBankStatementStagingHitCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<BankStatementStagingHit>> GetBankStatementStagingHitCustomList( Expression<Func<BankStatementStagingHit, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementStagingHit, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit>>();
		    try
		    {
			    response.Result = GetBankStatementStagingHitCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<BankStatementStagingHit> GetBankStatementStagingHitCustomListRaw( Expression<Func<BankStatementStagingHit, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementStagingHit, dynamic> orderExpression = null)
		{
            return daoFactory.BankStatementStagingHitDao.GetBankStatementStagingHitCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveBankStatementStagingHit(BankStatementStagingHit bankStatementStagingHit)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveBankStatementStagingHitRaw(bankStatementStagingHit);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveBankStatementStagingHitRaw(BankStatementStagingHit bankStatementStagingHit)
        {
            daoFactory.BankStatementStagingHitDao.SaveBankStatementStagingHit(bankStatementStagingHit);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyBankStatementStagingHit(BankStatementStagingHit bankStatementStagingHit)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyBankStatementStagingHitRaw(bankStatementStagingHit);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyBankStatementStagingHitRaw(BankStatementStagingHit bankStatementStagingHit)
        {
            daoFactory.BankStatementStagingHitDao.SaveOnlyBankStatementStagingHit(bankStatementStagingHit);
            return true;
        }

        public BusinessResponse<bool> DeleteBankStatementStagingHit(BankStatementStagingHit bankStatementStagingHit)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteBankStatementStagingHitRaw(bankStatementStagingHit);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteBankStatementStagingHitRaw(BankStatementStagingHit bankStatementStagingHit)
        {
            daoFactory.BankStatementStagingHitDao.DeleteBankStatementStagingHit(bankStatementStagingHit);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyBankStatementStagingHit(BankStatementStagingHit bankStatementStagingHit)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyBankStatementStagingHitRaw(bankStatementStagingHit);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyBankStatementStagingHitRaw(BankStatementStagingHit bankStatementStagingHit)
        {
            daoFactory.BankStatementStagingHitDao.DeletePermanentlyBankStatementStagingHit(bankStatementStagingHit);
            return true;
        }
	}
	public partial class BankStatementStagingHit_TransactionPresetService: BaseService
	{
	    public BusinessResponse<List<BankStatementStagingHit_TransactionPreset>> GetAllBankStatementStagingHit_TransactionPreset(bool shouldRemap=false)
        {
            BusinessResponse<List<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<List<BankStatementStagingHit_TransactionPreset>>();
		    try
		    {
			    response.Result = GetAllBankStatementStagingHit_TransactionPresetRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetRaw(bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingHit_TransactionPresetDao.GetAllBankStatementStagingHit_TransactionPreset(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> GetAllBankStatementStagingHit_TransactionPresetByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>>();
		    try
		    {
			    response.Result = GetAllBankStatementStagingHit_TransactionPresetByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
        {
            return daoFactory.BankStatementStagingHit_TransactionPresetDao.GetAllBankStatementStagingHit_TransactionPresetByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> GetAllBankStatementStagingHit_TransactionPresetWithBankStatementStagingHitDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingHit_TransactionPresetByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingHit"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> GetAllBankStatementStagingHit_TransactionPresetWithTransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingHit_TransactionPresetByPage(sortingPagingInfo, expression,new List<string>(){"TransactionPreset"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> GetAllBankStatementStagingHit_TransactionPresetWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementStagingHit_TransactionPresetWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingHit_TransactionPresetDao.GetAllBankStatementStagingHit_TransactionPresetWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<BankStatementStagingHit_TransactionPreset>> GetBankStatementStagingHit_TransactionPresetListByIdList(List<long> bankStatementStagingHit_TransactionPresetIds)
        {
            BusinessResponse<List<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<List<BankStatementStagingHit_TransactionPreset>>();
            try
            {
                response.Result = GetBankStatementStagingHit_TransactionPresetListByIdListRaw(bankStatementStagingHit_TransactionPresetIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<BankStatementStagingHit_TransactionPreset> GetBankStatementStagingHit_TransactionPresetListByIdListRaw(List<long> bankStatementStagingHit_TransactionPresetIds)
        {
            return daoFactory.BankStatementStagingHit_TransactionPresetDao.GetBankStatementStagingHit_TransactionPresetListByIdList(bankStatementStagingHit_TransactionPresetIds);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> GetAllBankStatementStagingHit_TransactionPresetWithBankStatementStagingHitDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementStagingHit_TransactionPresetWithBankStatementStagingHitDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetWithBankStatementStagingHitDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingHit_TransactionPresetWitDetailsRaw(new List<string>() { "BankStatementStagingHit" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHit(long idBankStatementStagingHit)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHitRaw(idBankStatementStagingHit);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHitRaw(long idBankStatementStagingHit)
        {
            return daoFactory.BankStatementStagingHit_TransactionPresetDao.GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHit(idBankStatementStagingHit);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHitByPage(long idBankStatementStagingHit, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHitByPageRaw(idBankStatementStagingHit, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHitByPageRaw(long idBankStatementStagingHit,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingHit_TransactionPresetDao.GetAllBankStatementStagingHit_TransactionPresetListByBankStatementStagingHitByPage(idBankStatementStagingHit, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> GetAllBankStatementStagingHit_TransactionPresetWithTransactionPresetDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementStagingHit_TransactionPresetWithTransactionPresetDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetWithTransactionPresetDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingHit_TransactionPresetWitDetailsRaw(new List<string>() { "TransactionPreset" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> GetAllBankStatementStagingHit_TransactionPresetListByTransactionPreset(long idTransactionPreset)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementStagingHit_TransactionPresetListByTransactionPresetRaw(idTransactionPreset);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetListByTransactionPresetRaw(long idTransactionPreset)
        {
            return daoFactory.BankStatementStagingHit_TransactionPresetDao.GetAllBankStatementStagingHit_TransactionPresetListByTransactionPreset(idTransactionPreset);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> GetAllBankStatementStagingHit_TransactionPresetListByTransactionPresetByPage(long idTransactionPreset, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>>();
            try
            {
                response.Result = GetAllBankStatementStagingHit_TransactionPresetListByTransactionPresetByPageRaw(idTransactionPreset, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetAllBankStatementStagingHit_TransactionPresetListByTransactionPresetByPageRaw(long idTransactionPreset,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.BankStatementStagingHit_TransactionPresetDao.GetAllBankStatementStagingHit_TransactionPresetListByTransactionPresetByPage(idTransactionPreset, sortingPagingInfo);
        }

		
		



		public BusinessResponse<BankStatementStagingHit_TransactionPreset> GetBankStatementStagingHit_TransactionPresetWithBankStatementStagingHitDetails(long idBankStatementStagingHit_TransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingHit_TransactionPreset> response = new BusinessResponse<BankStatementStagingHit_TransactionPreset>();
            try
            {
                response.Result = GetBankStatementStagingHit_TransactionPresetWithBankStatementStagingHitDetailsRaw(idBankStatementStagingHit_TransactionPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetWithBankStatementStagingHitDetailsRaw(long idBankStatementStagingHit_TransactionPreset,bool shouldRemap=false)
        {
            return GetBankStatementStagingHit_TransactionPresetWitDetailsRaw(idBankStatementStagingHit_TransactionPreset,new List<string>() { "BankStatementStagingHit"},shouldRemap);
        }

		



		public BusinessResponse<BankStatementStagingHit_TransactionPreset> GetBankStatementStagingHit_TransactionPresetWithTransactionPresetDetails(long idBankStatementStagingHit_TransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingHit_TransactionPreset> response = new BusinessResponse<BankStatementStagingHit_TransactionPreset>();
            try
            {
                response.Result = GetBankStatementStagingHit_TransactionPresetWithTransactionPresetDetailsRaw(idBankStatementStagingHit_TransactionPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetWithTransactionPresetDetailsRaw(long idBankStatementStagingHit_TransactionPreset,bool shouldRemap=false)
        {
            return GetBankStatementStagingHit_TransactionPresetWitDetailsRaw(idBankStatementStagingHit_TransactionPreset,new List<string>() { "TransactionPreset"},shouldRemap);
        }

		
        public BusinessResponse<BankStatementStagingHit_TransactionPreset> GetBankStatementStagingHit_TransactionPreset(long idBankStatementStagingHit_TransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingHit_TransactionPreset> response = new BusinessResponse<BankStatementStagingHit_TransactionPreset>();
		    try
		    {
			    response.Result = GetBankStatementStagingHit_TransactionPresetRaw(idBankStatementStagingHit_TransactionPreset,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetRaw(long idBankStatementStagingHit_TransactionPreset,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingHit_TransactionPresetDao.GetBankStatementStagingHit_TransactionPreset(idBankStatementStagingHit_TransactionPreset,shouldRemap);
        }

        
        public BusinessResponse<BankStatementStagingHit_TransactionPreset> GetBankStatementStagingHit_TransactionPresetWitDetails(long idBankStatementStagingHit_TransactionPreset,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingHit_TransactionPreset> response = new BusinessResponse<BankStatementStagingHit_TransactionPreset>();
		    try
		    {
			    response.Result = GetBankStatementStagingHit_TransactionPresetWitDetailsRaw(idBankStatementStagingHit_TransactionPreset,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetWitDetailsRaw(long idBankStatementStagingHit_TransactionPreset,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingHit_TransactionPresetDao.GetBankStatementStagingHit_TransactionPresetWitDetails(idBankStatementStagingHit_TransactionPreset,shouldRemap);
        }


		 public BusinessResponse<BankStatementStagingHit_TransactionPreset> GetBankStatementStagingHit_TransactionPresetCustom( Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<BankStatementStagingHit_TransactionPreset> response = new BusinessResponse<BankStatementStagingHit_TransactionPreset>();
		    try
		    {
			    response.Result = GetBankStatementStagingHit_TransactionPresetCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BankStatementStagingHit_TransactionPreset GetBankStatementStagingHit_TransactionPresetCustomRaw( Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.BankStatementStagingHit_TransactionPresetDao.GetBankStatementStagingHit_TransactionPresetCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> GetBankStatementStagingHit_TransactionPresetCustomList( Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingHit_TransactionPreset>>();
		    try
		    {
			    response.Result = GetBankStatementStagingHit_TransactionPresetCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<BankStatementStagingHit_TransactionPreset> GetBankStatementStagingHit_TransactionPresetCustomListRaw( Expression<Func<BankStatementStagingHit_TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementStagingHit_TransactionPreset, dynamic> orderExpression = null)
		{
            return daoFactory.BankStatementStagingHit_TransactionPresetDao.GetBankStatementStagingHit_TransactionPresetCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveBankStatementStagingHit_TransactionPreset(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveBankStatementStagingHit_TransactionPresetRaw(bankStatementStagingHit_TransactionPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveBankStatementStagingHit_TransactionPresetRaw(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset)
        {
            daoFactory.BankStatementStagingHit_TransactionPresetDao.SaveBankStatementStagingHit_TransactionPreset(bankStatementStagingHit_TransactionPreset);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyBankStatementStagingHit_TransactionPreset(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyBankStatementStagingHit_TransactionPresetRaw(bankStatementStagingHit_TransactionPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyBankStatementStagingHit_TransactionPresetRaw(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset)
        {
            daoFactory.BankStatementStagingHit_TransactionPresetDao.SaveOnlyBankStatementStagingHit_TransactionPreset(bankStatementStagingHit_TransactionPreset);
            return true;
        }

        public BusinessResponse<bool> DeleteBankStatementStagingHit_TransactionPreset(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteBankStatementStagingHit_TransactionPresetRaw(bankStatementStagingHit_TransactionPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteBankStatementStagingHit_TransactionPresetRaw(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset)
        {
            daoFactory.BankStatementStagingHit_TransactionPresetDao.DeleteBankStatementStagingHit_TransactionPreset(bankStatementStagingHit_TransactionPreset);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyBankStatementStagingHit_TransactionPreset(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyBankStatementStagingHit_TransactionPresetRaw(bankStatementStagingHit_TransactionPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyBankStatementStagingHit_TransactionPresetRaw(BankStatementStagingHit_TransactionPreset bankStatementStagingHit_TransactionPreset)
        {
            daoFactory.BankStatementStagingHit_TransactionPresetDao.DeletePermanentlyBankStatementStagingHit_TransactionPreset(bankStatementStagingHit_TransactionPreset);
            return true;
        }
	}
	public partial class BankStatementStagingStateService: BaseService
	{
	    public BusinessResponse<List<BankStatementStagingState>> GetAllBankStatementStagingStates(bool shouldRemap=false)
        {
            BusinessResponse<List<BankStatementStagingState>> response = new BusinessResponse<List<BankStatementStagingState>>();
		    try
		    {
			    response.Result = GetAllBankStatementStagingStatesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<BankStatementStagingState> GetAllBankStatementStagingStatesRaw(bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingStateDao.GetAllBankStatementStagingStates(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<BankStatementStagingState>> GetAllBankStatementStagingStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementStagingState, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingState>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingState>>();
		    try
		    {
			    response.Result = GetAllBankStatementStagingStatesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<BankStatementStagingState, dynamic> orderExpression = null)
        {
            return daoFactory.BankStatementStagingStateDao.GetAllBankStatementStagingStatesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<BankStatementStagingState>> GetAllBankStatementStagingStatesWithBankStatementStagingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingState, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingState, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingStatesByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<BankStatementStagingState>> GetAllBankStatementStagingStatesWithBankStatementStagingDetailBatchesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<BankStatementStagingState, bool>> expression = null,bool shouldRemap=false, Func<BankStatementStagingState, dynamic> orderExpression = null)
			{
				return GetAllBankStatementStagingStatesByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingDetailBatches"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<BankStatementStagingState>> GetAllBankStatementStagingStateWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingState>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingState>>();
            try
            {
                response.Result = GetAllBankStatementStagingStateWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStateWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingStateDao.GetAllBankStatementStagingStateWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<BankStatementStagingState>> GetBankStatementStagingStateListByIdList(List<long> bankStatementStagingStateIds)
        {
            BusinessResponse<List<BankStatementStagingState>> response = new BusinessResponse<List<BankStatementStagingState>>();
            try
            {
                response.Result = GetBankStatementStagingStateListByIdListRaw(bankStatementStagingStateIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<BankStatementStagingState> GetBankStatementStagingStateListByIdListRaw(List<long> bankStatementStagingStateIds)
        {
            return daoFactory.BankStatementStagingStateDao.GetBankStatementStagingStateListByIdList(bankStatementStagingStateIds);
        }

					
		public BusinessResponse<BaseListReturnType<BankStatementStagingState>> GetAllBankStatementStagingStatesWithBankStatementStagingsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingState>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingState>>();
            try
            {
                response.Result = GetAllBankStatementStagingStatesWithBankStatementStagingsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesWithBankStatementStagingsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingStateWitDetailsRaw(new List<string>() { "BankStatementStagings" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<BankStatementStagingState>> GetAllBankStatementStagingStatesWithBankStatementStagingDetailBatchesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<BankStatementStagingState>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingState>>();
            try
            {
                response.Result = GetAllBankStatementStagingStatesWithBankStatementStagingDetailBatchesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<BankStatementStagingState> GetAllBankStatementStagingStatesWithBankStatementStagingDetailBatchesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllBankStatementStagingStateWitDetailsRaw(new List<string>() { "BankStatementStagingDetailBatches" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<BankStatementStaging>>  UpdateBankStatementStagingsForBankStatementStagingStateWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idBankStatementStagingState)
            {
                BusinessResponse<List<BankStatementStaging>> response = new BusinessResponse<List<BankStatementStaging>>();
                try
                {
                    response.Result = UpdateBankStatementStagingsForBankStatementStagingStateWithoutSavingNewItemRaw(newBankStatementStagings, idBankStatementStagingState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStaging> UpdateBankStatementStagingsForBankStatementStagingStateWithoutSavingNewItemRaw(List<BankStatementStaging> newBankStatementStagings,long idBankStatementStagingState)
            {
                return daoFactory.BankStatementStagingStateDao.UpdateBankStatementStagingsForBankStatementStagingStateWithoutSavingNewItem(newBankStatementStagings,idBankStatementStagingState); 
            }



		    public BusinessResponse<List<BankStatementStaging>>  UpdateBankStatementStagingsForBankStatementStagingState(List<BankStatementStaging> newBankStatementStagings,long idBankStatementStagingState)
            {
                BusinessResponse<List<BankStatementStaging>> response = new BusinessResponse<List<BankStatementStaging>>();
                try
                {
                    response.Result = UpdateBankStatementStagingsForBankStatementStagingStateRaw(newBankStatementStagings, idBankStatementStagingState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStaging> UpdateBankStatementStagingsForBankStatementStagingStateRaw(List<BankStatementStaging> newBankStatementStagings,long idBankStatementStagingState)
            {
                return daoFactory.BankStatementStagingStateDao.UpdateBankStatementStagingsForBankStatementStagingState(newBankStatementStagings,idBankStatementStagingState); 
            }





		public BusinessResponse<BankStatementStagingState> GetBankStatementStagingStateWithBankStatementStagingsDetails(long idBankStatementStagingState,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingState> response = new BusinessResponse<BankStatementStagingState>();
            try
            {
                response.Result = GetBankStatementStagingStateWithBankStatementStagingsDetailsRaw(idBankStatementStagingState,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingState GetBankStatementStagingStateWithBankStatementStagingsDetailsRaw(long idBankStatementStagingState,bool shouldRemap=false)
        {
            return GetBankStatementStagingStateWitDetailsRaw(idBankStatementStagingState,new List<string>() { "BankStatementStagings"},shouldRemap);
        }

		
			public BusinessResponse<List<BankStatementStagingDetailBatch>>  UpdateBankStatementStagingDetailBatchesForBankStatementStagingStateWithoutSavingNewItem(List<BankStatementStagingDetailBatch> newBankStatementStagingDetailBatches,long idBankStatementStagingState)
            {
                BusinessResponse<List<BankStatementStagingDetailBatch>> response = new BusinessResponse<List<BankStatementStagingDetailBatch>>();
                try
                {
                    response.Result = UpdateBankStatementStagingDetailBatchesForBankStatementStagingStateWithoutSavingNewItemRaw(newBankStatementStagingDetailBatches, idBankStatementStagingState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingDetailBatch> UpdateBankStatementStagingDetailBatchesForBankStatementStagingStateWithoutSavingNewItemRaw(List<BankStatementStagingDetailBatch> newBankStatementStagingDetailBatches,long idBankStatementStagingState)
            {
                return daoFactory.BankStatementStagingStateDao.UpdateBankStatementStagingDetailBatchesForBankStatementStagingStateWithoutSavingNewItem(newBankStatementStagingDetailBatches,idBankStatementStagingState); 
            }



		    public BusinessResponse<List<BankStatementStagingDetailBatch>>  UpdateBankStatementStagingDetailBatchesForBankStatementStagingState(List<BankStatementStagingDetailBatch> newBankStatementStagingDetailBatches,long idBankStatementStagingState)
            {
                BusinessResponse<List<BankStatementStagingDetailBatch>> response = new BusinessResponse<List<BankStatementStagingDetailBatch>>();
                try
                {
                    response.Result = UpdateBankStatementStagingDetailBatchesForBankStatementStagingStateRaw(newBankStatementStagingDetailBatches, idBankStatementStagingState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingDetailBatch> UpdateBankStatementStagingDetailBatchesForBankStatementStagingStateRaw(List<BankStatementStagingDetailBatch> newBankStatementStagingDetailBatches,long idBankStatementStagingState)
            {
                return daoFactory.BankStatementStagingStateDao.UpdateBankStatementStagingDetailBatchesForBankStatementStagingState(newBankStatementStagingDetailBatches,idBankStatementStagingState); 
            }





		public BusinessResponse<BankStatementStagingState> GetBankStatementStagingStateWithBankStatementStagingDetailBatchesDetails(long idBankStatementStagingState,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingState> response = new BusinessResponse<BankStatementStagingState>();
            try
            {
                response.Result = GetBankStatementStagingStateWithBankStatementStagingDetailBatchesDetailsRaw(idBankStatementStagingState,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BankStatementStagingState GetBankStatementStagingStateWithBankStatementStagingDetailBatchesDetailsRaw(long idBankStatementStagingState,bool shouldRemap=false)
        {
            return GetBankStatementStagingStateWitDetailsRaw(idBankStatementStagingState,new List<string>() { "BankStatementStagingDetailBatches"},shouldRemap);
        }

		
        public BusinessResponse<BankStatementStagingState> GetBankStatementStagingState(long idBankStatementStagingState,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingState> response = new BusinessResponse<BankStatementStagingState>();
		    try
		    {
			    response.Result = GetBankStatementStagingStatesRaw(idBankStatementStagingState,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementStagingState GetBankStatementStagingStatesRaw(long idBankStatementStagingState,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingStateDao.GetBankStatementStagingState(idBankStatementStagingState,shouldRemap);
        }

        
        public BusinessResponse<BankStatementStagingState> GetBankStatementStagingStateWitDetails(long idBankStatementStagingState,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BankStatementStagingState> response = new BusinessResponse<BankStatementStagingState>();
		    try
		    {
			    response.Result = GetBankStatementStagingStateWitDetailsRaw(idBankStatementStagingState,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal BankStatementStagingState GetBankStatementStagingStateWitDetailsRaw(long idBankStatementStagingState,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.BankStatementStagingStateDao.GetBankStatementStagingStateWitDetails(idBankStatementStagingState,shouldRemap);
        }


		 public BusinessResponse<BankStatementStagingState> GetBankStatementStagingStateCustom( Expression<Func<BankStatementStagingState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<BankStatementStagingState> response = new BusinessResponse<BankStatementStagingState>();
		    try
		    {
			    response.Result = GetBankStatementStagingStateCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BankStatementStagingState GetBankStatementStagingStateCustomRaw( Expression<Func<BankStatementStagingState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.BankStatementStagingStateDao.GetBankStatementStagingStateCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<BankStatementStagingState>> GetBankStatementStagingStateCustomList( Expression<Func<BankStatementStagingState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementStagingState, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<BankStatementStagingState>> response = new BusinessResponse<BaseListReturnType<BankStatementStagingState>>();
		    try
		    {
			    response.Result = GetBankStatementStagingStateCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<BankStatementStagingState> GetBankStatementStagingStateCustomListRaw( Expression<Func<BankStatementStagingState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<BankStatementStagingState, dynamic> orderExpression = null)
		{
            return daoFactory.BankStatementStagingStateDao.GetBankStatementStagingStateCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveBankStatementStagingState(BankStatementStagingState bankStatementStagingState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveBankStatementStagingStateRaw(bankStatementStagingState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveBankStatementStagingStateRaw(BankStatementStagingState bankStatementStagingState)
        {
            daoFactory.BankStatementStagingStateDao.SaveBankStatementStagingState(bankStatementStagingState);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyBankStatementStagingState(BankStatementStagingState bankStatementStagingState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyBankStatementStagingStateRaw(bankStatementStagingState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyBankStatementStagingStateRaw(BankStatementStagingState bankStatementStagingState)
        {
            daoFactory.BankStatementStagingStateDao.SaveOnlyBankStatementStagingState(bankStatementStagingState);
            return true;
        }

        public BusinessResponse<bool> DeleteBankStatementStagingState(BankStatementStagingState bankStatementStagingState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteBankStatementStagingStateRaw(bankStatementStagingState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteBankStatementStagingStateRaw(BankStatementStagingState bankStatementStagingState)
        {
            daoFactory.BankStatementStagingStateDao.DeleteBankStatementStagingState(bankStatementStagingState);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyBankStatementStagingState(BankStatementStagingState bankStatementStagingState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyBankStatementStagingStateRaw(bankStatementStagingState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyBankStatementStagingStateRaw(BankStatementStagingState bankStatementStagingState)
        {
            daoFactory.BankStatementStagingStateDao.DeletePermanentlyBankStatementStagingState(bankStatementStagingState);
            return true;
        }
	}
	public partial class CityService: BaseService
	{
	    public BusinessResponse<List<City>> GetAllCities(bool shouldRemap=false)
        {
            BusinessResponse<List<City>> response = new BusinessResponse<List<City>>();
		    try
		    {
			    response.Result = GetAllCitiesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<City> GetAllCitiesRaw(bool shouldRemap=false)
        {
            return daoFactory.CityDao.GetAllCities(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<City>> GetAllCitiesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<City, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<City, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<City>> response = new BusinessResponse<BaseListReturnType<City>>();
		    try
		    {
			    response.Result = GetAllCitiesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<City> GetAllCitiesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<City, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<City, dynamic> orderExpression = null)
        {
            return daoFactory.CityDao.GetAllCitiesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<City>> GetAllCitiesWithAddressesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<City, bool>> expression = null,bool shouldRemap=false, Func<City, dynamic> orderExpression = null)
			{
				return GetAllCitiesByPage(sortingPagingInfo, expression,new List<string>(){"Addresses"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<City>> GetAllCitiesWithCountryDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<City, bool>> expression = null,bool shouldRemap=false, Func<City, dynamic> orderExpression = null)
			{
				return GetAllCitiesByPage(sortingPagingInfo, expression,new List<string>(){"Country"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<City>> GetAllCityWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<City>> response = new BusinessResponse<BaseListReturnType<City>>();
            try
            {
                response.Result = GetAllCityWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<City> GetAllCityWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.CityDao.GetAllCityWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<City>> GetCityListByIdList(List<long> cityIds)
        {
            BusinessResponse<List<City>> response = new BusinessResponse<List<City>>();
            try
            {
                response.Result = GetCityListByIdListRaw(cityIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<City> GetCityListByIdListRaw(List<long> cityIds)
        {
            return daoFactory.CityDao.GetCityListByIdList(cityIds);
        }

					
		public BusinessResponse<BaseListReturnType<City>> GetAllCitiesWithAddressesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<City>> response = new BusinessResponse<BaseListReturnType<City>>();
            try
            {
                response.Result = GetAllCitiesWithAddressesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<City> GetAllCitiesWithAddressesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCityWitDetailsRaw(new List<string>() { "Addresses" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<City>> GetAllCitiesWithCountryDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<City>> response = new BusinessResponse<BaseListReturnType<City>>();
            try
            {
                response.Result = GetAllCitiesWithCountryDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<City> GetAllCitiesWithCountryDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCityWitDetailsRaw(new List<string>() { "Country" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<City>> GetAllCityListByCountry(long idCountry)
        {
            BusinessResponse<BaseListReturnType<City>> response = new BusinessResponse<BaseListReturnType<City>>();
            try
            {
                response.Result = GetAllCityListByCountryRaw(idCountry);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<City> GetAllCityListByCountryRaw(long idCountry)
        {
            return daoFactory.CityDao.GetAllCityListByCountry(idCountry);
        }

        public BusinessResponse<BaseListReturnType<City>> GetAllCityListByCountryByPage(long idCountry, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<City>> response = new BusinessResponse<BaseListReturnType<City>>();
            try
            {
                response.Result = GetAllCityListByCountryByPageRaw(idCountry, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<City> GetAllCityListByCountryByPageRaw(long idCountry,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.CityDao.GetAllCityListByCountryByPage(idCountry, sortingPagingInfo);
        }

		
		
			public BusinessResponse<List<Address>>  UpdateAddressesForCityWithoutSavingNewItem(List<Address> newAddresses,long idCity)
            {
                BusinessResponse<List<Address>> response = new BusinessResponse<List<Address>>();
                try
                {
                    response.Result = UpdateAddressesForCityWithoutSavingNewItemRaw(newAddresses, idCity);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Address> UpdateAddressesForCityWithoutSavingNewItemRaw(List<Address> newAddresses,long idCity)
            {
                return daoFactory.CityDao.UpdateAddressesForCityWithoutSavingNewItem(newAddresses,idCity); 
            }



		    public BusinessResponse<List<Address>>  UpdateAddressesForCity(List<Address> newAddresses,long idCity)
            {
                BusinessResponse<List<Address>> response = new BusinessResponse<List<Address>>();
                try
                {
                    response.Result = UpdateAddressesForCityRaw(newAddresses, idCity);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Address> UpdateAddressesForCityRaw(List<Address> newAddresses,long idCity)
            {
                return daoFactory.CityDao.UpdateAddressesForCity(newAddresses,idCity); 
            }





		public BusinessResponse<City> GetCityWithAddressesDetails(long idCity,bool shouldRemap=false)
        {
            BusinessResponse<City> response = new BusinessResponse<City>();
            try
            {
                response.Result = GetCityWithAddressesDetailsRaw(idCity,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal City GetCityWithAddressesDetailsRaw(long idCity,bool shouldRemap=false)
        {
            return GetCityWitDetailsRaw(idCity,new List<string>() { "Addresses"},shouldRemap);
        }

		



		public BusinessResponse<City> GetCityWithCountryDetails(long idCity,bool shouldRemap=false)
        {
            BusinessResponse<City> response = new BusinessResponse<City>();
            try
            {
                response.Result = GetCityWithCountryDetailsRaw(idCity,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal City GetCityWithCountryDetailsRaw(long idCity,bool shouldRemap=false)
        {
            return GetCityWitDetailsRaw(idCity,new List<string>() { "Country"},shouldRemap);
        }

		
        public BusinessResponse<City> GetCity(long idCity,bool shouldRemap=false)
        {
            BusinessResponse<City> response = new BusinessResponse<City>();
		    try
		    {
			    response.Result = GetCitiesRaw(idCity,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal City GetCitiesRaw(long idCity,bool shouldRemap=false)
        {
            return daoFactory.CityDao.GetCity(idCity,shouldRemap);
        }

        
        public BusinessResponse<City> GetCityWitDetails(long idCity,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<City> response = new BusinessResponse<City>();
		    try
		    {
			    response.Result = GetCityWitDetailsRaw(idCity,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal City GetCityWitDetailsRaw(long idCity,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.CityDao.GetCityWitDetails(idCity,shouldRemap);
        }


		 public BusinessResponse<City> GetCityCustom( Expression<Func<City, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<City> response = new BusinessResponse<City>();
		    try
		    {
			    response.Result = GetCityCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal City GetCityCustomRaw( Expression<Func<City, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.CityDao.GetCityCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<City>> GetCityCustomList( Expression<Func<City, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<City, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<City>> response = new BusinessResponse<BaseListReturnType<City>>();
		    try
		    {
			    response.Result = GetCityCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<City> GetCityCustomListRaw( Expression<Func<City, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<City, dynamic> orderExpression = null)
		{
            return daoFactory.CityDao.GetCityCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveCity(City city)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveCityRaw(city);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveCityRaw(City city)
        {
            daoFactory.CityDao.SaveCity(city);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyCity(City city)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyCityRaw(city);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyCityRaw(City city)
        {
            daoFactory.CityDao.SaveOnlyCity(city);
            return true;
        }

        public BusinessResponse<bool> DeleteCity(City city)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteCityRaw(city);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteCityRaw(City city)
        {
            daoFactory.CityDao.DeleteCity(city);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyCity(City city)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyCityRaw(city);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyCityRaw(City city)
        {
            daoFactory.CityDao.DeletePermanentlyCity(city);
            return true;
        }
	}
	public partial class CompanyService: BaseService
	{
	    public BusinessResponse<List<Company>> GetAllCompanies(bool shouldRemap=false)
        {
            BusinessResponse<List<Company>> response = new BusinessResponse<List<Company>>();
		    try
		    {
			    response.Result = GetAllCompaniesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Company> GetAllCompaniesRaw(bool shouldRemap=false)
        {
            return daoFactory.CompanyDao.GetAllCompanies(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Company, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
		    try
		    {
			    response.Result = GetAllCompaniesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Company> GetAllCompaniesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Company, dynamic> orderExpression = null)
        {
            return daoFactory.CompanyDao.GetAllCompaniesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesWithCompany_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap=false, Func<Company, dynamic> orderExpression = null)
			{
				return GetAllCompaniesByPage(sortingPagingInfo, expression,new List<string>(){"Company_ContactType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesWithCustomersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap=false, Func<Company, dynamic> orderExpression = null)
			{
				return GetAllCompaniesByPage(sortingPagingInfo, expression,new List<string>(){"Customers"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesWithConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap=false, Func<Company, dynamic> orderExpression = null)
			{
				return GetAllCompaniesByPage(sortingPagingInfo, expression,new List<string>(){"Concept"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesWithDocumentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap=false, Func<Company, dynamic> orderExpression = null)
			{
				return GetAllCompaniesByPage(sortingPagingInfo, expression,new List<string>(){"Document"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesWithCompanyLocationsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap=false, Func<Company, dynamic> orderExpression = null)
			{
				return GetAllCompaniesByPage(sortingPagingInfo, expression,new List<string>(){"CompanyLocations"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesWithConceptsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company, bool>> expression = null,bool shouldRemap=false, Func<Company, dynamic> orderExpression = null)
			{
				return GetAllCompaniesByPage(sortingPagingInfo, expression,new List<string>(){"Concepts"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Company>> GetAllCompanyWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
            try
            {
                response.Result = GetAllCompanyWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company> GetAllCompanyWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.CompanyDao.GetAllCompanyWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Company>> GetCompanyListByIdList(List<long> companyIds)
        {
            BusinessResponse<List<Company>> response = new BusinessResponse<List<Company>>();
            try
            {
                response.Result = GetCompanyListByIdListRaw(companyIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Company> GetCompanyListByIdListRaw(List<long> companyIds)
        {
            return daoFactory.CompanyDao.GetCompanyListByIdList(companyIds);
        }

					
		public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesWithCompany_ContactTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
            try
            {
                response.Result = GetAllCompaniesWithCompany_ContactTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company> GetAllCompaniesWithCompany_ContactTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCompanyWitDetailsRaw(new List<string>() { "Company_ContactType" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesWithCustomersDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
            try
            {
                response.Result = GetAllCompaniesWithCustomersDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company> GetAllCompaniesWithCustomersDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCompanyWitDetailsRaw(new List<string>() { "Customers" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesWithConceptDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
            try
            {
                response.Result = GetAllCompaniesWithConceptDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company> GetAllCompaniesWithConceptDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCompanyWitDetailsRaw(new List<string>() { "Concept" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Company>> GetAllCompanyListByConcept(long idConcept)
        {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
            try
            {
                response.Result = GetAllCompanyListByConceptRaw(idConcept);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company> GetAllCompanyListByConceptRaw(long idConcept)
        {
            return daoFactory.CompanyDao.GetAllCompanyListByConcept(idConcept);
        }

        public BusinessResponse<BaseListReturnType<Company>> GetAllCompanyListByConceptByPage(long idConcept, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
            try
            {
                response.Result = GetAllCompanyListByConceptByPageRaw(idConcept, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company> GetAllCompanyListByConceptByPageRaw(long idConcept,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.CompanyDao.GetAllCompanyListByConceptByPage(idConcept, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesWithDocumentDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
            try
            {
                response.Result = GetAllCompaniesWithDocumentDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company> GetAllCompaniesWithDocumentDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCompanyWitDetailsRaw(new List<string>() { "Document" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Company>> GetAllCompanyListByDocument(long idDocument)
        {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
            try
            {
                response.Result = GetAllCompanyListByDocumentRaw(idDocument);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company> GetAllCompanyListByDocumentRaw(long idDocument)
        {
            return daoFactory.CompanyDao.GetAllCompanyListByDocument(idDocument);
        }

        public BusinessResponse<BaseListReturnType<Company>> GetAllCompanyListByDocumentByPage(long idDocument, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
            try
            {
                response.Result = GetAllCompanyListByDocumentByPageRaw(idDocument, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company> GetAllCompanyListByDocumentByPageRaw(long idDocument,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.CompanyDao.GetAllCompanyListByDocumentByPage(idDocument, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesWithCompanyLocationsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
            try
            {
                response.Result = GetAllCompaniesWithCompanyLocationsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company> GetAllCompaniesWithCompanyLocationsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCompanyWitDetailsRaw(new List<string>() { "CompanyLocations" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Company>> GetAllCompaniesWithConceptsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
            try
            {
                response.Result = GetAllCompaniesWithConceptsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company> GetAllCompaniesWithConceptsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCompanyWitDetailsRaw(new List<string>() { "Concepts" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Company_ContactType>>  UpdateCompany_ContactTypeForCompanyWithoutSavingNewItem(List<Company_ContactType> newCompany_ContactType,long idCompany)
            {
                BusinessResponse<List<Company_ContactType>> response = new BusinessResponse<List<Company_ContactType>>();
                try
                {
                    response.Result = UpdateCompany_ContactTypeForCompanyWithoutSavingNewItemRaw(newCompany_ContactType, idCompany);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Company_ContactType> UpdateCompany_ContactTypeForCompanyWithoutSavingNewItemRaw(List<Company_ContactType> newCompany_ContactType,long idCompany)
            {
                return daoFactory.CompanyDao.UpdateCompany_ContactTypeForCompanyWithoutSavingNewItem(newCompany_ContactType,idCompany); 
            }



		    public BusinessResponse<List<Company_ContactType>>  UpdateCompany_ContactTypeForCompany(List<Company_ContactType> newCompany_ContactType,long idCompany)
            {
                BusinessResponse<List<Company_ContactType>> response = new BusinessResponse<List<Company_ContactType>>();
                try
                {
                    response.Result = UpdateCompany_ContactTypeForCompanyRaw(newCompany_ContactType, idCompany);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Company_ContactType> UpdateCompany_ContactTypeForCompanyRaw(List<Company_ContactType> newCompany_ContactType,long idCompany)
            {
                return daoFactory.CompanyDao.UpdateCompany_ContactTypeForCompany(newCompany_ContactType,idCompany); 
            }





		public BusinessResponse<Company> GetCompanyWithCompany_ContactTypeDetails(long idCompany,bool shouldRemap=false)
        {
            BusinessResponse<Company> response = new BusinessResponse<Company>();
            try
            {
                response.Result = GetCompanyWithCompany_ContactTypeDetailsRaw(idCompany,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Company GetCompanyWithCompany_ContactTypeDetailsRaw(long idCompany,bool shouldRemap=false)
        {
            return GetCompanyWitDetailsRaw(idCompany,new List<string>() { "Company_ContactType"},shouldRemap);
        }

		
			public BusinessResponse<List<Customer>>  UpdateCustomersForCompanyWithoutSavingNewItem(List<Customer> newCustomers,long idCompany)
            {
                BusinessResponse<List<Customer>> response = new BusinessResponse<List<Customer>>();
                try
                {
                    response.Result = UpdateCustomersForCompanyWithoutSavingNewItemRaw(newCustomers, idCompany);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Customer> UpdateCustomersForCompanyWithoutSavingNewItemRaw(List<Customer> newCustomers,long idCompany)
            {
                return daoFactory.CompanyDao.UpdateCustomersForCompanyWithoutSavingNewItem(newCustomers,idCompany); 
            }



		    public BusinessResponse<List<Customer>>  UpdateCustomersForCompany(List<Customer> newCustomers,long idCompany)
            {
                BusinessResponse<List<Customer>> response = new BusinessResponse<List<Customer>>();
                try
                {
                    response.Result = UpdateCustomersForCompanyRaw(newCustomers, idCompany);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Customer> UpdateCustomersForCompanyRaw(List<Customer> newCustomers,long idCompany)
            {
                return daoFactory.CompanyDao.UpdateCustomersForCompany(newCustomers,idCompany); 
            }





		public BusinessResponse<Company> GetCompanyWithCustomersDetails(long idCompany,bool shouldRemap=false)
        {
            BusinessResponse<Company> response = new BusinessResponse<Company>();
            try
            {
                response.Result = GetCompanyWithCustomersDetailsRaw(idCompany,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Company GetCompanyWithCustomersDetailsRaw(long idCompany,bool shouldRemap=false)
        {
            return GetCompanyWitDetailsRaw(idCompany,new List<string>() { "Customers"},shouldRemap);
        }

		



		public BusinessResponse<Company> GetCompanyWithConceptDetails(long idCompany,bool shouldRemap=false)
        {
            BusinessResponse<Company> response = new BusinessResponse<Company>();
            try
            {
                response.Result = GetCompanyWithConceptDetailsRaw(idCompany,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Company GetCompanyWithConceptDetailsRaw(long idCompany,bool shouldRemap=false)
        {
            return GetCompanyWitDetailsRaw(idCompany,new List<string>() { "Concept"},shouldRemap);
        }

		



		public BusinessResponse<Company> GetCompanyWithDocumentDetails(long idCompany,bool shouldRemap=false)
        {
            BusinessResponse<Company> response = new BusinessResponse<Company>();
            try
            {
                response.Result = GetCompanyWithDocumentDetailsRaw(idCompany,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Company GetCompanyWithDocumentDetailsRaw(long idCompany,bool shouldRemap=false)
        {
            return GetCompanyWitDetailsRaw(idCompany,new List<string>() { "Document"},shouldRemap);
        }

		
			public BusinessResponse<List<CompanyLocation>>  UpdateCompanyLocationsForCompanyWithoutSavingNewItem(List<CompanyLocation> newCompanyLocations,long idCompany)
            {
                BusinessResponse<List<CompanyLocation>> response = new BusinessResponse<List<CompanyLocation>>();
                try
                {
                    response.Result = UpdateCompanyLocationsForCompanyWithoutSavingNewItemRaw(newCompanyLocations, idCompany);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<CompanyLocation> UpdateCompanyLocationsForCompanyWithoutSavingNewItemRaw(List<CompanyLocation> newCompanyLocations,long idCompany)
            {
                return daoFactory.CompanyDao.UpdateCompanyLocationsForCompanyWithoutSavingNewItem(newCompanyLocations,idCompany); 
            }



		    public BusinessResponse<List<CompanyLocation>>  UpdateCompanyLocationsForCompany(List<CompanyLocation> newCompanyLocations,long idCompany)
            {
                BusinessResponse<List<CompanyLocation>> response = new BusinessResponse<List<CompanyLocation>>();
                try
                {
                    response.Result = UpdateCompanyLocationsForCompanyRaw(newCompanyLocations, idCompany);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<CompanyLocation> UpdateCompanyLocationsForCompanyRaw(List<CompanyLocation> newCompanyLocations,long idCompany)
            {
                return daoFactory.CompanyDao.UpdateCompanyLocationsForCompany(newCompanyLocations,idCompany); 
            }





		public BusinessResponse<Company> GetCompanyWithCompanyLocationsDetails(long idCompany,bool shouldRemap=false)
        {
            BusinessResponse<Company> response = new BusinessResponse<Company>();
            try
            {
                response.Result = GetCompanyWithCompanyLocationsDetailsRaw(idCompany,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Company GetCompanyWithCompanyLocationsDetailsRaw(long idCompany,bool shouldRemap=false)
        {
            return GetCompanyWitDetailsRaw(idCompany,new List<string>() { "CompanyLocations"},shouldRemap);
        }

		
			public BusinessResponse<List<Concept>>  UpdateConceptsForCompanyWithoutSavingNewItem(List<Concept> newConcepts,long idCompany)
            {
                BusinessResponse<List<Concept>> response = new BusinessResponse<List<Concept>>();
                try
                {
                    response.Result = UpdateConceptsForCompanyWithoutSavingNewItemRaw(newConcepts, idCompany);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Concept> UpdateConceptsForCompanyWithoutSavingNewItemRaw(List<Concept> newConcepts,long idCompany)
            {
                return daoFactory.CompanyDao.UpdateConceptsForCompanyWithoutSavingNewItem(newConcepts,idCompany); 
            }



		    public BusinessResponse<List<Concept>>  UpdateConceptsForCompany(List<Concept> newConcepts,long idCompany)
            {
                BusinessResponse<List<Concept>> response = new BusinessResponse<List<Concept>>();
                try
                {
                    response.Result = UpdateConceptsForCompanyRaw(newConcepts, idCompany);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Concept> UpdateConceptsForCompanyRaw(List<Concept> newConcepts,long idCompany)
            {
                return daoFactory.CompanyDao.UpdateConceptsForCompany(newConcepts,idCompany); 
            }





		public BusinessResponse<Company> GetCompanyWithConceptsDetails(long idCompany,bool shouldRemap=false)
        {
            BusinessResponse<Company> response = new BusinessResponse<Company>();
            try
            {
                response.Result = GetCompanyWithConceptsDetailsRaw(idCompany,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Company GetCompanyWithConceptsDetailsRaw(long idCompany,bool shouldRemap=false)
        {
            return GetCompanyWitDetailsRaw(idCompany,new List<string>() { "Concepts"},shouldRemap);
        }

		
        public BusinessResponse<Company> GetCompany(long idCompany,bool shouldRemap=false)
        {
            BusinessResponse<Company> response = new BusinessResponse<Company>();
		    try
		    {
			    response.Result = GetCompaniesRaw(idCompany,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Company GetCompaniesRaw(long idCompany,bool shouldRemap=false)
        {
            return daoFactory.CompanyDao.GetCompany(idCompany,shouldRemap);
        }

        
        public BusinessResponse<Company> GetCompanyWitDetails(long idCompany,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Company> response = new BusinessResponse<Company>();
		    try
		    {
			    response.Result = GetCompanyWitDetailsRaw(idCompany,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Company GetCompanyWitDetailsRaw(long idCompany,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.CompanyDao.GetCompanyWitDetails(idCompany,shouldRemap);
        }


		 public BusinessResponse<Company> GetCompanyCustom( Expression<Func<Company, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Company> response = new BusinessResponse<Company>();
		    try
		    {
			    response.Result = GetCompanyCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Company GetCompanyCustomRaw( Expression<Func<Company, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.CompanyDao.GetCompanyCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Company>> GetCompanyCustomList( Expression<Func<Company, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Company, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Company>> response = new BusinessResponse<BaseListReturnType<Company>>();
		    try
		    {
			    response.Result = GetCompanyCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Company> GetCompanyCustomListRaw( Expression<Func<Company, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Company, dynamic> orderExpression = null)
		{
            return daoFactory.CompanyDao.GetCompanyCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveCompany(Company company)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveCompanyRaw(company);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveCompanyRaw(Company company)
        {
            daoFactory.CompanyDao.SaveCompany(company);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyCompany(Company company)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyCompanyRaw(company);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyCompanyRaw(Company company)
        {
            daoFactory.CompanyDao.SaveOnlyCompany(company);
            return true;
        }

        public BusinessResponse<bool> DeleteCompany(Company company)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteCompanyRaw(company);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteCompanyRaw(Company company)
        {
            daoFactory.CompanyDao.DeleteCompany(company);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyCompany(Company company)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyCompanyRaw(company);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyCompanyRaw(Company company)
        {
            daoFactory.CompanyDao.DeletePermanentlyCompany(company);
            return true;
        }
	}
	public partial class Company_ContactTypeService: BaseService
	{
	    public BusinessResponse<List<Company_ContactType>> GetAllCompany_ContactType(bool shouldRemap=false)
        {
            BusinessResponse<List<Company_ContactType>> response = new BusinessResponse<List<Company_ContactType>>();
		    try
		    {
			    response.Result = GetAllCompany_ContactTypeRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Company_ContactType> GetAllCompany_ContactTypeRaw(bool shouldRemap=false)
        {
            return daoFactory.Company_ContactTypeDao.GetAllCompany_ContactType(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Company_ContactType>> GetAllCompany_ContactTypeByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Company_ContactType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Company_ContactType>> response = new BusinessResponse<BaseListReturnType<Company_ContactType>>();
		    try
		    {
			    response.Result = GetAllCompany_ContactTypeByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Company_ContactType, dynamic> orderExpression = null)
        {
            return daoFactory.Company_ContactTypeDao.GetAllCompany_ContactTypeByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Company_ContactType>> GetAllCompany_ContactTypeWithCompanyDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company_ContactType, bool>> expression = null,bool shouldRemap=false, Func<Company_ContactType, dynamic> orderExpression = null)
			{
				return GetAllCompany_ContactTypeByPage(sortingPagingInfo, expression,new List<string>(){"Company"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Company_ContactType>> GetAllCompany_ContactTypeWithContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Company_ContactType, bool>> expression = null,bool shouldRemap=false, Func<Company_ContactType, dynamic> orderExpression = null)
			{
				return GetAllCompany_ContactTypeByPage(sortingPagingInfo, expression,new List<string>(){"ContactType"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Company_ContactType>> GetAllCompany_ContactTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Company_ContactType>> response = new BusinessResponse<BaseListReturnType<Company_ContactType>>();
            try
            {
                response.Result = GetAllCompany_ContactTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Company_ContactTypeDao.GetAllCompany_ContactTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Company_ContactType>> GetCompany_ContactTypeListByIdList(List<long> company_ContactTypeIds)
        {
            BusinessResponse<List<Company_ContactType>> response = new BusinessResponse<List<Company_ContactType>>();
            try
            {
                response.Result = GetCompany_ContactTypeListByIdListRaw(company_ContactTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Company_ContactType> GetCompany_ContactTypeListByIdListRaw(List<long> company_ContactTypeIds)
        {
            return daoFactory.Company_ContactTypeDao.GetCompany_ContactTypeListByIdList(company_ContactTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<Company_ContactType>> GetAllCompany_ContactTypeWithCompanyDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Company_ContactType>> response = new BusinessResponse<BaseListReturnType<Company_ContactType>>();
            try
            {
                response.Result = GetAllCompany_ContactTypeWithCompanyDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeWithCompanyDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCompany_ContactTypeWitDetailsRaw(new List<string>() { "Company" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Company_ContactType>> GetAllCompany_ContactTypeListByCompany(long idCompany)
        {
            BusinessResponse<BaseListReturnType<Company_ContactType>> response = new BusinessResponse<BaseListReturnType<Company_ContactType>>();
            try
            {
                response.Result = GetAllCompany_ContactTypeListByCompanyRaw(idCompany);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeListByCompanyRaw(long idCompany)
        {
            return daoFactory.Company_ContactTypeDao.GetAllCompany_ContactTypeListByCompany(idCompany);
        }

        public BusinessResponse<BaseListReturnType<Company_ContactType>> GetAllCompany_ContactTypeListByCompanyByPage(long idCompany, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Company_ContactType>> response = new BusinessResponse<BaseListReturnType<Company_ContactType>>();
            try
            {
                response.Result = GetAllCompany_ContactTypeListByCompanyByPageRaw(idCompany, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeListByCompanyByPageRaw(long idCompany,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Company_ContactTypeDao.GetAllCompany_ContactTypeListByCompanyByPage(idCompany, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Company_ContactType>> GetAllCompany_ContactTypeWithContactTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Company_ContactType>> response = new BusinessResponse<BaseListReturnType<Company_ContactType>>();
            try
            {
                response.Result = GetAllCompany_ContactTypeWithContactTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeWithContactTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCompany_ContactTypeWitDetailsRaw(new List<string>() { "ContactType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Company_ContactType>> GetAllCompany_ContactTypeListByContactType(long idContactType)
        {
            BusinessResponse<BaseListReturnType<Company_ContactType>> response = new BusinessResponse<BaseListReturnType<Company_ContactType>>();
            try
            {
                response.Result = GetAllCompany_ContactTypeListByContactTypeRaw(idContactType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeListByContactTypeRaw(long idContactType)
        {
            return daoFactory.Company_ContactTypeDao.GetAllCompany_ContactTypeListByContactType(idContactType);
        }

        public BusinessResponse<BaseListReturnType<Company_ContactType>> GetAllCompany_ContactTypeListByContactTypeByPage(long idContactType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Company_ContactType>> response = new BusinessResponse<BaseListReturnType<Company_ContactType>>();
            try
            {
                response.Result = GetAllCompany_ContactTypeListByContactTypeByPageRaw(idContactType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Company_ContactType> GetAllCompany_ContactTypeListByContactTypeByPageRaw(long idContactType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Company_ContactTypeDao.GetAllCompany_ContactTypeListByContactTypeByPage(idContactType, sortingPagingInfo);
        }

		
		



		public BusinessResponse<Company_ContactType> GetCompany_ContactTypeWithCompanyDetails(long idCompany_ContactType,bool shouldRemap=false)
        {
            BusinessResponse<Company_ContactType> response = new BusinessResponse<Company_ContactType>();
            try
            {
                response.Result = GetCompany_ContactTypeWithCompanyDetailsRaw(idCompany_ContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Company_ContactType GetCompany_ContactTypeWithCompanyDetailsRaw(long idCompany_ContactType,bool shouldRemap=false)
        {
            return GetCompany_ContactTypeWitDetailsRaw(idCompany_ContactType,new List<string>() { "Company"},shouldRemap);
        }

		



		public BusinessResponse<Company_ContactType> GetCompany_ContactTypeWithContactTypeDetails(long idCompany_ContactType,bool shouldRemap=false)
        {
            BusinessResponse<Company_ContactType> response = new BusinessResponse<Company_ContactType>();
            try
            {
                response.Result = GetCompany_ContactTypeWithContactTypeDetailsRaw(idCompany_ContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Company_ContactType GetCompany_ContactTypeWithContactTypeDetailsRaw(long idCompany_ContactType,bool shouldRemap=false)
        {
            return GetCompany_ContactTypeWitDetailsRaw(idCompany_ContactType,new List<string>() { "ContactType"},shouldRemap);
        }

		
        public BusinessResponse<Company_ContactType> GetCompany_ContactType(long idCompany_ContactType,bool shouldRemap=false)
        {
            BusinessResponse<Company_ContactType> response = new BusinessResponse<Company_ContactType>();
		    try
		    {
			    response.Result = GetCompany_ContactTypeRaw(idCompany_ContactType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Company_ContactType GetCompany_ContactTypeRaw(long idCompany_ContactType,bool shouldRemap=false)
        {
            return daoFactory.Company_ContactTypeDao.GetCompany_ContactType(idCompany_ContactType,shouldRemap);
        }

        
        public BusinessResponse<Company_ContactType> GetCompany_ContactTypeWitDetails(long idCompany_ContactType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Company_ContactType> response = new BusinessResponse<Company_ContactType>();
		    try
		    {
			    response.Result = GetCompany_ContactTypeWitDetailsRaw(idCompany_ContactType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Company_ContactType GetCompany_ContactTypeWitDetailsRaw(long idCompany_ContactType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Company_ContactTypeDao.GetCompany_ContactTypeWitDetails(idCompany_ContactType,shouldRemap);
        }


		 public BusinessResponse<Company_ContactType> GetCompany_ContactTypeCustom( Expression<Func<Company_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Company_ContactType> response = new BusinessResponse<Company_ContactType>();
		    try
		    {
			    response.Result = GetCompany_ContactTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Company_ContactType GetCompany_ContactTypeCustomRaw( Expression<Func<Company_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.Company_ContactTypeDao.GetCompany_ContactTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Company_ContactType>> GetCompany_ContactTypeCustomList( Expression<Func<Company_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Company_ContactType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Company_ContactType>> response = new BusinessResponse<BaseListReturnType<Company_ContactType>>();
		    try
		    {
			    response.Result = GetCompany_ContactTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Company_ContactType> GetCompany_ContactTypeCustomListRaw( Expression<Func<Company_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Company_ContactType, dynamic> orderExpression = null)
		{
            return daoFactory.Company_ContactTypeDao.GetCompany_ContactTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveCompany_ContactType(Company_ContactType company_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveCompany_ContactTypeRaw(company_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveCompany_ContactTypeRaw(Company_ContactType company_ContactType)
        {
            daoFactory.Company_ContactTypeDao.SaveCompany_ContactType(company_ContactType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyCompany_ContactType(Company_ContactType company_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyCompany_ContactTypeRaw(company_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyCompany_ContactTypeRaw(Company_ContactType company_ContactType)
        {
            daoFactory.Company_ContactTypeDao.SaveOnlyCompany_ContactType(company_ContactType);
            return true;
        }

        public BusinessResponse<bool> DeleteCompany_ContactType(Company_ContactType company_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteCompany_ContactTypeRaw(company_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteCompany_ContactTypeRaw(Company_ContactType company_ContactType)
        {
            daoFactory.Company_ContactTypeDao.DeleteCompany_ContactType(company_ContactType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyCompany_ContactType(Company_ContactType company_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyCompany_ContactTypeRaw(company_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyCompany_ContactTypeRaw(Company_ContactType company_ContactType)
        {
            daoFactory.Company_ContactTypeDao.DeletePermanentlyCompany_ContactType(company_ContactType);
            return true;
        }
	}
	public partial class CompanyLocationService: BaseService
	{
	    public BusinessResponse<List<CompanyLocation>> GetAllCompanyLocations(bool shouldRemap=false)
        {
            BusinessResponse<List<CompanyLocation>> response = new BusinessResponse<List<CompanyLocation>>();
		    try
		    {
			    response.Result = GetAllCompanyLocationsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<CompanyLocation> GetAllCompanyLocationsRaw(bool shouldRemap=false)
        {
            return daoFactory.CompanyLocationDao.GetAllCompanyLocations(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<CompanyLocation>> GetAllCompanyLocationsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CompanyLocation, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<CompanyLocation, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<CompanyLocation>> response = new BusinessResponse<BaseListReturnType<CompanyLocation>>();
		    try
		    {
			    response.Result = GetAllCompanyLocationsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<CompanyLocation> GetAllCompanyLocationsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CompanyLocation, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<CompanyLocation, dynamic> orderExpression = null)
        {
            return daoFactory.CompanyLocationDao.GetAllCompanyLocationsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<CompanyLocation>> GetAllCompanyLocationsWithCompanyDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CompanyLocation, bool>> expression = null,bool shouldRemap=false, Func<CompanyLocation, dynamic> orderExpression = null)
			{
				return GetAllCompanyLocationsByPage(sortingPagingInfo, expression,new List<string>(){"Company"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<CompanyLocation>> GetAllCompanyLocationsWithAddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CompanyLocation, bool>> expression = null,bool shouldRemap=false, Func<CompanyLocation, dynamic> orderExpression = null)
			{
				return GetAllCompanyLocationsByPage(sortingPagingInfo, expression,new List<string>(){"Address"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<CompanyLocation>> GetAllCompanyLocationWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<CompanyLocation>> response = new BusinessResponse<BaseListReturnType<CompanyLocation>>();
            try
            {
                response.Result = GetAllCompanyLocationWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<CompanyLocation> GetAllCompanyLocationWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.CompanyLocationDao.GetAllCompanyLocationWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<CompanyLocation>> GetCompanyLocationListByIdList(List<long> companyLocationIds)
        {
            BusinessResponse<List<CompanyLocation>> response = new BusinessResponse<List<CompanyLocation>>();
            try
            {
                response.Result = GetCompanyLocationListByIdListRaw(companyLocationIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<CompanyLocation> GetCompanyLocationListByIdListRaw(List<long> companyLocationIds)
        {
            return daoFactory.CompanyLocationDao.GetCompanyLocationListByIdList(companyLocationIds);
        }

					
		public BusinessResponse<BaseListReturnType<CompanyLocation>> GetAllCompanyLocationsWithCompanyDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<CompanyLocation>> response = new BusinessResponse<BaseListReturnType<CompanyLocation>>();
            try
            {
                response.Result = GetAllCompanyLocationsWithCompanyDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<CompanyLocation> GetAllCompanyLocationsWithCompanyDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCompanyLocationWitDetailsRaw(new List<string>() { "Company" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<CompanyLocation>> GetAllCompanyLocationListByCompany(long idCompany)
        {
            BusinessResponse<BaseListReturnType<CompanyLocation>> response = new BusinessResponse<BaseListReturnType<CompanyLocation>>();
            try
            {
                response.Result = GetAllCompanyLocationListByCompanyRaw(idCompany);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<CompanyLocation> GetAllCompanyLocationListByCompanyRaw(long idCompany)
        {
            return daoFactory.CompanyLocationDao.GetAllCompanyLocationListByCompany(idCompany);
        }

        public BusinessResponse<BaseListReturnType<CompanyLocation>> GetAllCompanyLocationListByCompanyByPage(long idCompany, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<CompanyLocation>> response = new BusinessResponse<BaseListReturnType<CompanyLocation>>();
            try
            {
                response.Result = GetAllCompanyLocationListByCompanyByPageRaw(idCompany, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<CompanyLocation> GetAllCompanyLocationListByCompanyByPageRaw(long idCompany,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.CompanyLocationDao.GetAllCompanyLocationListByCompanyByPage(idCompany, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<CompanyLocation>> GetAllCompanyLocationsWithAddressDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<CompanyLocation>> response = new BusinessResponse<BaseListReturnType<CompanyLocation>>();
            try
            {
                response.Result = GetAllCompanyLocationsWithAddressDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<CompanyLocation> GetAllCompanyLocationsWithAddressDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCompanyLocationWitDetailsRaw(new List<string>() { "Address" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<CompanyLocation>> GetAllCompanyLocationListByAddress(long idAddress)
        {
            BusinessResponse<BaseListReturnType<CompanyLocation>> response = new BusinessResponse<BaseListReturnType<CompanyLocation>>();
            try
            {
                response.Result = GetAllCompanyLocationListByAddressRaw(idAddress);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<CompanyLocation> GetAllCompanyLocationListByAddressRaw(long idAddress)
        {
            return daoFactory.CompanyLocationDao.GetAllCompanyLocationListByAddress(idAddress);
        }

        public BusinessResponse<BaseListReturnType<CompanyLocation>> GetAllCompanyLocationListByAddressByPage(long idAddress, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<CompanyLocation>> response = new BusinessResponse<BaseListReturnType<CompanyLocation>>();
            try
            {
                response.Result = GetAllCompanyLocationListByAddressByPageRaw(idAddress, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<CompanyLocation> GetAllCompanyLocationListByAddressByPageRaw(long idAddress,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.CompanyLocationDao.GetAllCompanyLocationListByAddressByPage(idAddress, sortingPagingInfo);
        }

		
		



		public BusinessResponse<CompanyLocation> GetCompanyLocationWithCompanyDetails(long idCompanyLocation,bool shouldRemap=false)
        {
            BusinessResponse<CompanyLocation> response = new BusinessResponse<CompanyLocation>();
            try
            {
                response.Result = GetCompanyLocationWithCompanyDetailsRaw(idCompanyLocation,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal CompanyLocation GetCompanyLocationWithCompanyDetailsRaw(long idCompanyLocation,bool shouldRemap=false)
        {
            return GetCompanyLocationWitDetailsRaw(idCompanyLocation,new List<string>() { "Company"},shouldRemap);
        }

		



		public BusinessResponse<CompanyLocation> GetCompanyLocationWithAddressDetails(long idCompanyLocation,bool shouldRemap=false)
        {
            BusinessResponse<CompanyLocation> response = new BusinessResponse<CompanyLocation>();
            try
            {
                response.Result = GetCompanyLocationWithAddressDetailsRaw(idCompanyLocation,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal CompanyLocation GetCompanyLocationWithAddressDetailsRaw(long idCompanyLocation,bool shouldRemap=false)
        {
            return GetCompanyLocationWitDetailsRaw(idCompanyLocation,new List<string>() { "Address"},shouldRemap);
        }

		
        public BusinessResponse<CompanyLocation> GetCompanyLocation(long idCompanyLocation,bool shouldRemap=false)
        {
            BusinessResponse<CompanyLocation> response = new BusinessResponse<CompanyLocation>();
		    try
		    {
			    response.Result = GetCompanyLocationsRaw(idCompanyLocation,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal CompanyLocation GetCompanyLocationsRaw(long idCompanyLocation,bool shouldRemap=false)
        {
            return daoFactory.CompanyLocationDao.GetCompanyLocation(idCompanyLocation,shouldRemap);
        }

        
        public BusinessResponse<CompanyLocation> GetCompanyLocationWitDetails(long idCompanyLocation,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<CompanyLocation> response = new BusinessResponse<CompanyLocation>();
		    try
		    {
			    response.Result = GetCompanyLocationWitDetailsRaw(idCompanyLocation,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal CompanyLocation GetCompanyLocationWitDetailsRaw(long idCompanyLocation,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.CompanyLocationDao.GetCompanyLocationWitDetails(idCompanyLocation,shouldRemap);
        }


		 public BusinessResponse<CompanyLocation> GetCompanyLocationCustom( Expression<Func<CompanyLocation, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<CompanyLocation> response = new BusinessResponse<CompanyLocation>();
		    try
		    {
			    response.Result = GetCompanyLocationCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal CompanyLocation GetCompanyLocationCustomRaw( Expression<Func<CompanyLocation, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.CompanyLocationDao.GetCompanyLocationCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<CompanyLocation>> GetCompanyLocationCustomList( Expression<Func<CompanyLocation, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<CompanyLocation, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<CompanyLocation>> response = new BusinessResponse<BaseListReturnType<CompanyLocation>>();
		    try
		    {
			    response.Result = GetCompanyLocationCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<CompanyLocation> GetCompanyLocationCustomListRaw( Expression<Func<CompanyLocation, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<CompanyLocation, dynamic> orderExpression = null)
		{
            return daoFactory.CompanyLocationDao.GetCompanyLocationCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveCompanyLocation(CompanyLocation companyLocation)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveCompanyLocationRaw(companyLocation);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveCompanyLocationRaw(CompanyLocation companyLocation)
        {
            daoFactory.CompanyLocationDao.SaveCompanyLocation(companyLocation);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyCompanyLocation(CompanyLocation companyLocation)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyCompanyLocationRaw(companyLocation);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyCompanyLocationRaw(CompanyLocation companyLocation)
        {
            daoFactory.CompanyLocationDao.SaveOnlyCompanyLocation(companyLocation);
            return true;
        }

        public BusinessResponse<bool> DeleteCompanyLocation(CompanyLocation companyLocation)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteCompanyLocationRaw(companyLocation);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteCompanyLocationRaw(CompanyLocation companyLocation)
        {
            daoFactory.CompanyLocationDao.DeleteCompanyLocation(companyLocation);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyCompanyLocation(CompanyLocation companyLocation)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyCompanyLocationRaw(companyLocation);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyCompanyLocationRaw(CompanyLocation companyLocation)
        {
            daoFactory.CompanyLocationDao.DeletePermanentlyCompanyLocation(companyLocation);
            return true;
        }
	}
	public partial class ConceptService: BaseService
	{
	    public BusinessResponse<List<Concept>> GetAllConcepts(bool shouldRemap=false)
        {
            BusinessResponse<List<Concept>> response = new BusinessResponse<List<Concept>>();
		    try
		    {
			    response.Result = GetAllConceptsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Concept> GetAllConceptsRaw(bool shouldRemap=false)
        {
            return daoFactory.ConceptDao.GetAllConcepts(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Concept, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
		    try
		    {
			    response.Result = GetAllConceptsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Concept, dynamic> orderExpression = null)
        {
            return daoFactory.ConceptDao.GetAllConceptsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithCompaniesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap=false, Func<Concept, dynamic> orderExpression = null)
			{
				return GetAllConceptsByPage(sortingPagingInfo, expression,new List<string>(){"Companies"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithCompanyDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap=false, Func<Concept, dynamic> orderExpression = null)
			{
				return GetAllConceptsByPage(sortingPagingInfo, expression,new List<string>(){"Company"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithConcept_AddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap=false, Func<Concept, dynamic> orderExpression = null)
			{
				return GetAllConceptsByPage(sortingPagingInfo, expression,new List<string>(){"Concept_Address"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithConcept_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap=false, Func<Concept, dynamic> orderExpression = null)
			{
				return GetAllConceptsByPage(sortingPagingInfo, expression,new List<string>(){"Concept_ContactType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithConcept1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap=false, Func<Concept, dynamic> orderExpression = null)
			{
				return GetAllConceptsByPage(sortingPagingInfo, expression,new List<string>(){"Concept1"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithConcept2DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap=false, Func<Concept, dynamic> orderExpression = null)
			{
				return GetAllConceptsByPage(sortingPagingInfo, expression,new List<string>(){"Concept2"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithPersonDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap=false, Func<Concept, dynamic> orderExpression = null)
			{
				return GetAllConceptsByPage(sortingPagingInfo, expression,new List<string>(){"Person"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithCustomersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept, bool>> expression = null,bool shouldRemap=false, Func<Concept, dynamic> orderExpression = null)
			{
				return GetAllConceptsByPage(sortingPagingInfo, expression,new List<string>(){"Customers"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ConceptDao.GetAllConceptWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Concept>> GetConceptListByIdList(List<long> conceptIds)
        {
            BusinessResponse<List<Concept>> response = new BusinessResponse<List<Concept>>();
            try
            {
                response.Result = GetConceptListByIdListRaw(conceptIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Concept> GetConceptListByIdListRaw(List<long> conceptIds)
        {
            return daoFactory.ConceptDao.GetConceptListByIdList(conceptIds);
        }

					
		public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithCompaniesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptsWithCompaniesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptsWithCompaniesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllConceptWitDetailsRaw(new List<string>() { "Companies" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithCompanyDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptsWithCompanyDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptsWithCompanyDetailsRaw(bool shouldRemap=false)
        {
            return GetAllConceptWitDetailsRaw(new List<string>() { "Company" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptListByCompany(long idCompany)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptListByCompanyRaw(idCompany);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptListByCompanyRaw(long idCompany)
        {
            return daoFactory.ConceptDao.GetAllConceptListByCompany(idCompany);
        }

        public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptListByCompanyByPage(long idCompany, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptListByCompanyByPageRaw(idCompany, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptListByCompanyByPageRaw(long idCompany,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.ConceptDao.GetAllConceptListByCompanyByPage(idCompany, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithConcept_AddressDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptsWithConcept_AddressDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptsWithConcept_AddressDetailsRaw(bool shouldRemap=false)
        {
            return GetAllConceptWitDetailsRaw(new List<string>() { "Concept_Address" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithConcept_ContactTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptsWithConcept_ContactTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptsWithConcept_ContactTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllConceptWitDetailsRaw(new List<string>() { "Concept_ContactType" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithConcept1Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptsWithConcept1DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptsWithConcept1DetailsRaw(bool shouldRemap=false)
        {
            return GetAllConceptWitDetailsRaw(new List<string>() { "Concept1" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptListByConcept1(long idConcept1)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptListByConcept1Raw(idConcept1);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptListByConcept1Raw(long idConcept1)
        {
            return daoFactory.ConceptDao.GetAllConceptListByConcept1(idConcept1);
        }

        public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptListByConcept1ByPage(long idConcept1, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptListByConcept1ByPageRaw(idConcept1, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptListByConcept1ByPageRaw(long idConcept1,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.ConceptDao.GetAllConceptListByConcept1ByPage(idConcept1, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithConcept2Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptsWithConcept2DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptsWithConcept2DetailsRaw(bool shouldRemap=false)
        {
            return GetAllConceptWitDetailsRaw(new List<string>() { "Concept2" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithPersonDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptsWithPersonDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptsWithPersonDetailsRaw(bool shouldRemap=false)
        {
            return GetAllConceptWitDetailsRaw(new List<string>() { "Person" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptListByPerson(long idPerson)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptListByPersonRaw(idPerson);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptListByPersonRaw(long idPerson)
        {
            return daoFactory.ConceptDao.GetAllConceptListByPerson(idPerson);
        }

        public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptListByPersonByPage(long idPerson, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptListByPersonByPageRaw(idPerson, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptListByPersonByPageRaw(long idPerson,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.ConceptDao.GetAllConceptListByPersonByPage(idPerson, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Concept>> GetAllConceptsWithCustomersDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
            try
            {
                response.Result = GetAllConceptsWithCustomersDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept> GetAllConceptsWithCustomersDetailsRaw(bool shouldRemap=false)
        {
            return GetAllConceptWitDetailsRaw(new List<string>() { "Customers" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Company>>  UpdateCompaniesForConceptWithoutSavingNewItem(List<Company> newCompanies,long idConcept)
            {
                BusinessResponse<List<Company>> response = new BusinessResponse<List<Company>>();
                try
                {
                    response.Result = UpdateCompaniesForConceptWithoutSavingNewItemRaw(newCompanies, idConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Company> UpdateCompaniesForConceptWithoutSavingNewItemRaw(List<Company> newCompanies,long idConcept)
            {
                return daoFactory.ConceptDao.UpdateCompaniesForConceptWithoutSavingNewItem(newCompanies,idConcept); 
            }



		    public BusinessResponse<List<Company>>  UpdateCompaniesForConcept(List<Company> newCompanies,long idConcept)
            {
                BusinessResponse<List<Company>> response = new BusinessResponse<List<Company>>();
                try
                {
                    response.Result = UpdateCompaniesForConceptRaw(newCompanies, idConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Company> UpdateCompaniesForConceptRaw(List<Company> newCompanies,long idConcept)
            {
                return daoFactory.ConceptDao.UpdateCompaniesForConcept(newCompanies,idConcept); 
            }





		public BusinessResponse<Concept> GetConceptWithCompaniesDetails(long idConcept,bool shouldRemap=false)
        {
            BusinessResponse<Concept> response = new BusinessResponse<Concept>();
            try
            {
                response.Result = GetConceptWithCompaniesDetailsRaw(idConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Concept GetConceptWithCompaniesDetailsRaw(long idConcept,bool shouldRemap=false)
        {
            return GetConceptWitDetailsRaw(idConcept,new List<string>() { "Companies"},shouldRemap);
        }

		



		public BusinessResponse<Concept> GetConceptWithCompanyDetails(long idConcept,bool shouldRemap=false)
        {
            BusinessResponse<Concept> response = new BusinessResponse<Concept>();
            try
            {
                response.Result = GetConceptWithCompanyDetailsRaw(idConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Concept GetConceptWithCompanyDetailsRaw(long idConcept,bool shouldRemap=false)
        {
            return GetConceptWitDetailsRaw(idConcept,new List<string>() { "Company"},shouldRemap);
        }

		
			public BusinessResponse<List<Concept_Address>>  UpdateConcept_AddressForConceptWithoutSavingNewItem(List<Concept_Address> newConcept_Address,long idConcept)
            {
                BusinessResponse<List<Concept_Address>> response = new BusinessResponse<List<Concept_Address>>();
                try
                {
                    response.Result = UpdateConcept_AddressForConceptWithoutSavingNewItemRaw(newConcept_Address, idConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Concept_Address> UpdateConcept_AddressForConceptWithoutSavingNewItemRaw(List<Concept_Address> newConcept_Address,long idConcept)
            {
                return daoFactory.ConceptDao.UpdateConcept_AddressForConceptWithoutSavingNewItem(newConcept_Address,idConcept); 
            }



		    public BusinessResponse<List<Concept_Address>>  UpdateConcept_AddressForConcept(List<Concept_Address> newConcept_Address,long idConcept)
            {
                BusinessResponse<List<Concept_Address>> response = new BusinessResponse<List<Concept_Address>>();
                try
                {
                    response.Result = UpdateConcept_AddressForConceptRaw(newConcept_Address, idConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Concept_Address> UpdateConcept_AddressForConceptRaw(List<Concept_Address> newConcept_Address,long idConcept)
            {
                return daoFactory.ConceptDao.UpdateConcept_AddressForConcept(newConcept_Address,idConcept); 
            }





		public BusinessResponse<Concept> GetConceptWithConcept_AddressDetails(long idConcept,bool shouldRemap=false)
        {
            BusinessResponse<Concept> response = new BusinessResponse<Concept>();
            try
            {
                response.Result = GetConceptWithConcept_AddressDetailsRaw(idConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Concept GetConceptWithConcept_AddressDetailsRaw(long idConcept,bool shouldRemap=false)
        {
            return GetConceptWitDetailsRaw(idConcept,new List<string>() { "Concept_Address"},shouldRemap);
        }

		
			public BusinessResponse<List<Concept_ContactType>>  UpdateConcept_ContactTypeForConceptWithoutSavingNewItem(List<Concept_ContactType> newConcept_ContactType,long idConcept)
            {
                BusinessResponse<List<Concept_ContactType>> response = new BusinessResponse<List<Concept_ContactType>>();
                try
                {
                    response.Result = UpdateConcept_ContactTypeForConceptWithoutSavingNewItemRaw(newConcept_ContactType, idConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Concept_ContactType> UpdateConcept_ContactTypeForConceptWithoutSavingNewItemRaw(List<Concept_ContactType> newConcept_ContactType,long idConcept)
            {
                return daoFactory.ConceptDao.UpdateConcept_ContactTypeForConceptWithoutSavingNewItem(newConcept_ContactType,idConcept); 
            }



		    public BusinessResponse<List<Concept_ContactType>>  UpdateConcept_ContactTypeForConcept(List<Concept_ContactType> newConcept_ContactType,long idConcept)
            {
                BusinessResponse<List<Concept_ContactType>> response = new BusinessResponse<List<Concept_ContactType>>();
                try
                {
                    response.Result = UpdateConcept_ContactTypeForConceptRaw(newConcept_ContactType, idConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Concept_ContactType> UpdateConcept_ContactTypeForConceptRaw(List<Concept_ContactType> newConcept_ContactType,long idConcept)
            {
                return daoFactory.ConceptDao.UpdateConcept_ContactTypeForConcept(newConcept_ContactType,idConcept); 
            }





		public BusinessResponse<Concept> GetConceptWithConcept_ContactTypeDetails(long idConcept,bool shouldRemap=false)
        {
            BusinessResponse<Concept> response = new BusinessResponse<Concept>();
            try
            {
                response.Result = GetConceptWithConcept_ContactTypeDetailsRaw(idConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Concept GetConceptWithConcept_ContactTypeDetailsRaw(long idConcept,bool shouldRemap=false)
        {
            return GetConceptWitDetailsRaw(idConcept,new List<string>() { "Concept_ContactType"},shouldRemap);
        }

		



		public BusinessResponse<Concept> GetConceptWithConcept1Details(long idConcept,bool shouldRemap=false)
        {
            BusinessResponse<Concept> response = new BusinessResponse<Concept>();
            try
            {
                response.Result = GetConceptWithConcept1DetailsRaw(idConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Concept GetConceptWithConcept1DetailsRaw(long idConcept,bool shouldRemap=false)
        {
            return GetConceptWitDetailsRaw(idConcept,new List<string>() { "Concept1"},shouldRemap);
        }

		



		public BusinessResponse<Concept> GetConceptWithConcept2Details(long idConcept,bool shouldRemap=false)
        {
            BusinessResponse<Concept> response = new BusinessResponse<Concept>();
            try
            {
                response.Result = GetConceptWithConcept2DetailsRaw(idConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Concept GetConceptWithConcept2DetailsRaw(long idConcept,bool shouldRemap=false)
        {
            return GetConceptWitDetailsRaw(idConcept,new List<string>() { "Concept2"},shouldRemap);
        }

		



		public BusinessResponse<Concept> GetConceptWithPersonDetails(long idConcept,bool shouldRemap=false)
        {
            BusinessResponse<Concept> response = new BusinessResponse<Concept>();
            try
            {
                response.Result = GetConceptWithPersonDetailsRaw(idConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Concept GetConceptWithPersonDetailsRaw(long idConcept,bool shouldRemap=false)
        {
            return GetConceptWitDetailsRaw(idConcept,new List<string>() { "Person"},shouldRemap);
        }

		
			public BusinessResponse<List<Customer>>  UpdateCustomersForConceptWithoutSavingNewItem(List<Customer> newCustomers,long idConcept)
            {
                BusinessResponse<List<Customer>> response = new BusinessResponse<List<Customer>>();
                try
                {
                    response.Result = UpdateCustomersForConceptWithoutSavingNewItemRaw(newCustomers, idConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Customer> UpdateCustomersForConceptWithoutSavingNewItemRaw(List<Customer> newCustomers,long idConcept)
            {
                return daoFactory.ConceptDao.UpdateCustomersForConceptWithoutSavingNewItem(newCustomers,idConcept); 
            }



		    public BusinessResponse<List<Customer>>  UpdateCustomersForConcept(List<Customer> newCustomers,long idConcept)
            {
                BusinessResponse<List<Customer>> response = new BusinessResponse<List<Customer>>();
                try
                {
                    response.Result = UpdateCustomersForConceptRaw(newCustomers, idConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Customer> UpdateCustomersForConceptRaw(List<Customer> newCustomers,long idConcept)
            {
                return daoFactory.ConceptDao.UpdateCustomersForConcept(newCustomers,idConcept); 
            }





		public BusinessResponse<Concept> GetConceptWithCustomersDetails(long idConcept,bool shouldRemap=false)
        {
            BusinessResponse<Concept> response = new BusinessResponse<Concept>();
            try
            {
                response.Result = GetConceptWithCustomersDetailsRaw(idConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Concept GetConceptWithCustomersDetailsRaw(long idConcept,bool shouldRemap=false)
        {
            return GetConceptWitDetailsRaw(idConcept,new List<string>() { "Customers"},shouldRemap);
        }

		
        public BusinessResponse<Concept> GetConcept(long idConcept,bool shouldRemap=false)
        {
            BusinessResponse<Concept> response = new BusinessResponse<Concept>();
		    try
		    {
			    response.Result = GetConceptsRaw(idConcept,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Concept GetConceptsRaw(long idConcept,bool shouldRemap=false)
        {
            return daoFactory.ConceptDao.GetConcept(idConcept,shouldRemap);
        }

        
        public BusinessResponse<Concept> GetConceptWitDetails(long idConcept,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Concept> response = new BusinessResponse<Concept>();
		    try
		    {
			    response.Result = GetConceptWitDetailsRaw(idConcept,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Concept GetConceptWitDetailsRaw(long idConcept,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ConceptDao.GetConceptWitDetails(idConcept,shouldRemap);
        }


		 public BusinessResponse<Concept> GetConceptCustom( Expression<Func<Concept, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Concept> response = new BusinessResponse<Concept>();
		    try
		    {
			    response.Result = GetConceptCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Concept GetConceptCustomRaw( Expression<Func<Concept, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.ConceptDao.GetConceptCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Concept>> GetConceptCustomList( Expression<Func<Concept, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Concept, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Concept>> response = new BusinessResponse<BaseListReturnType<Concept>>();
		    try
		    {
			    response.Result = GetConceptCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Concept> GetConceptCustomListRaw( Expression<Func<Concept, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Concept, dynamic> orderExpression = null)
		{
            return daoFactory.ConceptDao.GetConceptCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveConcept(Concept concept)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveConceptRaw(concept);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveConceptRaw(Concept concept)
        {
            daoFactory.ConceptDao.SaveConcept(concept);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyConcept(Concept concept)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyConceptRaw(concept);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyConceptRaw(Concept concept)
        {
            daoFactory.ConceptDao.SaveOnlyConcept(concept);
            return true;
        }

        public BusinessResponse<bool> DeleteConcept(Concept concept)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteConceptRaw(concept);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteConceptRaw(Concept concept)
        {
            daoFactory.ConceptDao.DeleteConcept(concept);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyConcept(Concept concept)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyConceptRaw(concept);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyConceptRaw(Concept concept)
        {
            daoFactory.ConceptDao.DeletePermanentlyConcept(concept);
            return true;
        }
	}
	public partial class Concept_AddressService: BaseService
	{
	    public BusinessResponse<List<Concept_Address>> GetAllConcept_Address(bool shouldRemap=false)
        {
            BusinessResponse<List<Concept_Address>> response = new BusinessResponse<List<Concept_Address>>();
		    try
		    {
			    response.Result = GetAllConcept_AddressRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Concept_Address> GetAllConcept_AddressRaw(bool shouldRemap=false)
        {
            return daoFactory.Concept_AddressDao.GetAllConcept_Address(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Concept_Address>> GetAllConcept_AddressByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_Address, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Concept_Address, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Concept_Address>> response = new BusinessResponse<BaseListReturnType<Concept_Address>>();
		    try
		    {
			    response.Result = GetAllConcept_AddressByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Concept_Address> GetAllConcept_AddressByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_Address, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Concept_Address, dynamic> orderExpression = null)
        {
            return daoFactory.Concept_AddressDao.GetAllConcept_AddressByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Concept_Address>> GetAllConcept_AddressWithConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_Address, bool>> expression = null,bool shouldRemap=false, Func<Concept_Address, dynamic> orderExpression = null)
			{
				return GetAllConcept_AddressByPage(sortingPagingInfo, expression,new List<string>(){"Concept"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Concept_Address>> GetAllConcept_AddressWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept_Address>> response = new BusinessResponse<BaseListReturnType<Concept_Address>>();
            try
            {
                response.Result = GetAllConcept_AddressWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept_Address> GetAllConcept_AddressWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Concept_AddressDao.GetAllConcept_AddressWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Concept_Address>> GetConcept_AddressListByIdList(List<long> concept_AddressIds)
        {
            BusinessResponse<List<Concept_Address>> response = new BusinessResponse<List<Concept_Address>>();
            try
            {
                response.Result = GetConcept_AddressListByIdListRaw(concept_AddressIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Concept_Address> GetConcept_AddressListByIdListRaw(List<long> concept_AddressIds)
        {
            return daoFactory.Concept_AddressDao.GetConcept_AddressListByIdList(concept_AddressIds);
        }

					
		public BusinessResponse<BaseListReturnType<Concept_Address>> GetAllConcept_AddressWithConceptDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept_Address>> response = new BusinessResponse<BaseListReturnType<Concept_Address>>();
            try
            {
                response.Result = GetAllConcept_AddressWithConceptDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept_Address> GetAllConcept_AddressWithConceptDetailsRaw(bool shouldRemap=false)
        {
            return GetAllConcept_AddressWitDetailsRaw(new List<string>() { "Concept" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Concept_Address>> GetAllConcept_AddressListByConcept(long idConcept)
        {
            BusinessResponse<BaseListReturnType<Concept_Address>> response = new BusinessResponse<BaseListReturnType<Concept_Address>>();
            try
            {
                response.Result = GetAllConcept_AddressListByConceptRaw(idConcept);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept_Address> GetAllConcept_AddressListByConceptRaw(long idConcept)
        {
            return daoFactory.Concept_AddressDao.GetAllConcept_AddressListByConcept(idConcept);
        }

        public BusinessResponse<BaseListReturnType<Concept_Address>> GetAllConcept_AddressListByConceptByPage(long idConcept, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Concept_Address>> response = new BusinessResponse<BaseListReturnType<Concept_Address>>();
            try
            {
                response.Result = GetAllConcept_AddressListByConceptByPageRaw(idConcept, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept_Address> GetAllConcept_AddressListByConceptByPageRaw(long idConcept,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Concept_AddressDao.GetAllConcept_AddressListByConceptByPage(idConcept, sortingPagingInfo);
        }

		
		



		public BusinessResponse<Concept_Address> GetConcept_AddressWithConceptDetails(long idConcept_Address,bool shouldRemap=false)
        {
            BusinessResponse<Concept_Address> response = new BusinessResponse<Concept_Address>();
            try
            {
                response.Result = GetConcept_AddressWithConceptDetailsRaw(idConcept_Address,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Concept_Address GetConcept_AddressWithConceptDetailsRaw(long idConcept_Address,bool shouldRemap=false)
        {
            return GetConcept_AddressWitDetailsRaw(idConcept_Address,new List<string>() { "Concept"},shouldRemap);
        }

		
        public BusinessResponse<Concept_Address> GetConcept_Address(long idConcept_Address,bool shouldRemap=false)
        {
            BusinessResponse<Concept_Address> response = new BusinessResponse<Concept_Address>();
		    try
		    {
			    response.Result = GetConcept_AddressRaw(idConcept_Address,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Concept_Address GetConcept_AddressRaw(long idConcept_Address,bool shouldRemap=false)
        {
            return daoFactory.Concept_AddressDao.GetConcept_Address(idConcept_Address,shouldRemap);
        }

        
        public BusinessResponse<Concept_Address> GetConcept_AddressWitDetails(long idConcept_Address,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Concept_Address> response = new BusinessResponse<Concept_Address>();
		    try
		    {
			    response.Result = GetConcept_AddressWitDetailsRaw(idConcept_Address,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Concept_Address GetConcept_AddressWitDetailsRaw(long idConcept_Address,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Concept_AddressDao.GetConcept_AddressWitDetails(idConcept_Address,shouldRemap);
        }


		 public BusinessResponse<Concept_Address> GetConcept_AddressCustom( Expression<Func<Concept_Address, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Concept_Address> response = new BusinessResponse<Concept_Address>();
		    try
		    {
			    response.Result = GetConcept_AddressCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Concept_Address GetConcept_AddressCustomRaw( Expression<Func<Concept_Address, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.Concept_AddressDao.GetConcept_AddressCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Concept_Address>> GetConcept_AddressCustomList( Expression<Func<Concept_Address, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Concept_Address, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Concept_Address>> response = new BusinessResponse<BaseListReturnType<Concept_Address>>();
		    try
		    {
			    response.Result = GetConcept_AddressCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Concept_Address> GetConcept_AddressCustomListRaw( Expression<Func<Concept_Address, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Concept_Address, dynamic> orderExpression = null)
		{
            return daoFactory.Concept_AddressDao.GetConcept_AddressCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveConcept_Address(Concept_Address concept_Address)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveConcept_AddressRaw(concept_Address);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveConcept_AddressRaw(Concept_Address concept_Address)
        {
            daoFactory.Concept_AddressDao.SaveConcept_Address(concept_Address);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyConcept_Address(Concept_Address concept_Address)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyConcept_AddressRaw(concept_Address);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyConcept_AddressRaw(Concept_Address concept_Address)
        {
            daoFactory.Concept_AddressDao.SaveOnlyConcept_Address(concept_Address);
            return true;
        }

        public BusinessResponse<bool> DeleteConcept_Address(Concept_Address concept_Address)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteConcept_AddressRaw(concept_Address);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteConcept_AddressRaw(Concept_Address concept_Address)
        {
            daoFactory.Concept_AddressDao.DeleteConcept_Address(concept_Address);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyConcept_Address(Concept_Address concept_Address)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyConcept_AddressRaw(concept_Address);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyConcept_AddressRaw(Concept_Address concept_Address)
        {
            daoFactory.Concept_AddressDao.DeletePermanentlyConcept_Address(concept_Address);
            return true;
        }
	}
	public partial class Concept_ContactTypeService: BaseService
	{
	    public BusinessResponse<List<Concept_ContactType>> GetAllConcept_ContactType(bool shouldRemap=false)
        {
            BusinessResponse<List<Concept_ContactType>> response = new BusinessResponse<List<Concept_ContactType>>();
		    try
		    {
			    response.Result = GetAllConcept_ContactTypeRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Concept_ContactType> GetAllConcept_ContactTypeRaw(bool shouldRemap=false)
        {
            return daoFactory.Concept_ContactTypeDao.GetAllConcept_ContactType(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Concept_ContactType>> GetAllConcept_ContactTypeByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Concept_ContactType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Concept_ContactType>> response = new BusinessResponse<BaseListReturnType<Concept_ContactType>>();
		    try
		    {
			    response.Result = GetAllConcept_ContactTypeByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Concept_ContactType, dynamic> orderExpression = null)
        {
            return daoFactory.Concept_ContactTypeDao.GetAllConcept_ContactTypeByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Concept_ContactType>> GetAllConcept_ContactTypeWithContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_ContactType, bool>> expression = null,bool shouldRemap=false, Func<Concept_ContactType, dynamic> orderExpression = null)
			{
				return GetAllConcept_ContactTypeByPage(sortingPagingInfo, expression,new List<string>(){"ContactType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Concept_ContactType>> GetAllConcept_ContactTypeWithConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Concept_ContactType, bool>> expression = null,bool shouldRemap=false, Func<Concept_ContactType, dynamic> orderExpression = null)
			{
				return GetAllConcept_ContactTypeByPage(sortingPagingInfo, expression,new List<string>(){"Concept"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Concept_ContactType>> GetAllConcept_ContactTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept_ContactType>> response = new BusinessResponse<BaseListReturnType<Concept_ContactType>>();
            try
            {
                response.Result = GetAllConcept_ContactTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Concept_ContactTypeDao.GetAllConcept_ContactTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Concept_ContactType>> GetConcept_ContactTypeListByIdList(List<long> concept_ContactTypeIds)
        {
            BusinessResponse<List<Concept_ContactType>> response = new BusinessResponse<List<Concept_ContactType>>();
            try
            {
                response.Result = GetConcept_ContactTypeListByIdListRaw(concept_ContactTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Concept_ContactType> GetConcept_ContactTypeListByIdListRaw(List<long> concept_ContactTypeIds)
        {
            return daoFactory.Concept_ContactTypeDao.GetConcept_ContactTypeListByIdList(concept_ContactTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<Concept_ContactType>> GetAllConcept_ContactTypeWithContactTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept_ContactType>> response = new BusinessResponse<BaseListReturnType<Concept_ContactType>>();
            try
            {
                response.Result = GetAllConcept_ContactTypeWithContactTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeWithContactTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllConcept_ContactTypeWitDetailsRaw(new List<string>() { "ContactType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Concept_ContactType>> GetAllConcept_ContactTypeListByContactType(long idContactType)
        {
            BusinessResponse<BaseListReturnType<Concept_ContactType>> response = new BusinessResponse<BaseListReturnType<Concept_ContactType>>();
            try
            {
                response.Result = GetAllConcept_ContactTypeListByContactTypeRaw(idContactType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeListByContactTypeRaw(long idContactType)
        {
            return daoFactory.Concept_ContactTypeDao.GetAllConcept_ContactTypeListByContactType(idContactType);
        }

        public BusinessResponse<BaseListReturnType<Concept_ContactType>> GetAllConcept_ContactTypeListByContactTypeByPage(long idContactType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Concept_ContactType>> response = new BusinessResponse<BaseListReturnType<Concept_ContactType>>();
            try
            {
                response.Result = GetAllConcept_ContactTypeListByContactTypeByPageRaw(idContactType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeListByContactTypeByPageRaw(long idContactType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Concept_ContactTypeDao.GetAllConcept_ContactTypeListByContactTypeByPage(idContactType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Concept_ContactType>> GetAllConcept_ContactTypeWithConceptDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Concept_ContactType>> response = new BusinessResponse<BaseListReturnType<Concept_ContactType>>();
            try
            {
                response.Result = GetAllConcept_ContactTypeWithConceptDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeWithConceptDetailsRaw(bool shouldRemap=false)
        {
            return GetAllConcept_ContactTypeWitDetailsRaw(new List<string>() { "Concept" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Concept_ContactType>> GetAllConcept_ContactTypeListByConcept(long idConcept)
        {
            BusinessResponse<BaseListReturnType<Concept_ContactType>> response = new BusinessResponse<BaseListReturnType<Concept_ContactType>>();
            try
            {
                response.Result = GetAllConcept_ContactTypeListByConceptRaw(idConcept);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeListByConceptRaw(long idConcept)
        {
            return daoFactory.Concept_ContactTypeDao.GetAllConcept_ContactTypeListByConcept(idConcept);
        }

        public BusinessResponse<BaseListReturnType<Concept_ContactType>> GetAllConcept_ContactTypeListByConceptByPage(long idConcept, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Concept_ContactType>> response = new BusinessResponse<BaseListReturnType<Concept_ContactType>>();
            try
            {
                response.Result = GetAllConcept_ContactTypeListByConceptByPageRaw(idConcept, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Concept_ContactType> GetAllConcept_ContactTypeListByConceptByPageRaw(long idConcept,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Concept_ContactTypeDao.GetAllConcept_ContactTypeListByConceptByPage(idConcept, sortingPagingInfo);
        }

		
		



		public BusinessResponse<Concept_ContactType> GetConcept_ContactTypeWithContactTypeDetails(long idConcept_ContactType,bool shouldRemap=false)
        {
            BusinessResponse<Concept_ContactType> response = new BusinessResponse<Concept_ContactType>();
            try
            {
                response.Result = GetConcept_ContactTypeWithContactTypeDetailsRaw(idConcept_ContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Concept_ContactType GetConcept_ContactTypeWithContactTypeDetailsRaw(long idConcept_ContactType,bool shouldRemap=false)
        {
            return GetConcept_ContactTypeWitDetailsRaw(idConcept_ContactType,new List<string>() { "ContactType"},shouldRemap);
        }

		



		public BusinessResponse<Concept_ContactType> GetConcept_ContactTypeWithConceptDetails(long idConcept_ContactType,bool shouldRemap=false)
        {
            BusinessResponse<Concept_ContactType> response = new BusinessResponse<Concept_ContactType>();
            try
            {
                response.Result = GetConcept_ContactTypeWithConceptDetailsRaw(idConcept_ContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Concept_ContactType GetConcept_ContactTypeWithConceptDetailsRaw(long idConcept_ContactType,bool shouldRemap=false)
        {
            return GetConcept_ContactTypeWitDetailsRaw(idConcept_ContactType,new List<string>() { "Concept"},shouldRemap);
        }

		
        public BusinessResponse<Concept_ContactType> GetConcept_ContactType(long idConcept_ContactType,bool shouldRemap=false)
        {
            BusinessResponse<Concept_ContactType> response = new BusinessResponse<Concept_ContactType>();
		    try
		    {
			    response.Result = GetConcept_ContactTypeRaw(idConcept_ContactType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Concept_ContactType GetConcept_ContactTypeRaw(long idConcept_ContactType,bool shouldRemap=false)
        {
            return daoFactory.Concept_ContactTypeDao.GetConcept_ContactType(idConcept_ContactType,shouldRemap);
        }

        
        public BusinessResponse<Concept_ContactType> GetConcept_ContactTypeWitDetails(long idConcept_ContactType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Concept_ContactType> response = new BusinessResponse<Concept_ContactType>();
		    try
		    {
			    response.Result = GetConcept_ContactTypeWitDetailsRaw(idConcept_ContactType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Concept_ContactType GetConcept_ContactTypeWitDetailsRaw(long idConcept_ContactType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Concept_ContactTypeDao.GetConcept_ContactTypeWitDetails(idConcept_ContactType,shouldRemap);
        }


		 public BusinessResponse<Concept_ContactType> GetConcept_ContactTypeCustom( Expression<Func<Concept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Concept_ContactType> response = new BusinessResponse<Concept_ContactType>();
		    try
		    {
			    response.Result = GetConcept_ContactTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Concept_ContactType GetConcept_ContactTypeCustomRaw( Expression<Func<Concept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.Concept_ContactTypeDao.GetConcept_ContactTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Concept_ContactType>> GetConcept_ContactTypeCustomList( Expression<Func<Concept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Concept_ContactType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Concept_ContactType>> response = new BusinessResponse<BaseListReturnType<Concept_ContactType>>();
		    try
		    {
			    response.Result = GetConcept_ContactTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Concept_ContactType> GetConcept_ContactTypeCustomListRaw( Expression<Func<Concept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Concept_ContactType, dynamic> orderExpression = null)
		{
            return daoFactory.Concept_ContactTypeDao.GetConcept_ContactTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveConcept_ContactType(Concept_ContactType concept_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveConcept_ContactTypeRaw(concept_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveConcept_ContactTypeRaw(Concept_ContactType concept_ContactType)
        {
            daoFactory.Concept_ContactTypeDao.SaveConcept_ContactType(concept_ContactType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyConcept_ContactType(Concept_ContactType concept_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyConcept_ContactTypeRaw(concept_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyConcept_ContactTypeRaw(Concept_ContactType concept_ContactType)
        {
            daoFactory.Concept_ContactTypeDao.SaveOnlyConcept_ContactType(concept_ContactType);
            return true;
        }

        public BusinessResponse<bool> DeleteConcept_ContactType(Concept_ContactType concept_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteConcept_ContactTypeRaw(concept_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteConcept_ContactTypeRaw(Concept_ContactType concept_ContactType)
        {
            daoFactory.Concept_ContactTypeDao.DeleteConcept_ContactType(concept_ContactType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyConcept_ContactType(Concept_ContactType concept_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyConcept_ContactTypeRaw(concept_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyConcept_ContactTypeRaw(Concept_ContactType concept_ContactType)
        {
            daoFactory.Concept_ContactTypeDao.DeletePermanentlyConcept_ContactType(concept_ContactType);
            return true;
        }
	}
	public partial class ContactService: BaseService
	{
	    public BusinessResponse<List<Contact>> GetAllContacts(bool shouldRemap=false)
        {
            BusinessResponse<List<Contact>> response = new BusinessResponse<List<Contact>>();
		    try
		    {
			    response.Result = GetAllContactsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Contact> GetAllContactsRaw(bool shouldRemap=false)
        {
            return daoFactory.ContactDao.GetAllContacts(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Contact>> GetAllContactsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Contact, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Contact, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Contact>> response = new BusinessResponse<BaseListReturnType<Contact>>();
		    try
		    {
			    response.Result = GetAllContactsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Contact> GetAllContactsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Contact, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Contact, dynamic> orderExpression = null)
        {
            return daoFactory.ContactDao.GetAllContactsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Contact>> GetAllContactsWithAddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Contact, bool>> expression = null,bool shouldRemap=false, Func<Contact, dynamic> orderExpression = null)
			{
				return GetAllContactsByPage(sortingPagingInfo, expression,new List<string>(){"Address"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Contact>> GetAllContactWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Contact>> response = new BusinessResponse<BaseListReturnType<Contact>>();
            try
            {
                response.Result = GetAllContactWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Contact> GetAllContactWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ContactDao.GetAllContactWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Contact>> GetContactListByIdList(List<long> contactIds)
        {
            BusinessResponse<List<Contact>> response = new BusinessResponse<List<Contact>>();
            try
            {
                response.Result = GetContactListByIdListRaw(contactIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Contact> GetContactListByIdListRaw(List<long> contactIds)
        {
            return daoFactory.ContactDao.GetContactListByIdList(contactIds);
        }

					
		public BusinessResponse<BaseListReturnType<Contact>> GetAllContactsWithAddressDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Contact>> response = new BusinessResponse<BaseListReturnType<Contact>>();
            try
            {
                response.Result = GetAllContactsWithAddressDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Contact> GetAllContactsWithAddressDetailsRaw(bool shouldRemap=false)
        {
            return GetAllContactWitDetailsRaw(new List<string>() { "Address" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Contact>> GetAllContactListByAddress(long idAddress)
        {
            BusinessResponse<BaseListReturnType<Contact>> response = new BusinessResponse<BaseListReturnType<Contact>>();
            try
            {
                response.Result = GetAllContactListByAddressRaw(idAddress);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Contact> GetAllContactListByAddressRaw(long idAddress)
        {
            return daoFactory.ContactDao.GetAllContactListByAddress(idAddress);
        }

        public BusinessResponse<BaseListReturnType<Contact>> GetAllContactListByAddressByPage(long idAddress, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Contact>> response = new BusinessResponse<BaseListReturnType<Contact>>();
            try
            {
                response.Result = GetAllContactListByAddressByPageRaw(idAddress, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Contact> GetAllContactListByAddressByPageRaw(long idAddress,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.ContactDao.GetAllContactListByAddressByPage(idAddress, sortingPagingInfo);
        }

		
		



		public BusinessResponse<Contact> GetContactWithAddressDetails(long idContact,bool shouldRemap=false)
        {
            BusinessResponse<Contact> response = new BusinessResponse<Contact>();
            try
            {
                response.Result = GetContactWithAddressDetailsRaw(idContact,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Contact GetContactWithAddressDetailsRaw(long idContact,bool shouldRemap=false)
        {
            return GetContactWitDetailsRaw(idContact,new List<string>() { "Address"},shouldRemap);
        }

		
        public BusinessResponse<Contact> GetContact(long idContact,bool shouldRemap=false)
        {
            BusinessResponse<Contact> response = new BusinessResponse<Contact>();
		    try
		    {
			    response.Result = GetContactsRaw(idContact,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Contact GetContactsRaw(long idContact,bool shouldRemap=false)
        {
            return daoFactory.ContactDao.GetContact(idContact,shouldRemap);
        }

        
        public BusinessResponse<Contact> GetContactWitDetails(long idContact,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Contact> response = new BusinessResponse<Contact>();
		    try
		    {
			    response.Result = GetContactWitDetailsRaw(idContact,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Contact GetContactWitDetailsRaw(long idContact,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ContactDao.GetContactWitDetails(idContact,shouldRemap);
        }


		 public BusinessResponse<Contact> GetContactCustom( Expression<Func<Contact, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Contact> response = new BusinessResponse<Contact>();
		    try
		    {
			    response.Result = GetContactCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Contact GetContactCustomRaw( Expression<Func<Contact, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.ContactDao.GetContactCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Contact>> GetContactCustomList( Expression<Func<Contact, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Contact, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Contact>> response = new BusinessResponse<BaseListReturnType<Contact>>();
		    try
		    {
			    response.Result = GetContactCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Contact> GetContactCustomListRaw( Expression<Func<Contact, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Contact, dynamic> orderExpression = null)
		{
            return daoFactory.ContactDao.GetContactCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveContact(Contact contact)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveContactRaw(contact);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveContactRaw(Contact contact)
        {
            daoFactory.ContactDao.SaveContact(contact);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyContact(Contact contact)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyContactRaw(contact);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyContactRaw(Contact contact)
        {
            daoFactory.ContactDao.SaveOnlyContact(contact);
            return true;
        }

        public BusinessResponse<bool> DeleteContact(Contact contact)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteContactRaw(contact);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteContactRaw(Contact contact)
        {
            daoFactory.ContactDao.DeleteContact(contact);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyContact(Contact contact)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyContactRaw(contact);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyContactRaw(Contact contact)
        {
            daoFactory.ContactDao.DeletePermanentlyContact(contact);
            return true;
        }
	}
	public partial class ContactTypeService: BaseService
	{
	    public BusinessResponse<List<ContactType>> GetAllContactTypes(bool shouldRemap=false)
        {
            BusinessResponse<List<ContactType>> response = new BusinessResponse<List<ContactType>>();
		    try
		    {
			    response.Result = GetAllContactTypesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<ContactType> GetAllContactTypesRaw(bool shouldRemap=false)
        {
            return daoFactory.ContactTypeDao.GetAllContactTypes(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<ContactType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<ContactType>> response = new BusinessResponse<BaseListReturnType<ContactType>>();
		    try
		    {
			    response.Result = GetAllContactTypesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<ContactType> GetAllContactTypesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<ContactType, dynamic> orderExpression = null)
        {
            return daoFactory.ContactTypeDao.GetAllContactTypesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesWithCompany_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap=false, Func<ContactType, dynamic> orderExpression = null)
			{
				return GetAllContactTypesByPage(sortingPagingInfo, expression,new List<string>(){"Company_ContactType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesWithConcept_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap=false, Func<ContactType, dynamic> orderExpression = null)
			{
				return GetAllContactTypesByPage(sortingPagingInfo, expression,new List<string>(){"Concept_ContactType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesWithContactType1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap=false, Func<ContactType, dynamic> orderExpression = null)
			{
				return GetAllContactTypesByPage(sortingPagingInfo, expression,new List<string>(){"ContactType1"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesWithContactType2DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap=false, Func<ContactType, dynamic> orderExpression = null)
			{
				return GetAllContactTypesByPage(sortingPagingInfo, expression,new List<string>(){"ContactType2"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesWithOrderConcept_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap=false, Func<ContactType, dynamic> orderExpression = null)
			{
				return GetAllContactTypesByPage(sortingPagingInfo, expression,new List<string>(){"OrderConcept_ContactType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesWithPerson_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ContactType, bool>> expression = null,bool shouldRemap=false, Func<ContactType, dynamic> orderExpression = null)
			{
				return GetAllContactTypesByPage(sortingPagingInfo, expression,new List<string>(){"Person_ContactType"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ContactType>> response = new BusinessResponse<BaseListReturnType<ContactType>>();
            try
            {
                response.Result = GetAllContactTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ContactType> GetAllContactTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ContactTypeDao.GetAllContactTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<ContactType>> GetContactTypeListByIdList(List<long> contactTypeIds)
        {
            BusinessResponse<List<ContactType>> response = new BusinessResponse<List<ContactType>>();
            try
            {
                response.Result = GetContactTypeListByIdListRaw(contactTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<ContactType> GetContactTypeListByIdListRaw(List<long> contactTypeIds)
        {
            return daoFactory.ContactTypeDao.GetContactTypeListByIdList(contactTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesWithCompany_ContactTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ContactType>> response = new BusinessResponse<BaseListReturnType<ContactType>>();
            try
            {
                response.Result = GetAllContactTypesWithCompany_ContactTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ContactType> GetAllContactTypesWithCompany_ContactTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllContactTypeWitDetailsRaw(new List<string>() { "Company_ContactType" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesWithConcept_ContactTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ContactType>> response = new BusinessResponse<BaseListReturnType<ContactType>>();
            try
            {
                response.Result = GetAllContactTypesWithConcept_ContactTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ContactType> GetAllContactTypesWithConcept_ContactTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllContactTypeWitDetailsRaw(new List<string>() { "Concept_ContactType" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesWithContactType1Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ContactType>> response = new BusinessResponse<BaseListReturnType<ContactType>>();
            try
            {
                response.Result = GetAllContactTypesWithContactType1DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ContactType> GetAllContactTypesWithContactType1DetailsRaw(bool shouldRemap=false)
        {
            return GetAllContactTypeWitDetailsRaw(new List<string>() { "ContactType1" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesWithContactType2Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ContactType>> response = new BusinessResponse<BaseListReturnType<ContactType>>();
            try
            {
                response.Result = GetAllContactTypesWithContactType2DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ContactType> GetAllContactTypesWithContactType2DetailsRaw(bool shouldRemap=false)
        {
            return GetAllContactTypeWitDetailsRaw(new List<string>() { "ContactType2" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypeListByContactType2(long idContactType2)
        {
            BusinessResponse<BaseListReturnType<ContactType>> response = new BusinessResponse<BaseListReturnType<ContactType>>();
            try
            {
                response.Result = GetAllContactTypeListByContactType2Raw(idContactType2);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ContactType> GetAllContactTypeListByContactType2Raw(long idContactType2)
        {
            return daoFactory.ContactTypeDao.GetAllContactTypeListByContactType2(idContactType2);
        }

        public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypeListByContactType2ByPage(long idContactType2, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<ContactType>> response = new BusinessResponse<BaseListReturnType<ContactType>>();
            try
            {
                response.Result = GetAllContactTypeListByContactType2ByPageRaw(idContactType2, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ContactType> GetAllContactTypeListByContactType2ByPageRaw(long idContactType2,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.ContactTypeDao.GetAllContactTypeListByContactType2ByPage(idContactType2, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesWithOrderConcept_ContactTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ContactType>> response = new BusinessResponse<BaseListReturnType<ContactType>>();
            try
            {
                response.Result = GetAllContactTypesWithOrderConcept_ContactTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ContactType> GetAllContactTypesWithOrderConcept_ContactTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllContactTypeWitDetailsRaw(new List<string>() { "OrderConcept_ContactType" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<ContactType>> GetAllContactTypesWithPerson_ContactTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ContactType>> response = new BusinessResponse<BaseListReturnType<ContactType>>();
            try
            {
                response.Result = GetAllContactTypesWithPerson_ContactTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ContactType> GetAllContactTypesWithPerson_ContactTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllContactTypeWitDetailsRaw(new List<string>() { "Person_ContactType" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Company_ContactType>>  UpdateCompany_ContactTypeForContactTypeWithoutSavingNewItem(List<Company_ContactType> newCompany_ContactType,long idContactType)
            {
                BusinessResponse<List<Company_ContactType>> response = new BusinessResponse<List<Company_ContactType>>();
                try
                {
                    response.Result = UpdateCompany_ContactTypeForContactTypeWithoutSavingNewItemRaw(newCompany_ContactType, idContactType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Company_ContactType> UpdateCompany_ContactTypeForContactTypeWithoutSavingNewItemRaw(List<Company_ContactType> newCompany_ContactType,long idContactType)
            {
                return daoFactory.ContactTypeDao.UpdateCompany_ContactTypeForContactTypeWithoutSavingNewItem(newCompany_ContactType,idContactType); 
            }



		    public BusinessResponse<List<Company_ContactType>>  UpdateCompany_ContactTypeForContactType(List<Company_ContactType> newCompany_ContactType,long idContactType)
            {
                BusinessResponse<List<Company_ContactType>> response = new BusinessResponse<List<Company_ContactType>>();
                try
                {
                    response.Result = UpdateCompany_ContactTypeForContactTypeRaw(newCompany_ContactType, idContactType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Company_ContactType> UpdateCompany_ContactTypeForContactTypeRaw(List<Company_ContactType> newCompany_ContactType,long idContactType)
            {
                return daoFactory.ContactTypeDao.UpdateCompany_ContactTypeForContactType(newCompany_ContactType,idContactType); 
            }





		public BusinessResponse<ContactType> GetContactTypeWithCompany_ContactTypeDetails(long idContactType,bool shouldRemap=false)
        {
            BusinessResponse<ContactType> response = new BusinessResponse<ContactType>();
            try
            {
                response.Result = GetContactTypeWithCompany_ContactTypeDetailsRaw(idContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal ContactType GetContactTypeWithCompany_ContactTypeDetailsRaw(long idContactType,bool shouldRemap=false)
        {
            return GetContactTypeWitDetailsRaw(idContactType,new List<string>() { "Company_ContactType"},shouldRemap);
        }

		
			public BusinessResponse<List<Concept_ContactType>>  UpdateConcept_ContactTypeForContactTypeWithoutSavingNewItem(List<Concept_ContactType> newConcept_ContactType,long idContactType)
            {
                BusinessResponse<List<Concept_ContactType>> response = new BusinessResponse<List<Concept_ContactType>>();
                try
                {
                    response.Result = UpdateConcept_ContactTypeForContactTypeWithoutSavingNewItemRaw(newConcept_ContactType, idContactType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Concept_ContactType> UpdateConcept_ContactTypeForContactTypeWithoutSavingNewItemRaw(List<Concept_ContactType> newConcept_ContactType,long idContactType)
            {
                return daoFactory.ContactTypeDao.UpdateConcept_ContactTypeForContactTypeWithoutSavingNewItem(newConcept_ContactType,idContactType); 
            }



		    public BusinessResponse<List<Concept_ContactType>>  UpdateConcept_ContactTypeForContactType(List<Concept_ContactType> newConcept_ContactType,long idContactType)
            {
                BusinessResponse<List<Concept_ContactType>> response = new BusinessResponse<List<Concept_ContactType>>();
                try
                {
                    response.Result = UpdateConcept_ContactTypeForContactTypeRaw(newConcept_ContactType, idContactType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Concept_ContactType> UpdateConcept_ContactTypeForContactTypeRaw(List<Concept_ContactType> newConcept_ContactType,long idContactType)
            {
                return daoFactory.ContactTypeDao.UpdateConcept_ContactTypeForContactType(newConcept_ContactType,idContactType); 
            }





		public BusinessResponse<ContactType> GetContactTypeWithConcept_ContactTypeDetails(long idContactType,bool shouldRemap=false)
        {
            BusinessResponse<ContactType> response = new BusinessResponse<ContactType>();
            try
            {
                response.Result = GetContactTypeWithConcept_ContactTypeDetailsRaw(idContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal ContactType GetContactTypeWithConcept_ContactTypeDetailsRaw(long idContactType,bool shouldRemap=false)
        {
            return GetContactTypeWitDetailsRaw(idContactType,new List<string>() { "Concept_ContactType"},shouldRemap);
        }

		
			public BusinessResponse<List<ContactType>>  UpdateContactType1ForContactTypeWithoutSavingNewItem(List<ContactType> newContactType1,long idContactType)
            {
                BusinessResponse<List<ContactType>> response = new BusinessResponse<List<ContactType>>();
                try
                {
                    response.Result = UpdateContactType1ForContactTypeWithoutSavingNewItemRaw(newContactType1, idContactType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<ContactType> UpdateContactType1ForContactTypeWithoutSavingNewItemRaw(List<ContactType> newContactType1,long idContactType)
            {
                return daoFactory.ContactTypeDao.UpdateContactType1ForContactTypeWithoutSavingNewItem(newContactType1,idContactType); 
            }



		    public BusinessResponse<List<ContactType>>  UpdateContactType1ForContactType(List<ContactType> newContactType1,long idContactType)
            {
                BusinessResponse<List<ContactType>> response = new BusinessResponse<List<ContactType>>();
                try
                {
                    response.Result = UpdateContactType1ForContactTypeRaw(newContactType1, idContactType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<ContactType> UpdateContactType1ForContactTypeRaw(List<ContactType> newContactType1,long idContactType)
            {
                return daoFactory.ContactTypeDao.UpdateContactType1ForContactType(newContactType1,idContactType); 
            }





		public BusinessResponse<ContactType> GetContactTypeWithContactType1Details(long idContactType,bool shouldRemap=false)
        {
            BusinessResponse<ContactType> response = new BusinessResponse<ContactType>();
            try
            {
                response.Result = GetContactTypeWithContactType1DetailsRaw(idContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal ContactType GetContactTypeWithContactType1DetailsRaw(long idContactType,bool shouldRemap=false)
        {
            return GetContactTypeWitDetailsRaw(idContactType,new List<string>() { "ContactType1"},shouldRemap);
        }

		



		public BusinessResponse<ContactType> GetContactTypeWithContactType2Details(long idContactType,bool shouldRemap=false)
        {
            BusinessResponse<ContactType> response = new BusinessResponse<ContactType>();
            try
            {
                response.Result = GetContactTypeWithContactType2DetailsRaw(idContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal ContactType GetContactTypeWithContactType2DetailsRaw(long idContactType,bool shouldRemap=false)
        {
            return GetContactTypeWitDetailsRaw(idContactType,new List<string>() { "ContactType2"},shouldRemap);
        }

		
			public BusinessResponse<List<OrderConcept_ContactType>>  UpdateOrderConcept_ContactTypeForContactTypeWithoutSavingNewItem(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idContactType)
            {
                BusinessResponse<List<OrderConcept_ContactType>> response = new BusinessResponse<List<OrderConcept_ContactType>>();
                try
                {
                    response.Result = UpdateOrderConcept_ContactTypeForContactTypeWithoutSavingNewItemRaw(newOrderConcept_ContactType, idContactType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderConcept_ContactType> UpdateOrderConcept_ContactTypeForContactTypeWithoutSavingNewItemRaw(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idContactType)
            {
                return daoFactory.ContactTypeDao.UpdateOrderConcept_ContactTypeForContactTypeWithoutSavingNewItem(newOrderConcept_ContactType,idContactType); 
            }



		    public BusinessResponse<List<OrderConcept_ContactType>>  UpdateOrderConcept_ContactTypeForContactType(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idContactType)
            {
                BusinessResponse<List<OrderConcept_ContactType>> response = new BusinessResponse<List<OrderConcept_ContactType>>();
                try
                {
                    response.Result = UpdateOrderConcept_ContactTypeForContactTypeRaw(newOrderConcept_ContactType, idContactType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderConcept_ContactType> UpdateOrderConcept_ContactTypeForContactTypeRaw(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idContactType)
            {
                return daoFactory.ContactTypeDao.UpdateOrderConcept_ContactTypeForContactType(newOrderConcept_ContactType,idContactType); 
            }





		public BusinessResponse<ContactType> GetContactTypeWithOrderConcept_ContactTypeDetails(long idContactType,bool shouldRemap=false)
        {
            BusinessResponse<ContactType> response = new BusinessResponse<ContactType>();
            try
            {
                response.Result = GetContactTypeWithOrderConcept_ContactTypeDetailsRaw(idContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal ContactType GetContactTypeWithOrderConcept_ContactTypeDetailsRaw(long idContactType,bool shouldRemap=false)
        {
            return GetContactTypeWitDetailsRaw(idContactType,new List<string>() { "OrderConcept_ContactType"},shouldRemap);
        }

		
			public BusinessResponse<List<Person_ContactType>>  UpdatePerson_ContactTypeForContactTypeWithoutSavingNewItem(List<Person_ContactType> newPerson_ContactType,long idContactType)
            {
                BusinessResponse<List<Person_ContactType>> response = new BusinessResponse<List<Person_ContactType>>();
                try
                {
                    response.Result = UpdatePerson_ContactTypeForContactTypeWithoutSavingNewItemRaw(newPerson_ContactType, idContactType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Person_ContactType> UpdatePerson_ContactTypeForContactTypeWithoutSavingNewItemRaw(List<Person_ContactType> newPerson_ContactType,long idContactType)
            {
                return daoFactory.ContactTypeDao.UpdatePerson_ContactTypeForContactTypeWithoutSavingNewItem(newPerson_ContactType,idContactType); 
            }



		    public BusinessResponse<List<Person_ContactType>>  UpdatePerson_ContactTypeForContactType(List<Person_ContactType> newPerson_ContactType,long idContactType)
            {
                BusinessResponse<List<Person_ContactType>> response = new BusinessResponse<List<Person_ContactType>>();
                try
                {
                    response.Result = UpdatePerson_ContactTypeForContactTypeRaw(newPerson_ContactType, idContactType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Person_ContactType> UpdatePerson_ContactTypeForContactTypeRaw(List<Person_ContactType> newPerson_ContactType,long idContactType)
            {
                return daoFactory.ContactTypeDao.UpdatePerson_ContactTypeForContactType(newPerson_ContactType,idContactType); 
            }





		public BusinessResponse<ContactType> GetContactTypeWithPerson_ContactTypeDetails(long idContactType,bool shouldRemap=false)
        {
            BusinessResponse<ContactType> response = new BusinessResponse<ContactType>();
            try
            {
                response.Result = GetContactTypeWithPerson_ContactTypeDetailsRaw(idContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal ContactType GetContactTypeWithPerson_ContactTypeDetailsRaw(long idContactType,bool shouldRemap=false)
        {
            return GetContactTypeWitDetailsRaw(idContactType,new List<string>() { "Person_ContactType"},shouldRemap);
        }

		
        public BusinessResponse<ContactType> GetContactType(long idContactType,bool shouldRemap=false)
        {
            BusinessResponse<ContactType> response = new BusinessResponse<ContactType>();
		    try
		    {
			    response.Result = GetContactTypesRaw(idContactType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal ContactType GetContactTypesRaw(long idContactType,bool shouldRemap=false)
        {
            return daoFactory.ContactTypeDao.GetContactType(idContactType,shouldRemap);
        }

        
        public BusinessResponse<ContactType> GetContactTypeWitDetails(long idContactType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<ContactType> response = new BusinessResponse<ContactType>();
		    try
		    {
			    response.Result = GetContactTypeWitDetailsRaw(idContactType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal ContactType GetContactTypeWitDetailsRaw(long idContactType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ContactTypeDao.GetContactTypeWitDetails(idContactType,shouldRemap);
        }


		 public BusinessResponse<ContactType> GetContactTypeCustom( Expression<Func<ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<ContactType> response = new BusinessResponse<ContactType>();
		    try
		    {
			    response.Result = GetContactTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal ContactType GetContactTypeCustomRaw( Expression<Func<ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.ContactTypeDao.GetContactTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<ContactType>> GetContactTypeCustomList( Expression<Func<ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<ContactType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<ContactType>> response = new BusinessResponse<BaseListReturnType<ContactType>>();
		    try
		    {
			    response.Result = GetContactTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<ContactType> GetContactTypeCustomListRaw( Expression<Func<ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<ContactType, dynamic> orderExpression = null)
		{
            return daoFactory.ContactTypeDao.GetContactTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveContactType(ContactType contactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveContactTypeRaw(contactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveContactTypeRaw(ContactType contactType)
        {
            daoFactory.ContactTypeDao.SaveContactType(contactType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyContactType(ContactType contactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyContactTypeRaw(contactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyContactTypeRaw(ContactType contactType)
        {
            daoFactory.ContactTypeDao.SaveOnlyContactType(contactType);
            return true;
        }

        public BusinessResponse<bool> DeleteContactType(ContactType contactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteContactTypeRaw(contactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteContactTypeRaw(ContactType contactType)
        {
            daoFactory.ContactTypeDao.DeleteContactType(contactType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyContactType(ContactType contactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyContactTypeRaw(contactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyContactTypeRaw(ContactType contactType)
        {
            daoFactory.ContactTypeDao.DeletePermanentlyContactType(contactType);
            return true;
        }
	}
	public partial class CountryService: BaseService
	{
	    public BusinessResponse<List<Country>> GetAllCountries(bool shouldRemap=false)
        {
            BusinessResponse<List<Country>> response = new BusinessResponse<List<Country>>();
		    try
		    {
			    response.Result = GetAllCountriesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Country> GetAllCountriesRaw(bool shouldRemap=false)
        {
            return daoFactory.CountryDao.GetAllCountries(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Country>> GetAllCountriesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Country, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Country, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Country>> response = new BusinessResponse<BaseListReturnType<Country>>();
		    try
		    {
			    response.Result = GetAllCountriesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Country> GetAllCountriesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Country, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Country, dynamic> orderExpression = null)
        {
            return daoFactory.CountryDao.GetAllCountriesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Country>> GetAllCountriesWithAddressesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Country, bool>> expression = null,bool shouldRemap=false, Func<Country, dynamic> orderExpression = null)
			{
				return GetAllCountriesByPage(sortingPagingInfo, expression,new List<string>(){"Addresses"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Country>> GetAllCountriesWithCitiesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Country, bool>> expression = null,bool shouldRemap=false, Func<Country, dynamic> orderExpression = null)
			{
				return GetAllCountriesByPage(sortingPagingInfo, expression,new List<string>(){"Cities"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Country>> GetAllCountryWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Country>> response = new BusinessResponse<BaseListReturnType<Country>>();
            try
            {
                response.Result = GetAllCountryWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Country> GetAllCountryWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.CountryDao.GetAllCountryWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Country>> GetCountryListByIdList(List<long> countryIds)
        {
            BusinessResponse<List<Country>> response = new BusinessResponse<List<Country>>();
            try
            {
                response.Result = GetCountryListByIdListRaw(countryIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Country> GetCountryListByIdListRaw(List<long> countryIds)
        {
            return daoFactory.CountryDao.GetCountryListByIdList(countryIds);
        }

					
		public BusinessResponse<BaseListReturnType<Country>> GetAllCountriesWithAddressesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Country>> response = new BusinessResponse<BaseListReturnType<Country>>();
            try
            {
                response.Result = GetAllCountriesWithAddressesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Country> GetAllCountriesWithAddressesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCountryWitDetailsRaw(new List<string>() { "Addresses" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Country>> GetAllCountriesWithCitiesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Country>> response = new BusinessResponse<BaseListReturnType<Country>>();
            try
            {
                response.Result = GetAllCountriesWithCitiesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Country> GetAllCountriesWithCitiesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCountryWitDetailsRaw(new List<string>() { "Cities" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Address>>  UpdateAddressesForCountryWithoutSavingNewItem(List<Address> newAddresses,long idCountry)
            {
                BusinessResponse<List<Address>> response = new BusinessResponse<List<Address>>();
                try
                {
                    response.Result = UpdateAddressesForCountryWithoutSavingNewItemRaw(newAddresses, idCountry);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Address> UpdateAddressesForCountryWithoutSavingNewItemRaw(List<Address> newAddresses,long idCountry)
            {
                return daoFactory.CountryDao.UpdateAddressesForCountryWithoutSavingNewItem(newAddresses,idCountry); 
            }



		    public BusinessResponse<List<Address>>  UpdateAddressesForCountry(List<Address> newAddresses,long idCountry)
            {
                BusinessResponse<List<Address>> response = new BusinessResponse<List<Address>>();
                try
                {
                    response.Result = UpdateAddressesForCountryRaw(newAddresses, idCountry);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Address> UpdateAddressesForCountryRaw(List<Address> newAddresses,long idCountry)
            {
                return daoFactory.CountryDao.UpdateAddressesForCountry(newAddresses,idCountry); 
            }





		public BusinessResponse<Country> GetCountryWithAddressesDetails(long idCountry,bool shouldRemap=false)
        {
            BusinessResponse<Country> response = new BusinessResponse<Country>();
            try
            {
                response.Result = GetCountryWithAddressesDetailsRaw(idCountry,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Country GetCountryWithAddressesDetailsRaw(long idCountry,bool shouldRemap=false)
        {
            return GetCountryWitDetailsRaw(idCountry,new List<string>() { "Addresses"},shouldRemap);
        }

		
			public BusinessResponse<List<City>>  UpdateCitiesForCountryWithoutSavingNewItem(List<City> newCities,long idCountry)
            {
                BusinessResponse<List<City>> response = new BusinessResponse<List<City>>();
                try
                {
                    response.Result = UpdateCitiesForCountryWithoutSavingNewItemRaw(newCities, idCountry);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<City> UpdateCitiesForCountryWithoutSavingNewItemRaw(List<City> newCities,long idCountry)
            {
                return daoFactory.CountryDao.UpdateCitiesForCountryWithoutSavingNewItem(newCities,idCountry); 
            }



		    public BusinessResponse<List<City>>  UpdateCitiesForCountry(List<City> newCities,long idCountry)
            {
                BusinessResponse<List<City>> response = new BusinessResponse<List<City>>();
                try
                {
                    response.Result = UpdateCitiesForCountryRaw(newCities, idCountry);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<City> UpdateCitiesForCountryRaw(List<City> newCities,long idCountry)
            {
                return daoFactory.CountryDao.UpdateCitiesForCountry(newCities,idCountry); 
            }





		public BusinessResponse<Country> GetCountryWithCitiesDetails(long idCountry,bool shouldRemap=false)
        {
            BusinessResponse<Country> response = new BusinessResponse<Country>();
            try
            {
                response.Result = GetCountryWithCitiesDetailsRaw(idCountry,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Country GetCountryWithCitiesDetailsRaw(long idCountry,bool shouldRemap=false)
        {
            return GetCountryWitDetailsRaw(idCountry,new List<string>() { "Cities"},shouldRemap);
        }

		
        public BusinessResponse<Country> GetCountry(long idCountry,bool shouldRemap=false)
        {
            BusinessResponse<Country> response = new BusinessResponse<Country>();
		    try
		    {
			    response.Result = GetCountriesRaw(idCountry,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Country GetCountriesRaw(long idCountry,bool shouldRemap=false)
        {
            return daoFactory.CountryDao.GetCountry(idCountry,shouldRemap);
        }

        
        public BusinessResponse<Country> GetCountryWitDetails(long idCountry,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Country> response = new BusinessResponse<Country>();
		    try
		    {
			    response.Result = GetCountryWitDetailsRaw(idCountry,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Country GetCountryWitDetailsRaw(long idCountry,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.CountryDao.GetCountryWitDetails(idCountry,shouldRemap);
        }


		 public BusinessResponse<Country> GetCountryCustom( Expression<Func<Country, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Country> response = new BusinessResponse<Country>();
		    try
		    {
			    response.Result = GetCountryCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Country GetCountryCustomRaw( Expression<Func<Country, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.CountryDao.GetCountryCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Country>> GetCountryCustomList( Expression<Func<Country, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Country, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Country>> response = new BusinessResponse<BaseListReturnType<Country>>();
		    try
		    {
			    response.Result = GetCountryCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Country> GetCountryCustomListRaw( Expression<Func<Country, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Country, dynamic> orderExpression = null)
		{
            return daoFactory.CountryDao.GetCountryCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveCountry(Country country)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveCountryRaw(country);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveCountryRaw(Country country)
        {
            daoFactory.CountryDao.SaveCountry(country);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyCountry(Country country)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyCountryRaw(country);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyCountryRaw(Country country)
        {
            daoFactory.CountryDao.SaveOnlyCountry(country);
            return true;
        }

        public BusinessResponse<bool> DeleteCountry(Country country)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteCountryRaw(country);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteCountryRaw(Country country)
        {
            daoFactory.CountryDao.DeleteCountry(country);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyCountry(Country country)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyCountryRaw(country);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyCountryRaw(Country country)
        {
            daoFactory.CountryDao.DeletePermanentlyCountry(country);
            return true;
        }
	}
	public partial class CustomerService: BaseService
	{
	    public BusinessResponse<List<Customer>> GetAllCustomers(bool shouldRemap=false)
        {
            BusinessResponse<List<Customer>> response = new BusinessResponse<List<Customer>>();
		    try
		    {
			    response.Result = GetAllCustomersRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Customer> GetAllCustomersRaw(bool shouldRemap=false)
        {
            return daoFactory.CustomerDao.GetAllCustomers(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Customer, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
		    try
		    {
			    response.Result = GetAllCustomersByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomersByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Customer, dynamic> orderExpression = null)
        {
            return daoFactory.CustomerDao.GetAllCustomersByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersWithTransactionPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap=false, Func<Customer, dynamic> orderExpression = null)
			{
				return GetAllCustomersByPage(sortingPagingInfo, expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersWithCompanyDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap=false, Func<Customer, dynamic> orderExpression = null)
			{
				return GetAllCustomersByPage(sortingPagingInfo, expression,new List<string>(){"Company"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersWithCustomerTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap=false, Func<Customer, dynamic> orderExpression = null)
			{
				return GetAllCustomersByPage(sortingPagingInfo, expression,new List<string>(){"CustomerType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersWithConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap=false, Func<Customer, dynamic> orderExpression = null)
			{
				return GetAllCustomersByPage(sortingPagingInfo, expression,new List<string>(){"Concept"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersWithPersonDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap=false, Func<Customer, dynamic> orderExpression = null)
			{
				return GetAllCustomersByPage(sortingPagingInfo, expression,new List<string>(){"Person"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Customer, bool>> expression = null,bool shouldRemap=false, Func<Customer, dynamic> orderExpression = null)
			{
				return GetAllCustomersByPage(sortingPagingInfo, expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomerWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomerWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomerWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.CustomerDao.GetAllCustomerWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Customer>> GetCustomerListByIdList(List<long> customerIds)
        {
            BusinessResponse<List<Customer>> response = new BusinessResponse<List<Customer>>();
            try
            {
                response.Result = GetCustomerListByIdListRaw(customerIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Customer> GetCustomerListByIdListRaw(List<long> customerIds)
        {
            return daoFactory.CustomerDao.GetCustomerListByIdList(customerIds);
        }

					
		public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersWithTransactionPresetsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomersWithTransactionPresetsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomersWithTransactionPresetsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCustomerWitDetailsRaw(new List<string>() { "TransactionPresets" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersWithCompanyDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomersWithCompanyDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomersWithCompanyDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCustomerWitDetailsRaw(new List<string>() { "Company" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomerListByCompany(long idCompany)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomerListByCompanyRaw(idCompany);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomerListByCompanyRaw(long idCompany)
        {
            return daoFactory.CustomerDao.GetAllCustomerListByCompany(idCompany);
        }

        public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomerListByCompanyByPage(long idCompany, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomerListByCompanyByPageRaw(idCompany, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomerListByCompanyByPageRaw(long idCompany,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.CustomerDao.GetAllCustomerListByCompanyByPage(idCompany, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersWithCustomerTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomersWithCustomerTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomersWithCustomerTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCustomerWitDetailsRaw(new List<string>() { "CustomerType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomerListByCustomerType(long idCustomerType)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomerListByCustomerTypeRaw(idCustomerType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomerListByCustomerTypeRaw(long idCustomerType)
        {
            return daoFactory.CustomerDao.GetAllCustomerListByCustomerType(idCustomerType);
        }

        public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomerListByCustomerTypeByPage(long idCustomerType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomerListByCustomerTypeByPageRaw(idCustomerType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomerListByCustomerTypeByPageRaw(long idCustomerType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.CustomerDao.GetAllCustomerListByCustomerTypeByPage(idCustomerType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersWithConceptDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomersWithConceptDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomersWithConceptDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCustomerWitDetailsRaw(new List<string>() { "Concept" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomerListByConcept(long idConcept)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomerListByConceptRaw(idConcept);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomerListByConceptRaw(long idConcept)
        {
            return daoFactory.CustomerDao.GetAllCustomerListByConcept(idConcept);
        }

        public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomerListByConceptByPage(long idConcept, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomerListByConceptByPageRaw(idConcept, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomerListByConceptByPageRaw(long idConcept,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.CustomerDao.GetAllCustomerListByConceptByPage(idConcept, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersWithPersonDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomersWithPersonDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomersWithPersonDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCustomerWitDetailsRaw(new List<string>() { "Person" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomerListByPerson(long idPerson)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomerListByPersonRaw(idPerson);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomerListByPersonRaw(long idPerson)
        {
            return daoFactory.CustomerDao.GetAllCustomerListByPerson(idPerson);
        }

        public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomerListByPersonByPage(long idPerson, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomerListByPersonByPageRaw(idPerson, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomerListByPersonByPageRaw(long idPerson,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.CustomerDao.GetAllCustomerListByPersonByPage(idPerson, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Customer>> GetAllCustomersWithTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
            try
            {
                response.Result = GetAllCustomersWithTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Customer> GetAllCustomersWithTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCustomerWitDetailsRaw(new List<string>() { "Transactions" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<TransactionPreset>>  UpdateTransactionPresetsForCustomerWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idCustomer)
            {
                BusinessResponse<List<TransactionPreset>> response = new BusinessResponse<List<TransactionPreset>>();
                try
                {
                    response.Result = UpdateTransactionPresetsForCustomerWithoutSavingNewItemRaw(newTransactionPresets, idCustomer);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionPreset> UpdateTransactionPresetsForCustomerWithoutSavingNewItemRaw(List<TransactionPreset> newTransactionPresets,long idCustomer)
            {
                return daoFactory.CustomerDao.UpdateTransactionPresetsForCustomerWithoutSavingNewItem(newTransactionPresets,idCustomer); 
            }



		    public BusinessResponse<List<TransactionPreset>>  UpdateTransactionPresetsForCustomer(List<TransactionPreset> newTransactionPresets,long idCustomer)
            {
                BusinessResponse<List<TransactionPreset>> response = new BusinessResponse<List<TransactionPreset>>();
                try
                {
                    response.Result = UpdateTransactionPresetsForCustomerRaw(newTransactionPresets, idCustomer);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionPreset> UpdateTransactionPresetsForCustomerRaw(List<TransactionPreset> newTransactionPresets,long idCustomer)
            {
                return daoFactory.CustomerDao.UpdateTransactionPresetsForCustomer(newTransactionPresets,idCustomer); 
            }





		public BusinessResponse<Customer> GetCustomerWithTransactionPresetsDetails(long idCustomer,bool shouldRemap=false)
        {
            BusinessResponse<Customer> response = new BusinessResponse<Customer>();
            try
            {
                response.Result = GetCustomerWithTransactionPresetsDetailsRaw(idCustomer,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Customer GetCustomerWithTransactionPresetsDetailsRaw(long idCustomer,bool shouldRemap=false)
        {
            return GetCustomerWitDetailsRaw(idCustomer,new List<string>() { "TransactionPresets"},shouldRemap);
        }

		



		public BusinessResponse<Customer> GetCustomerWithCompanyDetails(long idCustomer,bool shouldRemap=false)
        {
            BusinessResponse<Customer> response = new BusinessResponse<Customer>();
            try
            {
                response.Result = GetCustomerWithCompanyDetailsRaw(idCustomer,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Customer GetCustomerWithCompanyDetailsRaw(long idCustomer,bool shouldRemap=false)
        {
            return GetCustomerWitDetailsRaw(idCustomer,new List<string>() { "Company"},shouldRemap);
        }

		



		public BusinessResponse<Customer> GetCustomerWithCustomerTypeDetails(long idCustomer,bool shouldRemap=false)
        {
            BusinessResponse<Customer> response = new BusinessResponse<Customer>();
            try
            {
                response.Result = GetCustomerWithCustomerTypeDetailsRaw(idCustomer,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Customer GetCustomerWithCustomerTypeDetailsRaw(long idCustomer,bool shouldRemap=false)
        {
            return GetCustomerWitDetailsRaw(idCustomer,new List<string>() { "CustomerType"},shouldRemap);
        }

		



		public BusinessResponse<Customer> GetCustomerWithConceptDetails(long idCustomer,bool shouldRemap=false)
        {
            BusinessResponse<Customer> response = new BusinessResponse<Customer>();
            try
            {
                response.Result = GetCustomerWithConceptDetailsRaw(idCustomer,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Customer GetCustomerWithConceptDetailsRaw(long idCustomer,bool shouldRemap=false)
        {
            return GetCustomerWitDetailsRaw(idCustomer,new List<string>() { "Concept"},shouldRemap);
        }

		



		public BusinessResponse<Customer> GetCustomerWithPersonDetails(long idCustomer,bool shouldRemap=false)
        {
            BusinessResponse<Customer> response = new BusinessResponse<Customer>();
            try
            {
                response.Result = GetCustomerWithPersonDetailsRaw(idCustomer,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Customer GetCustomerWithPersonDetailsRaw(long idCustomer,bool shouldRemap=false)
        {
            return GetCustomerWitDetailsRaw(idCustomer,new List<string>() { "Person"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction>>  UpdateTransactionsForCustomerWithoutSavingNewItem(List<Transaction> newTransactions,long idCustomer)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForCustomerWithoutSavingNewItemRaw(newTransactions, idCustomer);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForCustomerWithoutSavingNewItemRaw(List<Transaction> newTransactions,long idCustomer)
            {
                return daoFactory.CustomerDao.UpdateTransactionsForCustomerWithoutSavingNewItem(newTransactions,idCustomer); 
            }



		    public BusinessResponse<List<Transaction>>  UpdateTransactionsForCustomer(List<Transaction> newTransactions,long idCustomer)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForCustomerRaw(newTransactions, idCustomer);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForCustomerRaw(List<Transaction> newTransactions,long idCustomer)
            {
                return daoFactory.CustomerDao.UpdateTransactionsForCustomer(newTransactions,idCustomer); 
            }





		public BusinessResponse<Customer> GetCustomerWithTransactionsDetails(long idCustomer,bool shouldRemap=false)
        {
            BusinessResponse<Customer> response = new BusinessResponse<Customer>();
            try
            {
                response.Result = GetCustomerWithTransactionsDetailsRaw(idCustomer,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Customer GetCustomerWithTransactionsDetailsRaw(long idCustomer,bool shouldRemap=false)
        {
            return GetCustomerWitDetailsRaw(idCustomer,new List<string>() { "Transactions"},shouldRemap);
        }

		
        public BusinessResponse<Customer> GetCustomer(long idCustomer,bool shouldRemap=false)
        {
            BusinessResponse<Customer> response = new BusinessResponse<Customer>();
		    try
		    {
			    response.Result = GetCustomersRaw(idCustomer,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Customer GetCustomersRaw(long idCustomer,bool shouldRemap=false)
        {
            return daoFactory.CustomerDao.GetCustomer(idCustomer,shouldRemap);
        }

        
        public BusinessResponse<Customer> GetCustomerWitDetails(long idCustomer,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Customer> response = new BusinessResponse<Customer>();
		    try
		    {
			    response.Result = GetCustomerWitDetailsRaw(idCustomer,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Customer GetCustomerWitDetailsRaw(long idCustomer,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.CustomerDao.GetCustomerWitDetails(idCustomer,shouldRemap);
        }


		 public BusinessResponse<Customer> GetCustomerCustom( Expression<Func<Customer, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Customer> response = new BusinessResponse<Customer>();
		    try
		    {
			    response.Result = GetCustomerCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Customer GetCustomerCustomRaw( Expression<Func<Customer, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.CustomerDao.GetCustomerCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Customer>> GetCustomerCustomList( Expression<Func<Customer, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Customer, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Customer>> response = new BusinessResponse<BaseListReturnType<Customer>>();
		    try
		    {
			    response.Result = GetCustomerCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Customer> GetCustomerCustomListRaw( Expression<Func<Customer, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Customer, dynamic> orderExpression = null)
		{
            return daoFactory.CustomerDao.GetCustomerCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveCustomer(Customer customer)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveCustomerRaw(customer);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveCustomerRaw(Customer customer)
        {
            daoFactory.CustomerDao.SaveCustomer(customer);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyCustomer(Customer customer)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyCustomerRaw(customer);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyCustomerRaw(Customer customer)
        {
            daoFactory.CustomerDao.SaveOnlyCustomer(customer);
            return true;
        }

        public BusinessResponse<bool> DeleteCustomer(Customer customer)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteCustomerRaw(customer);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteCustomerRaw(Customer customer)
        {
            daoFactory.CustomerDao.DeleteCustomer(customer);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyCustomer(Customer customer)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyCustomerRaw(customer);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyCustomerRaw(Customer customer)
        {
            daoFactory.CustomerDao.DeletePermanentlyCustomer(customer);
            return true;
        }
	}
	public partial class CustomerTypeService: BaseService
	{
	    public BusinessResponse<List<CustomerType>> GetAllCustomerTypes(bool shouldRemap=false)
        {
            BusinessResponse<List<CustomerType>> response = new BusinessResponse<List<CustomerType>>();
		    try
		    {
			    response.Result = GetAllCustomerTypesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<CustomerType> GetAllCustomerTypesRaw(bool shouldRemap=false)
        {
            return daoFactory.CustomerTypeDao.GetAllCustomerTypes(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<CustomerType>> GetAllCustomerTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CustomerType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<CustomerType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<CustomerType>> response = new BusinessResponse<BaseListReturnType<CustomerType>>();
		    try
		    {
			    response.Result = GetAllCustomerTypesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<CustomerType> GetAllCustomerTypesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CustomerType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<CustomerType, dynamic> orderExpression = null)
        {
            return daoFactory.CustomerTypeDao.GetAllCustomerTypesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<CustomerType>> GetAllCustomerTypesWithCustomersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<CustomerType, bool>> expression = null,bool shouldRemap=false, Func<CustomerType, dynamic> orderExpression = null)
			{
				return GetAllCustomerTypesByPage(sortingPagingInfo, expression,new List<string>(){"Customers"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<CustomerType>> GetAllCustomerTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<CustomerType>> response = new BusinessResponse<BaseListReturnType<CustomerType>>();
            try
            {
                response.Result = GetAllCustomerTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<CustomerType> GetAllCustomerTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.CustomerTypeDao.GetAllCustomerTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<CustomerType>> GetCustomerTypeListByIdList(List<long> customerTypeIds)
        {
            BusinessResponse<List<CustomerType>> response = new BusinessResponse<List<CustomerType>>();
            try
            {
                response.Result = GetCustomerTypeListByIdListRaw(customerTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<CustomerType> GetCustomerTypeListByIdListRaw(List<long> customerTypeIds)
        {
            return daoFactory.CustomerTypeDao.GetCustomerTypeListByIdList(customerTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<CustomerType>> GetAllCustomerTypesWithCustomersDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<CustomerType>> response = new BusinessResponse<BaseListReturnType<CustomerType>>();
            try
            {
                response.Result = GetAllCustomerTypesWithCustomersDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<CustomerType> GetAllCustomerTypesWithCustomersDetailsRaw(bool shouldRemap=false)
        {
            return GetAllCustomerTypeWitDetailsRaw(new List<string>() { "Customers" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Customer>>  UpdateCustomersForCustomerTypeWithoutSavingNewItem(List<Customer> newCustomers,long idCustomerType)
            {
                BusinessResponse<List<Customer>> response = new BusinessResponse<List<Customer>>();
                try
                {
                    response.Result = UpdateCustomersForCustomerTypeWithoutSavingNewItemRaw(newCustomers, idCustomerType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Customer> UpdateCustomersForCustomerTypeWithoutSavingNewItemRaw(List<Customer> newCustomers,long idCustomerType)
            {
                return daoFactory.CustomerTypeDao.UpdateCustomersForCustomerTypeWithoutSavingNewItem(newCustomers,idCustomerType); 
            }



		    public BusinessResponse<List<Customer>>  UpdateCustomersForCustomerType(List<Customer> newCustomers,long idCustomerType)
            {
                BusinessResponse<List<Customer>> response = new BusinessResponse<List<Customer>>();
                try
                {
                    response.Result = UpdateCustomersForCustomerTypeRaw(newCustomers, idCustomerType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Customer> UpdateCustomersForCustomerTypeRaw(List<Customer> newCustomers,long idCustomerType)
            {
                return daoFactory.CustomerTypeDao.UpdateCustomersForCustomerType(newCustomers,idCustomerType); 
            }





		public BusinessResponse<CustomerType> GetCustomerTypeWithCustomersDetails(long idCustomerType,bool shouldRemap=false)
        {
            BusinessResponse<CustomerType> response = new BusinessResponse<CustomerType>();
            try
            {
                response.Result = GetCustomerTypeWithCustomersDetailsRaw(idCustomerType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal CustomerType GetCustomerTypeWithCustomersDetailsRaw(long idCustomerType,bool shouldRemap=false)
        {
            return GetCustomerTypeWitDetailsRaw(idCustomerType,new List<string>() { "Customers"},shouldRemap);
        }

		
        public BusinessResponse<CustomerType> GetCustomerType(long idCustomerType,bool shouldRemap=false)
        {
            BusinessResponse<CustomerType> response = new BusinessResponse<CustomerType>();
		    try
		    {
			    response.Result = GetCustomerTypesRaw(idCustomerType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal CustomerType GetCustomerTypesRaw(long idCustomerType,bool shouldRemap=false)
        {
            return daoFactory.CustomerTypeDao.GetCustomerType(idCustomerType,shouldRemap);
        }

        
        public BusinessResponse<CustomerType> GetCustomerTypeWitDetails(long idCustomerType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<CustomerType> response = new BusinessResponse<CustomerType>();
		    try
		    {
			    response.Result = GetCustomerTypeWitDetailsRaw(idCustomerType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal CustomerType GetCustomerTypeWitDetailsRaw(long idCustomerType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.CustomerTypeDao.GetCustomerTypeWitDetails(idCustomerType,shouldRemap);
        }


		 public BusinessResponse<CustomerType> GetCustomerTypeCustom( Expression<Func<CustomerType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<CustomerType> response = new BusinessResponse<CustomerType>();
		    try
		    {
			    response.Result = GetCustomerTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal CustomerType GetCustomerTypeCustomRaw( Expression<Func<CustomerType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.CustomerTypeDao.GetCustomerTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<CustomerType>> GetCustomerTypeCustomList( Expression<Func<CustomerType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<CustomerType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<CustomerType>> response = new BusinessResponse<BaseListReturnType<CustomerType>>();
		    try
		    {
			    response.Result = GetCustomerTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<CustomerType> GetCustomerTypeCustomListRaw( Expression<Func<CustomerType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<CustomerType, dynamic> orderExpression = null)
		{
            return daoFactory.CustomerTypeDao.GetCustomerTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveCustomerType(CustomerType customerType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveCustomerTypeRaw(customerType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveCustomerTypeRaw(CustomerType customerType)
        {
            daoFactory.CustomerTypeDao.SaveCustomerType(customerType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyCustomerType(CustomerType customerType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyCustomerTypeRaw(customerType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyCustomerTypeRaw(CustomerType customerType)
        {
            daoFactory.CustomerTypeDao.SaveOnlyCustomerType(customerType);
            return true;
        }

        public BusinessResponse<bool> DeleteCustomerType(CustomerType customerType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteCustomerTypeRaw(customerType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteCustomerTypeRaw(CustomerType customerType)
        {
            daoFactory.CustomerTypeDao.DeleteCustomerType(customerType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyCustomerType(CustomerType customerType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyCustomerTypeRaw(customerType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyCustomerTypeRaw(CustomerType customerType)
        {
            daoFactory.CustomerTypeDao.DeletePermanentlyCustomerType(customerType);
            return true;
        }
	}
	public partial class DocumentService: BaseService
	{
	    public BusinessResponse<List<Document>> GetAllDocuments(bool shouldRemap=false)
        {
            BusinessResponse<List<Document>> response = new BusinessResponse<List<Document>>();
		    try
		    {
			    response.Result = GetAllDocumentsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Document> GetAllDocumentsRaw(bool shouldRemap=false)
        {
            return daoFactory.DocumentDao.GetAllDocuments(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Document, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
		    try
		    {
			    response.Result = GetAllDocumentsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Document, dynamic> orderExpression = null)
        {
            return daoFactory.DocumentDao.GetAllDocumentsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithBankStatementStagingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap=false, Func<Document, dynamic> orderExpression = null)
			{
				return GetAllDocumentsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithCompaniesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap=false, Func<Document, dynamic> orderExpression = null)
			{
				return GetAllDocumentsByPage(sortingPagingInfo, expression,new List<string>(){"Companies"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithDocumentTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap=false, Func<Document, dynamic> orderExpression = null)
			{
				return GetAllDocumentsByPage(sortingPagingInfo, expression,new List<string>(){"DocumentType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithParameterDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap=false, Func<Document, dynamic> orderExpression = null)
			{
				return GetAllDocumentsByPage(sortingPagingInfo, expression,new List<string>(){"Parameter"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithParameter1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap=false, Func<Document, dynamic> orderExpression = null)
			{
				return GetAllDocumentsByPage(sortingPagingInfo, expression,new List<string>(){"Parameter1"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithTemporaryTransactionOrdersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap=false, Func<Document, dynamic> orderExpression = null)
			{
				return GetAllDocumentsByPage(sortingPagingInfo, expression,new List<string>(){"TemporaryTransactionOrders"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Document, bool>> expression = null,bool shouldRemap=false, Func<Document, dynamic> orderExpression = null)
			{
				return GetAllDocumentsByPage(sortingPagingInfo, expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.DocumentDao.GetAllDocumentWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Document>> GetDocumentListByIdList(List<long> documentIds)
        {
            BusinessResponse<List<Document>> response = new BusinessResponse<List<Document>>();
            try
            {
                response.Result = GetDocumentListByIdListRaw(documentIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Document> GetDocumentListByIdListRaw(List<long> documentIds)
        {
            return daoFactory.DocumentDao.GetDocumentListByIdList(documentIds);
        }

					
		public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithBankStatementStagingsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentsWithBankStatementStagingsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentsWithBankStatementStagingsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllDocumentWitDetailsRaw(new List<string>() { "BankStatementStagings" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithCompaniesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentsWithCompaniesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentsWithCompaniesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllDocumentWitDetailsRaw(new List<string>() { "Companies" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithDocumentTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentsWithDocumentTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentsWithDocumentTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllDocumentWitDetailsRaw(new List<string>() { "DocumentType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentListByDocumentType(long idDocumentType)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentListByDocumentTypeRaw(idDocumentType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentListByDocumentTypeRaw(long idDocumentType)
        {
            return daoFactory.DocumentDao.GetAllDocumentListByDocumentType(idDocumentType);
        }

        public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentListByDocumentTypeByPage(long idDocumentType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentListByDocumentTypeByPageRaw(idDocumentType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentListByDocumentTypeByPageRaw(long idDocumentType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.DocumentDao.GetAllDocumentListByDocumentTypeByPage(idDocumentType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithParameterDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentsWithParameterDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentsWithParameterDetailsRaw(bool shouldRemap=false)
        {
            return GetAllDocumentWitDetailsRaw(new List<string>() { "Parameter" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentListByParameter(long idParameter)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentListByParameterRaw(idParameter);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentListByParameterRaw(long idParameter)
        {
            return daoFactory.DocumentDao.GetAllDocumentListByParameter(idParameter);
        }

        public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentListByParameterByPage(long idParameter, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentListByParameterByPageRaw(idParameter, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentListByParameterByPageRaw(long idParameter,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.DocumentDao.GetAllDocumentListByParameterByPage(idParameter, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithParameter1Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentsWithParameter1DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentsWithParameter1DetailsRaw(bool shouldRemap=false)
        {
            return GetAllDocumentWitDetailsRaw(new List<string>() { "Parameter1" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentListByParameter1(long idParameter1)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentListByParameter1Raw(idParameter1);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentListByParameter1Raw(long idParameter1)
        {
            return daoFactory.DocumentDao.GetAllDocumentListByParameter1(idParameter1);
        }

        public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentListByParameter1ByPage(long idParameter1, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentListByParameter1ByPageRaw(idParameter1, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentListByParameter1ByPageRaw(long idParameter1,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.DocumentDao.GetAllDocumentListByParameter1ByPage(idParameter1, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithTemporaryTransactionOrdersDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentsWithTemporaryTransactionOrdersDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentsWithTemporaryTransactionOrdersDetailsRaw(bool shouldRemap=false)
        {
            return GetAllDocumentWitDetailsRaw(new List<string>() { "TemporaryTransactionOrders" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Document>> GetAllDocumentsWithTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
            try
            {
                response.Result = GetAllDocumentsWithTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Document> GetAllDocumentsWithTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllDocumentWitDetailsRaw(new List<string>() { "Transactions" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<BankStatementStaging>>  UpdateBankStatementStagingsForDocumentWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idDocument)
            {
                BusinessResponse<List<BankStatementStaging>> response = new BusinessResponse<List<BankStatementStaging>>();
                try
                {
                    response.Result = UpdateBankStatementStagingsForDocumentWithoutSavingNewItemRaw(newBankStatementStagings, idDocument);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStaging> UpdateBankStatementStagingsForDocumentWithoutSavingNewItemRaw(List<BankStatementStaging> newBankStatementStagings,long idDocument)
            {
                return daoFactory.DocumentDao.UpdateBankStatementStagingsForDocumentWithoutSavingNewItem(newBankStatementStagings,idDocument); 
            }



		    public BusinessResponse<List<BankStatementStaging>>  UpdateBankStatementStagingsForDocument(List<BankStatementStaging> newBankStatementStagings,long idDocument)
            {
                BusinessResponse<List<BankStatementStaging>> response = new BusinessResponse<List<BankStatementStaging>>();
                try
                {
                    response.Result = UpdateBankStatementStagingsForDocumentRaw(newBankStatementStagings, idDocument);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStaging> UpdateBankStatementStagingsForDocumentRaw(List<BankStatementStaging> newBankStatementStagings,long idDocument)
            {
                return daoFactory.DocumentDao.UpdateBankStatementStagingsForDocument(newBankStatementStagings,idDocument); 
            }





		public BusinessResponse<Document> GetDocumentWithBankStatementStagingsDetails(long idDocument,bool shouldRemap=false)
        {
            BusinessResponse<Document> response = new BusinessResponse<Document>();
            try
            {
                response.Result = GetDocumentWithBankStatementStagingsDetailsRaw(idDocument,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Document GetDocumentWithBankStatementStagingsDetailsRaw(long idDocument,bool shouldRemap=false)
        {
            return GetDocumentWitDetailsRaw(idDocument,new List<string>() { "BankStatementStagings"},shouldRemap);
        }

		
			public BusinessResponse<List<Company>>  UpdateCompaniesForDocumentWithoutSavingNewItem(List<Company> newCompanies,long idDocument)
            {
                BusinessResponse<List<Company>> response = new BusinessResponse<List<Company>>();
                try
                {
                    response.Result = UpdateCompaniesForDocumentWithoutSavingNewItemRaw(newCompanies, idDocument);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Company> UpdateCompaniesForDocumentWithoutSavingNewItemRaw(List<Company> newCompanies,long idDocument)
            {
                return daoFactory.DocumentDao.UpdateCompaniesForDocumentWithoutSavingNewItem(newCompanies,idDocument); 
            }



		    public BusinessResponse<List<Company>>  UpdateCompaniesForDocument(List<Company> newCompanies,long idDocument)
            {
                BusinessResponse<List<Company>> response = new BusinessResponse<List<Company>>();
                try
                {
                    response.Result = UpdateCompaniesForDocumentRaw(newCompanies, idDocument);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Company> UpdateCompaniesForDocumentRaw(List<Company> newCompanies,long idDocument)
            {
                return daoFactory.DocumentDao.UpdateCompaniesForDocument(newCompanies,idDocument); 
            }





		public BusinessResponse<Document> GetDocumentWithCompaniesDetails(long idDocument,bool shouldRemap=false)
        {
            BusinessResponse<Document> response = new BusinessResponse<Document>();
            try
            {
                response.Result = GetDocumentWithCompaniesDetailsRaw(idDocument,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Document GetDocumentWithCompaniesDetailsRaw(long idDocument,bool shouldRemap=false)
        {
            return GetDocumentWitDetailsRaw(idDocument,new List<string>() { "Companies"},shouldRemap);
        }

		



		public BusinessResponse<Document> GetDocumentWithDocumentTypeDetails(long idDocument,bool shouldRemap=false)
        {
            BusinessResponse<Document> response = new BusinessResponse<Document>();
            try
            {
                response.Result = GetDocumentWithDocumentTypeDetailsRaw(idDocument,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Document GetDocumentWithDocumentTypeDetailsRaw(long idDocument,bool shouldRemap=false)
        {
            return GetDocumentWitDetailsRaw(idDocument,new List<string>() { "DocumentType"},shouldRemap);
        }

		



		public BusinessResponse<Document> GetDocumentWithParameterDetails(long idDocument,bool shouldRemap=false)
        {
            BusinessResponse<Document> response = new BusinessResponse<Document>();
            try
            {
                response.Result = GetDocumentWithParameterDetailsRaw(idDocument,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Document GetDocumentWithParameterDetailsRaw(long idDocument,bool shouldRemap=false)
        {
            return GetDocumentWitDetailsRaw(idDocument,new List<string>() { "Parameter"},shouldRemap);
        }

		



		public BusinessResponse<Document> GetDocumentWithParameter1Details(long idDocument,bool shouldRemap=false)
        {
            BusinessResponse<Document> response = new BusinessResponse<Document>();
            try
            {
                response.Result = GetDocumentWithParameter1DetailsRaw(idDocument,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Document GetDocumentWithParameter1DetailsRaw(long idDocument,bool shouldRemap=false)
        {
            return GetDocumentWitDetailsRaw(idDocument,new List<string>() { "Parameter1"},shouldRemap);
        }

		
			public BusinessResponse<List<TemporaryTransactionOrder>>  UpdateTemporaryTransactionOrdersForDocumentWithoutSavingNewItem(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idDocument)
            {
                BusinessResponse<List<TemporaryTransactionOrder>> response = new BusinessResponse<List<TemporaryTransactionOrder>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionOrdersForDocumentWithoutSavingNewItemRaw(newTemporaryTransactionOrders, idDocument);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransactionOrder> UpdateTemporaryTransactionOrdersForDocumentWithoutSavingNewItemRaw(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idDocument)
            {
                return daoFactory.DocumentDao.UpdateTemporaryTransactionOrdersForDocumentWithoutSavingNewItem(newTemporaryTransactionOrders,idDocument); 
            }



		    public BusinessResponse<List<TemporaryTransactionOrder>>  UpdateTemporaryTransactionOrdersForDocument(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idDocument)
            {
                BusinessResponse<List<TemporaryTransactionOrder>> response = new BusinessResponse<List<TemporaryTransactionOrder>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionOrdersForDocumentRaw(newTemporaryTransactionOrders, idDocument);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransactionOrder> UpdateTemporaryTransactionOrdersForDocumentRaw(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idDocument)
            {
                return daoFactory.DocumentDao.UpdateTemporaryTransactionOrdersForDocument(newTemporaryTransactionOrders,idDocument); 
            }





		public BusinessResponse<Document> GetDocumentWithTemporaryTransactionOrdersDetails(long idDocument,bool shouldRemap=false)
        {
            BusinessResponse<Document> response = new BusinessResponse<Document>();
            try
            {
                response.Result = GetDocumentWithTemporaryTransactionOrdersDetailsRaw(idDocument,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Document GetDocumentWithTemporaryTransactionOrdersDetailsRaw(long idDocument,bool shouldRemap=false)
        {
            return GetDocumentWitDetailsRaw(idDocument,new List<string>() { "TemporaryTransactionOrders"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction>>  UpdateTransactionsForDocumentWithoutSavingNewItem(List<Transaction> newTransactions,long idDocument)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForDocumentWithoutSavingNewItemRaw(newTransactions, idDocument);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForDocumentWithoutSavingNewItemRaw(List<Transaction> newTransactions,long idDocument)
            {
                return daoFactory.DocumentDao.UpdateTransactionsForDocumentWithoutSavingNewItem(newTransactions,idDocument); 
            }



		    public BusinessResponse<List<Transaction>>  UpdateTransactionsForDocument(List<Transaction> newTransactions,long idDocument)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForDocumentRaw(newTransactions, idDocument);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForDocumentRaw(List<Transaction> newTransactions,long idDocument)
            {
                return daoFactory.DocumentDao.UpdateTransactionsForDocument(newTransactions,idDocument); 
            }





		public BusinessResponse<Document> GetDocumentWithTransactionsDetails(long idDocument,bool shouldRemap=false)
        {
            BusinessResponse<Document> response = new BusinessResponse<Document>();
            try
            {
                response.Result = GetDocumentWithTransactionsDetailsRaw(idDocument,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Document GetDocumentWithTransactionsDetailsRaw(long idDocument,bool shouldRemap=false)
        {
            return GetDocumentWitDetailsRaw(idDocument,new List<string>() { "Transactions"},shouldRemap);
        }

		
        public BusinessResponse<Document> GetDocument(long idDocument,bool shouldRemap=false)
        {
            BusinessResponse<Document> response = new BusinessResponse<Document>();
		    try
		    {
			    response.Result = GetDocumentsRaw(idDocument,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Document GetDocumentsRaw(long idDocument,bool shouldRemap=false)
        {
            return daoFactory.DocumentDao.GetDocument(idDocument,shouldRemap);
        }

        
        public BusinessResponse<Document> GetDocumentWitDetails(long idDocument,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Document> response = new BusinessResponse<Document>();
		    try
		    {
			    response.Result = GetDocumentWitDetailsRaw(idDocument,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Document GetDocumentWitDetailsRaw(long idDocument,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.DocumentDao.GetDocumentWitDetails(idDocument,shouldRemap);
        }


		 public BusinessResponse<Document> GetDocumentCustom( Expression<Func<Document, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Document> response = new BusinessResponse<Document>();
		    try
		    {
			    response.Result = GetDocumentCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Document GetDocumentCustomRaw( Expression<Func<Document, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.DocumentDao.GetDocumentCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Document>> GetDocumentCustomList( Expression<Func<Document, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Document, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Document>> response = new BusinessResponse<BaseListReturnType<Document>>();
		    try
		    {
			    response.Result = GetDocumentCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Document> GetDocumentCustomListRaw( Expression<Func<Document, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Document, dynamic> orderExpression = null)
		{
            return daoFactory.DocumentDao.GetDocumentCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveDocument(Document document)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveDocumentRaw(document);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveDocumentRaw(Document document)
        {
            daoFactory.DocumentDao.SaveDocument(document);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyDocument(Document document)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyDocumentRaw(document);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyDocumentRaw(Document document)
        {
            daoFactory.DocumentDao.SaveOnlyDocument(document);
            return true;
        }

        public BusinessResponse<bool> DeleteDocument(Document document)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteDocumentRaw(document);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteDocumentRaw(Document document)
        {
            daoFactory.DocumentDao.DeleteDocument(document);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyDocument(Document document)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyDocumentRaw(document);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyDocumentRaw(Document document)
        {
            daoFactory.DocumentDao.DeletePermanentlyDocument(document);
            return true;
        }
	}
	public partial class DocumentTypeService: BaseService
	{
	    public BusinessResponse<List<DocumentType>> GetAllDocumentTypes(bool shouldRemap=false)
        {
            BusinessResponse<List<DocumentType>> response = new BusinessResponse<List<DocumentType>>();
		    try
		    {
			    response.Result = GetAllDocumentTypesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<DocumentType> GetAllDocumentTypesRaw(bool shouldRemap=false)
        {
            return daoFactory.DocumentTypeDao.GetAllDocumentTypes(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<DocumentType>> GetAllDocumentTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<DocumentType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<DocumentType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<DocumentType>> response = new BusinessResponse<BaseListReturnType<DocumentType>>();
		    try
		    {
			    response.Result = GetAllDocumentTypesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<DocumentType> GetAllDocumentTypesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<DocumentType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<DocumentType, dynamic> orderExpression = null)
        {
            return daoFactory.DocumentTypeDao.GetAllDocumentTypesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<DocumentType>> GetAllDocumentTypesWithDocumentsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<DocumentType, bool>> expression = null,bool shouldRemap=false, Func<DocumentType, dynamic> orderExpression = null)
			{
				return GetAllDocumentTypesByPage(sortingPagingInfo, expression,new List<string>(){"Documents"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<DocumentType>> GetAllDocumentTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<DocumentType>> response = new BusinessResponse<BaseListReturnType<DocumentType>>();
            try
            {
                response.Result = GetAllDocumentTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<DocumentType> GetAllDocumentTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.DocumentTypeDao.GetAllDocumentTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<DocumentType>> GetDocumentTypeListByIdList(List<long> documentTypeIds)
        {
            BusinessResponse<List<DocumentType>> response = new BusinessResponse<List<DocumentType>>();
            try
            {
                response.Result = GetDocumentTypeListByIdListRaw(documentTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<DocumentType> GetDocumentTypeListByIdListRaw(List<long> documentTypeIds)
        {
            return daoFactory.DocumentTypeDao.GetDocumentTypeListByIdList(documentTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<DocumentType>> GetAllDocumentTypesWithDocumentsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<DocumentType>> response = new BusinessResponse<BaseListReturnType<DocumentType>>();
            try
            {
                response.Result = GetAllDocumentTypesWithDocumentsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<DocumentType> GetAllDocumentTypesWithDocumentsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllDocumentTypeWitDetailsRaw(new List<string>() { "Documents" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Document>>  UpdateDocumentsForDocumentTypeWithoutSavingNewItem(List<Document> newDocuments,long idDocumentType)
            {
                BusinessResponse<List<Document>> response = new BusinessResponse<List<Document>>();
                try
                {
                    response.Result = UpdateDocumentsForDocumentTypeWithoutSavingNewItemRaw(newDocuments, idDocumentType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Document> UpdateDocumentsForDocumentTypeWithoutSavingNewItemRaw(List<Document> newDocuments,long idDocumentType)
            {
                return daoFactory.DocumentTypeDao.UpdateDocumentsForDocumentTypeWithoutSavingNewItem(newDocuments,idDocumentType); 
            }



		    public BusinessResponse<List<Document>>  UpdateDocumentsForDocumentType(List<Document> newDocuments,long idDocumentType)
            {
                BusinessResponse<List<Document>> response = new BusinessResponse<List<Document>>();
                try
                {
                    response.Result = UpdateDocumentsForDocumentTypeRaw(newDocuments, idDocumentType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Document> UpdateDocumentsForDocumentTypeRaw(List<Document> newDocuments,long idDocumentType)
            {
                return daoFactory.DocumentTypeDao.UpdateDocumentsForDocumentType(newDocuments,idDocumentType); 
            }





		public BusinessResponse<DocumentType> GetDocumentTypeWithDocumentsDetails(long idDocumentType,bool shouldRemap=false)
        {
            BusinessResponse<DocumentType> response = new BusinessResponse<DocumentType>();
            try
            {
                response.Result = GetDocumentTypeWithDocumentsDetailsRaw(idDocumentType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal DocumentType GetDocumentTypeWithDocumentsDetailsRaw(long idDocumentType,bool shouldRemap=false)
        {
            return GetDocumentTypeWitDetailsRaw(idDocumentType,new List<string>() { "Documents"},shouldRemap);
        }

		
        public BusinessResponse<DocumentType> GetDocumentType(long idDocumentType,bool shouldRemap=false)
        {
            BusinessResponse<DocumentType> response = new BusinessResponse<DocumentType>();
		    try
		    {
			    response.Result = GetDocumentTypesRaw(idDocumentType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal DocumentType GetDocumentTypesRaw(long idDocumentType,bool shouldRemap=false)
        {
            return daoFactory.DocumentTypeDao.GetDocumentType(idDocumentType,shouldRemap);
        }

        
        public BusinessResponse<DocumentType> GetDocumentTypeWitDetails(long idDocumentType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<DocumentType> response = new BusinessResponse<DocumentType>();
		    try
		    {
			    response.Result = GetDocumentTypeWitDetailsRaw(idDocumentType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal DocumentType GetDocumentTypeWitDetailsRaw(long idDocumentType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.DocumentTypeDao.GetDocumentTypeWitDetails(idDocumentType,shouldRemap);
        }


		 public BusinessResponse<DocumentType> GetDocumentTypeCustom( Expression<Func<DocumentType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<DocumentType> response = new BusinessResponse<DocumentType>();
		    try
		    {
			    response.Result = GetDocumentTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal DocumentType GetDocumentTypeCustomRaw( Expression<Func<DocumentType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.DocumentTypeDao.GetDocumentTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<DocumentType>> GetDocumentTypeCustomList( Expression<Func<DocumentType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<DocumentType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<DocumentType>> response = new BusinessResponse<BaseListReturnType<DocumentType>>();
		    try
		    {
			    response.Result = GetDocumentTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<DocumentType> GetDocumentTypeCustomListRaw( Expression<Func<DocumentType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<DocumentType, dynamic> orderExpression = null)
		{
            return daoFactory.DocumentTypeDao.GetDocumentTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveDocumentType(DocumentType documentType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveDocumentTypeRaw(documentType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveDocumentTypeRaw(DocumentType documentType)
        {
            daoFactory.DocumentTypeDao.SaveDocumentType(documentType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyDocumentType(DocumentType documentType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyDocumentTypeRaw(documentType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyDocumentTypeRaw(DocumentType documentType)
        {
            daoFactory.DocumentTypeDao.SaveOnlyDocumentType(documentType);
            return true;
        }

        public BusinessResponse<bool> DeleteDocumentType(DocumentType documentType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteDocumentTypeRaw(documentType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteDocumentTypeRaw(DocumentType documentType)
        {
            daoFactory.DocumentTypeDao.DeleteDocumentType(documentType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyDocumentType(DocumentType documentType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyDocumentTypeRaw(documentType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyDocumentTypeRaw(DocumentType documentType)
        {
            daoFactory.DocumentTypeDao.DeletePermanentlyDocumentType(documentType);
            return true;
        }
	}
	public partial class EndTypeService: BaseService
	{
	    public BusinessResponse<List<EndType>> GetAllEndTypes(bool shouldRemap=false)
        {
            BusinessResponse<List<EndType>> response = new BusinessResponse<List<EndType>>();
		    try
		    {
			    response.Result = GetAllEndTypesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<EndType> GetAllEndTypesRaw(bool shouldRemap=false)
        {
            return daoFactory.EndTypeDao.GetAllEndTypes(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<EndType>> GetAllEndTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<EndType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<EndType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<EndType>> response = new BusinessResponse<BaseListReturnType<EndType>>();
		    try
		    {
			    response.Result = GetAllEndTypesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<EndType> GetAllEndTypesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<EndType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<EndType, dynamic> orderExpression = null)
        {
            return daoFactory.EndTypeDao.GetAllEndTypesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

		
		public BusinessResponse<BaseListReturnType<EndType>> GetAllEndTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<EndType>> response = new BusinessResponse<BaseListReturnType<EndType>>();
            try
            {
                response.Result = GetAllEndTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<EndType> GetAllEndTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.EndTypeDao.GetAllEndTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<EndType>> GetEndTypeListByIdList(List<long> endTypeIds)
        {
            BusinessResponse<List<EndType>> response = new BusinessResponse<List<EndType>>();
            try
            {
                response.Result = GetEndTypeListByIdListRaw(endTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<EndType> GetEndTypeListByIdListRaw(List<long> endTypeIds)
        {
            return daoFactory.EndTypeDao.GetEndTypeListByIdList(endTypeIds);
        }

		
		
        public BusinessResponse<EndType> GetEndType(long idEndType,bool shouldRemap=false)
        {
            BusinessResponse<EndType> response = new BusinessResponse<EndType>();
		    try
		    {
			    response.Result = GetEndTypesRaw(idEndType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal EndType GetEndTypesRaw(long idEndType,bool shouldRemap=false)
        {
            return daoFactory.EndTypeDao.GetEndType(idEndType,shouldRemap);
        }

        
        public BusinessResponse<EndType> GetEndTypeWitDetails(long idEndType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<EndType> response = new BusinessResponse<EndType>();
		    try
		    {
			    response.Result = GetEndTypeWitDetailsRaw(idEndType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal EndType GetEndTypeWitDetailsRaw(long idEndType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.EndTypeDao.GetEndTypeWitDetails(idEndType,shouldRemap);
        }


		 public BusinessResponse<EndType> GetEndTypeCustom( Expression<Func<EndType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<EndType> response = new BusinessResponse<EndType>();
		    try
		    {
			    response.Result = GetEndTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal EndType GetEndTypeCustomRaw( Expression<Func<EndType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.EndTypeDao.GetEndTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<EndType>> GetEndTypeCustomList( Expression<Func<EndType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<EndType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<EndType>> response = new BusinessResponse<BaseListReturnType<EndType>>();
		    try
		    {
			    response.Result = GetEndTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<EndType> GetEndTypeCustomListRaw( Expression<Func<EndType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<EndType, dynamic> orderExpression = null)
		{
            return daoFactory.EndTypeDao.GetEndTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveEndType(EndType endType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveEndTypeRaw(endType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveEndTypeRaw(EndType endType)
        {
            daoFactory.EndTypeDao.SaveEndType(endType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyEndType(EndType endType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyEndTypeRaw(endType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyEndTypeRaw(EndType endType)
        {
            daoFactory.EndTypeDao.SaveOnlyEndType(endType);
            return true;
        }

        public BusinessResponse<bool> DeleteEndType(EndType endType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteEndTypeRaw(endType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteEndTypeRaw(EndType endType)
        {
            daoFactory.EndTypeDao.DeleteEndType(endType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyEndType(EndType endType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyEndTypeRaw(endType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyEndTypeRaw(EndType endType)
        {
            daoFactory.EndTypeDao.DeletePermanentlyEndType(endType);
            return true;
        }
	}
	public partial class FrequencyService: BaseService
	{
	    public BusinessResponse<List<Frequency>> GetAllFrequencies(bool shouldRemap=false)
        {
            BusinessResponse<List<Frequency>> response = new BusinessResponse<List<Frequency>>();
		    try
		    {
			    response.Result = GetAllFrequenciesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Frequency> GetAllFrequenciesRaw(bool shouldRemap=false)
        {
            return daoFactory.FrequencyDao.GetAllFrequencies(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Frequency>> GetAllFrequenciesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Frequency, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Frequency, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Frequency>> response = new BusinessResponse<BaseListReturnType<Frequency>>();
		    try
		    {
			    response.Result = GetAllFrequenciesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Frequency> GetAllFrequenciesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Frequency, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Frequency, dynamic> orderExpression = null)
        {
            return daoFactory.FrequencyDao.GetAllFrequenciesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Frequency>> GetAllFrequenciesWithScheduleSettingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Frequency, bool>> expression = null,bool shouldRemap=false, Func<Frequency, dynamic> orderExpression = null)
			{
				return GetAllFrequenciesByPage(sortingPagingInfo, expression,new List<string>(){"ScheduleSettings"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Frequency>> GetAllFrequencyWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Frequency>> response = new BusinessResponse<BaseListReturnType<Frequency>>();
            try
            {
                response.Result = GetAllFrequencyWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Frequency> GetAllFrequencyWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.FrequencyDao.GetAllFrequencyWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Frequency>> GetFrequencyListByIdList(List<long> frequencyIds)
        {
            BusinessResponse<List<Frequency>> response = new BusinessResponse<List<Frequency>>();
            try
            {
                response.Result = GetFrequencyListByIdListRaw(frequencyIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Frequency> GetFrequencyListByIdListRaw(List<long> frequencyIds)
        {
            return daoFactory.FrequencyDao.GetFrequencyListByIdList(frequencyIds);
        }

					
		public BusinessResponse<BaseListReturnType<Frequency>> GetAllFrequenciesWithScheduleSettingsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Frequency>> response = new BusinessResponse<BaseListReturnType<Frequency>>();
            try
            {
                response.Result = GetAllFrequenciesWithScheduleSettingsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Frequency> GetAllFrequenciesWithScheduleSettingsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllFrequencyWitDetailsRaw(new List<string>() { "ScheduleSettings" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<ScheduleSetting>>  UpdateScheduleSettingsForFrequencyWithoutSavingNewItem(List<ScheduleSetting> newScheduleSettings,long idFrequency)
            {
                BusinessResponse<List<ScheduleSetting>> response = new BusinessResponse<List<ScheduleSetting>>();
                try
                {
                    response.Result = UpdateScheduleSettingsForFrequencyWithoutSavingNewItemRaw(newScheduleSettings, idFrequency);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<ScheduleSetting> UpdateScheduleSettingsForFrequencyWithoutSavingNewItemRaw(List<ScheduleSetting> newScheduleSettings,long idFrequency)
            {
                return daoFactory.FrequencyDao.UpdateScheduleSettingsForFrequencyWithoutSavingNewItem(newScheduleSettings,idFrequency); 
            }



		    public BusinessResponse<List<ScheduleSetting>>  UpdateScheduleSettingsForFrequency(List<ScheduleSetting> newScheduleSettings,long idFrequency)
            {
                BusinessResponse<List<ScheduleSetting>> response = new BusinessResponse<List<ScheduleSetting>>();
                try
                {
                    response.Result = UpdateScheduleSettingsForFrequencyRaw(newScheduleSettings, idFrequency);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<ScheduleSetting> UpdateScheduleSettingsForFrequencyRaw(List<ScheduleSetting> newScheduleSettings,long idFrequency)
            {
                return daoFactory.FrequencyDao.UpdateScheduleSettingsForFrequency(newScheduleSettings,idFrequency); 
            }





		public BusinessResponse<Frequency> GetFrequencyWithScheduleSettingsDetails(long idFrequency,bool shouldRemap=false)
        {
            BusinessResponse<Frequency> response = new BusinessResponse<Frequency>();
            try
            {
                response.Result = GetFrequencyWithScheduleSettingsDetailsRaw(idFrequency,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Frequency GetFrequencyWithScheduleSettingsDetailsRaw(long idFrequency,bool shouldRemap=false)
        {
            return GetFrequencyWitDetailsRaw(idFrequency,new List<string>() { "ScheduleSettings"},shouldRemap);
        }

		
        public BusinessResponse<Frequency> GetFrequency(long idFrequency,bool shouldRemap=false)
        {
            BusinessResponse<Frequency> response = new BusinessResponse<Frequency>();
		    try
		    {
			    response.Result = GetFrequenciesRaw(idFrequency,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Frequency GetFrequenciesRaw(long idFrequency,bool shouldRemap=false)
        {
            return daoFactory.FrequencyDao.GetFrequency(idFrequency,shouldRemap);
        }

        
        public BusinessResponse<Frequency> GetFrequencyWitDetails(long idFrequency,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Frequency> response = new BusinessResponse<Frequency>();
		    try
		    {
			    response.Result = GetFrequencyWitDetailsRaw(idFrequency,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Frequency GetFrequencyWitDetailsRaw(long idFrequency,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.FrequencyDao.GetFrequencyWitDetails(idFrequency,shouldRemap);
        }


		 public BusinessResponse<Frequency> GetFrequencyCustom( Expression<Func<Frequency, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Frequency> response = new BusinessResponse<Frequency>();
		    try
		    {
			    response.Result = GetFrequencyCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Frequency GetFrequencyCustomRaw( Expression<Func<Frequency, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.FrequencyDao.GetFrequencyCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Frequency>> GetFrequencyCustomList( Expression<Func<Frequency, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Frequency, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Frequency>> response = new BusinessResponse<BaseListReturnType<Frequency>>();
		    try
		    {
			    response.Result = GetFrequencyCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Frequency> GetFrequencyCustomListRaw( Expression<Func<Frequency, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Frequency, dynamic> orderExpression = null)
		{
            return daoFactory.FrequencyDao.GetFrequencyCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveFrequency(Frequency frequency)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveFrequencyRaw(frequency);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveFrequencyRaw(Frequency frequency)
        {
            daoFactory.FrequencyDao.SaveFrequency(frequency);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyFrequency(Frequency frequency)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyFrequencyRaw(frequency);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyFrequencyRaw(Frequency frequency)
        {
            daoFactory.FrequencyDao.SaveOnlyFrequency(frequency);
            return true;
        }

        public BusinessResponse<bool> DeleteFrequency(Frequency frequency)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteFrequencyRaw(frequency);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteFrequencyRaw(Frequency frequency)
        {
            daoFactory.FrequencyDao.DeleteFrequency(frequency);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyFrequency(Frequency frequency)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyFrequencyRaw(frequency);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyFrequencyRaw(Frequency frequency)
        {
            daoFactory.FrequencyDao.DeletePermanentlyFrequency(frequency);
            return true;
        }
	}
	public partial class MailRecipientService: BaseService
	{
	    public BusinessResponse<List<MailRecipient>> GetAllMailRecipients(bool shouldRemap=false)
        {
            BusinessResponse<List<MailRecipient>> response = new BusinessResponse<List<MailRecipient>>();
		    try
		    {
			    response.Result = GetAllMailRecipientsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<MailRecipient> GetAllMailRecipientsRaw(bool shouldRemap=false)
        {
            return daoFactory.MailRecipientDao.GetAllMailRecipients(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<MailRecipient, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<MailRecipient>> response = new BusinessResponse<BaseListReturnType<MailRecipient>>();
		    try
		    {
			    response.Result = GetAllMailRecipientsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<MailRecipient> GetAllMailRecipientsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<MailRecipient, dynamic> orderExpression = null)
        {
            return daoFactory.MailRecipientDao.GetAllMailRecipientsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientsWithMailRecipientTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null,bool shouldRemap=false, Func<MailRecipient, dynamic> orderExpression = null)
			{
				return GetAllMailRecipientsByPage(sortingPagingInfo, expression,new List<string>(){"MailRecipientType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientsWithMailStatuDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null,bool shouldRemap=false, Func<MailRecipient, dynamic> orderExpression = null)
			{
				return GetAllMailRecipientsByPage(sortingPagingInfo, expression,new List<string>(){"MailStatu"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientsWithMailToSendDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipient, bool>> expression = null,bool shouldRemap=false, Func<MailRecipient, dynamic> orderExpression = null)
			{
				return GetAllMailRecipientsByPage(sortingPagingInfo, expression,new List<string>(){"MailToSend"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailRecipient>> response = new BusinessResponse<BaseListReturnType<MailRecipient>>();
            try
            {
                response.Result = GetAllMailRecipientWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailRecipient> GetAllMailRecipientWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.MailRecipientDao.GetAllMailRecipientWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<MailRecipient>> GetMailRecipientListByIdList(List<long> mailRecipientIds)
        {
            BusinessResponse<List<MailRecipient>> response = new BusinessResponse<List<MailRecipient>>();
            try
            {
                response.Result = GetMailRecipientListByIdListRaw(mailRecipientIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<MailRecipient> GetMailRecipientListByIdListRaw(List<long> mailRecipientIds)
        {
            return daoFactory.MailRecipientDao.GetMailRecipientListByIdList(mailRecipientIds);
        }

					
		public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientsWithMailRecipientTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailRecipient>> response = new BusinessResponse<BaseListReturnType<MailRecipient>>();
            try
            {
                response.Result = GetAllMailRecipientsWithMailRecipientTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailRecipient> GetAllMailRecipientsWithMailRecipientTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailRecipientWitDetailsRaw(new List<string>() { "MailRecipientType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientListByMailRecipientType(long idMailRecipientType)
        {
            BusinessResponse<BaseListReturnType<MailRecipient>> response = new BusinessResponse<BaseListReturnType<MailRecipient>>();
            try
            {
                response.Result = GetAllMailRecipientListByMailRecipientTypeRaw(idMailRecipientType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailRecipientTypeRaw(long idMailRecipientType)
        {
            return daoFactory.MailRecipientDao.GetAllMailRecipientListByMailRecipientType(idMailRecipientType);
        }

        public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientListByMailRecipientTypeByPage(long idMailRecipientType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<MailRecipient>> response = new BusinessResponse<BaseListReturnType<MailRecipient>>();
            try
            {
                response.Result = GetAllMailRecipientListByMailRecipientTypeByPageRaw(idMailRecipientType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailRecipientTypeByPageRaw(long idMailRecipientType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.MailRecipientDao.GetAllMailRecipientListByMailRecipientTypeByPage(idMailRecipientType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientsWithMailStatuDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailRecipient>> response = new BusinessResponse<BaseListReturnType<MailRecipient>>();
            try
            {
                response.Result = GetAllMailRecipientsWithMailStatuDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailRecipient> GetAllMailRecipientsWithMailStatuDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailRecipientWitDetailsRaw(new List<string>() { "MailStatu" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientListByMailStatu(long idMailStatu)
        {
            BusinessResponse<BaseListReturnType<MailRecipient>> response = new BusinessResponse<BaseListReturnType<MailRecipient>>();
            try
            {
                response.Result = GetAllMailRecipientListByMailStatuRaw(idMailStatu);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailStatuRaw(long idMailStatu)
        {
            return daoFactory.MailRecipientDao.GetAllMailRecipientListByMailStatu(idMailStatu);
        }

        public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientListByMailStatuByPage(long idMailStatu, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<MailRecipient>> response = new BusinessResponse<BaseListReturnType<MailRecipient>>();
            try
            {
                response.Result = GetAllMailRecipientListByMailStatuByPageRaw(idMailStatu, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailStatuByPageRaw(long idMailStatu,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.MailRecipientDao.GetAllMailRecipientListByMailStatuByPage(idMailStatu, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientsWithMailToSendDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailRecipient>> response = new BusinessResponse<BaseListReturnType<MailRecipient>>();
            try
            {
                response.Result = GetAllMailRecipientsWithMailToSendDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailRecipient> GetAllMailRecipientsWithMailToSendDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailRecipientWitDetailsRaw(new List<string>() { "MailToSend" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientListByMailToSend(long idMailToSend)
        {
            BusinessResponse<BaseListReturnType<MailRecipient>> response = new BusinessResponse<BaseListReturnType<MailRecipient>>();
            try
            {
                response.Result = GetAllMailRecipientListByMailToSendRaw(idMailToSend);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailToSendRaw(long idMailToSend)
        {
            return daoFactory.MailRecipientDao.GetAllMailRecipientListByMailToSend(idMailToSend);
        }

        public BusinessResponse<BaseListReturnType<MailRecipient>> GetAllMailRecipientListByMailToSendByPage(long idMailToSend, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<MailRecipient>> response = new BusinessResponse<BaseListReturnType<MailRecipient>>();
            try
            {
                response.Result = GetAllMailRecipientListByMailToSendByPageRaw(idMailToSend, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailRecipient> GetAllMailRecipientListByMailToSendByPageRaw(long idMailToSend,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.MailRecipientDao.GetAllMailRecipientListByMailToSendByPage(idMailToSend, sortingPagingInfo);
        }

		
		



		public BusinessResponse<MailRecipient> GetMailRecipientWithMailRecipientTypeDetails(long idMailRecipient,bool shouldRemap=false)
        {
            BusinessResponse<MailRecipient> response = new BusinessResponse<MailRecipient>();
            try
            {
                response.Result = GetMailRecipientWithMailRecipientTypeDetailsRaw(idMailRecipient,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailRecipient GetMailRecipientWithMailRecipientTypeDetailsRaw(long idMailRecipient,bool shouldRemap=false)
        {
            return GetMailRecipientWitDetailsRaw(idMailRecipient,new List<string>() { "MailRecipientType"},shouldRemap);
        }

		



		public BusinessResponse<MailRecipient> GetMailRecipientWithMailStatuDetails(long idMailRecipient,bool shouldRemap=false)
        {
            BusinessResponse<MailRecipient> response = new BusinessResponse<MailRecipient>();
            try
            {
                response.Result = GetMailRecipientWithMailStatuDetailsRaw(idMailRecipient,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailRecipient GetMailRecipientWithMailStatuDetailsRaw(long idMailRecipient,bool shouldRemap=false)
        {
            return GetMailRecipientWitDetailsRaw(idMailRecipient,new List<string>() { "MailStatu"},shouldRemap);
        }

		



		public BusinessResponse<MailRecipient> GetMailRecipientWithMailToSendDetails(long idMailRecipient,bool shouldRemap=false)
        {
            BusinessResponse<MailRecipient> response = new BusinessResponse<MailRecipient>();
            try
            {
                response.Result = GetMailRecipientWithMailToSendDetailsRaw(idMailRecipient,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailRecipient GetMailRecipientWithMailToSendDetailsRaw(long idMailRecipient,bool shouldRemap=false)
        {
            return GetMailRecipientWitDetailsRaw(idMailRecipient,new List<string>() { "MailToSend"},shouldRemap);
        }

		
        public BusinessResponse<MailRecipient> GetMailRecipient(long idMailRecipient,bool shouldRemap=false)
        {
            BusinessResponse<MailRecipient> response = new BusinessResponse<MailRecipient>();
		    try
		    {
			    response.Result = GetMailRecipientsRaw(idMailRecipient,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal MailRecipient GetMailRecipientsRaw(long idMailRecipient,bool shouldRemap=false)
        {
            return daoFactory.MailRecipientDao.GetMailRecipient(idMailRecipient,shouldRemap);
        }

        
        public BusinessResponse<MailRecipient> GetMailRecipientWitDetails(long idMailRecipient,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<MailRecipient> response = new BusinessResponse<MailRecipient>();
		    try
		    {
			    response.Result = GetMailRecipientWitDetailsRaw(idMailRecipient,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal MailRecipient GetMailRecipientWitDetailsRaw(long idMailRecipient,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.MailRecipientDao.GetMailRecipientWitDetails(idMailRecipient,shouldRemap);
        }


		 public BusinessResponse<MailRecipient> GetMailRecipientCustom( Expression<Func<MailRecipient, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<MailRecipient> response = new BusinessResponse<MailRecipient>();
		    try
		    {
			    response.Result = GetMailRecipientCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal MailRecipient GetMailRecipientCustomRaw( Expression<Func<MailRecipient, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.MailRecipientDao.GetMailRecipientCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<MailRecipient>> GetMailRecipientCustomList( Expression<Func<MailRecipient, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<MailRecipient, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<MailRecipient>> response = new BusinessResponse<BaseListReturnType<MailRecipient>>();
		    try
		    {
			    response.Result = GetMailRecipientCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<MailRecipient> GetMailRecipientCustomListRaw( Expression<Func<MailRecipient, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<MailRecipient, dynamic> orderExpression = null)
		{
            return daoFactory.MailRecipientDao.GetMailRecipientCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveMailRecipient(MailRecipient mailRecipient)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveMailRecipientRaw(mailRecipient);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveMailRecipientRaw(MailRecipient mailRecipient)
        {
            daoFactory.MailRecipientDao.SaveMailRecipient(mailRecipient);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyMailRecipient(MailRecipient mailRecipient)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyMailRecipientRaw(mailRecipient);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyMailRecipientRaw(MailRecipient mailRecipient)
        {
            daoFactory.MailRecipientDao.SaveOnlyMailRecipient(mailRecipient);
            return true;
        }

        public BusinessResponse<bool> DeleteMailRecipient(MailRecipient mailRecipient)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteMailRecipientRaw(mailRecipient);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteMailRecipientRaw(MailRecipient mailRecipient)
        {
            daoFactory.MailRecipientDao.DeleteMailRecipient(mailRecipient);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyMailRecipient(MailRecipient mailRecipient)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyMailRecipientRaw(mailRecipient);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyMailRecipientRaw(MailRecipient mailRecipient)
        {
            daoFactory.MailRecipientDao.DeletePermanentlyMailRecipient(mailRecipient);
            return true;
        }
	}
	public partial class MailRecipientTypeService: BaseService
	{
	    public BusinessResponse<List<MailRecipientType>> GetAllMailRecipientTypes(bool shouldRemap=false)
        {
            BusinessResponse<List<MailRecipientType>> response = new BusinessResponse<List<MailRecipientType>>();
		    try
		    {
			    response.Result = GetAllMailRecipientTypesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<MailRecipientType> GetAllMailRecipientTypesRaw(bool shouldRemap=false)
        {
            return daoFactory.MailRecipientTypeDao.GetAllMailRecipientTypes(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<MailRecipientType>> GetAllMailRecipientTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipientType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<MailRecipientType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<MailRecipientType>> response = new BusinessResponse<BaseListReturnType<MailRecipientType>>();
		    try
		    {
			    response.Result = GetAllMailRecipientTypesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<MailRecipientType> GetAllMailRecipientTypesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipientType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<MailRecipientType, dynamic> orderExpression = null)
        {
            return daoFactory.MailRecipientTypeDao.GetAllMailRecipientTypesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<MailRecipientType>> GetAllMailRecipientTypesWithMailRecipientsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailRecipientType, bool>> expression = null,bool shouldRemap=false, Func<MailRecipientType, dynamic> orderExpression = null)
			{
				return GetAllMailRecipientTypesByPage(sortingPagingInfo, expression,new List<string>(){"MailRecipients"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<MailRecipientType>> GetAllMailRecipientTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailRecipientType>> response = new BusinessResponse<BaseListReturnType<MailRecipientType>>();
            try
            {
                response.Result = GetAllMailRecipientTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailRecipientType> GetAllMailRecipientTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.MailRecipientTypeDao.GetAllMailRecipientTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<MailRecipientType>> GetMailRecipientTypeListByIdList(List<long> mailRecipientTypeIds)
        {
            BusinessResponse<List<MailRecipientType>> response = new BusinessResponse<List<MailRecipientType>>();
            try
            {
                response.Result = GetMailRecipientTypeListByIdListRaw(mailRecipientTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<MailRecipientType> GetMailRecipientTypeListByIdListRaw(List<long> mailRecipientTypeIds)
        {
            return daoFactory.MailRecipientTypeDao.GetMailRecipientTypeListByIdList(mailRecipientTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<MailRecipientType>> GetAllMailRecipientTypesWithMailRecipientsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailRecipientType>> response = new BusinessResponse<BaseListReturnType<MailRecipientType>>();
            try
            {
                response.Result = GetAllMailRecipientTypesWithMailRecipientsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailRecipientType> GetAllMailRecipientTypesWithMailRecipientsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailRecipientTypeWitDetailsRaw(new List<string>() { "MailRecipients" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<MailRecipient>>  UpdateMailRecipientsForMailRecipientTypeWithoutSavingNewItem(List<MailRecipient> newMailRecipients,long idMailRecipientType)
            {
                BusinessResponse<List<MailRecipient>> response = new BusinessResponse<List<MailRecipient>>();
                try
                {
                    response.Result = UpdateMailRecipientsForMailRecipientTypeWithoutSavingNewItemRaw(newMailRecipients, idMailRecipientType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<MailRecipient> UpdateMailRecipientsForMailRecipientTypeWithoutSavingNewItemRaw(List<MailRecipient> newMailRecipients,long idMailRecipientType)
            {
                return daoFactory.MailRecipientTypeDao.UpdateMailRecipientsForMailRecipientTypeWithoutSavingNewItem(newMailRecipients,idMailRecipientType); 
            }



		    public BusinessResponse<List<MailRecipient>>  UpdateMailRecipientsForMailRecipientType(List<MailRecipient> newMailRecipients,long idMailRecipientType)
            {
                BusinessResponse<List<MailRecipient>> response = new BusinessResponse<List<MailRecipient>>();
                try
                {
                    response.Result = UpdateMailRecipientsForMailRecipientTypeRaw(newMailRecipients, idMailRecipientType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<MailRecipient> UpdateMailRecipientsForMailRecipientTypeRaw(List<MailRecipient> newMailRecipients,long idMailRecipientType)
            {
                return daoFactory.MailRecipientTypeDao.UpdateMailRecipientsForMailRecipientType(newMailRecipients,idMailRecipientType); 
            }





		public BusinessResponse<MailRecipientType> GetMailRecipientTypeWithMailRecipientsDetails(long idMailRecipientType,bool shouldRemap=false)
        {
            BusinessResponse<MailRecipientType> response = new BusinessResponse<MailRecipientType>();
            try
            {
                response.Result = GetMailRecipientTypeWithMailRecipientsDetailsRaw(idMailRecipientType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailRecipientType GetMailRecipientTypeWithMailRecipientsDetailsRaw(long idMailRecipientType,bool shouldRemap=false)
        {
            return GetMailRecipientTypeWitDetailsRaw(idMailRecipientType,new List<string>() { "MailRecipients"},shouldRemap);
        }

		
        public BusinessResponse<MailRecipientType> GetMailRecipientType(long idMailRecipientType,bool shouldRemap=false)
        {
            BusinessResponse<MailRecipientType> response = new BusinessResponse<MailRecipientType>();
		    try
		    {
			    response.Result = GetMailRecipientTypesRaw(idMailRecipientType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal MailRecipientType GetMailRecipientTypesRaw(long idMailRecipientType,bool shouldRemap=false)
        {
            return daoFactory.MailRecipientTypeDao.GetMailRecipientType(idMailRecipientType,shouldRemap);
        }

        
        public BusinessResponse<MailRecipientType> GetMailRecipientTypeWitDetails(long idMailRecipientType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<MailRecipientType> response = new BusinessResponse<MailRecipientType>();
		    try
		    {
			    response.Result = GetMailRecipientTypeWitDetailsRaw(idMailRecipientType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal MailRecipientType GetMailRecipientTypeWitDetailsRaw(long idMailRecipientType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.MailRecipientTypeDao.GetMailRecipientTypeWitDetails(idMailRecipientType,shouldRemap);
        }


		 public BusinessResponse<MailRecipientType> GetMailRecipientTypeCustom( Expression<Func<MailRecipientType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<MailRecipientType> response = new BusinessResponse<MailRecipientType>();
		    try
		    {
			    response.Result = GetMailRecipientTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal MailRecipientType GetMailRecipientTypeCustomRaw( Expression<Func<MailRecipientType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.MailRecipientTypeDao.GetMailRecipientTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<MailRecipientType>> GetMailRecipientTypeCustomList( Expression<Func<MailRecipientType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<MailRecipientType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<MailRecipientType>> response = new BusinessResponse<BaseListReturnType<MailRecipientType>>();
		    try
		    {
			    response.Result = GetMailRecipientTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<MailRecipientType> GetMailRecipientTypeCustomListRaw( Expression<Func<MailRecipientType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<MailRecipientType, dynamic> orderExpression = null)
		{
            return daoFactory.MailRecipientTypeDao.GetMailRecipientTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveMailRecipientType(MailRecipientType mailRecipientType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveMailRecipientTypeRaw(mailRecipientType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveMailRecipientTypeRaw(MailRecipientType mailRecipientType)
        {
            daoFactory.MailRecipientTypeDao.SaveMailRecipientType(mailRecipientType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyMailRecipientType(MailRecipientType mailRecipientType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyMailRecipientTypeRaw(mailRecipientType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyMailRecipientTypeRaw(MailRecipientType mailRecipientType)
        {
            daoFactory.MailRecipientTypeDao.SaveOnlyMailRecipientType(mailRecipientType);
            return true;
        }

        public BusinessResponse<bool> DeleteMailRecipientType(MailRecipientType mailRecipientType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteMailRecipientTypeRaw(mailRecipientType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteMailRecipientTypeRaw(MailRecipientType mailRecipientType)
        {
            daoFactory.MailRecipientTypeDao.DeleteMailRecipientType(mailRecipientType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyMailRecipientType(MailRecipientType mailRecipientType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyMailRecipientTypeRaw(mailRecipientType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyMailRecipientTypeRaw(MailRecipientType mailRecipientType)
        {
            daoFactory.MailRecipientTypeDao.DeletePermanentlyMailRecipientType(mailRecipientType);
            return true;
        }
	}
	public partial class MailServerSettingService: BaseService
	{
	    public BusinessResponse<List<MailServerSetting>> GetAllMailServerSettings(bool shouldRemap=false)
        {
            BusinessResponse<List<MailServerSetting>> response = new BusinessResponse<List<MailServerSetting>>();
		    try
		    {
			    response.Result = GetAllMailServerSettingsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<MailServerSetting> GetAllMailServerSettingsRaw(bool shouldRemap=false)
        {
            return daoFactory.MailServerSettingDao.GetAllMailServerSettings(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<MailServerSetting>> GetAllMailServerSettingsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailServerSetting, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<MailServerSetting, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<MailServerSetting>> response = new BusinessResponse<BaseListReturnType<MailServerSetting>>();
		    try
		    {
			    response.Result = GetAllMailServerSettingsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<MailServerSetting> GetAllMailServerSettingsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailServerSetting, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<MailServerSetting, dynamic> orderExpression = null)
        {
            return daoFactory.MailServerSettingDao.GetAllMailServerSettingsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<MailServerSetting>> GetAllMailServerSettingsWithMailToSendsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailServerSetting, bool>> expression = null,bool shouldRemap=false, Func<MailServerSetting, dynamic> orderExpression = null)
			{
				return GetAllMailServerSettingsByPage(sortingPagingInfo, expression,new List<string>(){"MailToSends"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<MailServerSetting>> GetAllMailServerSettingWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailServerSetting>> response = new BusinessResponse<BaseListReturnType<MailServerSetting>>();
            try
            {
                response.Result = GetAllMailServerSettingWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailServerSetting> GetAllMailServerSettingWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.MailServerSettingDao.GetAllMailServerSettingWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<MailServerSetting>> GetMailServerSettingListByIdList(List<long> mailServerSettingIds)
        {
            BusinessResponse<List<MailServerSetting>> response = new BusinessResponse<List<MailServerSetting>>();
            try
            {
                response.Result = GetMailServerSettingListByIdListRaw(mailServerSettingIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<MailServerSetting> GetMailServerSettingListByIdListRaw(List<long> mailServerSettingIds)
        {
            return daoFactory.MailServerSettingDao.GetMailServerSettingListByIdList(mailServerSettingIds);
        }

					
		public BusinessResponse<BaseListReturnType<MailServerSetting>> GetAllMailServerSettingsWithMailToSendsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailServerSetting>> response = new BusinessResponse<BaseListReturnType<MailServerSetting>>();
            try
            {
                response.Result = GetAllMailServerSettingsWithMailToSendsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailServerSetting> GetAllMailServerSettingsWithMailToSendsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailServerSettingWitDetailsRaw(new List<string>() { "MailToSends" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<MailToSend>>  UpdateMailToSendsForMailServerSettingWithoutSavingNewItem(List<MailToSend> newMailToSends,long idMailServerSetting)
            {
                BusinessResponse<List<MailToSend>> response = new BusinessResponse<List<MailToSend>>();
                try
                {
                    response.Result = UpdateMailToSendsForMailServerSettingWithoutSavingNewItemRaw(newMailToSends, idMailServerSetting);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<MailToSend> UpdateMailToSendsForMailServerSettingWithoutSavingNewItemRaw(List<MailToSend> newMailToSends,long idMailServerSetting)
            {
                return daoFactory.MailServerSettingDao.UpdateMailToSendsForMailServerSettingWithoutSavingNewItem(newMailToSends,idMailServerSetting); 
            }



		    public BusinessResponse<List<MailToSend>>  UpdateMailToSendsForMailServerSetting(List<MailToSend> newMailToSends,long idMailServerSetting)
            {
                BusinessResponse<List<MailToSend>> response = new BusinessResponse<List<MailToSend>>();
                try
                {
                    response.Result = UpdateMailToSendsForMailServerSettingRaw(newMailToSends, idMailServerSetting);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<MailToSend> UpdateMailToSendsForMailServerSettingRaw(List<MailToSend> newMailToSends,long idMailServerSetting)
            {
                return daoFactory.MailServerSettingDao.UpdateMailToSendsForMailServerSetting(newMailToSends,idMailServerSetting); 
            }





		public BusinessResponse<MailServerSetting> GetMailServerSettingWithMailToSendsDetails(long idMailServerSetting,bool shouldRemap=false)
        {
            BusinessResponse<MailServerSetting> response = new BusinessResponse<MailServerSetting>();
            try
            {
                response.Result = GetMailServerSettingWithMailToSendsDetailsRaw(idMailServerSetting,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailServerSetting GetMailServerSettingWithMailToSendsDetailsRaw(long idMailServerSetting,bool shouldRemap=false)
        {
            return GetMailServerSettingWitDetailsRaw(idMailServerSetting,new List<string>() { "MailToSends"},shouldRemap);
        }

		
        public BusinessResponse<MailServerSetting> GetMailServerSetting(long idMailServerSetting,bool shouldRemap=false)
        {
            BusinessResponse<MailServerSetting> response = new BusinessResponse<MailServerSetting>();
		    try
		    {
			    response.Result = GetMailServerSettingsRaw(idMailServerSetting,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal MailServerSetting GetMailServerSettingsRaw(long idMailServerSetting,bool shouldRemap=false)
        {
            return daoFactory.MailServerSettingDao.GetMailServerSetting(idMailServerSetting,shouldRemap);
        }

        
        public BusinessResponse<MailServerSetting> GetMailServerSettingWitDetails(long idMailServerSetting,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<MailServerSetting> response = new BusinessResponse<MailServerSetting>();
		    try
		    {
			    response.Result = GetMailServerSettingWitDetailsRaw(idMailServerSetting,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal MailServerSetting GetMailServerSettingWitDetailsRaw(long idMailServerSetting,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.MailServerSettingDao.GetMailServerSettingWitDetails(idMailServerSetting,shouldRemap);
        }


		 public BusinessResponse<MailServerSetting> GetMailServerSettingCustom( Expression<Func<MailServerSetting, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<MailServerSetting> response = new BusinessResponse<MailServerSetting>();
		    try
		    {
			    response.Result = GetMailServerSettingCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal MailServerSetting GetMailServerSettingCustomRaw( Expression<Func<MailServerSetting, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.MailServerSettingDao.GetMailServerSettingCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<MailServerSetting>> GetMailServerSettingCustomList( Expression<Func<MailServerSetting, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<MailServerSetting, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<MailServerSetting>> response = new BusinessResponse<BaseListReturnType<MailServerSetting>>();
		    try
		    {
			    response.Result = GetMailServerSettingCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<MailServerSetting> GetMailServerSettingCustomListRaw( Expression<Func<MailServerSetting, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<MailServerSetting, dynamic> orderExpression = null)
		{
            return daoFactory.MailServerSettingDao.GetMailServerSettingCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveMailServerSetting(MailServerSetting mailServerSetting)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveMailServerSettingRaw(mailServerSetting);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveMailServerSettingRaw(MailServerSetting mailServerSetting)
        {
            daoFactory.MailServerSettingDao.SaveMailServerSetting(mailServerSetting);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyMailServerSetting(MailServerSetting mailServerSetting)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyMailServerSettingRaw(mailServerSetting);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyMailServerSettingRaw(MailServerSetting mailServerSetting)
        {
            daoFactory.MailServerSettingDao.SaveOnlyMailServerSetting(mailServerSetting);
            return true;
        }

        public BusinessResponse<bool> DeleteMailServerSetting(MailServerSetting mailServerSetting)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteMailServerSettingRaw(mailServerSetting);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteMailServerSettingRaw(MailServerSetting mailServerSetting)
        {
            daoFactory.MailServerSettingDao.DeleteMailServerSetting(mailServerSetting);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyMailServerSetting(MailServerSetting mailServerSetting)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyMailServerSettingRaw(mailServerSetting);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyMailServerSettingRaw(MailServerSetting mailServerSetting)
        {
            daoFactory.MailServerSettingDao.DeletePermanentlyMailServerSetting(mailServerSetting);
            return true;
        }
	}
	public partial class MailStatuService: BaseService
	{
	    public BusinessResponse<List<MailStatu>> GetAllMailStatus(bool shouldRemap=false)
        {
            BusinessResponse<List<MailStatu>> response = new BusinessResponse<List<MailStatu>>();
		    try
		    {
			    response.Result = GetAllMailStatusRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<MailStatu> GetAllMailStatusRaw(bool shouldRemap=false)
        {
            return daoFactory.MailStatuDao.GetAllMailStatus(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<MailStatu>> GetAllMailStatusByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailStatu, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<MailStatu, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<MailStatu>> response = new BusinessResponse<BaseListReturnType<MailStatu>>();
		    try
		    {
			    response.Result = GetAllMailStatusByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<MailStatu> GetAllMailStatusByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailStatu, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<MailStatu, dynamic> orderExpression = null)
        {
            return daoFactory.MailStatuDao.GetAllMailStatusByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<MailStatu>> GetAllMailStatusWithMailRecipientsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailStatu, bool>> expression = null,bool shouldRemap=false, Func<MailStatu, dynamic> orderExpression = null)
			{
				return GetAllMailStatusByPage(sortingPagingInfo, expression,new List<string>(){"MailRecipients"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<MailStatu>> GetAllMailStatusWithMailToSendsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailStatu, bool>> expression = null,bool shouldRemap=false, Func<MailStatu, dynamic> orderExpression = null)
			{
				return GetAllMailStatusByPage(sortingPagingInfo, expression,new List<string>(){"MailToSends"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<MailStatu>> GetAllMailStatuWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailStatu>> response = new BusinessResponse<BaseListReturnType<MailStatu>>();
            try
            {
                response.Result = GetAllMailStatuWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailStatu> GetAllMailStatuWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.MailStatuDao.GetAllMailStatuWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<MailStatu>> GetMailStatuListByIdList(List<long> mailStatuIds)
        {
            BusinessResponse<List<MailStatu>> response = new BusinessResponse<List<MailStatu>>();
            try
            {
                response.Result = GetMailStatuListByIdListRaw(mailStatuIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<MailStatu> GetMailStatuListByIdListRaw(List<long> mailStatuIds)
        {
            return daoFactory.MailStatuDao.GetMailStatuListByIdList(mailStatuIds);
        }

					
		public BusinessResponse<BaseListReturnType<MailStatu>> GetAllMailStatusWithMailRecipientsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailStatu>> response = new BusinessResponse<BaseListReturnType<MailStatu>>();
            try
            {
                response.Result = GetAllMailStatusWithMailRecipientsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailStatu> GetAllMailStatusWithMailRecipientsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailStatuWitDetailsRaw(new List<string>() { "MailRecipients" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<MailStatu>> GetAllMailStatusWithMailToSendsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailStatu>> response = new BusinessResponse<BaseListReturnType<MailStatu>>();
            try
            {
                response.Result = GetAllMailStatusWithMailToSendsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailStatu> GetAllMailStatusWithMailToSendsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailStatuWitDetailsRaw(new List<string>() { "MailToSends" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<MailRecipient>>  UpdateMailRecipientsForMailStatuWithoutSavingNewItem(List<MailRecipient> newMailRecipients,long idMailStatu)
            {
                BusinessResponse<List<MailRecipient>> response = new BusinessResponse<List<MailRecipient>>();
                try
                {
                    response.Result = UpdateMailRecipientsForMailStatuWithoutSavingNewItemRaw(newMailRecipients, idMailStatu);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<MailRecipient> UpdateMailRecipientsForMailStatuWithoutSavingNewItemRaw(List<MailRecipient> newMailRecipients,long idMailStatu)
            {
                return daoFactory.MailStatuDao.UpdateMailRecipientsForMailStatuWithoutSavingNewItem(newMailRecipients,idMailStatu); 
            }



		    public BusinessResponse<List<MailRecipient>>  UpdateMailRecipientsForMailStatu(List<MailRecipient> newMailRecipients,long idMailStatu)
            {
                BusinessResponse<List<MailRecipient>> response = new BusinessResponse<List<MailRecipient>>();
                try
                {
                    response.Result = UpdateMailRecipientsForMailStatuRaw(newMailRecipients, idMailStatu);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<MailRecipient> UpdateMailRecipientsForMailStatuRaw(List<MailRecipient> newMailRecipients,long idMailStatu)
            {
                return daoFactory.MailStatuDao.UpdateMailRecipientsForMailStatu(newMailRecipients,idMailStatu); 
            }





		public BusinessResponse<MailStatu> GetMailStatuWithMailRecipientsDetails(long idMailStatu,bool shouldRemap=false)
        {
            BusinessResponse<MailStatu> response = new BusinessResponse<MailStatu>();
            try
            {
                response.Result = GetMailStatuWithMailRecipientsDetailsRaw(idMailStatu,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailStatu GetMailStatuWithMailRecipientsDetailsRaw(long idMailStatu,bool shouldRemap=false)
        {
            return GetMailStatuWitDetailsRaw(idMailStatu,new List<string>() { "MailRecipients"},shouldRemap);
        }

		
			public BusinessResponse<List<MailToSend>>  UpdateMailToSendsForMailStatuWithoutSavingNewItem(List<MailToSend> newMailToSends,long idMailStatu)
            {
                BusinessResponse<List<MailToSend>> response = new BusinessResponse<List<MailToSend>>();
                try
                {
                    response.Result = UpdateMailToSendsForMailStatuWithoutSavingNewItemRaw(newMailToSends, idMailStatu);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<MailToSend> UpdateMailToSendsForMailStatuWithoutSavingNewItemRaw(List<MailToSend> newMailToSends,long idMailStatu)
            {
                return daoFactory.MailStatuDao.UpdateMailToSendsForMailStatuWithoutSavingNewItem(newMailToSends,idMailStatu); 
            }



		    public BusinessResponse<List<MailToSend>>  UpdateMailToSendsForMailStatu(List<MailToSend> newMailToSends,long idMailStatu)
            {
                BusinessResponse<List<MailToSend>> response = new BusinessResponse<List<MailToSend>>();
                try
                {
                    response.Result = UpdateMailToSendsForMailStatuRaw(newMailToSends, idMailStatu);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<MailToSend> UpdateMailToSendsForMailStatuRaw(List<MailToSend> newMailToSends,long idMailStatu)
            {
                return daoFactory.MailStatuDao.UpdateMailToSendsForMailStatu(newMailToSends,idMailStatu); 
            }





		public BusinessResponse<MailStatu> GetMailStatuWithMailToSendsDetails(long idMailStatu,bool shouldRemap=false)
        {
            BusinessResponse<MailStatu> response = new BusinessResponse<MailStatu>();
            try
            {
                response.Result = GetMailStatuWithMailToSendsDetailsRaw(idMailStatu,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailStatu GetMailStatuWithMailToSendsDetailsRaw(long idMailStatu,bool shouldRemap=false)
        {
            return GetMailStatuWitDetailsRaw(idMailStatu,new List<string>() { "MailToSends"},shouldRemap);
        }

		
        public BusinessResponse<MailStatu> GetMailStatu(long idMailStatu,bool shouldRemap=false)
        {
            BusinessResponse<MailStatu> response = new BusinessResponse<MailStatu>();
		    try
		    {
			    response.Result = GetMailStatusRaw(idMailStatu,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal MailStatu GetMailStatusRaw(long idMailStatu,bool shouldRemap=false)
        {
            return daoFactory.MailStatuDao.GetMailStatu(idMailStatu,shouldRemap);
        }

        
        public BusinessResponse<MailStatu> GetMailStatuWitDetails(long idMailStatu,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<MailStatu> response = new BusinessResponse<MailStatu>();
		    try
		    {
			    response.Result = GetMailStatuWitDetailsRaw(idMailStatu,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal MailStatu GetMailStatuWitDetailsRaw(long idMailStatu,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.MailStatuDao.GetMailStatuWitDetails(idMailStatu,shouldRemap);
        }


		 public BusinessResponse<MailStatu> GetMailStatuCustom( Expression<Func<MailStatu, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<MailStatu> response = new BusinessResponse<MailStatu>();
		    try
		    {
			    response.Result = GetMailStatuCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal MailStatu GetMailStatuCustomRaw( Expression<Func<MailStatu, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.MailStatuDao.GetMailStatuCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<MailStatu>> GetMailStatuCustomList( Expression<Func<MailStatu, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<MailStatu, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<MailStatu>> response = new BusinessResponse<BaseListReturnType<MailStatu>>();
		    try
		    {
			    response.Result = GetMailStatuCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<MailStatu> GetMailStatuCustomListRaw( Expression<Func<MailStatu, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<MailStatu, dynamic> orderExpression = null)
		{
            return daoFactory.MailStatuDao.GetMailStatuCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveMailStatu(MailStatu mailStatu)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveMailStatuRaw(mailStatu);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveMailStatuRaw(MailStatu mailStatu)
        {
            daoFactory.MailStatuDao.SaveMailStatu(mailStatu);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyMailStatu(MailStatu mailStatu)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyMailStatuRaw(mailStatu);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyMailStatuRaw(MailStatu mailStatu)
        {
            daoFactory.MailStatuDao.SaveOnlyMailStatu(mailStatu);
            return true;
        }

        public BusinessResponse<bool> DeleteMailStatu(MailStatu mailStatu)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteMailStatuRaw(mailStatu);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteMailStatuRaw(MailStatu mailStatu)
        {
            daoFactory.MailStatuDao.DeleteMailStatu(mailStatu);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyMailStatu(MailStatu mailStatu)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyMailStatuRaw(mailStatu);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyMailStatuRaw(MailStatu mailStatu)
        {
            daoFactory.MailStatuDao.DeletePermanentlyMailStatu(mailStatu);
            return true;
        }
	}
	public partial class MailToSendService: BaseService
	{
	    public BusinessResponse<List<MailToSend>> GetAllMailToSends(bool shouldRemap=false)
        {
            BusinessResponse<List<MailToSend>> response = new BusinessResponse<List<MailToSend>>();
		    try
		    {
			    response.Result = GetAllMailToSendsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<MailToSend> GetAllMailToSendsRaw(bool shouldRemap=false)
        {
            return daoFactory.MailToSendDao.GetAllMailToSends(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<MailToSend, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<MailToSend>> response = new BusinessResponse<BaseListReturnType<MailToSend>>();
		    try
		    {
			    response.Result = GetAllMailToSendsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<MailToSend> GetAllMailToSendsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<MailToSend, dynamic> orderExpression = null)
        {
            return daoFactory.MailToSendDao.GetAllMailToSendsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendsWithMailRecipientsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap=false, Func<MailToSend, dynamic> orderExpression = null)
			{
				return GetAllMailToSendsByPage(sortingPagingInfo, expression,new List<string>(){"MailRecipients"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendsWithMailServerSettingDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap=false, Func<MailToSend, dynamic> orderExpression = null)
			{
				return GetAllMailToSendsByPage(sortingPagingInfo, expression,new List<string>(){"MailServerSetting"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendsWithMailStatuDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap=false, Func<MailToSend, dynamic> orderExpression = null)
			{
				return GetAllMailToSendsByPage(sortingPagingInfo, expression,new List<string>(){"MailStatu"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendsWithMailToSendDocumentsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap=false, Func<MailToSend, dynamic> orderExpression = null)
			{
				return GetAllMailToSendsByPage(sortingPagingInfo, expression,new List<string>(){"MailToSendDocuments"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendsWithTransaction_MailToSendDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSend, bool>> expression = null,bool shouldRemap=false, Func<MailToSend, dynamic> orderExpression = null)
			{
				return GetAllMailToSendsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction_MailToSend"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailToSend>> response = new BusinessResponse<BaseListReturnType<MailToSend>>();
            try
            {
                response.Result = GetAllMailToSendWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSend> GetAllMailToSendWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.MailToSendDao.GetAllMailToSendWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<MailToSend>> GetMailToSendListByIdList(List<long> mailToSendIds)
        {
            BusinessResponse<List<MailToSend>> response = new BusinessResponse<List<MailToSend>>();
            try
            {
                response.Result = GetMailToSendListByIdListRaw(mailToSendIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<MailToSend> GetMailToSendListByIdListRaw(List<long> mailToSendIds)
        {
            return daoFactory.MailToSendDao.GetMailToSendListByIdList(mailToSendIds);
        }

					
		public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendsWithMailRecipientsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailToSend>> response = new BusinessResponse<BaseListReturnType<MailToSend>>();
            try
            {
                response.Result = GetAllMailToSendsWithMailRecipientsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSend> GetAllMailToSendsWithMailRecipientsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailToSendWitDetailsRaw(new List<string>() { "MailRecipients" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendsWithMailServerSettingDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailToSend>> response = new BusinessResponse<BaseListReturnType<MailToSend>>();
            try
            {
                response.Result = GetAllMailToSendsWithMailServerSettingDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSend> GetAllMailToSendsWithMailServerSettingDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailToSendWitDetailsRaw(new List<string>() { "MailServerSetting" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendListByMailServerSetting(long idMailServerSetting)
        {
            BusinessResponse<BaseListReturnType<MailToSend>> response = new BusinessResponse<BaseListReturnType<MailToSend>>();
            try
            {
                response.Result = GetAllMailToSendListByMailServerSettingRaw(idMailServerSetting);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSend> GetAllMailToSendListByMailServerSettingRaw(long idMailServerSetting)
        {
            return daoFactory.MailToSendDao.GetAllMailToSendListByMailServerSetting(idMailServerSetting);
        }

        public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendListByMailServerSettingByPage(long idMailServerSetting, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<MailToSend>> response = new BusinessResponse<BaseListReturnType<MailToSend>>();
            try
            {
                response.Result = GetAllMailToSendListByMailServerSettingByPageRaw(idMailServerSetting, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSend> GetAllMailToSendListByMailServerSettingByPageRaw(long idMailServerSetting,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.MailToSendDao.GetAllMailToSendListByMailServerSettingByPage(idMailServerSetting, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendsWithMailStatuDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailToSend>> response = new BusinessResponse<BaseListReturnType<MailToSend>>();
            try
            {
                response.Result = GetAllMailToSendsWithMailStatuDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSend> GetAllMailToSendsWithMailStatuDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailToSendWitDetailsRaw(new List<string>() { "MailStatu" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendListByMailStatu(long idMailStatu)
        {
            BusinessResponse<BaseListReturnType<MailToSend>> response = new BusinessResponse<BaseListReturnType<MailToSend>>();
            try
            {
                response.Result = GetAllMailToSendListByMailStatuRaw(idMailStatu);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSend> GetAllMailToSendListByMailStatuRaw(long idMailStatu)
        {
            return daoFactory.MailToSendDao.GetAllMailToSendListByMailStatu(idMailStatu);
        }

        public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendListByMailStatuByPage(long idMailStatu, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<MailToSend>> response = new BusinessResponse<BaseListReturnType<MailToSend>>();
            try
            {
                response.Result = GetAllMailToSendListByMailStatuByPageRaw(idMailStatu, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSend> GetAllMailToSendListByMailStatuByPageRaw(long idMailStatu,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.MailToSendDao.GetAllMailToSendListByMailStatuByPage(idMailStatu, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendsWithMailToSendDocumentsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailToSend>> response = new BusinessResponse<BaseListReturnType<MailToSend>>();
            try
            {
                response.Result = GetAllMailToSendsWithMailToSendDocumentsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSend> GetAllMailToSendsWithMailToSendDocumentsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailToSendWitDetailsRaw(new List<string>() { "MailToSendDocuments" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<MailToSend>> GetAllMailToSendsWithTransaction_MailToSendDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailToSend>> response = new BusinessResponse<BaseListReturnType<MailToSend>>();
            try
            {
                response.Result = GetAllMailToSendsWithTransaction_MailToSendDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSend> GetAllMailToSendsWithTransaction_MailToSendDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailToSendWitDetailsRaw(new List<string>() { "Transaction_MailToSend" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<MailRecipient>>  UpdateMailRecipientsForMailToSendWithoutSavingNewItem(List<MailRecipient> newMailRecipients,long idMailToSend)
            {
                BusinessResponse<List<MailRecipient>> response = new BusinessResponse<List<MailRecipient>>();
                try
                {
                    response.Result = UpdateMailRecipientsForMailToSendWithoutSavingNewItemRaw(newMailRecipients, idMailToSend);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<MailRecipient> UpdateMailRecipientsForMailToSendWithoutSavingNewItemRaw(List<MailRecipient> newMailRecipients,long idMailToSend)
            {
                return daoFactory.MailToSendDao.UpdateMailRecipientsForMailToSendWithoutSavingNewItem(newMailRecipients,idMailToSend); 
            }



		    public BusinessResponse<List<MailRecipient>>  UpdateMailRecipientsForMailToSend(List<MailRecipient> newMailRecipients,long idMailToSend)
            {
                BusinessResponse<List<MailRecipient>> response = new BusinessResponse<List<MailRecipient>>();
                try
                {
                    response.Result = UpdateMailRecipientsForMailToSendRaw(newMailRecipients, idMailToSend);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<MailRecipient> UpdateMailRecipientsForMailToSendRaw(List<MailRecipient> newMailRecipients,long idMailToSend)
            {
                return daoFactory.MailToSendDao.UpdateMailRecipientsForMailToSend(newMailRecipients,idMailToSend); 
            }





		public BusinessResponse<MailToSend> GetMailToSendWithMailRecipientsDetails(long idMailToSend,bool shouldRemap=false)
        {
            BusinessResponse<MailToSend> response = new BusinessResponse<MailToSend>();
            try
            {
                response.Result = GetMailToSendWithMailRecipientsDetailsRaw(idMailToSend,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailToSend GetMailToSendWithMailRecipientsDetailsRaw(long idMailToSend,bool shouldRemap=false)
        {
            return GetMailToSendWitDetailsRaw(idMailToSend,new List<string>() { "MailRecipients"},shouldRemap);
        }

		



		public BusinessResponse<MailToSend> GetMailToSendWithMailServerSettingDetails(long idMailToSend,bool shouldRemap=false)
        {
            BusinessResponse<MailToSend> response = new BusinessResponse<MailToSend>();
            try
            {
                response.Result = GetMailToSendWithMailServerSettingDetailsRaw(idMailToSend,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailToSend GetMailToSendWithMailServerSettingDetailsRaw(long idMailToSend,bool shouldRemap=false)
        {
            return GetMailToSendWitDetailsRaw(idMailToSend,new List<string>() { "MailServerSetting"},shouldRemap);
        }

		



		public BusinessResponse<MailToSend> GetMailToSendWithMailStatuDetails(long idMailToSend,bool shouldRemap=false)
        {
            BusinessResponse<MailToSend> response = new BusinessResponse<MailToSend>();
            try
            {
                response.Result = GetMailToSendWithMailStatuDetailsRaw(idMailToSend,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailToSend GetMailToSendWithMailStatuDetailsRaw(long idMailToSend,bool shouldRemap=false)
        {
            return GetMailToSendWitDetailsRaw(idMailToSend,new List<string>() { "MailStatu"},shouldRemap);
        }

		
			public BusinessResponse<List<MailToSendDocument>>  UpdateMailToSendDocumentsForMailToSendWithoutSavingNewItem(List<MailToSendDocument> newMailToSendDocuments,long idMailToSend)
            {
                BusinessResponse<List<MailToSendDocument>> response = new BusinessResponse<List<MailToSendDocument>>();
                try
                {
                    response.Result = UpdateMailToSendDocumentsForMailToSendWithoutSavingNewItemRaw(newMailToSendDocuments, idMailToSend);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<MailToSendDocument> UpdateMailToSendDocumentsForMailToSendWithoutSavingNewItemRaw(List<MailToSendDocument> newMailToSendDocuments,long idMailToSend)
            {
                return daoFactory.MailToSendDao.UpdateMailToSendDocumentsForMailToSendWithoutSavingNewItem(newMailToSendDocuments,idMailToSend); 
            }



		    public BusinessResponse<List<MailToSendDocument>>  UpdateMailToSendDocumentsForMailToSend(List<MailToSendDocument> newMailToSendDocuments,long idMailToSend)
            {
                BusinessResponse<List<MailToSendDocument>> response = new BusinessResponse<List<MailToSendDocument>>();
                try
                {
                    response.Result = UpdateMailToSendDocumentsForMailToSendRaw(newMailToSendDocuments, idMailToSend);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<MailToSendDocument> UpdateMailToSendDocumentsForMailToSendRaw(List<MailToSendDocument> newMailToSendDocuments,long idMailToSend)
            {
                return daoFactory.MailToSendDao.UpdateMailToSendDocumentsForMailToSend(newMailToSendDocuments,idMailToSend); 
            }





		public BusinessResponse<MailToSend> GetMailToSendWithMailToSendDocumentsDetails(long idMailToSend,bool shouldRemap=false)
        {
            BusinessResponse<MailToSend> response = new BusinessResponse<MailToSend>();
            try
            {
                response.Result = GetMailToSendWithMailToSendDocumentsDetailsRaw(idMailToSend,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailToSend GetMailToSendWithMailToSendDocumentsDetailsRaw(long idMailToSend,bool shouldRemap=false)
        {
            return GetMailToSendWitDetailsRaw(idMailToSend,new List<string>() { "MailToSendDocuments"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction_MailToSend>>  UpdateTransaction_MailToSendForMailToSendWithoutSavingNewItem(List<Transaction_MailToSend> newTransaction_MailToSend,long idMailToSend)
            {
                BusinessResponse<List<Transaction_MailToSend>> response = new BusinessResponse<List<Transaction_MailToSend>>();
                try
                {
                    response.Result = UpdateTransaction_MailToSendForMailToSendWithoutSavingNewItemRaw(newTransaction_MailToSend, idMailToSend);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction_MailToSend> UpdateTransaction_MailToSendForMailToSendWithoutSavingNewItemRaw(List<Transaction_MailToSend> newTransaction_MailToSend,long idMailToSend)
            {
                return daoFactory.MailToSendDao.UpdateTransaction_MailToSendForMailToSendWithoutSavingNewItem(newTransaction_MailToSend,idMailToSend); 
            }



		    public BusinessResponse<List<Transaction_MailToSend>>  UpdateTransaction_MailToSendForMailToSend(List<Transaction_MailToSend> newTransaction_MailToSend,long idMailToSend)
            {
                BusinessResponse<List<Transaction_MailToSend>> response = new BusinessResponse<List<Transaction_MailToSend>>();
                try
                {
                    response.Result = UpdateTransaction_MailToSendForMailToSendRaw(newTransaction_MailToSend, idMailToSend);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction_MailToSend> UpdateTransaction_MailToSendForMailToSendRaw(List<Transaction_MailToSend> newTransaction_MailToSend,long idMailToSend)
            {
                return daoFactory.MailToSendDao.UpdateTransaction_MailToSendForMailToSend(newTransaction_MailToSend,idMailToSend); 
            }





		public BusinessResponse<MailToSend> GetMailToSendWithTransaction_MailToSendDetails(long idMailToSend,bool shouldRemap=false)
        {
            BusinessResponse<MailToSend> response = new BusinessResponse<MailToSend>();
            try
            {
                response.Result = GetMailToSendWithTransaction_MailToSendDetailsRaw(idMailToSend,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailToSend GetMailToSendWithTransaction_MailToSendDetailsRaw(long idMailToSend,bool shouldRemap=false)
        {
            return GetMailToSendWitDetailsRaw(idMailToSend,new List<string>() { "Transaction_MailToSend"},shouldRemap);
        }

		
        public BusinessResponse<MailToSend> GetMailToSend(long idMailToSend,bool shouldRemap=false)
        {
            BusinessResponse<MailToSend> response = new BusinessResponse<MailToSend>();
		    try
		    {
			    response.Result = GetMailToSendsRaw(idMailToSend,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal MailToSend GetMailToSendsRaw(long idMailToSend,bool shouldRemap=false)
        {
            return daoFactory.MailToSendDao.GetMailToSend(idMailToSend,shouldRemap);
        }

        
        public BusinessResponse<MailToSend> GetMailToSendWitDetails(long idMailToSend,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<MailToSend> response = new BusinessResponse<MailToSend>();
		    try
		    {
			    response.Result = GetMailToSendWitDetailsRaw(idMailToSend,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal MailToSend GetMailToSendWitDetailsRaw(long idMailToSend,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.MailToSendDao.GetMailToSendWitDetails(idMailToSend,shouldRemap);
        }


		 public BusinessResponse<MailToSend> GetMailToSendCustom( Expression<Func<MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<MailToSend> response = new BusinessResponse<MailToSend>();
		    try
		    {
			    response.Result = GetMailToSendCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal MailToSend GetMailToSendCustomRaw( Expression<Func<MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.MailToSendDao.GetMailToSendCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<MailToSend>> GetMailToSendCustomList( Expression<Func<MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<MailToSend, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<MailToSend>> response = new BusinessResponse<BaseListReturnType<MailToSend>>();
		    try
		    {
			    response.Result = GetMailToSendCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<MailToSend> GetMailToSendCustomListRaw( Expression<Func<MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<MailToSend, dynamic> orderExpression = null)
		{
            return daoFactory.MailToSendDao.GetMailToSendCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveMailToSend(MailToSend mailToSend)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveMailToSendRaw(mailToSend);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveMailToSendRaw(MailToSend mailToSend)
        {
            daoFactory.MailToSendDao.SaveMailToSend(mailToSend);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyMailToSend(MailToSend mailToSend)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyMailToSendRaw(mailToSend);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyMailToSendRaw(MailToSend mailToSend)
        {
            daoFactory.MailToSendDao.SaveOnlyMailToSend(mailToSend);
            return true;
        }

        public BusinessResponse<bool> DeleteMailToSend(MailToSend mailToSend)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteMailToSendRaw(mailToSend);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteMailToSendRaw(MailToSend mailToSend)
        {
            daoFactory.MailToSendDao.DeleteMailToSend(mailToSend);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyMailToSend(MailToSend mailToSend)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyMailToSendRaw(mailToSend);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyMailToSendRaw(MailToSend mailToSend)
        {
            daoFactory.MailToSendDao.DeletePermanentlyMailToSend(mailToSend);
            return true;
        }
	}
	public partial class MailToSendDocumentService: BaseService
	{
	    public BusinessResponse<List<MailToSendDocument>> GetAllMailToSendDocuments(bool shouldRemap=false)
        {
            BusinessResponse<List<MailToSendDocument>> response = new BusinessResponse<List<MailToSendDocument>>();
		    try
		    {
			    response.Result = GetAllMailToSendDocumentsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<MailToSendDocument> GetAllMailToSendDocumentsRaw(bool shouldRemap=false)
        {
            return daoFactory.MailToSendDocumentDao.GetAllMailToSendDocuments(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<MailToSendDocument>> GetAllMailToSendDocumentsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSendDocument, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<MailToSendDocument, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<MailToSendDocument>> response = new BusinessResponse<BaseListReturnType<MailToSendDocument>>();
		    try
		    {
			    response.Result = GetAllMailToSendDocumentsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSendDocument, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<MailToSendDocument, dynamic> orderExpression = null)
        {
            return daoFactory.MailToSendDocumentDao.GetAllMailToSendDocumentsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<MailToSendDocument>> GetAllMailToSendDocumentsWithMailToSendDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<MailToSendDocument, bool>> expression = null,bool shouldRemap=false, Func<MailToSendDocument, dynamic> orderExpression = null)
			{
				return GetAllMailToSendDocumentsByPage(sortingPagingInfo, expression,new List<string>(){"MailToSend"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<MailToSendDocument>> GetAllMailToSendDocumentWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailToSendDocument>> response = new BusinessResponse<BaseListReturnType<MailToSendDocument>>();
            try
            {
                response.Result = GetAllMailToSendDocumentWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.MailToSendDocumentDao.GetAllMailToSendDocumentWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<MailToSendDocument>> GetMailToSendDocumentListByIdList(List<long> mailToSendDocumentIds)
        {
            BusinessResponse<List<MailToSendDocument>> response = new BusinessResponse<List<MailToSendDocument>>();
            try
            {
                response.Result = GetMailToSendDocumentListByIdListRaw(mailToSendDocumentIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<MailToSendDocument> GetMailToSendDocumentListByIdListRaw(List<long> mailToSendDocumentIds)
        {
            return daoFactory.MailToSendDocumentDao.GetMailToSendDocumentListByIdList(mailToSendDocumentIds);
        }

					
		public BusinessResponse<BaseListReturnType<MailToSendDocument>> GetAllMailToSendDocumentsWithMailToSendDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<MailToSendDocument>> response = new BusinessResponse<BaseListReturnType<MailToSendDocument>>();
            try
            {
                response.Result = GetAllMailToSendDocumentsWithMailToSendDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentsWithMailToSendDetailsRaw(bool shouldRemap=false)
        {
            return GetAllMailToSendDocumentWitDetailsRaw(new List<string>() { "MailToSend" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<MailToSendDocument>> GetAllMailToSendDocumentListByMailToSend(long idMailToSend)
        {
            BusinessResponse<BaseListReturnType<MailToSendDocument>> response = new BusinessResponse<BaseListReturnType<MailToSendDocument>>();
            try
            {
                response.Result = GetAllMailToSendDocumentListByMailToSendRaw(idMailToSend);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentListByMailToSendRaw(long idMailToSend)
        {
            return daoFactory.MailToSendDocumentDao.GetAllMailToSendDocumentListByMailToSend(idMailToSend);
        }

        public BusinessResponse<BaseListReturnType<MailToSendDocument>> GetAllMailToSendDocumentListByMailToSendByPage(long idMailToSend, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<MailToSendDocument>> response = new BusinessResponse<BaseListReturnType<MailToSendDocument>>();
            try
            {
                response.Result = GetAllMailToSendDocumentListByMailToSendByPageRaw(idMailToSend, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<MailToSendDocument> GetAllMailToSendDocumentListByMailToSendByPageRaw(long idMailToSend,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.MailToSendDocumentDao.GetAllMailToSendDocumentListByMailToSendByPage(idMailToSend, sortingPagingInfo);
        }

		
		



		public BusinessResponse<MailToSendDocument> GetMailToSendDocumentWithMailToSendDetails(long idMailToSendDocument,bool shouldRemap=false)
        {
            BusinessResponse<MailToSendDocument> response = new BusinessResponse<MailToSendDocument>();
            try
            {
                response.Result = GetMailToSendDocumentWithMailToSendDetailsRaw(idMailToSendDocument,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal MailToSendDocument GetMailToSendDocumentWithMailToSendDetailsRaw(long idMailToSendDocument,bool shouldRemap=false)
        {
            return GetMailToSendDocumentWitDetailsRaw(idMailToSendDocument,new List<string>() { "MailToSend"},shouldRemap);
        }

		
        public BusinessResponse<MailToSendDocument> GetMailToSendDocument(long idMailToSendDocument,bool shouldRemap=false)
        {
            BusinessResponse<MailToSendDocument> response = new BusinessResponse<MailToSendDocument>();
		    try
		    {
			    response.Result = GetMailToSendDocumentsRaw(idMailToSendDocument,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal MailToSendDocument GetMailToSendDocumentsRaw(long idMailToSendDocument,bool shouldRemap=false)
        {
            return daoFactory.MailToSendDocumentDao.GetMailToSendDocument(idMailToSendDocument,shouldRemap);
        }

        
        public BusinessResponse<MailToSendDocument> GetMailToSendDocumentWitDetails(long idMailToSendDocument,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<MailToSendDocument> response = new BusinessResponse<MailToSendDocument>();
		    try
		    {
			    response.Result = GetMailToSendDocumentWitDetailsRaw(idMailToSendDocument,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal MailToSendDocument GetMailToSendDocumentWitDetailsRaw(long idMailToSendDocument,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.MailToSendDocumentDao.GetMailToSendDocumentWitDetails(idMailToSendDocument,shouldRemap);
        }


		 public BusinessResponse<MailToSendDocument> GetMailToSendDocumentCustom( Expression<Func<MailToSendDocument, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<MailToSendDocument> response = new BusinessResponse<MailToSendDocument>();
		    try
		    {
			    response.Result = GetMailToSendDocumentCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal MailToSendDocument GetMailToSendDocumentCustomRaw( Expression<Func<MailToSendDocument, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.MailToSendDocumentDao.GetMailToSendDocumentCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<MailToSendDocument>> GetMailToSendDocumentCustomList( Expression<Func<MailToSendDocument, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<MailToSendDocument, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<MailToSendDocument>> response = new BusinessResponse<BaseListReturnType<MailToSendDocument>>();
		    try
		    {
			    response.Result = GetMailToSendDocumentCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<MailToSendDocument> GetMailToSendDocumentCustomListRaw( Expression<Func<MailToSendDocument, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<MailToSendDocument, dynamic> orderExpression = null)
		{
            return daoFactory.MailToSendDocumentDao.GetMailToSendDocumentCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveMailToSendDocument(MailToSendDocument mailToSendDocument)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveMailToSendDocumentRaw(mailToSendDocument);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveMailToSendDocumentRaw(MailToSendDocument mailToSendDocument)
        {
            daoFactory.MailToSendDocumentDao.SaveMailToSendDocument(mailToSendDocument);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyMailToSendDocument(MailToSendDocument mailToSendDocument)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyMailToSendDocumentRaw(mailToSendDocument);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyMailToSendDocumentRaw(MailToSendDocument mailToSendDocument)
        {
            daoFactory.MailToSendDocumentDao.SaveOnlyMailToSendDocument(mailToSendDocument);
            return true;
        }

        public BusinessResponse<bool> DeleteMailToSendDocument(MailToSendDocument mailToSendDocument)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteMailToSendDocumentRaw(mailToSendDocument);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteMailToSendDocumentRaw(MailToSendDocument mailToSendDocument)
        {
            daoFactory.MailToSendDocumentDao.DeleteMailToSendDocument(mailToSendDocument);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyMailToSendDocument(MailToSendDocument mailToSendDocument)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyMailToSendDocumentRaw(mailToSendDocument);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyMailToSendDocumentRaw(MailToSendDocument mailToSendDocument)
        {
            daoFactory.MailToSendDocumentDao.DeletePermanentlyMailToSendDocument(mailToSendDocument);
            return true;
        }
	}
	public partial class NLogDetailService: BaseService
	{
	    public BusinessResponse<List<NLogDetail>> GetAllNLogDetails(bool shouldRemap=false)
        {
            BusinessResponse<List<NLogDetail>> response = new BusinessResponse<List<NLogDetail>>();
		    try
		    {
			    response.Result = GetAllNLogDetailsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<NLogDetail> GetAllNLogDetailsRaw(bool shouldRemap=false)
        {
            return daoFactory.NLogDetailDao.GetAllNLogDetails(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<NLogDetail>> GetAllNLogDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<NLogDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<NLogDetail, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<NLogDetail>> response = new BusinessResponse<BaseListReturnType<NLogDetail>>();
		    try
		    {
			    response.Result = GetAllNLogDetailsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<NLogDetail> GetAllNLogDetailsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<NLogDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<NLogDetail, dynamic> orderExpression = null)
        {
            return daoFactory.NLogDetailDao.GetAllNLogDetailsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

		
		public BusinessResponse<BaseListReturnType<NLogDetail>> GetAllNLogDetailWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<NLogDetail>> response = new BusinessResponse<BaseListReturnType<NLogDetail>>();
            try
            {
                response.Result = GetAllNLogDetailWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<NLogDetail> GetAllNLogDetailWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.NLogDetailDao.GetAllNLogDetailWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<NLogDetail>> GetNLogDetailListByIdList(List<long> nLogDetailIds)
        {
            BusinessResponse<List<NLogDetail>> response = new BusinessResponse<List<NLogDetail>>();
            try
            {
                response.Result = GetNLogDetailListByIdListRaw(nLogDetailIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<NLogDetail> GetNLogDetailListByIdListRaw(List<long> nLogDetailIds)
        {
            return daoFactory.NLogDetailDao.GetNLogDetailListByIdList(nLogDetailIds);
        }

		
		
        public BusinessResponse<NLogDetail> GetNLogDetail(long idNLogDetail,bool shouldRemap=false)
        {
            BusinessResponse<NLogDetail> response = new BusinessResponse<NLogDetail>();
		    try
		    {
			    response.Result = GetNLogDetailsRaw(idNLogDetail,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal NLogDetail GetNLogDetailsRaw(long idNLogDetail,bool shouldRemap=false)
        {
            return daoFactory.NLogDetailDao.GetNLogDetail(idNLogDetail,shouldRemap);
        }

        
        public BusinessResponse<NLogDetail> GetNLogDetailWitDetails(long idNLogDetail,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<NLogDetail> response = new BusinessResponse<NLogDetail>();
		    try
		    {
			    response.Result = GetNLogDetailWitDetailsRaw(idNLogDetail,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal NLogDetail GetNLogDetailWitDetailsRaw(long idNLogDetail,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.NLogDetailDao.GetNLogDetailWitDetails(idNLogDetail,shouldRemap);
        }


		 public BusinessResponse<NLogDetail> GetNLogDetailCustom( Expression<Func<NLogDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<NLogDetail> response = new BusinessResponse<NLogDetail>();
		    try
		    {
			    response.Result = GetNLogDetailCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal NLogDetail GetNLogDetailCustomRaw( Expression<Func<NLogDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.NLogDetailDao.GetNLogDetailCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<NLogDetail>> GetNLogDetailCustomList( Expression<Func<NLogDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<NLogDetail, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<NLogDetail>> response = new BusinessResponse<BaseListReturnType<NLogDetail>>();
		    try
		    {
			    response.Result = GetNLogDetailCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<NLogDetail> GetNLogDetailCustomListRaw( Expression<Func<NLogDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<NLogDetail, dynamic> orderExpression = null)
		{
            return daoFactory.NLogDetailDao.GetNLogDetailCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveNLogDetail(NLogDetail nLogDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveNLogDetailRaw(nLogDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveNLogDetailRaw(NLogDetail nLogDetail)
        {
            daoFactory.NLogDetailDao.SaveNLogDetail(nLogDetail);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyNLogDetail(NLogDetail nLogDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyNLogDetailRaw(nLogDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyNLogDetailRaw(NLogDetail nLogDetail)
        {
            daoFactory.NLogDetailDao.SaveOnlyNLogDetail(nLogDetail);
            return true;
        }

        public BusinessResponse<bool> DeleteNLogDetail(NLogDetail nLogDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteNLogDetailRaw(nLogDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteNLogDetailRaw(NLogDetail nLogDetail)
        {
            daoFactory.NLogDetailDao.DeleteNLogDetail(nLogDetail);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyNLogDetail(NLogDetail nLogDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyNLogDetailRaw(nLogDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyNLogDetailRaw(NLogDetail nLogDetail)
        {
            daoFactory.NLogDetailDao.DeletePermanentlyNLogDetail(nLogDetail);
            return true;
        }
	}
	public partial class OrderService: BaseService
	{
	    public BusinessResponse<List<Order>> GetAllOrders(bool shouldRemap=false)
        {
            BusinessResponse<List<Order>> response = new BusinessResponse<List<Order>>();
		    try
		    {
			    response.Result = GetAllOrdersRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Order> GetAllOrdersRaw(bool shouldRemap=false)
        {
            return daoFactory.OrderDao.GetAllOrders(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Order>> GetAllOrdersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Order, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
		    try
		    {
			    response.Result = GetAllOrdersByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrdersByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Order, dynamic> orderExpression = null)
        {
            return daoFactory.OrderDao.GetAllOrdersByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Order>> GetAllOrdersWithBankStatementStagingHitsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap=false, Func<Order, dynamic> orderExpression = null)
			{
				return GetAllOrdersByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingHits"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Order>> GetAllOrdersWithUserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap=false, Func<Order, dynamic> orderExpression = null)
			{
				return GetAllOrdersByPage(sortingPagingInfo, expression,new List<string>(){"User"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Order>> GetAllOrdersWithOrderConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap=false, Func<Order, dynamic> orderExpression = null)
			{
				return GetAllOrdersByPage(sortingPagingInfo, expression,new List<string>(){"OrderConcept"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Order>> GetAllOrdersWithOrderStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap=false, Func<Order, dynamic> orderExpression = null)
			{
				return GetAllOrdersByPage(sortingPagingInfo, expression,new List<string>(){"OrderState"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Order>> GetAllOrdersWithOrderDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Order, bool>> expression = null,bool shouldRemap=false, Func<Order, dynamic> orderExpression = null)
			{
				return GetAllOrdersByPage(sortingPagingInfo, expression,new List<string>(){"OrderDetails"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Order>> GetAllOrderWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
            try
            {
                response.Result = GetAllOrderWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrderWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderDao.GetAllOrderWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Order>> GetOrderListByIdList(List<long> orderIds)
        {
            BusinessResponse<List<Order>> response = new BusinessResponse<List<Order>>();
            try
            {
                response.Result = GetOrderListByIdListRaw(orderIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Order> GetOrderListByIdListRaw(List<long> orderIds)
        {
            return daoFactory.OrderDao.GetOrderListByIdList(orderIds);
        }

					
		public BusinessResponse<BaseListReturnType<Order>> GetAllOrdersWithBankStatementStagingHitsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
            try
            {
                response.Result = GetAllOrdersWithBankStatementStagingHitsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrdersWithBankStatementStagingHitsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderWitDetailsRaw(new List<string>() { "BankStatementStagingHits" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Order>> GetAllOrdersWithUserDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
            try
            {
                response.Result = GetAllOrdersWithUserDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrdersWithUserDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderWitDetailsRaw(new List<string>() { "User" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Order>> GetAllOrderListByUser(long idUser)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
            try
            {
                response.Result = GetAllOrderListByUserRaw(idUser);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrderListByUserRaw(long idUser)
        {
            return daoFactory.OrderDao.GetAllOrderListByUser(idUser);
        }

        public BusinessResponse<BaseListReturnType<Order>> GetAllOrderListByUserByPage(long idUser, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
            try
            {
                response.Result = GetAllOrderListByUserByPageRaw(idUser, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrderListByUserByPageRaw(long idUser,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.OrderDao.GetAllOrderListByUserByPage(idUser, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Order>> GetAllOrdersWithOrderConceptDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
            try
            {
                response.Result = GetAllOrdersWithOrderConceptDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrdersWithOrderConceptDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderWitDetailsRaw(new List<string>() { "OrderConcept" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Order>> GetAllOrderListByOrderConcept(long idOrderConcept)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
            try
            {
                response.Result = GetAllOrderListByOrderConceptRaw(idOrderConcept);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrderListByOrderConceptRaw(long idOrderConcept)
        {
            return daoFactory.OrderDao.GetAllOrderListByOrderConcept(idOrderConcept);
        }

        public BusinessResponse<BaseListReturnType<Order>> GetAllOrderListByOrderConceptByPage(long idOrderConcept, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
            try
            {
                response.Result = GetAllOrderListByOrderConceptByPageRaw(idOrderConcept, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrderListByOrderConceptByPageRaw(long idOrderConcept,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.OrderDao.GetAllOrderListByOrderConceptByPage(idOrderConcept, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Order>> GetAllOrdersWithOrderStateDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
            try
            {
                response.Result = GetAllOrdersWithOrderStateDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrdersWithOrderStateDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderWitDetailsRaw(new List<string>() { "OrderState" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Order>> GetAllOrderListByOrderState(long idOrderState)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
            try
            {
                response.Result = GetAllOrderListByOrderStateRaw(idOrderState);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrderListByOrderStateRaw(long idOrderState)
        {
            return daoFactory.OrderDao.GetAllOrderListByOrderState(idOrderState);
        }

        public BusinessResponse<BaseListReturnType<Order>> GetAllOrderListByOrderStateByPage(long idOrderState, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
            try
            {
                response.Result = GetAllOrderListByOrderStateByPageRaw(idOrderState, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrderListByOrderStateByPageRaw(long idOrderState,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.OrderDao.GetAllOrderListByOrderStateByPage(idOrderState, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Order>> GetAllOrdersWithOrderDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
            try
            {
                response.Result = GetAllOrdersWithOrderDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Order> GetAllOrdersWithOrderDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderWitDetailsRaw(new List<string>() { "OrderDetails" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<BankStatementStagingHit>>  UpdateBankStatementStagingHitsForOrderWithoutSavingNewItem(List<BankStatementStagingHit> newBankStatementStagingHits,long idOrder)
            {
                BusinessResponse<List<BankStatementStagingHit>> response = new BusinessResponse<List<BankStatementStagingHit>>();
                try
                {
                    response.Result = UpdateBankStatementStagingHitsForOrderWithoutSavingNewItemRaw(newBankStatementStagingHits, idOrder);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingHit> UpdateBankStatementStagingHitsForOrderWithoutSavingNewItemRaw(List<BankStatementStagingHit> newBankStatementStagingHits,long idOrder)
            {
                return daoFactory.OrderDao.UpdateBankStatementStagingHitsForOrderWithoutSavingNewItem(newBankStatementStagingHits,idOrder); 
            }



		    public BusinessResponse<List<BankStatementStagingHit>>  UpdateBankStatementStagingHitsForOrder(List<BankStatementStagingHit> newBankStatementStagingHits,long idOrder)
            {
                BusinessResponse<List<BankStatementStagingHit>> response = new BusinessResponse<List<BankStatementStagingHit>>();
                try
                {
                    response.Result = UpdateBankStatementStagingHitsForOrderRaw(newBankStatementStagingHits, idOrder);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingHit> UpdateBankStatementStagingHitsForOrderRaw(List<BankStatementStagingHit> newBankStatementStagingHits,long idOrder)
            {
                return daoFactory.OrderDao.UpdateBankStatementStagingHitsForOrder(newBankStatementStagingHits,idOrder); 
            }





		public BusinessResponse<Order> GetOrderWithBankStatementStagingHitsDetails(long idOrder,bool shouldRemap=false)
        {
            BusinessResponse<Order> response = new BusinessResponse<Order>();
            try
            {
                response.Result = GetOrderWithBankStatementStagingHitsDetailsRaw(idOrder,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Order GetOrderWithBankStatementStagingHitsDetailsRaw(long idOrder,bool shouldRemap=false)
        {
            return GetOrderWitDetailsRaw(idOrder,new List<string>() { "BankStatementStagingHits"},shouldRemap);
        }

		



		public BusinessResponse<Order> GetOrderWithUserDetails(long idOrder,bool shouldRemap=false)
        {
            BusinessResponse<Order> response = new BusinessResponse<Order>();
            try
            {
                response.Result = GetOrderWithUserDetailsRaw(idOrder,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Order GetOrderWithUserDetailsRaw(long idOrder,bool shouldRemap=false)
        {
            return GetOrderWitDetailsRaw(idOrder,new List<string>() { "User"},shouldRemap);
        }

		



		public BusinessResponse<Order> GetOrderWithOrderConceptDetails(long idOrder,bool shouldRemap=false)
        {
            BusinessResponse<Order> response = new BusinessResponse<Order>();
            try
            {
                response.Result = GetOrderWithOrderConceptDetailsRaw(idOrder,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Order GetOrderWithOrderConceptDetailsRaw(long idOrder,bool shouldRemap=false)
        {
            return GetOrderWitDetailsRaw(idOrder,new List<string>() { "OrderConcept"},shouldRemap);
        }

		



		public BusinessResponse<Order> GetOrderWithOrderStateDetails(long idOrder,bool shouldRemap=false)
        {
            BusinessResponse<Order> response = new BusinessResponse<Order>();
            try
            {
                response.Result = GetOrderWithOrderStateDetailsRaw(idOrder,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Order GetOrderWithOrderStateDetailsRaw(long idOrder,bool shouldRemap=false)
        {
            return GetOrderWitDetailsRaw(idOrder,new List<string>() { "OrderState"},shouldRemap);
        }

		
			public BusinessResponse<List<OrderDetail>>  UpdateOrderDetailsForOrderWithoutSavingNewItem(List<OrderDetail> newOrderDetails,long idOrder)
            {
                BusinessResponse<List<OrderDetail>> response = new BusinessResponse<List<OrderDetail>>();
                try
                {
                    response.Result = UpdateOrderDetailsForOrderWithoutSavingNewItemRaw(newOrderDetails, idOrder);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderDetail> UpdateOrderDetailsForOrderWithoutSavingNewItemRaw(List<OrderDetail> newOrderDetails,long idOrder)
            {
                return daoFactory.OrderDao.UpdateOrderDetailsForOrderWithoutSavingNewItem(newOrderDetails,idOrder); 
            }



		    public BusinessResponse<List<OrderDetail>>  UpdateOrderDetailsForOrder(List<OrderDetail> newOrderDetails,long idOrder)
            {
                BusinessResponse<List<OrderDetail>> response = new BusinessResponse<List<OrderDetail>>();
                try
                {
                    response.Result = UpdateOrderDetailsForOrderRaw(newOrderDetails, idOrder);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderDetail> UpdateOrderDetailsForOrderRaw(List<OrderDetail> newOrderDetails,long idOrder)
            {
                return daoFactory.OrderDao.UpdateOrderDetailsForOrder(newOrderDetails,idOrder); 
            }





		public BusinessResponse<Order> GetOrderWithOrderDetailsDetails(long idOrder,bool shouldRemap=false)
        {
            BusinessResponse<Order> response = new BusinessResponse<Order>();
            try
            {
                response.Result = GetOrderWithOrderDetailsDetailsRaw(idOrder,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Order GetOrderWithOrderDetailsDetailsRaw(long idOrder,bool shouldRemap=false)
        {
            return GetOrderWitDetailsRaw(idOrder,new List<string>() { "OrderDetails"},shouldRemap);
        }

		
        public BusinessResponse<Order> GetOrder(long idOrder,bool shouldRemap=false)
        {
            BusinessResponse<Order> response = new BusinessResponse<Order>();
		    try
		    {
			    response.Result = GetOrdersRaw(idOrder,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Order GetOrdersRaw(long idOrder,bool shouldRemap=false)
        {
            return daoFactory.OrderDao.GetOrder(idOrder,shouldRemap);
        }

        
        public BusinessResponse<Order> GetOrderWitDetails(long idOrder,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Order> response = new BusinessResponse<Order>();
		    try
		    {
			    response.Result = GetOrderWitDetailsRaw(idOrder,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Order GetOrderWitDetailsRaw(long idOrder,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderDao.GetOrderWitDetails(idOrder,shouldRemap);
        }


		 public BusinessResponse<Order> GetOrderCustom( Expression<Func<Order, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Order> response = new BusinessResponse<Order>();
		    try
		    {
			    response.Result = GetOrderCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Order GetOrderCustomRaw( Expression<Func<Order, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.OrderDao.GetOrderCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Order>> GetOrderCustomList( Expression<Func<Order, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Order, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Order>> response = new BusinessResponse<BaseListReturnType<Order>>();
		    try
		    {
			    response.Result = GetOrderCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Order> GetOrderCustomListRaw( Expression<Func<Order, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Order, dynamic> orderExpression = null)
		{
            return daoFactory.OrderDao.GetOrderCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveOrder(Order order)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOrderRaw(order);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOrderRaw(Order order)
        {
            daoFactory.OrderDao.SaveOrder(order);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyOrder(Order order)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyOrderRaw(order);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyOrderRaw(Order order)
        {
            daoFactory.OrderDao.SaveOnlyOrder(order);
            return true;
        }

        public BusinessResponse<bool> DeleteOrder(Order order)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteOrderRaw(order);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteOrderRaw(Order order)
        {
            daoFactory.OrderDao.DeleteOrder(order);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyOrder(Order order)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyOrderRaw(order);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyOrderRaw(Order order)
        {
            daoFactory.OrderDao.DeletePermanentlyOrder(order);
            return true;
        }
	}
	public partial class OrderAddressService: BaseService
	{
	    public BusinessResponse<List<OrderAddress>> GetAllOrderAddresses(bool shouldRemap=false)
        {
            BusinessResponse<List<OrderAddress>> response = new BusinessResponse<List<OrderAddress>>();
		    try
		    {
			    response.Result = GetAllOrderAddressesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<OrderAddress> GetAllOrderAddressesRaw(bool shouldRemap=false)
        {
            return daoFactory.OrderAddressDao.GetAllOrderAddresses(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<OrderAddress>> GetAllOrderAddressesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderAddress, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderAddress, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderAddress>>();
		    try
		    {
			    response.Result = GetAllOrderAddressesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<OrderAddress> GetAllOrderAddressesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderAddress, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderAddress, dynamic> orderExpression = null)
        {
            return daoFactory.OrderAddressDao.GetAllOrderAddressesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<OrderAddress>> GetAllOrderAddressesWithOrderConcept_OrderAddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderAddress, bool>> expression = null,bool shouldRemap=false, Func<OrderAddress, dynamic> orderExpression = null)
			{
				return GetAllOrderAddressesByPage(sortingPagingInfo, expression,new List<string>(){"OrderConcept_OrderAddress"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<OrderAddress>> GetAllOrderAddressWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderAddress>>();
            try
            {
                response.Result = GetAllOrderAddressWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderAddress> GetAllOrderAddressWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderAddressDao.GetAllOrderAddressWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<OrderAddress>> GetOrderAddressListByIdList(List<long> orderAddressIds)
        {
            BusinessResponse<List<OrderAddress>> response = new BusinessResponse<List<OrderAddress>>();
            try
            {
                response.Result = GetOrderAddressListByIdListRaw(orderAddressIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<OrderAddress> GetOrderAddressListByIdListRaw(List<long> orderAddressIds)
        {
            return daoFactory.OrderAddressDao.GetOrderAddressListByIdList(orderAddressIds);
        }

					
		public BusinessResponse<BaseListReturnType<OrderAddress>> GetAllOrderAddressesWithOrderConcept_OrderAddressDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderAddress>>();
            try
            {
                response.Result = GetAllOrderAddressesWithOrderConcept_OrderAddressDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderAddress> GetAllOrderAddressesWithOrderConcept_OrderAddressDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderAddressWitDetailsRaw(new List<string>() { "OrderConcept_OrderAddress" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<OrderConcept_OrderAddress>>  UpdateOrderConcept_OrderAddressForOrderAddressWithoutSavingNewItem(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderAddress)
            {
                BusinessResponse<List<OrderConcept_OrderAddress>> response = new BusinessResponse<List<OrderConcept_OrderAddress>>();
                try
                {
                    response.Result = UpdateOrderConcept_OrderAddressForOrderAddressWithoutSavingNewItemRaw(newOrderConcept_OrderAddress, idOrderAddress);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderConcept_OrderAddress> UpdateOrderConcept_OrderAddressForOrderAddressWithoutSavingNewItemRaw(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderAddress)
            {
                return daoFactory.OrderAddressDao.UpdateOrderConcept_OrderAddressForOrderAddressWithoutSavingNewItem(newOrderConcept_OrderAddress,idOrderAddress); 
            }



		    public BusinessResponse<List<OrderConcept_OrderAddress>>  UpdateOrderConcept_OrderAddressForOrderAddress(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderAddress)
            {
                BusinessResponse<List<OrderConcept_OrderAddress>> response = new BusinessResponse<List<OrderConcept_OrderAddress>>();
                try
                {
                    response.Result = UpdateOrderConcept_OrderAddressForOrderAddressRaw(newOrderConcept_OrderAddress, idOrderAddress);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderConcept_OrderAddress> UpdateOrderConcept_OrderAddressForOrderAddressRaw(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderAddress)
            {
                return daoFactory.OrderAddressDao.UpdateOrderConcept_OrderAddressForOrderAddress(newOrderConcept_OrderAddress,idOrderAddress); 
            }





		public BusinessResponse<OrderAddress> GetOrderAddressWithOrderConcept_OrderAddressDetails(long idOrderAddress,bool shouldRemap=false)
        {
            BusinessResponse<OrderAddress> response = new BusinessResponse<OrderAddress>();
            try
            {
                response.Result = GetOrderAddressWithOrderConcept_OrderAddressDetailsRaw(idOrderAddress,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderAddress GetOrderAddressWithOrderConcept_OrderAddressDetailsRaw(long idOrderAddress,bool shouldRemap=false)
        {
            return GetOrderAddressWitDetailsRaw(idOrderAddress,new List<string>() { "OrderConcept_OrderAddress"},shouldRemap);
        }

		
        public BusinessResponse<OrderAddress> GetOrderAddress(long idOrderAddress,bool shouldRemap=false)
        {
            BusinessResponse<OrderAddress> response = new BusinessResponse<OrderAddress>();
		    try
		    {
			    response.Result = GetOrderAddressesRaw(idOrderAddress,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderAddress GetOrderAddressesRaw(long idOrderAddress,bool shouldRemap=false)
        {
            return daoFactory.OrderAddressDao.GetOrderAddress(idOrderAddress,shouldRemap);
        }

        
        public BusinessResponse<OrderAddress> GetOrderAddressWitDetails(long idOrderAddress,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<OrderAddress> response = new BusinessResponse<OrderAddress>();
		    try
		    {
			    response.Result = GetOrderAddressWitDetailsRaw(idOrderAddress,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderAddress GetOrderAddressWitDetailsRaw(long idOrderAddress,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderAddressDao.GetOrderAddressWitDetails(idOrderAddress,shouldRemap);
        }


		 public BusinessResponse<OrderAddress> GetOrderAddressCustom( Expression<Func<OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<OrderAddress> response = new BusinessResponse<OrderAddress>();
		    try
		    {
			    response.Result = GetOrderAddressCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal OrderAddress GetOrderAddressCustomRaw( Expression<Func<OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.OrderAddressDao.GetOrderAddressCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<OrderAddress>> GetOrderAddressCustomList( Expression<Func<OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderAddress, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderAddress>>();
		    try
		    {
			    response.Result = GetOrderAddressCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<OrderAddress> GetOrderAddressCustomListRaw( Expression<Func<OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderAddress, dynamic> orderExpression = null)
		{
            return daoFactory.OrderAddressDao.GetOrderAddressCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveOrderAddress(OrderAddress orderAddress)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOrderAddressRaw(orderAddress);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOrderAddressRaw(OrderAddress orderAddress)
        {
            daoFactory.OrderAddressDao.SaveOrderAddress(orderAddress);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyOrderAddress(OrderAddress orderAddress)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyOrderAddressRaw(orderAddress);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyOrderAddressRaw(OrderAddress orderAddress)
        {
            daoFactory.OrderAddressDao.SaveOnlyOrderAddress(orderAddress);
            return true;
        }

        public BusinessResponse<bool> DeleteOrderAddress(OrderAddress orderAddress)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteOrderAddressRaw(orderAddress);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteOrderAddressRaw(OrderAddress orderAddress)
        {
            daoFactory.OrderAddressDao.DeleteOrderAddress(orderAddress);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyOrderAddress(OrderAddress orderAddress)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyOrderAddressRaw(orderAddress);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyOrderAddressRaw(OrderAddress orderAddress)
        {
            daoFactory.OrderAddressDao.DeletePermanentlyOrderAddress(orderAddress);
            return true;
        }
	}
	public partial class OrderCompanyService: BaseService
	{
	    public BusinessResponse<List<OrderCompany>> GetAllOrderCompanies(bool shouldRemap=false)
        {
            BusinessResponse<List<OrderCompany>> response = new BusinessResponse<List<OrderCompany>>();
		    try
		    {
			    response.Result = GetAllOrderCompaniesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<OrderCompany> GetAllOrderCompaniesRaw(bool shouldRemap=false)
        {
            return daoFactory.OrderCompanyDao.GetAllOrderCompanies(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<OrderCompany>> GetAllOrderCompaniesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderCompany, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderCompany, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<OrderCompany>> response = new BusinessResponse<BaseListReturnType<OrderCompany>>();
		    try
		    {
			    response.Result = GetAllOrderCompaniesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<OrderCompany> GetAllOrderCompaniesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderCompany, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderCompany, dynamic> orderExpression = null)
        {
            return daoFactory.OrderCompanyDao.GetAllOrderCompaniesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<OrderCompany>> GetAllOrderCompaniesWithOrderConceptsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderCompany, bool>> expression = null,bool shouldRemap=false, Func<OrderCompany, dynamic> orderExpression = null)
			{
				return GetAllOrderCompaniesByPage(sortingPagingInfo, expression,new List<string>(){"OrderConcepts"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<OrderCompany>> GetAllOrderCompanyWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderCompany>> response = new BusinessResponse<BaseListReturnType<OrderCompany>>();
            try
            {
                response.Result = GetAllOrderCompanyWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderCompany> GetAllOrderCompanyWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderCompanyDao.GetAllOrderCompanyWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<OrderCompany>> GetOrderCompanyListByIdList(List<long> orderCompanyIds)
        {
            BusinessResponse<List<OrderCompany>> response = new BusinessResponse<List<OrderCompany>>();
            try
            {
                response.Result = GetOrderCompanyListByIdListRaw(orderCompanyIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<OrderCompany> GetOrderCompanyListByIdListRaw(List<long> orderCompanyIds)
        {
            return daoFactory.OrderCompanyDao.GetOrderCompanyListByIdList(orderCompanyIds);
        }

					
		public BusinessResponse<BaseListReturnType<OrderCompany>> GetAllOrderCompaniesWithOrderConceptsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderCompany>> response = new BusinessResponse<BaseListReturnType<OrderCompany>>();
            try
            {
                response.Result = GetAllOrderCompaniesWithOrderConceptsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderCompany> GetAllOrderCompaniesWithOrderConceptsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderCompanyWitDetailsRaw(new List<string>() { "OrderConcepts" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<OrderConcept>>  UpdateOrderConceptsForOrderCompanyWithoutSavingNewItem(List<OrderConcept> newOrderConcepts,long idOrderCompany)
            {
                BusinessResponse<List<OrderConcept>> response = new BusinessResponse<List<OrderConcept>>();
                try
                {
                    response.Result = UpdateOrderConceptsForOrderCompanyWithoutSavingNewItemRaw(newOrderConcepts, idOrderCompany);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderConcept> UpdateOrderConceptsForOrderCompanyWithoutSavingNewItemRaw(List<OrderConcept> newOrderConcepts,long idOrderCompany)
            {
                return daoFactory.OrderCompanyDao.UpdateOrderConceptsForOrderCompanyWithoutSavingNewItem(newOrderConcepts,idOrderCompany); 
            }



		    public BusinessResponse<List<OrderConcept>>  UpdateOrderConceptsForOrderCompany(List<OrderConcept> newOrderConcepts,long idOrderCompany)
            {
                BusinessResponse<List<OrderConcept>> response = new BusinessResponse<List<OrderConcept>>();
                try
                {
                    response.Result = UpdateOrderConceptsForOrderCompanyRaw(newOrderConcepts, idOrderCompany);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderConcept> UpdateOrderConceptsForOrderCompanyRaw(List<OrderConcept> newOrderConcepts,long idOrderCompany)
            {
                return daoFactory.OrderCompanyDao.UpdateOrderConceptsForOrderCompany(newOrderConcepts,idOrderCompany); 
            }





		public BusinessResponse<OrderCompany> GetOrderCompanyWithOrderConceptsDetails(long idOrderCompany,bool shouldRemap=false)
        {
            BusinessResponse<OrderCompany> response = new BusinessResponse<OrderCompany>();
            try
            {
                response.Result = GetOrderCompanyWithOrderConceptsDetailsRaw(idOrderCompany,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderCompany GetOrderCompanyWithOrderConceptsDetailsRaw(long idOrderCompany,bool shouldRemap=false)
        {
            return GetOrderCompanyWitDetailsRaw(idOrderCompany,new List<string>() { "OrderConcepts"},shouldRemap);
        }

		
        public BusinessResponse<OrderCompany> GetOrderCompany(long idOrderCompany,bool shouldRemap=false)
        {
            BusinessResponse<OrderCompany> response = new BusinessResponse<OrderCompany>();
		    try
		    {
			    response.Result = GetOrderCompaniesRaw(idOrderCompany,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderCompany GetOrderCompaniesRaw(long idOrderCompany,bool shouldRemap=false)
        {
            return daoFactory.OrderCompanyDao.GetOrderCompany(idOrderCompany,shouldRemap);
        }

        
        public BusinessResponse<OrderCompany> GetOrderCompanyWitDetails(long idOrderCompany,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<OrderCompany> response = new BusinessResponse<OrderCompany>();
		    try
		    {
			    response.Result = GetOrderCompanyWitDetailsRaw(idOrderCompany,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderCompany GetOrderCompanyWitDetailsRaw(long idOrderCompany,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderCompanyDao.GetOrderCompanyWitDetails(idOrderCompany,shouldRemap);
        }


		 public BusinessResponse<OrderCompany> GetOrderCompanyCustom( Expression<Func<OrderCompany, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<OrderCompany> response = new BusinessResponse<OrderCompany>();
		    try
		    {
			    response.Result = GetOrderCompanyCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal OrderCompany GetOrderCompanyCustomRaw( Expression<Func<OrderCompany, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.OrderCompanyDao.GetOrderCompanyCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<OrderCompany>> GetOrderCompanyCustomList( Expression<Func<OrderCompany, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderCompany, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<OrderCompany>> response = new BusinessResponse<BaseListReturnType<OrderCompany>>();
		    try
		    {
			    response.Result = GetOrderCompanyCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<OrderCompany> GetOrderCompanyCustomListRaw( Expression<Func<OrderCompany, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderCompany, dynamic> orderExpression = null)
		{
            return daoFactory.OrderCompanyDao.GetOrderCompanyCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveOrderCompany(OrderCompany orderCompany)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOrderCompanyRaw(orderCompany);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOrderCompanyRaw(OrderCompany orderCompany)
        {
            daoFactory.OrderCompanyDao.SaveOrderCompany(orderCompany);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyOrderCompany(OrderCompany orderCompany)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyOrderCompanyRaw(orderCompany);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyOrderCompanyRaw(OrderCompany orderCompany)
        {
            daoFactory.OrderCompanyDao.SaveOnlyOrderCompany(orderCompany);
            return true;
        }

        public BusinessResponse<bool> DeleteOrderCompany(OrderCompany orderCompany)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteOrderCompanyRaw(orderCompany);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteOrderCompanyRaw(OrderCompany orderCompany)
        {
            daoFactory.OrderCompanyDao.DeleteOrderCompany(orderCompany);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyOrderCompany(OrderCompany orderCompany)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyOrderCompanyRaw(orderCompany);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyOrderCompanyRaw(OrderCompany orderCompany)
        {
            daoFactory.OrderCompanyDao.DeletePermanentlyOrderCompany(orderCompany);
            return true;
        }
	}
	public partial class OrderConceptService: BaseService
	{
	    public BusinessResponse<List<OrderConcept>> GetAllOrderConcepts(bool shouldRemap=false)
        {
            BusinessResponse<List<OrderConcept>> response = new BusinessResponse<List<OrderConcept>>();
		    try
		    {
			    response.Result = GetAllOrderConceptsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<OrderConcept> GetAllOrderConceptsRaw(bool shouldRemap=false)
        {
            return daoFactory.OrderConceptDao.GetAllOrderConcepts(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderConcept, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<OrderConcept>> response = new BusinessResponse<BaseListReturnType<OrderConcept>>();
		    try
		    {
			    response.Result = GetAllOrderConceptsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<OrderConcept> GetAllOrderConceptsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderConcept, dynamic> orderExpression = null)
        {
            return daoFactory.OrderConceptDao.GetAllOrderConceptsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptsWithOrdersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap=false, Func<OrderConcept, dynamic> orderExpression = null)
			{
				return GetAllOrderConceptsByPage(sortingPagingInfo, expression,new List<string>(){"Orders"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptsWithOrderCompanyDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap=false, Func<OrderConcept, dynamic> orderExpression = null)
			{
				return GetAllOrderConceptsByPage(sortingPagingInfo, expression,new List<string>(){"OrderCompany"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptsWithOrderConcept_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap=false, Func<OrderConcept, dynamic> orderExpression = null)
			{
				return GetAllOrderConceptsByPage(sortingPagingInfo, expression,new List<string>(){"OrderConcept_ContactType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptsWithOrderPersonDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap=false, Func<OrderConcept, dynamic> orderExpression = null)
			{
				return GetAllOrderConceptsByPage(sortingPagingInfo, expression,new List<string>(){"OrderPerson"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptsWithOrderConcept_OrderAddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept, bool>> expression = null,bool shouldRemap=false, Func<OrderConcept, dynamic> orderExpression = null)
			{
				return GetAllOrderConceptsByPage(sortingPagingInfo, expression,new List<string>(){"OrderConcept_OrderAddress"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderConcept>> response = new BusinessResponse<BaseListReturnType<OrderConcept>>();
            try
            {
                response.Result = GetAllOrderConceptWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept> GetAllOrderConceptWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderConceptDao.GetAllOrderConceptWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<OrderConcept>> GetOrderConceptListByIdList(List<long> orderConceptIds)
        {
            BusinessResponse<List<OrderConcept>> response = new BusinessResponse<List<OrderConcept>>();
            try
            {
                response.Result = GetOrderConceptListByIdListRaw(orderConceptIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<OrderConcept> GetOrderConceptListByIdListRaw(List<long> orderConceptIds)
        {
            return daoFactory.OrderConceptDao.GetOrderConceptListByIdList(orderConceptIds);
        }

					
		public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptsWithOrdersDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderConcept>> response = new BusinessResponse<BaseListReturnType<OrderConcept>>();
            try
            {
                response.Result = GetAllOrderConceptsWithOrdersDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrdersDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderConceptWitDetailsRaw(new List<string>() { "Orders" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptsWithOrderCompanyDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderConcept>> response = new BusinessResponse<BaseListReturnType<OrderConcept>>();
            try
            {
                response.Result = GetAllOrderConceptsWithOrderCompanyDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderCompanyDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderConceptWitDetailsRaw(new List<string>() { "OrderCompany" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptListByOrderCompany(long idOrderCompany)
        {
            BusinessResponse<BaseListReturnType<OrderConcept>> response = new BusinessResponse<BaseListReturnType<OrderConcept>>();
            try
            {
                response.Result = GetAllOrderConceptListByOrderCompanyRaw(idOrderCompany);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept> GetAllOrderConceptListByOrderCompanyRaw(long idOrderCompany)
        {
            return daoFactory.OrderConceptDao.GetAllOrderConceptListByOrderCompany(idOrderCompany);
        }

        public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptListByOrderCompanyByPage(long idOrderCompany, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<OrderConcept>> response = new BusinessResponse<BaseListReturnType<OrderConcept>>();
            try
            {
                response.Result = GetAllOrderConceptListByOrderCompanyByPageRaw(idOrderCompany, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept> GetAllOrderConceptListByOrderCompanyByPageRaw(long idOrderCompany,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.OrderConceptDao.GetAllOrderConceptListByOrderCompanyByPage(idOrderCompany, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptsWithOrderConcept_ContactTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderConcept>> response = new BusinessResponse<BaseListReturnType<OrderConcept>>();
            try
            {
                response.Result = GetAllOrderConceptsWithOrderConcept_ContactTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderConcept_ContactTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderConceptWitDetailsRaw(new List<string>() { "OrderConcept_ContactType" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptsWithOrderPersonDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderConcept>> response = new BusinessResponse<BaseListReturnType<OrderConcept>>();
            try
            {
                response.Result = GetAllOrderConceptsWithOrderPersonDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderPersonDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderConceptWitDetailsRaw(new List<string>() { "OrderPerson" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptListByOrderPerson(long idOrderPerson)
        {
            BusinessResponse<BaseListReturnType<OrderConcept>> response = new BusinessResponse<BaseListReturnType<OrderConcept>>();
            try
            {
                response.Result = GetAllOrderConceptListByOrderPersonRaw(idOrderPerson);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept> GetAllOrderConceptListByOrderPersonRaw(long idOrderPerson)
        {
            return daoFactory.OrderConceptDao.GetAllOrderConceptListByOrderPerson(idOrderPerson);
        }

        public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptListByOrderPersonByPage(long idOrderPerson, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<OrderConcept>> response = new BusinessResponse<BaseListReturnType<OrderConcept>>();
            try
            {
                response.Result = GetAllOrderConceptListByOrderPersonByPageRaw(idOrderPerson, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept> GetAllOrderConceptListByOrderPersonByPageRaw(long idOrderPerson,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.OrderConceptDao.GetAllOrderConceptListByOrderPersonByPage(idOrderPerson, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<OrderConcept>> GetAllOrderConceptsWithOrderConcept_OrderAddressDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderConcept>> response = new BusinessResponse<BaseListReturnType<OrderConcept>>();
            try
            {
                response.Result = GetAllOrderConceptsWithOrderConcept_OrderAddressDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept> GetAllOrderConceptsWithOrderConcept_OrderAddressDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderConceptWitDetailsRaw(new List<string>() { "OrderConcept_OrderAddress" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Order>>  UpdateOrdersForOrderConceptWithoutSavingNewItem(List<Order> newOrders,long idOrderConcept)
            {
                BusinessResponse<List<Order>> response = new BusinessResponse<List<Order>>();
                try
                {
                    response.Result = UpdateOrdersForOrderConceptWithoutSavingNewItemRaw(newOrders, idOrderConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Order> UpdateOrdersForOrderConceptWithoutSavingNewItemRaw(List<Order> newOrders,long idOrderConcept)
            {
                return daoFactory.OrderConceptDao.UpdateOrdersForOrderConceptWithoutSavingNewItem(newOrders,idOrderConcept); 
            }



		    public BusinessResponse<List<Order>>  UpdateOrdersForOrderConcept(List<Order> newOrders,long idOrderConcept)
            {
                BusinessResponse<List<Order>> response = new BusinessResponse<List<Order>>();
                try
                {
                    response.Result = UpdateOrdersForOrderConceptRaw(newOrders, idOrderConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Order> UpdateOrdersForOrderConceptRaw(List<Order> newOrders,long idOrderConcept)
            {
                return daoFactory.OrderConceptDao.UpdateOrdersForOrderConcept(newOrders,idOrderConcept); 
            }





		public BusinessResponse<OrderConcept> GetOrderConceptWithOrdersDetails(long idOrderConcept,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept> response = new BusinessResponse<OrderConcept>();
            try
            {
                response.Result = GetOrderConceptWithOrdersDetailsRaw(idOrderConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderConcept GetOrderConceptWithOrdersDetailsRaw(long idOrderConcept,bool shouldRemap=false)
        {
            return GetOrderConceptWitDetailsRaw(idOrderConcept,new List<string>() { "Orders"},shouldRemap);
        }

		



		public BusinessResponse<OrderConcept> GetOrderConceptWithOrderCompanyDetails(long idOrderConcept,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept> response = new BusinessResponse<OrderConcept>();
            try
            {
                response.Result = GetOrderConceptWithOrderCompanyDetailsRaw(idOrderConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderConcept GetOrderConceptWithOrderCompanyDetailsRaw(long idOrderConcept,bool shouldRemap=false)
        {
            return GetOrderConceptWitDetailsRaw(idOrderConcept,new List<string>() { "OrderCompany"},shouldRemap);
        }

		
			public BusinessResponse<List<OrderConcept_ContactType>>  UpdateOrderConcept_ContactTypeForOrderConceptWithoutSavingNewItem(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idOrderConcept)
            {
                BusinessResponse<List<OrderConcept_ContactType>> response = new BusinessResponse<List<OrderConcept_ContactType>>();
                try
                {
                    response.Result = UpdateOrderConcept_ContactTypeForOrderConceptWithoutSavingNewItemRaw(newOrderConcept_ContactType, idOrderConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderConcept_ContactType> UpdateOrderConcept_ContactTypeForOrderConceptWithoutSavingNewItemRaw(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idOrderConcept)
            {
                return daoFactory.OrderConceptDao.UpdateOrderConcept_ContactTypeForOrderConceptWithoutSavingNewItem(newOrderConcept_ContactType,idOrderConcept); 
            }



		    public BusinessResponse<List<OrderConcept_ContactType>>  UpdateOrderConcept_ContactTypeForOrderConcept(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idOrderConcept)
            {
                BusinessResponse<List<OrderConcept_ContactType>> response = new BusinessResponse<List<OrderConcept_ContactType>>();
                try
                {
                    response.Result = UpdateOrderConcept_ContactTypeForOrderConceptRaw(newOrderConcept_ContactType, idOrderConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderConcept_ContactType> UpdateOrderConcept_ContactTypeForOrderConceptRaw(List<OrderConcept_ContactType> newOrderConcept_ContactType,long idOrderConcept)
            {
                return daoFactory.OrderConceptDao.UpdateOrderConcept_ContactTypeForOrderConcept(newOrderConcept_ContactType,idOrderConcept); 
            }





		public BusinessResponse<OrderConcept> GetOrderConceptWithOrderConcept_ContactTypeDetails(long idOrderConcept,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept> response = new BusinessResponse<OrderConcept>();
            try
            {
                response.Result = GetOrderConceptWithOrderConcept_ContactTypeDetailsRaw(idOrderConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderConcept GetOrderConceptWithOrderConcept_ContactTypeDetailsRaw(long idOrderConcept,bool shouldRemap=false)
        {
            return GetOrderConceptWitDetailsRaw(idOrderConcept,new List<string>() { "OrderConcept_ContactType"},shouldRemap);
        }

		



		public BusinessResponse<OrderConcept> GetOrderConceptWithOrderPersonDetails(long idOrderConcept,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept> response = new BusinessResponse<OrderConcept>();
            try
            {
                response.Result = GetOrderConceptWithOrderPersonDetailsRaw(idOrderConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderConcept GetOrderConceptWithOrderPersonDetailsRaw(long idOrderConcept,bool shouldRemap=false)
        {
            return GetOrderConceptWitDetailsRaw(idOrderConcept,new List<string>() { "OrderPerson"},shouldRemap);
        }

		
			public BusinessResponse<List<OrderConcept_OrderAddress>>  UpdateOrderConcept_OrderAddressForOrderConceptWithoutSavingNewItem(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderConcept)
            {
                BusinessResponse<List<OrderConcept_OrderAddress>> response = new BusinessResponse<List<OrderConcept_OrderAddress>>();
                try
                {
                    response.Result = UpdateOrderConcept_OrderAddressForOrderConceptWithoutSavingNewItemRaw(newOrderConcept_OrderAddress, idOrderConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderConcept_OrderAddress> UpdateOrderConcept_OrderAddressForOrderConceptWithoutSavingNewItemRaw(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderConcept)
            {
                return daoFactory.OrderConceptDao.UpdateOrderConcept_OrderAddressForOrderConceptWithoutSavingNewItem(newOrderConcept_OrderAddress,idOrderConcept); 
            }



		    public BusinessResponse<List<OrderConcept_OrderAddress>>  UpdateOrderConcept_OrderAddressForOrderConcept(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderConcept)
            {
                BusinessResponse<List<OrderConcept_OrderAddress>> response = new BusinessResponse<List<OrderConcept_OrderAddress>>();
                try
                {
                    response.Result = UpdateOrderConcept_OrderAddressForOrderConceptRaw(newOrderConcept_OrderAddress, idOrderConcept);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderConcept_OrderAddress> UpdateOrderConcept_OrderAddressForOrderConceptRaw(List<OrderConcept_OrderAddress> newOrderConcept_OrderAddress,long idOrderConcept)
            {
                return daoFactory.OrderConceptDao.UpdateOrderConcept_OrderAddressForOrderConcept(newOrderConcept_OrderAddress,idOrderConcept); 
            }





		public BusinessResponse<OrderConcept> GetOrderConceptWithOrderConcept_OrderAddressDetails(long idOrderConcept,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept> response = new BusinessResponse<OrderConcept>();
            try
            {
                response.Result = GetOrderConceptWithOrderConcept_OrderAddressDetailsRaw(idOrderConcept,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderConcept GetOrderConceptWithOrderConcept_OrderAddressDetailsRaw(long idOrderConcept,bool shouldRemap=false)
        {
            return GetOrderConceptWitDetailsRaw(idOrderConcept,new List<string>() { "OrderConcept_OrderAddress"},shouldRemap);
        }

		
        public BusinessResponse<OrderConcept> GetOrderConcept(long idOrderConcept,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept> response = new BusinessResponse<OrderConcept>();
		    try
		    {
			    response.Result = GetOrderConceptsRaw(idOrderConcept,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderConcept GetOrderConceptsRaw(long idOrderConcept,bool shouldRemap=false)
        {
            return daoFactory.OrderConceptDao.GetOrderConcept(idOrderConcept,shouldRemap);
        }

        
        public BusinessResponse<OrderConcept> GetOrderConceptWitDetails(long idOrderConcept,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept> response = new BusinessResponse<OrderConcept>();
		    try
		    {
			    response.Result = GetOrderConceptWitDetailsRaw(idOrderConcept,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderConcept GetOrderConceptWitDetailsRaw(long idOrderConcept,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderConceptDao.GetOrderConceptWitDetails(idOrderConcept,shouldRemap);
        }


		 public BusinessResponse<OrderConcept> GetOrderConceptCustom( Expression<Func<OrderConcept, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<OrderConcept> response = new BusinessResponse<OrderConcept>();
		    try
		    {
			    response.Result = GetOrderConceptCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal OrderConcept GetOrderConceptCustomRaw( Expression<Func<OrderConcept, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.OrderConceptDao.GetOrderConceptCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<OrderConcept>> GetOrderConceptCustomList( Expression<Func<OrderConcept, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderConcept, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<OrderConcept>> response = new BusinessResponse<BaseListReturnType<OrderConcept>>();
		    try
		    {
			    response.Result = GetOrderConceptCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<OrderConcept> GetOrderConceptCustomListRaw( Expression<Func<OrderConcept, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderConcept, dynamic> orderExpression = null)
		{
            return daoFactory.OrderConceptDao.GetOrderConceptCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveOrderConcept(OrderConcept orderConcept)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOrderConceptRaw(orderConcept);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOrderConceptRaw(OrderConcept orderConcept)
        {
            daoFactory.OrderConceptDao.SaveOrderConcept(orderConcept);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyOrderConcept(OrderConcept orderConcept)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyOrderConceptRaw(orderConcept);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyOrderConceptRaw(OrderConcept orderConcept)
        {
            daoFactory.OrderConceptDao.SaveOnlyOrderConcept(orderConcept);
            return true;
        }

        public BusinessResponse<bool> DeleteOrderConcept(OrderConcept orderConcept)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteOrderConceptRaw(orderConcept);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteOrderConceptRaw(OrderConcept orderConcept)
        {
            daoFactory.OrderConceptDao.DeleteOrderConcept(orderConcept);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyOrderConcept(OrderConcept orderConcept)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyOrderConceptRaw(orderConcept);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyOrderConceptRaw(OrderConcept orderConcept)
        {
            daoFactory.OrderConceptDao.DeletePermanentlyOrderConcept(orderConcept);
            return true;
        }
	}
	public partial class OrderConcept_ContactTypeService: BaseService
	{
	    public BusinessResponse<List<OrderConcept_ContactType>> GetAllOrderConcept_ContactType(bool shouldRemap=false)
        {
            BusinessResponse<List<OrderConcept_ContactType>> response = new BusinessResponse<List<OrderConcept_ContactType>>();
		    try
		    {
			    response.Result = GetAllOrderConcept_ContactTypeRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeRaw(bool shouldRemap=false)
        {
            return daoFactory.OrderConcept_ContactTypeDao.GetAllOrderConcept_ContactType(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> GetAllOrderConcept_ContactTypeByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderConcept_ContactType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> response = new BusinessResponse<BaseListReturnType<OrderConcept_ContactType>>();
		    try
		    {
			    response.Result = GetAllOrderConcept_ContactTypeByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderConcept_ContactType, dynamic> orderExpression = null)
        {
            return daoFactory.OrderConcept_ContactTypeDao.GetAllOrderConcept_ContactTypeByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> GetAllOrderConcept_ContactTypeWithContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_ContactType, bool>> expression = null,bool shouldRemap=false, Func<OrderConcept_ContactType, dynamic> orderExpression = null)
			{
				return GetAllOrderConcept_ContactTypeByPage(sortingPagingInfo, expression,new List<string>(){"ContactType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> GetAllOrderConcept_ContactTypeWithOrderConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_ContactType, bool>> expression = null,bool shouldRemap=false, Func<OrderConcept_ContactType, dynamic> orderExpression = null)
			{
				return GetAllOrderConcept_ContactTypeByPage(sortingPagingInfo, expression,new List<string>(){"OrderConcept"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> GetAllOrderConcept_ContactTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> response = new BusinessResponse<BaseListReturnType<OrderConcept_ContactType>>();
            try
            {
                response.Result = GetAllOrderConcept_ContactTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderConcept_ContactTypeDao.GetAllOrderConcept_ContactTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<OrderConcept_ContactType>> GetOrderConcept_ContactTypeListByIdList(List<long> orderConcept_ContactTypeIds)
        {
            BusinessResponse<List<OrderConcept_ContactType>> response = new BusinessResponse<List<OrderConcept_ContactType>>();
            try
            {
                response.Result = GetOrderConcept_ContactTypeListByIdListRaw(orderConcept_ContactTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<OrderConcept_ContactType> GetOrderConcept_ContactTypeListByIdListRaw(List<long> orderConcept_ContactTypeIds)
        {
            return daoFactory.OrderConcept_ContactTypeDao.GetOrderConcept_ContactTypeListByIdList(orderConcept_ContactTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> GetAllOrderConcept_ContactTypeWithContactTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> response = new BusinessResponse<BaseListReturnType<OrderConcept_ContactType>>();
            try
            {
                response.Result = GetAllOrderConcept_ContactTypeWithContactTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeWithContactTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderConcept_ContactTypeWitDetailsRaw(new List<string>() { "ContactType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> GetAllOrderConcept_ContactTypeListByContactType(long idContactType)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> response = new BusinessResponse<BaseListReturnType<OrderConcept_ContactType>>();
            try
            {
                response.Result = GetAllOrderConcept_ContactTypeListByContactTypeRaw(idContactType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeListByContactTypeRaw(long idContactType)
        {
            return daoFactory.OrderConcept_ContactTypeDao.GetAllOrderConcept_ContactTypeListByContactType(idContactType);
        }

        public BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> GetAllOrderConcept_ContactTypeListByContactTypeByPage(long idContactType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> response = new BusinessResponse<BaseListReturnType<OrderConcept_ContactType>>();
            try
            {
                response.Result = GetAllOrderConcept_ContactTypeListByContactTypeByPageRaw(idContactType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeListByContactTypeByPageRaw(long idContactType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.OrderConcept_ContactTypeDao.GetAllOrderConcept_ContactTypeListByContactTypeByPage(idContactType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> GetAllOrderConcept_ContactTypeWithOrderConceptDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> response = new BusinessResponse<BaseListReturnType<OrderConcept_ContactType>>();
            try
            {
                response.Result = GetAllOrderConcept_ContactTypeWithOrderConceptDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeWithOrderConceptDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderConcept_ContactTypeWitDetailsRaw(new List<string>() { "OrderConcept" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> GetAllOrderConcept_ContactTypeListByOrderConcept(long idOrderConcept)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> response = new BusinessResponse<BaseListReturnType<OrderConcept_ContactType>>();
            try
            {
                response.Result = GetAllOrderConcept_ContactTypeListByOrderConceptRaw(idOrderConcept);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeListByOrderConceptRaw(long idOrderConcept)
        {
            return daoFactory.OrderConcept_ContactTypeDao.GetAllOrderConcept_ContactTypeListByOrderConcept(idOrderConcept);
        }

        public BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> GetAllOrderConcept_ContactTypeListByOrderConceptByPage(long idOrderConcept, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> response = new BusinessResponse<BaseListReturnType<OrderConcept_ContactType>>();
            try
            {
                response.Result = GetAllOrderConcept_ContactTypeListByOrderConceptByPageRaw(idOrderConcept, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_ContactType> GetAllOrderConcept_ContactTypeListByOrderConceptByPageRaw(long idOrderConcept,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.OrderConcept_ContactTypeDao.GetAllOrderConcept_ContactTypeListByOrderConceptByPage(idOrderConcept, sortingPagingInfo);
        }

		
		



		public BusinessResponse<OrderConcept_ContactType> GetOrderConcept_ContactTypeWithContactTypeDetails(long idOrderConcept_ContactType,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept_ContactType> response = new BusinessResponse<OrderConcept_ContactType>();
            try
            {
                response.Result = GetOrderConcept_ContactTypeWithContactTypeDetailsRaw(idOrderConcept_ContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderConcept_ContactType GetOrderConcept_ContactTypeWithContactTypeDetailsRaw(long idOrderConcept_ContactType,bool shouldRemap=false)
        {
            return GetOrderConcept_ContactTypeWitDetailsRaw(idOrderConcept_ContactType,new List<string>() { "ContactType"},shouldRemap);
        }

		



		public BusinessResponse<OrderConcept_ContactType> GetOrderConcept_ContactTypeWithOrderConceptDetails(long idOrderConcept_ContactType,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept_ContactType> response = new BusinessResponse<OrderConcept_ContactType>();
            try
            {
                response.Result = GetOrderConcept_ContactTypeWithOrderConceptDetailsRaw(idOrderConcept_ContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderConcept_ContactType GetOrderConcept_ContactTypeWithOrderConceptDetailsRaw(long idOrderConcept_ContactType,bool shouldRemap=false)
        {
            return GetOrderConcept_ContactTypeWitDetailsRaw(idOrderConcept_ContactType,new List<string>() { "OrderConcept"},shouldRemap);
        }

		
        public BusinessResponse<OrderConcept_ContactType> GetOrderConcept_ContactType(long idOrderConcept_ContactType,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept_ContactType> response = new BusinessResponse<OrderConcept_ContactType>();
		    try
		    {
			    response.Result = GetOrderConcept_ContactTypeRaw(idOrderConcept_ContactType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderConcept_ContactType GetOrderConcept_ContactTypeRaw(long idOrderConcept_ContactType,bool shouldRemap=false)
        {
            return daoFactory.OrderConcept_ContactTypeDao.GetOrderConcept_ContactType(idOrderConcept_ContactType,shouldRemap);
        }

        
        public BusinessResponse<OrderConcept_ContactType> GetOrderConcept_ContactTypeWitDetails(long idOrderConcept_ContactType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept_ContactType> response = new BusinessResponse<OrderConcept_ContactType>();
		    try
		    {
			    response.Result = GetOrderConcept_ContactTypeWitDetailsRaw(idOrderConcept_ContactType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderConcept_ContactType GetOrderConcept_ContactTypeWitDetailsRaw(long idOrderConcept_ContactType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderConcept_ContactTypeDao.GetOrderConcept_ContactTypeWitDetails(idOrderConcept_ContactType,shouldRemap);
        }


		 public BusinessResponse<OrderConcept_ContactType> GetOrderConcept_ContactTypeCustom( Expression<Func<OrderConcept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<OrderConcept_ContactType> response = new BusinessResponse<OrderConcept_ContactType>();
		    try
		    {
			    response.Result = GetOrderConcept_ContactTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal OrderConcept_ContactType GetOrderConcept_ContactTypeCustomRaw( Expression<Func<OrderConcept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.OrderConcept_ContactTypeDao.GetOrderConcept_ContactTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> GetOrderConcept_ContactTypeCustomList( Expression<Func<OrderConcept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderConcept_ContactType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<OrderConcept_ContactType>> response = new BusinessResponse<BaseListReturnType<OrderConcept_ContactType>>();
		    try
		    {
			    response.Result = GetOrderConcept_ContactTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<OrderConcept_ContactType> GetOrderConcept_ContactTypeCustomListRaw( Expression<Func<OrderConcept_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderConcept_ContactType, dynamic> orderExpression = null)
		{
            return daoFactory.OrderConcept_ContactTypeDao.GetOrderConcept_ContactTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveOrderConcept_ContactType(OrderConcept_ContactType orderConcept_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOrderConcept_ContactTypeRaw(orderConcept_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOrderConcept_ContactTypeRaw(OrderConcept_ContactType orderConcept_ContactType)
        {
            daoFactory.OrderConcept_ContactTypeDao.SaveOrderConcept_ContactType(orderConcept_ContactType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyOrderConcept_ContactType(OrderConcept_ContactType orderConcept_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyOrderConcept_ContactTypeRaw(orderConcept_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyOrderConcept_ContactTypeRaw(OrderConcept_ContactType orderConcept_ContactType)
        {
            daoFactory.OrderConcept_ContactTypeDao.SaveOnlyOrderConcept_ContactType(orderConcept_ContactType);
            return true;
        }

        public BusinessResponse<bool> DeleteOrderConcept_ContactType(OrderConcept_ContactType orderConcept_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteOrderConcept_ContactTypeRaw(orderConcept_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteOrderConcept_ContactTypeRaw(OrderConcept_ContactType orderConcept_ContactType)
        {
            daoFactory.OrderConcept_ContactTypeDao.DeleteOrderConcept_ContactType(orderConcept_ContactType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyOrderConcept_ContactType(OrderConcept_ContactType orderConcept_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyOrderConcept_ContactTypeRaw(orderConcept_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyOrderConcept_ContactTypeRaw(OrderConcept_ContactType orderConcept_ContactType)
        {
            daoFactory.OrderConcept_ContactTypeDao.DeletePermanentlyOrderConcept_ContactType(orderConcept_ContactType);
            return true;
        }
	}
	public partial class OrderConcept_OrderAddressService: BaseService
	{
	    public BusinessResponse<List<OrderConcept_OrderAddress>> GetAllOrderConcept_OrderAddress(bool shouldRemap=false)
        {
            BusinessResponse<List<OrderConcept_OrderAddress>> response = new BusinessResponse<List<OrderConcept_OrderAddress>>();
		    try
		    {
			    response.Result = GetAllOrderConcept_OrderAddressRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressRaw(bool shouldRemap=false)
        {
            return daoFactory.OrderConcept_OrderAddressDao.GetAllOrderConcept_OrderAddress(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> GetAllOrderConcept_OrderAddressByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_OrderAddress, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>>();
		    try
		    {
			    response.Result = GetAllOrderConcept_OrderAddressByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_OrderAddress, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
        {
            return daoFactory.OrderConcept_OrderAddressDao.GetAllOrderConcept_OrderAddressByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> GetAllOrderConcept_OrderAddressWithOrderAddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_OrderAddress, bool>> expression = null,bool shouldRemap=false, Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
			{
				return GetAllOrderConcept_OrderAddressByPage(sortingPagingInfo, expression,new List<string>(){"OrderAddress"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> GetAllOrderConcept_OrderAddressWithOrderConceptDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderConcept_OrderAddress, bool>> expression = null,bool shouldRemap=false, Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
			{
				return GetAllOrderConcept_OrderAddressByPage(sortingPagingInfo, expression,new List<string>(){"OrderConcept"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> GetAllOrderConcept_OrderAddressWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>>();
            try
            {
                response.Result = GetAllOrderConcept_OrderAddressWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderConcept_OrderAddressDao.GetAllOrderConcept_OrderAddressWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<OrderConcept_OrderAddress>> GetOrderConcept_OrderAddressListByIdList(List<long> orderConcept_OrderAddressIds)
        {
            BusinessResponse<List<OrderConcept_OrderAddress>> response = new BusinessResponse<List<OrderConcept_OrderAddress>>();
            try
            {
                response.Result = GetOrderConcept_OrderAddressListByIdListRaw(orderConcept_OrderAddressIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<OrderConcept_OrderAddress> GetOrderConcept_OrderAddressListByIdListRaw(List<long> orderConcept_OrderAddressIds)
        {
            return daoFactory.OrderConcept_OrderAddressDao.GetOrderConcept_OrderAddressListByIdList(orderConcept_OrderAddressIds);
        }

					
		public BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> GetAllOrderConcept_OrderAddressWithOrderAddressDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>>();
            try
            {
                response.Result = GetAllOrderConcept_OrderAddressWithOrderAddressDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressWithOrderAddressDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderConcept_OrderAddressWitDetailsRaw(new List<string>() { "OrderAddress" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> GetAllOrderConcept_OrderAddressListByOrderAddress(long idOrderAddress)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>>();
            try
            {
                response.Result = GetAllOrderConcept_OrderAddressListByOrderAddressRaw(idOrderAddress);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressListByOrderAddressRaw(long idOrderAddress)
        {
            return daoFactory.OrderConcept_OrderAddressDao.GetAllOrderConcept_OrderAddressListByOrderAddress(idOrderAddress);
        }

        public BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> GetAllOrderConcept_OrderAddressListByOrderAddressByPage(long idOrderAddress, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>>();
            try
            {
                response.Result = GetAllOrderConcept_OrderAddressListByOrderAddressByPageRaw(idOrderAddress, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressListByOrderAddressByPageRaw(long idOrderAddress,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.OrderConcept_OrderAddressDao.GetAllOrderConcept_OrderAddressListByOrderAddressByPage(idOrderAddress, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> GetAllOrderConcept_OrderAddressWithOrderConceptDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>>();
            try
            {
                response.Result = GetAllOrderConcept_OrderAddressWithOrderConceptDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressWithOrderConceptDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderConcept_OrderAddressWitDetailsRaw(new List<string>() { "OrderConcept" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> GetAllOrderConcept_OrderAddressListByOrderConcept(long idOrderConcept)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>>();
            try
            {
                response.Result = GetAllOrderConcept_OrderAddressListByOrderConceptRaw(idOrderConcept);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressListByOrderConceptRaw(long idOrderConcept)
        {
            return daoFactory.OrderConcept_OrderAddressDao.GetAllOrderConcept_OrderAddressListByOrderConcept(idOrderConcept);
        }

        public BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> GetAllOrderConcept_OrderAddressListByOrderConceptByPage(long idOrderConcept, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>>();
            try
            {
                response.Result = GetAllOrderConcept_OrderAddressListByOrderConceptByPageRaw(idOrderConcept, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderConcept_OrderAddress> GetAllOrderConcept_OrderAddressListByOrderConceptByPageRaw(long idOrderConcept,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.OrderConcept_OrderAddressDao.GetAllOrderConcept_OrderAddressListByOrderConceptByPage(idOrderConcept, sortingPagingInfo);
        }

		
		



		public BusinessResponse<OrderConcept_OrderAddress> GetOrderConcept_OrderAddressWithOrderAddressDetails(long idOrderConcept_OrderAddress,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept_OrderAddress> response = new BusinessResponse<OrderConcept_OrderAddress>();
            try
            {
                response.Result = GetOrderConcept_OrderAddressWithOrderAddressDetailsRaw(idOrderConcept_OrderAddress,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderConcept_OrderAddress GetOrderConcept_OrderAddressWithOrderAddressDetailsRaw(long idOrderConcept_OrderAddress,bool shouldRemap=false)
        {
            return GetOrderConcept_OrderAddressWitDetailsRaw(idOrderConcept_OrderAddress,new List<string>() { "OrderAddress"},shouldRemap);
        }

		



		public BusinessResponse<OrderConcept_OrderAddress> GetOrderConcept_OrderAddressWithOrderConceptDetails(long idOrderConcept_OrderAddress,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept_OrderAddress> response = new BusinessResponse<OrderConcept_OrderAddress>();
            try
            {
                response.Result = GetOrderConcept_OrderAddressWithOrderConceptDetailsRaw(idOrderConcept_OrderAddress,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderConcept_OrderAddress GetOrderConcept_OrderAddressWithOrderConceptDetailsRaw(long idOrderConcept_OrderAddress,bool shouldRemap=false)
        {
            return GetOrderConcept_OrderAddressWitDetailsRaw(idOrderConcept_OrderAddress,new List<string>() { "OrderConcept"},shouldRemap);
        }

		
        public BusinessResponse<OrderConcept_OrderAddress> GetOrderConcept_OrderAddress(long idOrderConcept_OrderAddress,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept_OrderAddress> response = new BusinessResponse<OrderConcept_OrderAddress>();
		    try
		    {
			    response.Result = GetOrderConcept_OrderAddressRaw(idOrderConcept_OrderAddress,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderConcept_OrderAddress GetOrderConcept_OrderAddressRaw(long idOrderConcept_OrderAddress,bool shouldRemap=false)
        {
            return daoFactory.OrderConcept_OrderAddressDao.GetOrderConcept_OrderAddress(idOrderConcept_OrderAddress,shouldRemap);
        }

        
        public BusinessResponse<OrderConcept_OrderAddress> GetOrderConcept_OrderAddressWitDetails(long idOrderConcept_OrderAddress,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<OrderConcept_OrderAddress> response = new BusinessResponse<OrderConcept_OrderAddress>();
		    try
		    {
			    response.Result = GetOrderConcept_OrderAddressWitDetailsRaw(idOrderConcept_OrderAddress,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderConcept_OrderAddress GetOrderConcept_OrderAddressWitDetailsRaw(long idOrderConcept_OrderAddress,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderConcept_OrderAddressDao.GetOrderConcept_OrderAddressWitDetails(idOrderConcept_OrderAddress,shouldRemap);
        }


		 public BusinessResponse<OrderConcept_OrderAddress> GetOrderConcept_OrderAddressCustom( Expression<Func<OrderConcept_OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<OrderConcept_OrderAddress> response = new BusinessResponse<OrderConcept_OrderAddress>();
		    try
		    {
			    response.Result = GetOrderConcept_OrderAddressCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal OrderConcept_OrderAddress GetOrderConcept_OrderAddressCustomRaw( Expression<Func<OrderConcept_OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.OrderConcept_OrderAddressDao.GetOrderConcept_OrderAddressCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> GetOrderConcept_OrderAddressCustomList( Expression<Func<OrderConcept_OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>> response = new BusinessResponse<BaseListReturnType<OrderConcept_OrderAddress>>();
		    try
		    {
			    response.Result = GetOrderConcept_OrderAddressCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<OrderConcept_OrderAddress> GetOrderConcept_OrderAddressCustomListRaw( Expression<Func<OrderConcept_OrderAddress, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderConcept_OrderAddress, dynamic> orderExpression = null)
		{
            return daoFactory.OrderConcept_OrderAddressDao.GetOrderConcept_OrderAddressCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveOrderConcept_OrderAddress(OrderConcept_OrderAddress orderConcept_OrderAddress)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOrderConcept_OrderAddressRaw(orderConcept_OrderAddress);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOrderConcept_OrderAddressRaw(OrderConcept_OrderAddress orderConcept_OrderAddress)
        {
            daoFactory.OrderConcept_OrderAddressDao.SaveOrderConcept_OrderAddress(orderConcept_OrderAddress);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyOrderConcept_OrderAddress(OrderConcept_OrderAddress orderConcept_OrderAddress)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyOrderConcept_OrderAddressRaw(orderConcept_OrderAddress);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyOrderConcept_OrderAddressRaw(OrderConcept_OrderAddress orderConcept_OrderAddress)
        {
            daoFactory.OrderConcept_OrderAddressDao.SaveOnlyOrderConcept_OrderAddress(orderConcept_OrderAddress);
            return true;
        }

        public BusinessResponse<bool> DeleteOrderConcept_OrderAddress(OrderConcept_OrderAddress orderConcept_OrderAddress)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteOrderConcept_OrderAddressRaw(orderConcept_OrderAddress);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteOrderConcept_OrderAddressRaw(OrderConcept_OrderAddress orderConcept_OrderAddress)
        {
            daoFactory.OrderConcept_OrderAddressDao.DeleteOrderConcept_OrderAddress(orderConcept_OrderAddress);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyOrderConcept_OrderAddress(OrderConcept_OrderAddress orderConcept_OrderAddress)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyOrderConcept_OrderAddressRaw(orderConcept_OrderAddress);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyOrderConcept_OrderAddressRaw(OrderConcept_OrderAddress orderConcept_OrderAddress)
        {
            daoFactory.OrderConcept_OrderAddressDao.DeletePermanentlyOrderConcept_OrderAddress(orderConcept_OrderAddress);
            return true;
        }
	}
	public partial class OrderDetailService: BaseService
	{
	    public BusinessResponse<List<OrderDetail>> GetAllOrderDetails(bool shouldRemap=false)
        {
            BusinessResponse<List<OrderDetail>> response = new BusinessResponse<List<OrderDetail>>();
		    try
		    {
			    response.Result = GetAllOrderDetailsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<OrderDetail> GetAllOrderDetailsRaw(bool shouldRemap=false)
        {
            return daoFactory.OrderDetailDao.GetAllOrderDetails(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<OrderDetail>> GetAllOrderDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderDetail, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<OrderDetail>> response = new BusinessResponse<BaseListReturnType<OrderDetail>>();
		    try
		    {
			    response.Result = GetAllOrderDetailsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<OrderDetail> GetAllOrderDetailsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderDetail, dynamic> orderExpression = null)
        {
            return daoFactory.OrderDetailDao.GetAllOrderDetailsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<OrderDetail>> GetAllOrderDetailsWithProductDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderDetail, bool>> expression = null,bool shouldRemap=false, Func<OrderDetail, dynamic> orderExpression = null)
			{
				return GetAllOrderDetailsByPage(sortingPagingInfo, expression,new List<string>(){"Product"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<OrderDetail>> GetAllOrderDetailsWithOrderDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderDetail, bool>> expression = null,bool shouldRemap=false, Func<OrderDetail, dynamic> orderExpression = null)
			{
				return GetAllOrderDetailsByPage(sortingPagingInfo, expression,new List<string>(){"Order"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<OrderDetail>> GetAllOrderDetailWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderDetail>> response = new BusinessResponse<BaseListReturnType<OrderDetail>>();
            try
            {
                response.Result = GetAllOrderDetailWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderDetail> GetAllOrderDetailWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderDetailDao.GetAllOrderDetailWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<OrderDetail>> GetOrderDetailListByIdList(List<long> orderDetailIds)
        {
            BusinessResponse<List<OrderDetail>> response = new BusinessResponse<List<OrderDetail>>();
            try
            {
                response.Result = GetOrderDetailListByIdListRaw(orderDetailIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<OrderDetail> GetOrderDetailListByIdListRaw(List<long> orderDetailIds)
        {
            return daoFactory.OrderDetailDao.GetOrderDetailListByIdList(orderDetailIds);
        }

					
		public BusinessResponse<BaseListReturnType<OrderDetail>> GetAllOrderDetailsWithProductDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderDetail>> response = new BusinessResponse<BaseListReturnType<OrderDetail>>();
            try
            {
                response.Result = GetAllOrderDetailsWithProductDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderDetail> GetAllOrderDetailsWithProductDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderDetailWitDetailsRaw(new List<string>() { "Product" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<OrderDetail>> GetAllOrderDetailListByProduct(long idProduct)
        {
            BusinessResponse<BaseListReturnType<OrderDetail>> response = new BusinessResponse<BaseListReturnType<OrderDetail>>();
            try
            {
                response.Result = GetAllOrderDetailListByProductRaw(idProduct);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderDetail> GetAllOrderDetailListByProductRaw(long idProduct)
        {
            return daoFactory.OrderDetailDao.GetAllOrderDetailListByProduct(idProduct);
        }

        public BusinessResponse<BaseListReturnType<OrderDetail>> GetAllOrderDetailListByProductByPage(long idProduct, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<OrderDetail>> response = new BusinessResponse<BaseListReturnType<OrderDetail>>();
            try
            {
                response.Result = GetAllOrderDetailListByProductByPageRaw(idProduct, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderDetail> GetAllOrderDetailListByProductByPageRaw(long idProduct,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.OrderDetailDao.GetAllOrderDetailListByProductByPage(idProduct, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<OrderDetail>> GetAllOrderDetailsWithOrderDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderDetail>> response = new BusinessResponse<BaseListReturnType<OrderDetail>>();
            try
            {
                response.Result = GetAllOrderDetailsWithOrderDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderDetail> GetAllOrderDetailsWithOrderDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderDetailWitDetailsRaw(new List<string>() { "Order" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<OrderDetail>> GetAllOrderDetailListByOrder(long idOrder)
        {
            BusinessResponse<BaseListReturnType<OrderDetail>> response = new BusinessResponse<BaseListReturnType<OrderDetail>>();
            try
            {
                response.Result = GetAllOrderDetailListByOrderRaw(idOrder);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderDetail> GetAllOrderDetailListByOrderRaw(long idOrder)
        {
            return daoFactory.OrderDetailDao.GetAllOrderDetailListByOrder(idOrder);
        }

        public BusinessResponse<BaseListReturnType<OrderDetail>> GetAllOrderDetailListByOrderByPage(long idOrder, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<OrderDetail>> response = new BusinessResponse<BaseListReturnType<OrderDetail>>();
            try
            {
                response.Result = GetAllOrderDetailListByOrderByPageRaw(idOrder, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderDetail> GetAllOrderDetailListByOrderByPageRaw(long idOrder,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.OrderDetailDao.GetAllOrderDetailListByOrderByPage(idOrder, sortingPagingInfo);
        }

		
		



		public BusinessResponse<OrderDetail> GetOrderDetailWithProductDetails(long idOrderDetail,bool shouldRemap=false)
        {
            BusinessResponse<OrderDetail> response = new BusinessResponse<OrderDetail>();
            try
            {
                response.Result = GetOrderDetailWithProductDetailsRaw(idOrderDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderDetail GetOrderDetailWithProductDetailsRaw(long idOrderDetail,bool shouldRemap=false)
        {
            return GetOrderDetailWitDetailsRaw(idOrderDetail,new List<string>() { "Product"},shouldRemap);
        }

		



		public BusinessResponse<OrderDetail> GetOrderDetailWithOrderDetails(long idOrderDetail,bool shouldRemap=false)
        {
            BusinessResponse<OrderDetail> response = new BusinessResponse<OrderDetail>();
            try
            {
                response.Result = GetOrderDetailWithOrderDetailsRaw(idOrderDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderDetail GetOrderDetailWithOrderDetailsRaw(long idOrderDetail,bool shouldRemap=false)
        {
            return GetOrderDetailWitDetailsRaw(idOrderDetail,new List<string>() { "Order"},shouldRemap);
        }

		
        public BusinessResponse<OrderDetail> GetOrderDetail(long idOrderDetail,bool shouldRemap=false)
        {
            BusinessResponse<OrderDetail> response = new BusinessResponse<OrderDetail>();
		    try
		    {
			    response.Result = GetOrderDetailsRaw(idOrderDetail,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderDetail GetOrderDetailsRaw(long idOrderDetail,bool shouldRemap=false)
        {
            return daoFactory.OrderDetailDao.GetOrderDetail(idOrderDetail,shouldRemap);
        }

        
        public BusinessResponse<OrderDetail> GetOrderDetailWitDetails(long idOrderDetail,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<OrderDetail> response = new BusinessResponse<OrderDetail>();
		    try
		    {
			    response.Result = GetOrderDetailWitDetailsRaw(idOrderDetail,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderDetail GetOrderDetailWitDetailsRaw(long idOrderDetail,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderDetailDao.GetOrderDetailWitDetails(idOrderDetail,shouldRemap);
        }


		 public BusinessResponse<OrderDetail> GetOrderDetailCustom( Expression<Func<OrderDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<OrderDetail> response = new BusinessResponse<OrderDetail>();
		    try
		    {
			    response.Result = GetOrderDetailCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal OrderDetail GetOrderDetailCustomRaw( Expression<Func<OrderDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.OrderDetailDao.GetOrderDetailCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<OrderDetail>> GetOrderDetailCustomList( Expression<Func<OrderDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderDetail, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<OrderDetail>> response = new BusinessResponse<BaseListReturnType<OrderDetail>>();
		    try
		    {
			    response.Result = GetOrderDetailCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<OrderDetail> GetOrderDetailCustomListRaw( Expression<Func<OrderDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderDetail, dynamic> orderExpression = null)
		{
            return daoFactory.OrderDetailDao.GetOrderDetailCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveOrderDetail(OrderDetail orderDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOrderDetailRaw(orderDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOrderDetailRaw(OrderDetail orderDetail)
        {
            daoFactory.OrderDetailDao.SaveOrderDetail(orderDetail);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyOrderDetail(OrderDetail orderDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyOrderDetailRaw(orderDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyOrderDetailRaw(OrderDetail orderDetail)
        {
            daoFactory.OrderDetailDao.SaveOnlyOrderDetail(orderDetail);
            return true;
        }

        public BusinessResponse<bool> DeleteOrderDetail(OrderDetail orderDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteOrderDetailRaw(orderDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteOrderDetailRaw(OrderDetail orderDetail)
        {
            daoFactory.OrderDetailDao.DeleteOrderDetail(orderDetail);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyOrderDetail(OrderDetail orderDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyOrderDetailRaw(orderDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyOrderDetailRaw(OrderDetail orderDetail)
        {
            daoFactory.OrderDetailDao.DeletePermanentlyOrderDetail(orderDetail);
            return true;
        }
	}
	public partial class OrderPersonService: BaseService
	{
	    public BusinessResponse<List<OrderPerson>> GetAllOrderPersons(bool shouldRemap=false)
        {
            BusinessResponse<List<OrderPerson>> response = new BusinessResponse<List<OrderPerson>>();
		    try
		    {
			    response.Result = GetAllOrderPersonsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<OrderPerson> GetAllOrderPersonsRaw(bool shouldRemap=false)
        {
            return daoFactory.OrderPersonDao.GetAllOrderPersons(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<OrderPerson>> GetAllOrderPersonsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderPerson, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderPerson, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<OrderPerson>> response = new BusinessResponse<BaseListReturnType<OrderPerson>>();
		    try
		    {
			    response.Result = GetAllOrderPersonsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<OrderPerson> GetAllOrderPersonsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderPerson, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderPerson, dynamic> orderExpression = null)
        {
            return daoFactory.OrderPersonDao.GetAllOrderPersonsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<OrderPerson>> GetAllOrderPersonsWithTitleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderPerson, bool>> expression = null,bool shouldRemap=false, Func<OrderPerson, dynamic> orderExpression = null)
			{
				return GetAllOrderPersonsByPage(sortingPagingInfo, expression,new List<string>(){"Title"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<OrderPerson>> GetAllOrderPersonsWithOrderConceptsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderPerson, bool>> expression = null,bool shouldRemap=false, Func<OrderPerson, dynamic> orderExpression = null)
			{
				return GetAllOrderPersonsByPage(sortingPagingInfo, expression,new List<string>(){"OrderConcepts"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<OrderPerson>> GetAllOrderPersonWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderPerson>> response = new BusinessResponse<BaseListReturnType<OrderPerson>>();
            try
            {
                response.Result = GetAllOrderPersonWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderPerson> GetAllOrderPersonWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderPersonDao.GetAllOrderPersonWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<OrderPerson>> GetOrderPersonListByIdList(List<long> orderPersonIds)
        {
            BusinessResponse<List<OrderPerson>> response = new BusinessResponse<List<OrderPerson>>();
            try
            {
                response.Result = GetOrderPersonListByIdListRaw(orderPersonIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<OrderPerson> GetOrderPersonListByIdListRaw(List<long> orderPersonIds)
        {
            return daoFactory.OrderPersonDao.GetOrderPersonListByIdList(orderPersonIds);
        }

					
		public BusinessResponse<BaseListReturnType<OrderPerson>> GetAllOrderPersonsWithTitleDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderPerson>> response = new BusinessResponse<BaseListReturnType<OrderPerson>>();
            try
            {
                response.Result = GetAllOrderPersonsWithTitleDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderPerson> GetAllOrderPersonsWithTitleDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderPersonWitDetailsRaw(new List<string>() { "Title" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<OrderPerson>> GetAllOrderPersonListByTitle(long idTitle)
        {
            BusinessResponse<BaseListReturnType<OrderPerson>> response = new BusinessResponse<BaseListReturnType<OrderPerson>>();
            try
            {
                response.Result = GetAllOrderPersonListByTitleRaw(idTitle);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderPerson> GetAllOrderPersonListByTitleRaw(long idTitle)
        {
            return daoFactory.OrderPersonDao.GetAllOrderPersonListByTitle(idTitle);
        }

        public BusinessResponse<BaseListReturnType<OrderPerson>> GetAllOrderPersonListByTitleByPage(long idTitle, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<OrderPerson>> response = new BusinessResponse<BaseListReturnType<OrderPerson>>();
            try
            {
                response.Result = GetAllOrderPersonListByTitleByPageRaw(idTitle, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderPerson> GetAllOrderPersonListByTitleByPageRaw(long idTitle,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.OrderPersonDao.GetAllOrderPersonListByTitleByPage(idTitle, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<OrderPerson>> GetAllOrderPersonsWithOrderConceptsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderPerson>> response = new BusinessResponse<BaseListReturnType<OrderPerson>>();
            try
            {
                response.Result = GetAllOrderPersonsWithOrderConceptsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderPerson> GetAllOrderPersonsWithOrderConceptsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderPersonWitDetailsRaw(new List<string>() { "OrderConcepts" }, shouldRemap);
        }
        
        






		



		public BusinessResponse<OrderPerson> GetOrderPersonWithTitleDetails(long idOrderPerson,bool shouldRemap=false)
        {
            BusinessResponse<OrderPerson> response = new BusinessResponse<OrderPerson>();
            try
            {
                response.Result = GetOrderPersonWithTitleDetailsRaw(idOrderPerson,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderPerson GetOrderPersonWithTitleDetailsRaw(long idOrderPerson,bool shouldRemap=false)
        {
            return GetOrderPersonWitDetailsRaw(idOrderPerson,new List<string>() { "Title"},shouldRemap);
        }

		
			public BusinessResponse<List<OrderConcept>>  UpdateOrderConceptsForOrderPersonWithoutSavingNewItem(List<OrderConcept> newOrderConcepts,long idOrderPerson)
            {
                BusinessResponse<List<OrderConcept>> response = new BusinessResponse<List<OrderConcept>>();
                try
                {
                    response.Result = UpdateOrderConceptsForOrderPersonWithoutSavingNewItemRaw(newOrderConcepts, idOrderPerson);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderConcept> UpdateOrderConceptsForOrderPersonWithoutSavingNewItemRaw(List<OrderConcept> newOrderConcepts,long idOrderPerson)
            {
                return daoFactory.OrderPersonDao.UpdateOrderConceptsForOrderPersonWithoutSavingNewItem(newOrderConcepts,idOrderPerson); 
            }



		    public BusinessResponse<List<OrderConcept>>  UpdateOrderConceptsForOrderPerson(List<OrderConcept> newOrderConcepts,long idOrderPerson)
            {
                BusinessResponse<List<OrderConcept>> response = new BusinessResponse<List<OrderConcept>>();
                try
                {
                    response.Result = UpdateOrderConceptsForOrderPersonRaw(newOrderConcepts, idOrderPerson);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderConcept> UpdateOrderConceptsForOrderPersonRaw(List<OrderConcept> newOrderConcepts,long idOrderPerson)
            {
                return daoFactory.OrderPersonDao.UpdateOrderConceptsForOrderPerson(newOrderConcepts,idOrderPerson); 
            }





		public BusinessResponse<OrderPerson> GetOrderPersonWithOrderConceptsDetails(long idOrderPerson,bool shouldRemap=false)
        {
            BusinessResponse<OrderPerson> response = new BusinessResponse<OrderPerson>();
            try
            {
                response.Result = GetOrderPersonWithOrderConceptsDetailsRaw(idOrderPerson,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderPerson GetOrderPersonWithOrderConceptsDetailsRaw(long idOrderPerson,bool shouldRemap=false)
        {
            return GetOrderPersonWitDetailsRaw(idOrderPerson,new List<string>() { "OrderConcepts"},shouldRemap);
        }

		
        public BusinessResponse<OrderPerson> GetOrderPerson(long idOrderPerson,bool shouldRemap=false)
        {
            BusinessResponse<OrderPerson> response = new BusinessResponse<OrderPerson>();
		    try
		    {
			    response.Result = GetOrderPersonsRaw(idOrderPerson,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderPerson GetOrderPersonsRaw(long idOrderPerson,bool shouldRemap=false)
        {
            return daoFactory.OrderPersonDao.GetOrderPerson(idOrderPerson,shouldRemap);
        }

        
        public BusinessResponse<OrderPerson> GetOrderPersonWitDetails(long idOrderPerson,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<OrderPerson> response = new BusinessResponse<OrderPerson>();
		    try
		    {
			    response.Result = GetOrderPersonWitDetailsRaw(idOrderPerson,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderPerson GetOrderPersonWitDetailsRaw(long idOrderPerson,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderPersonDao.GetOrderPersonWitDetails(idOrderPerson,shouldRemap);
        }


		 public BusinessResponse<OrderPerson> GetOrderPersonCustom( Expression<Func<OrderPerson, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<OrderPerson> response = new BusinessResponse<OrderPerson>();
		    try
		    {
			    response.Result = GetOrderPersonCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal OrderPerson GetOrderPersonCustomRaw( Expression<Func<OrderPerson, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.OrderPersonDao.GetOrderPersonCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<OrderPerson>> GetOrderPersonCustomList( Expression<Func<OrderPerson, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderPerson, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<OrderPerson>> response = new BusinessResponse<BaseListReturnType<OrderPerson>>();
		    try
		    {
			    response.Result = GetOrderPersonCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<OrderPerson> GetOrderPersonCustomListRaw( Expression<Func<OrderPerson, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderPerson, dynamic> orderExpression = null)
		{
            return daoFactory.OrderPersonDao.GetOrderPersonCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveOrderPerson(OrderPerson orderPerson)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOrderPersonRaw(orderPerson);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOrderPersonRaw(OrderPerson orderPerson)
        {
            daoFactory.OrderPersonDao.SaveOrderPerson(orderPerson);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyOrderPerson(OrderPerson orderPerson)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyOrderPersonRaw(orderPerson);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyOrderPersonRaw(OrderPerson orderPerson)
        {
            daoFactory.OrderPersonDao.SaveOnlyOrderPerson(orderPerson);
            return true;
        }

        public BusinessResponse<bool> DeleteOrderPerson(OrderPerson orderPerson)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteOrderPersonRaw(orderPerson);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteOrderPersonRaw(OrderPerson orderPerson)
        {
            daoFactory.OrderPersonDao.DeleteOrderPerson(orderPerson);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyOrderPerson(OrderPerson orderPerson)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyOrderPersonRaw(orderPerson);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyOrderPersonRaw(OrderPerson orderPerson)
        {
            daoFactory.OrderPersonDao.DeletePermanentlyOrderPerson(orderPerson);
            return true;
        }
	}
	public partial class OrderStateService: BaseService
	{
	    public BusinessResponse<List<OrderState>> GetAllOrderStates(bool shouldRemap=false)
        {
            BusinessResponse<List<OrderState>> response = new BusinessResponse<List<OrderState>>();
		    try
		    {
			    response.Result = GetAllOrderStatesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<OrderState> GetAllOrderStatesRaw(bool shouldRemap=false)
        {
            return daoFactory.OrderStateDao.GetAllOrderStates(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<OrderState>> GetAllOrderStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderState, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<OrderState>> response = new BusinessResponse<BaseListReturnType<OrderState>>();
		    try
		    {
			    response.Result = GetAllOrderStatesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<OrderState> GetAllOrderStatesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<OrderState, dynamic> orderExpression = null)
        {
            return daoFactory.OrderStateDao.GetAllOrderStatesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<OrderState>> GetAllOrderStatesWithOrdersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<OrderState, bool>> expression = null,bool shouldRemap=false, Func<OrderState, dynamic> orderExpression = null)
			{
				return GetAllOrderStatesByPage(sortingPagingInfo, expression,new List<string>(){"Orders"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<OrderState>> GetAllOrderStateWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderState>> response = new BusinessResponse<BaseListReturnType<OrderState>>();
            try
            {
                response.Result = GetAllOrderStateWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderState> GetAllOrderStateWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderStateDao.GetAllOrderStateWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<OrderState>> GetOrderStateListByIdList(List<long> orderStateIds)
        {
            BusinessResponse<List<OrderState>> response = new BusinessResponse<List<OrderState>>();
            try
            {
                response.Result = GetOrderStateListByIdListRaw(orderStateIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<OrderState> GetOrderStateListByIdListRaw(List<long> orderStateIds)
        {
            return daoFactory.OrderStateDao.GetOrderStateListByIdList(orderStateIds);
        }

					
		public BusinessResponse<BaseListReturnType<OrderState>> GetAllOrderStatesWithOrdersDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<OrderState>> response = new BusinessResponse<BaseListReturnType<OrderState>>();
            try
            {
                response.Result = GetAllOrderStatesWithOrdersDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<OrderState> GetAllOrderStatesWithOrdersDetailsRaw(bool shouldRemap=false)
        {
            return GetAllOrderStateWitDetailsRaw(new List<string>() { "Orders" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Order>>  UpdateOrdersForOrderStateWithoutSavingNewItem(List<Order> newOrders,long idOrderState)
            {
                BusinessResponse<List<Order>> response = new BusinessResponse<List<Order>>();
                try
                {
                    response.Result = UpdateOrdersForOrderStateWithoutSavingNewItemRaw(newOrders, idOrderState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Order> UpdateOrdersForOrderStateWithoutSavingNewItemRaw(List<Order> newOrders,long idOrderState)
            {
                return daoFactory.OrderStateDao.UpdateOrdersForOrderStateWithoutSavingNewItem(newOrders,idOrderState); 
            }



		    public BusinessResponse<List<Order>>  UpdateOrdersForOrderState(List<Order> newOrders,long idOrderState)
            {
                BusinessResponse<List<Order>> response = new BusinessResponse<List<Order>>();
                try
                {
                    response.Result = UpdateOrdersForOrderStateRaw(newOrders, idOrderState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Order> UpdateOrdersForOrderStateRaw(List<Order> newOrders,long idOrderState)
            {
                return daoFactory.OrderStateDao.UpdateOrdersForOrderState(newOrders,idOrderState); 
            }





		public BusinessResponse<OrderState> GetOrderStateWithOrdersDetails(long idOrderState,bool shouldRemap=false)
        {
            BusinessResponse<OrderState> response = new BusinessResponse<OrderState>();
            try
            {
                response.Result = GetOrderStateWithOrdersDetailsRaw(idOrderState,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal OrderState GetOrderStateWithOrdersDetailsRaw(long idOrderState,bool shouldRemap=false)
        {
            return GetOrderStateWitDetailsRaw(idOrderState,new List<string>() { "Orders"},shouldRemap);
        }

		
        public BusinessResponse<OrderState> GetOrderState(long idOrderState,bool shouldRemap=false)
        {
            BusinessResponse<OrderState> response = new BusinessResponse<OrderState>();
		    try
		    {
			    response.Result = GetOrderStatesRaw(idOrderState,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderState GetOrderStatesRaw(long idOrderState,bool shouldRemap=false)
        {
            return daoFactory.OrderStateDao.GetOrderState(idOrderState,shouldRemap);
        }

        
        public BusinessResponse<OrderState> GetOrderStateWitDetails(long idOrderState,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<OrderState> response = new BusinessResponse<OrderState>();
		    try
		    {
			    response.Result = GetOrderStateWitDetailsRaw(idOrderState,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal OrderState GetOrderStateWitDetailsRaw(long idOrderState,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.OrderStateDao.GetOrderStateWitDetails(idOrderState,shouldRemap);
        }


		 public BusinessResponse<OrderState> GetOrderStateCustom( Expression<Func<OrderState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<OrderState> response = new BusinessResponse<OrderState>();
		    try
		    {
			    response.Result = GetOrderStateCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal OrderState GetOrderStateCustomRaw( Expression<Func<OrderState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.OrderStateDao.GetOrderStateCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<OrderState>> GetOrderStateCustomList( Expression<Func<OrderState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderState, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<OrderState>> response = new BusinessResponse<BaseListReturnType<OrderState>>();
		    try
		    {
			    response.Result = GetOrderStateCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<OrderState> GetOrderStateCustomListRaw( Expression<Func<OrderState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<OrderState, dynamic> orderExpression = null)
		{
            return daoFactory.OrderStateDao.GetOrderStateCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveOrderState(OrderState orderState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOrderStateRaw(orderState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOrderStateRaw(OrderState orderState)
        {
            daoFactory.OrderStateDao.SaveOrderState(orderState);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyOrderState(OrderState orderState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyOrderStateRaw(orderState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyOrderStateRaw(OrderState orderState)
        {
            daoFactory.OrderStateDao.SaveOnlyOrderState(orderState);
            return true;
        }

        public BusinessResponse<bool> DeleteOrderState(OrderState orderState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteOrderStateRaw(orderState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteOrderStateRaw(OrderState orderState)
        {
            daoFactory.OrderStateDao.DeleteOrderState(orderState);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyOrderState(OrderState orderState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyOrderStateRaw(orderState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyOrderStateRaw(OrderState orderState)
        {
            daoFactory.OrderStateDao.DeletePermanentlyOrderState(orderState);
            return true;
        }
	}
	public partial class ParameterService: BaseService
	{
	    public BusinessResponse<List<Parameter>> GetAllParameters(bool shouldRemap=false)
        {
            BusinessResponse<List<Parameter>> response = new BusinessResponse<List<Parameter>>();
		    try
		    {
			    response.Result = GetAllParametersRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Parameter> GetAllParametersRaw(bool shouldRemap=false)
        {
            return daoFactory.ParameterDao.GetAllParameters(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Parameter>> GetAllParametersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Parameter, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Parameter, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Parameter>> response = new BusinessResponse<BaseListReturnType<Parameter>>();
		    try
		    {
			    response.Result = GetAllParametersByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Parameter> GetAllParametersByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Parameter, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Parameter, dynamic> orderExpression = null)
        {
            return daoFactory.ParameterDao.GetAllParametersByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Parameter>> GetAllParametersWithDocumentsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Parameter, bool>> expression = null,bool shouldRemap=false, Func<Parameter, dynamic> orderExpression = null)
			{
				return GetAllParametersByPage(sortingPagingInfo, expression,new List<string>(){"Documents"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Parameter>> GetAllParametersWithDocuments1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Parameter, bool>> expression = null,bool shouldRemap=false, Func<Parameter, dynamic> orderExpression = null)
			{
				return GetAllParametersByPage(sortingPagingInfo, expression,new List<string>(){"Documents1"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Parameter>> GetAllParameterWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Parameter>> response = new BusinessResponse<BaseListReturnType<Parameter>>();
            try
            {
                response.Result = GetAllParameterWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Parameter> GetAllParameterWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ParameterDao.GetAllParameterWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Parameter>> GetParameterListByIdList(List<long> parameterIds)
        {
            BusinessResponse<List<Parameter>> response = new BusinessResponse<List<Parameter>>();
            try
            {
                response.Result = GetParameterListByIdListRaw(parameterIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Parameter> GetParameterListByIdListRaw(List<long> parameterIds)
        {
            return daoFactory.ParameterDao.GetParameterListByIdList(parameterIds);
        }

					
		public BusinessResponse<BaseListReturnType<Parameter>> GetAllParametersWithDocumentsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Parameter>> response = new BusinessResponse<BaseListReturnType<Parameter>>();
            try
            {
                response.Result = GetAllParametersWithDocumentsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Parameter> GetAllParametersWithDocumentsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllParameterWitDetailsRaw(new List<string>() { "Documents" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Parameter>> GetAllParametersWithDocuments1Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Parameter>> response = new BusinessResponse<BaseListReturnType<Parameter>>();
            try
            {
                response.Result = GetAllParametersWithDocuments1DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Parameter> GetAllParametersWithDocuments1DetailsRaw(bool shouldRemap=false)
        {
            return GetAllParameterWitDetailsRaw(new List<string>() { "Documents1" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Document>>  UpdateDocumentsForParameterWithoutSavingNewItem(List<Document> newDocuments,long idParameter)
            {
                BusinessResponse<List<Document>> response = new BusinessResponse<List<Document>>();
                try
                {
                    response.Result = UpdateDocumentsForParameterWithoutSavingNewItemRaw(newDocuments, idParameter);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Document> UpdateDocumentsForParameterWithoutSavingNewItemRaw(List<Document> newDocuments,long idParameter)
            {
                return daoFactory.ParameterDao.UpdateDocumentsForParameterWithoutSavingNewItem(newDocuments,idParameter); 
            }



		    public BusinessResponse<List<Document>>  UpdateDocumentsForParameter(List<Document> newDocuments,long idParameter)
            {
                BusinessResponse<List<Document>> response = new BusinessResponse<List<Document>>();
                try
                {
                    response.Result = UpdateDocumentsForParameterRaw(newDocuments, idParameter);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Document> UpdateDocumentsForParameterRaw(List<Document> newDocuments,long idParameter)
            {
                return daoFactory.ParameterDao.UpdateDocumentsForParameter(newDocuments,idParameter); 
            }





		public BusinessResponse<Parameter> GetParameterWithDocumentsDetails(long idParameter,bool shouldRemap=false)
        {
            BusinessResponse<Parameter> response = new BusinessResponse<Parameter>();
            try
            {
                response.Result = GetParameterWithDocumentsDetailsRaw(idParameter,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Parameter GetParameterWithDocumentsDetailsRaw(long idParameter,bool shouldRemap=false)
        {
            return GetParameterWitDetailsRaw(idParameter,new List<string>() { "Documents"},shouldRemap);
        }

		
			public BusinessResponse<List<Document>>  UpdateDocuments1ForParameterWithoutSavingNewItem(List<Document> newDocuments,long idParameter)
            {
                BusinessResponse<List<Document>> response = new BusinessResponse<List<Document>>();
                try
                {
                    response.Result = UpdateDocuments1ForParameterWithoutSavingNewItemRaw(newDocuments, idParameter);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Document> UpdateDocuments1ForParameterWithoutSavingNewItemRaw(List<Document> newDocuments,long idParameter)
            {
                return daoFactory.ParameterDao.UpdateDocuments1ForParameterWithoutSavingNewItem(newDocuments,idParameter); 
            }



		    public BusinessResponse<List<Document>>  UpdateDocuments1ForParameter(List<Document> newDocuments,long idParameter)
            {
                BusinessResponse<List<Document>> response = new BusinessResponse<List<Document>>();
                try
                {
                    response.Result = UpdateDocuments1ForParameterRaw(newDocuments, idParameter);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Document> UpdateDocuments1ForParameterRaw(List<Document> newDocuments,long idParameter)
            {
                return daoFactory.ParameterDao.UpdateDocuments1ForParameter(newDocuments,idParameter); 
            }





		public BusinessResponse<Parameter> GetParameterWithDocuments1Details(long idParameter,bool shouldRemap=false)
        {
            BusinessResponse<Parameter> response = new BusinessResponse<Parameter>();
            try
            {
                response.Result = GetParameterWithDocuments1DetailsRaw(idParameter,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Parameter GetParameterWithDocuments1DetailsRaw(long idParameter,bool shouldRemap=false)
        {
            return GetParameterWitDetailsRaw(idParameter,new List<string>() { "Documents1"},shouldRemap);
        }

		
        public BusinessResponse<Parameter> GetParameter(long idParameter,bool shouldRemap=false)
        {
            BusinessResponse<Parameter> response = new BusinessResponse<Parameter>();
		    try
		    {
			    response.Result = GetParametersRaw(idParameter,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Parameter GetParametersRaw(long idParameter,bool shouldRemap=false)
        {
            return daoFactory.ParameterDao.GetParameter(idParameter,shouldRemap);
        }

                public BusinessResponse<Parameter> GetParameterByCode(long code,bool shouldRemap=false)
        {
            BusinessResponse<Parameter> response = new BusinessResponse<Parameter>();
		    try
		    {
			    response.Result = GetParametersByCodeRaw(code,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Parameter GetParametersByCodeRaw(long code,bool shouldRemap=false)
        {
            return daoFactory.ParameterDao.GetParameterByCode( code,shouldRemap);
        }
        
        public BusinessResponse<Parameter> GetParameterWitDetails(long idParameter,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Parameter> response = new BusinessResponse<Parameter>();
		    try
		    {
			    response.Result = GetParameterWitDetailsRaw(idParameter,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Parameter GetParameterWitDetailsRaw(long idParameter,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ParameterDao.GetParameterWitDetails(idParameter,shouldRemap);
        }


		 public BusinessResponse<Parameter> GetParameterCustom( Expression<Func<Parameter, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Parameter> response = new BusinessResponse<Parameter>();
		    try
		    {
			    response.Result = GetParameterCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Parameter GetParameterCustomRaw( Expression<Func<Parameter, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.ParameterDao.GetParameterCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Parameter>> GetParameterCustomList( Expression<Func<Parameter, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Parameter, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Parameter>> response = new BusinessResponse<BaseListReturnType<Parameter>>();
		    try
		    {
			    response.Result = GetParameterCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Parameter> GetParameterCustomListRaw( Expression<Func<Parameter, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Parameter, dynamic> orderExpression = null)
		{
            return daoFactory.ParameterDao.GetParameterCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveParameter(Parameter parameter)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveParameterRaw(parameter);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveParameterRaw(Parameter parameter)
        {
            daoFactory.ParameterDao.SaveParameter(parameter);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyParameter(Parameter parameter)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyParameterRaw(parameter);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyParameterRaw(Parameter parameter)
        {
            daoFactory.ParameterDao.SaveOnlyParameter(parameter);
            return true;
        }

        public BusinessResponse<bool> DeleteParameter(Parameter parameter)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteParameterRaw(parameter);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteParameterRaw(Parameter parameter)
        {
            daoFactory.ParameterDao.DeleteParameter(parameter);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyParameter(Parameter parameter)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyParameterRaw(parameter);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyParameterRaw(Parameter parameter)
        {
            daoFactory.ParameterDao.DeletePermanentlyParameter(parameter);
            return true;
        }
	}
	public partial class PaymentService: BaseService
	{
	    public BusinessResponse<List<Payment>> GetAllPayments(bool shouldRemap=false)
        {
            BusinessResponse<List<Payment>> response = new BusinessResponse<List<Payment>>();
		    try
		    {
			    response.Result = GetAllPaymentsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Payment> GetAllPaymentsRaw(bool shouldRemap=false)
        {
            return daoFactory.PaymentDao.GetAllPayments(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Payment, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Payment>> response = new BusinessResponse<BaseListReturnType<Payment>>();
		    try
		    {
			    response.Result = GetAllPaymentsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Payment> GetAllPaymentsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Payment, dynamic> orderExpression = null)
        {
            return daoFactory.PaymentDao.GetAllPaymentsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentsWithUserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap=false, Func<Payment, dynamic> orderExpression = null)
			{
				return GetAllPaymentsByPage(sortingPagingInfo, expression,new List<string>(){"User"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentsWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap=false, Func<Payment, dynamic> orderExpression = null)
			{
				return GetAllPaymentsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentsWithPaymentDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap=false, Func<Payment, dynamic> orderExpression = null)
			{
				return GetAllPaymentsByPage(sortingPagingInfo, expression,new List<string>(){"PaymentDetails"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentsWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap=false, Func<Payment, dynamic> orderExpression = null)
			{
				return GetAllPaymentsByPage(sortingPagingInfo, expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentsWithTransaction_PaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Payment, bool>> expression = null,bool shouldRemap=false, Func<Payment, dynamic> orderExpression = null)
			{
				return GetAllPaymentsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction_Payment"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Payment>> response = new BusinessResponse<BaseListReturnType<Payment>>();
            try
            {
                response.Result = GetAllPaymentWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Payment> GetAllPaymentWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.PaymentDao.GetAllPaymentWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Payment>> GetPaymentListByIdList(List<long> paymentIds)
        {
            BusinessResponse<List<Payment>> response = new BusinessResponse<List<Payment>>();
            try
            {
                response.Result = GetPaymentListByIdListRaw(paymentIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Payment> GetPaymentListByIdListRaw(List<long> paymentIds)
        {
            return daoFactory.PaymentDao.GetPaymentListByIdList(paymentIds);
        }

					
		public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentsWithUserDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Payment>> response = new BusinessResponse<BaseListReturnType<Payment>>();
            try
            {
                response.Result = GetAllPaymentsWithUserDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Payment> GetAllPaymentsWithUserDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPaymentWitDetailsRaw(new List<string>() { "User" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentListByUser(long idUser)
        {
            BusinessResponse<BaseListReturnType<Payment>> response = new BusinessResponse<BaseListReturnType<Payment>>();
            try
            {
                response.Result = GetAllPaymentListByUserRaw(idUser);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Payment> GetAllPaymentListByUserRaw(long idUser)
        {
            return daoFactory.PaymentDao.GetAllPaymentListByUser(idUser);
        }

        public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentListByUserByPage(long idUser, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Payment>> response = new BusinessResponse<BaseListReturnType<Payment>>();
            try
            {
                response.Result = GetAllPaymentListByUserByPageRaw(idUser, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Payment> GetAllPaymentListByUserByPageRaw(long idUser,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.PaymentDao.GetAllPaymentListByUserByPage(idUser, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentsWithTransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Payment>> response = new BusinessResponse<BaseListReturnType<Payment>>();
            try
            {
                response.Result = GetAllPaymentsWithTransactionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Payment> GetAllPaymentsWithTransactionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPaymentWitDetailsRaw(new List<string>() { "Transaction" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentListByTransaction(long idTransaction)
        {
            BusinessResponse<BaseListReturnType<Payment>> response = new BusinessResponse<BaseListReturnType<Payment>>();
            try
            {
                response.Result = GetAllPaymentListByTransactionRaw(idTransaction);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Payment> GetAllPaymentListByTransactionRaw(long idTransaction)
        {
            return daoFactory.PaymentDao.GetAllPaymentListByTransaction(idTransaction);
        }

        public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentListByTransactionByPage(long idTransaction, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Payment>> response = new BusinessResponse<BaseListReturnType<Payment>>();
            try
            {
                response.Result = GetAllPaymentListByTransactionByPageRaw(idTransaction, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Payment> GetAllPaymentListByTransactionByPageRaw(long idTransaction,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.PaymentDao.GetAllPaymentListByTransactionByPage(idTransaction, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentsWithPaymentDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Payment>> response = new BusinessResponse<BaseListReturnType<Payment>>();
            try
            {
                response.Result = GetAllPaymentsWithPaymentDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Payment> GetAllPaymentsWithPaymentDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPaymentWitDetailsRaw(new List<string>() { "PaymentDetails" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentsWithTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Payment>> response = new BusinessResponse<BaseListReturnType<Payment>>();
            try
            {
                response.Result = GetAllPaymentsWithTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Payment> GetAllPaymentsWithTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPaymentWitDetailsRaw(new List<string>() { "Transactions" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Payment>> GetAllPaymentsWithTransaction_PaymentDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Payment>> response = new BusinessResponse<BaseListReturnType<Payment>>();
            try
            {
                response.Result = GetAllPaymentsWithTransaction_PaymentDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Payment> GetAllPaymentsWithTransaction_PaymentDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPaymentWitDetailsRaw(new List<string>() { "Transaction_Payment" }, shouldRemap);
        }
        
        






		



		public BusinessResponse<Payment> GetPaymentWithUserDetails(long idPayment,bool shouldRemap=false)
        {
            BusinessResponse<Payment> response = new BusinessResponse<Payment>();
            try
            {
                response.Result = GetPaymentWithUserDetailsRaw(idPayment,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Payment GetPaymentWithUserDetailsRaw(long idPayment,bool shouldRemap=false)
        {
            return GetPaymentWitDetailsRaw(idPayment,new List<string>() { "User"},shouldRemap);
        }

		



		public BusinessResponse<Payment> GetPaymentWithTransactionDetails(long idPayment,bool shouldRemap=false)
        {
            BusinessResponse<Payment> response = new BusinessResponse<Payment>();
            try
            {
                response.Result = GetPaymentWithTransactionDetailsRaw(idPayment,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Payment GetPaymentWithTransactionDetailsRaw(long idPayment,bool shouldRemap=false)
        {
            return GetPaymentWitDetailsRaw(idPayment,new List<string>() { "Transaction"},shouldRemap);
        }

		
			public BusinessResponse<List<PaymentDetail>>  UpdatePaymentDetailsForPaymentWithoutSavingNewItem(List<PaymentDetail> newPaymentDetails,long idPayment)
            {
                BusinessResponse<List<PaymentDetail>> response = new BusinessResponse<List<PaymentDetail>>();
                try
                {
                    response.Result = UpdatePaymentDetailsForPaymentWithoutSavingNewItemRaw(newPaymentDetails, idPayment);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<PaymentDetail> UpdatePaymentDetailsForPaymentWithoutSavingNewItemRaw(List<PaymentDetail> newPaymentDetails,long idPayment)
            {
                return daoFactory.PaymentDao.UpdatePaymentDetailsForPaymentWithoutSavingNewItem(newPaymentDetails,idPayment); 
            }



		    public BusinessResponse<List<PaymentDetail>>  UpdatePaymentDetailsForPayment(List<PaymentDetail> newPaymentDetails,long idPayment)
            {
                BusinessResponse<List<PaymentDetail>> response = new BusinessResponse<List<PaymentDetail>>();
                try
                {
                    response.Result = UpdatePaymentDetailsForPaymentRaw(newPaymentDetails, idPayment);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<PaymentDetail> UpdatePaymentDetailsForPaymentRaw(List<PaymentDetail> newPaymentDetails,long idPayment)
            {
                return daoFactory.PaymentDao.UpdatePaymentDetailsForPayment(newPaymentDetails,idPayment); 
            }





		public BusinessResponse<Payment> GetPaymentWithPaymentDetailsDetails(long idPayment,bool shouldRemap=false)
        {
            BusinessResponse<Payment> response = new BusinessResponse<Payment>();
            try
            {
                response.Result = GetPaymentWithPaymentDetailsDetailsRaw(idPayment,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Payment GetPaymentWithPaymentDetailsDetailsRaw(long idPayment,bool shouldRemap=false)
        {
            return GetPaymentWitDetailsRaw(idPayment,new List<string>() { "PaymentDetails"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction>>  UpdateTransactionsForPaymentWithoutSavingNewItem(List<Transaction> newTransactions,long idPayment)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForPaymentWithoutSavingNewItemRaw(newTransactions, idPayment);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForPaymentWithoutSavingNewItemRaw(List<Transaction> newTransactions,long idPayment)
            {
                return daoFactory.PaymentDao.UpdateTransactionsForPaymentWithoutSavingNewItem(newTransactions,idPayment); 
            }



		    public BusinessResponse<List<Transaction>>  UpdateTransactionsForPayment(List<Transaction> newTransactions,long idPayment)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForPaymentRaw(newTransactions, idPayment);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForPaymentRaw(List<Transaction> newTransactions,long idPayment)
            {
                return daoFactory.PaymentDao.UpdateTransactionsForPayment(newTransactions,idPayment); 
            }





		public BusinessResponse<Payment> GetPaymentWithTransactionsDetails(long idPayment,bool shouldRemap=false)
        {
            BusinessResponse<Payment> response = new BusinessResponse<Payment>();
            try
            {
                response.Result = GetPaymentWithTransactionsDetailsRaw(idPayment,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Payment GetPaymentWithTransactionsDetailsRaw(long idPayment,bool shouldRemap=false)
        {
            return GetPaymentWitDetailsRaw(idPayment,new List<string>() { "Transactions"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction_Payment>>  UpdateTransaction_PaymentForPaymentWithoutSavingNewItem(List<Transaction_Payment> newTransaction_Payment,long idPayment)
            {
                BusinessResponse<List<Transaction_Payment>> response = new BusinessResponse<List<Transaction_Payment>>();
                try
                {
                    response.Result = UpdateTransaction_PaymentForPaymentWithoutSavingNewItemRaw(newTransaction_Payment, idPayment);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction_Payment> UpdateTransaction_PaymentForPaymentWithoutSavingNewItemRaw(List<Transaction_Payment> newTransaction_Payment,long idPayment)
            {
                return daoFactory.PaymentDao.UpdateTransaction_PaymentForPaymentWithoutSavingNewItem(newTransaction_Payment,idPayment); 
            }



		    public BusinessResponse<List<Transaction_Payment>>  UpdateTransaction_PaymentForPayment(List<Transaction_Payment> newTransaction_Payment,long idPayment)
            {
                BusinessResponse<List<Transaction_Payment>> response = new BusinessResponse<List<Transaction_Payment>>();
                try
                {
                    response.Result = UpdateTransaction_PaymentForPaymentRaw(newTransaction_Payment, idPayment);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction_Payment> UpdateTransaction_PaymentForPaymentRaw(List<Transaction_Payment> newTransaction_Payment,long idPayment)
            {
                return daoFactory.PaymentDao.UpdateTransaction_PaymentForPayment(newTransaction_Payment,idPayment); 
            }





		public BusinessResponse<Payment> GetPaymentWithTransaction_PaymentDetails(long idPayment,bool shouldRemap=false)
        {
            BusinessResponse<Payment> response = new BusinessResponse<Payment>();
            try
            {
                response.Result = GetPaymentWithTransaction_PaymentDetailsRaw(idPayment,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Payment GetPaymentWithTransaction_PaymentDetailsRaw(long idPayment,bool shouldRemap=false)
        {
            return GetPaymentWitDetailsRaw(idPayment,new List<string>() { "Transaction_Payment"},shouldRemap);
        }

		
        public BusinessResponse<Payment> GetPayment(long idPayment,bool shouldRemap=false)
        {
            BusinessResponse<Payment> response = new BusinessResponse<Payment>();
		    try
		    {
			    response.Result = GetPaymentsRaw(idPayment,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Payment GetPaymentsRaw(long idPayment,bool shouldRemap=false)
        {
            return daoFactory.PaymentDao.GetPayment(idPayment,shouldRemap);
        }

        
        public BusinessResponse<Payment> GetPaymentWitDetails(long idPayment,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Payment> response = new BusinessResponse<Payment>();
		    try
		    {
			    response.Result = GetPaymentWitDetailsRaw(idPayment,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Payment GetPaymentWitDetailsRaw(long idPayment,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.PaymentDao.GetPaymentWitDetails(idPayment,shouldRemap);
        }


		 public BusinessResponse<Payment> GetPaymentCustom( Expression<Func<Payment, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Payment> response = new BusinessResponse<Payment>();
		    try
		    {
			    response.Result = GetPaymentCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Payment GetPaymentCustomRaw( Expression<Func<Payment, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.PaymentDao.GetPaymentCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Payment>> GetPaymentCustomList( Expression<Func<Payment, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Payment, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Payment>> response = new BusinessResponse<BaseListReturnType<Payment>>();
		    try
		    {
			    response.Result = GetPaymentCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Payment> GetPaymentCustomListRaw( Expression<Func<Payment, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Payment, dynamic> orderExpression = null)
		{
            return daoFactory.PaymentDao.GetPaymentCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SavePayment(Payment payment)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SavePaymentRaw(payment);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SavePaymentRaw(Payment payment)
        {
            daoFactory.PaymentDao.SavePayment(payment);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyPayment(Payment payment)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyPaymentRaw(payment);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyPaymentRaw(Payment payment)
        {
            daoFactory.PaymentDao.SaveOnlyPayment(payment);
            return true;
        }

        public BusinessResponse<bool> DeletePayment(Payment payment)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePaymentRaw(payment);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePaymentRaw(Payment payment)
        {
            daoFactory.PaymentDao.DeletePayment(payment);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyPayment(Payment payment)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyPaymentRaw(payment);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyPaymentRaw(Payment payment)
        {
            daoFactory.PaymentDao.DeletePermanentlyPayment(payment);
            return true;
        }
	}
	public partial class PaymentDetailService: BaseService
	{
	    public BusinessResponse<List<PaymentDetail>> GetAllPaymentDetails(bool shouldRemap=false)
        {
            BusinessResponse<List<PaymentDetail>> response = new BusinessResponse<List<PaymentDetail>>();
		    try
		    {
			    response.Result = GetAllPaymentDetailsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<PaymentDetail> GetAllPaymentDetailsRaw(bool shouldRemap=false)
        {
            return daoFactory.PaymentDetailDao.GetAllPaymentDetails(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<PaymentDetail, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<PaymentDetail>> response = new BusinessResponse<BaseListReturnType<PaymentDetail>>();
		    try
		    {
			    response.Result = GetAllPaymentDetailsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<PaymentDetail> GetAllPaymentDetailsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<PaymentDetail, dynamic> orderExpression = null)
        {
            return daoFactory.PaymentDetailDao.GetAllPaymentDetailsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailsWithBankDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null,bool shouldRemap=false, Func<PaymentDetail, dynamic> orderExpression = null)
			{
				return GetAllPaymentDetailsByPage(sortingPagingInfo, expression,new List<string>(){"Bank"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailsWithPaymentMethodDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null,bool shouldRemap=false, Func<PaymentDetail, dynamic> orderExpression = null)
			{
				return GetAllPaymentDetailsByPage(sortingPagingInfo, expression,new List<string>(){"PaymentMethod"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailsWithPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDetail, bool>> expression = null,bool shouldRemap=false, Func<PaymentDetail, dynamic> orderExpression = null)
			{
				return GetAllPaymentDetailsByPage(sortingPagingInfo, expression,new List<string>(){"Payment"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<PaymentDetail>> response = new BusinessResponse<BaseListReturnType<PaymentDetail>>();
            try
            {
                response.Result = GetAllPaymentDetailWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentDetail> GetAllPaymentDetailWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.PaymentDetailDao.GetAllPaymentDetailWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<PaymentDetail>> GetPaymentDetailListByIdList(List<long> paymentDetailIds)
        {
            BusinessResponse<List<PaymentDetail>> response = new BusinessResponse<List<PaymentDetail>>();
            try
            {
                response.Result = GetPaymentDetailListByIdListRaw(paymentDetailIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<PaymentDetail> GetPaymentDetailListByIdListRaw(List<long> paymentDetailIds)
        {
            return daoFactory.PaymentDetailDao.GetPaymentDetailListByIdList(paymentDetailIds);
        }

					
		public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailsWithBankDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<PaymentDetail>> response = new BusinessResponse<BaseListReturnType<PaymentDetail>>();
            try
            {
                response.Result = GetAllPaymentDetailsWithBankDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentDetail> GetAllPaymentDetailsWithBankDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPaymentDetailWitDetailsRaw(new List<string>() { "Bank" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailListByBank(long idBank)
        {
            BusinessResponse<BaseListReturnType<PaymentDetail>> response = new BusinessResponse<BaseListReturnType<PaymentDetail>>();
            try
            {
                response.Result = GetAllPaymentDetailListByBankRaw(idBank);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByBankRaw(long idBank)
        {
            return daoFactory.PaymentDetailDao.GetAllPaymentDetailListByBank(idBank);
        }

        public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailListByBankByPage(long idBank, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<PaymentDetail>> response = new BusinessResponse<BaseListReturnType<PaymentDetail>>();
            try
            {
                response.Result = GetAllPaymentDetailListByBankByPageRaw(idBank, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByBankByPageRaw(long idBank,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.PaymentDetailDao.GetAllPaymentDetailListByBankByPage(idBank, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailsWithPaymentMethodDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<PaymentDetail>> response = new BusinessResponse<BaseListReturnType<PaymentDetail>>();
            try
            {
                response.Result = GetAllPaymentDetailsWithPaymentMethodDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentDetail> GetAllPaymentDetailsWithPaymentMethodDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPaymentDetailWitDetailsRaw(new List<string>() { "PaymentMethod" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailListByPaymentMethod(long idPaymentMethod)
        {
            BusinessResponse<BaseListReturnType<PaymentDetail>> response = new BusinessResponse<BaseListReturnType<PaymentDetail>>();
            try
            {
                response.Result = GetAllPaymentDetailListByPaymentMethodRaw(idPaymentMethod);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByPaymentMethodRaw(long idPaymentMethod)
        {
            return daoFactory.PaymentDetailDao.GetAllPaymentDetailListByPaymentMethod(idPaymentMethod);
        }

        public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailListByPaymentMethodByPage(long idPaymentMethod, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<PaymentDetail>> response = new BusinessResponse<BaseListReturnType<PaymentDetail>>();
            try
            {
                response.Result = GetAllPaymentDetailListByPaymentMethodByPageRaw(idPaymentMethod, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByPaymentMethodByPageRaw(long idPaymentMethod,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.PaymentDetailDao.GetAllPaymentDetailListByPaymentMethodByPage(idPaymentMethod, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailsWithPaymentDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<PaymentDetail>> response = new BusinessResponse<BaseListReturnType<PaymentDetail>>();
            try
            {
                response.Result = GetAllPaymentDetailsWithPaymentDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentDetail> GetAllPaymentDetailsWithPaymentDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPaymentDetailWitDetailsRaw(new List<string>() { "Payment" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailListByPayment(long idPayment)
        {
            BusinessResponse<BaseListReturnType<PaymentDetail>> response = new BusinessResponse<BaseListReturnType<PaymentDetail>>();
            try
            {
                response.Result = GetAllPaymentDetailListByPaymentRaw(idPayment);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByPaymentRaw(long idPayment)
        {
            return daoFactory.PaymentDetailDao.GetAllPaymentDetailListByPayment(idPayment);
        }

        public BusinessResponse<BaseListReturnType<PaymentDetail>> GetAllPaymentDetailListByPaymentByPage(long idPayment, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<PaymentDetail>> response = new BusinessResponse<BaseListReturnType<PaymentDetail>>();
            try
            {
                response.Result = GetAllPaymentDetailListByPaymentByPageRaw(idPayment, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentDetail> GetAllPaymentDetailListByPaymentByPageRaw(long idPayment,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.PaymentDetailDao.GetAllPaymentDetailListByPaymentByPage(idPayment, sortingPagingInfo);
        }

		
		



		public BusinessResponse<PaymentDetail> GetPaymentDetailWithBankDetails(long idPaymentDetail,bool shouldRemap=false)
        {
            BusinessResponse<PaymentDetail> response = new BusinessResponse<PaymentDetail>();
            try
            {
                response.Result = GetPaymentDetailWithBankDetailsRaw(idPaymentDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal PaymentDetail GetPaymentDetailWithBankDetailsRaw(long idPaymentDetail,bool shouldRemap=false)
        {
            return GetPaymentDetailWitDetailsRaw(idPaymentDetail,new List<string>() { "Bank"},shouldRemap);
        }

		



		public BusinessResponse<PaymentDetail> GetPaymentDetailWithPaymentMethodDetails(long idPaymentDetail,bool shouldRemap=false)
        {
            BusinessResponse<PaymentDetail> response = new BusinessResponse<PaymentDetail>();
            try
            {
                response.Result = GetPaymentDetailWithPaymentMethodDetailsRaw(idPaymentDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal PaymentDetail GetPaymentDetailWithPaymentMethodDetailsRaw(long idPaymentDetail,bool shouldRemap=false)
        {
            return GetPaymentDetailWitDetailsRaw(idPaymentDetail,new List<string>() { "PaymentMethod"},shouldRemap);
        }

		



		public BusinessResponse<PaymentDetail> GetPaymentDetailWithPaymentDetails(long idPaymentDetail,bool shouldRemap=false)
        {
            BusinessResponse<PaymentDetail> response = new BusinessResponse<PaymentDetail>();
            try
            {
                response.Result = GetPaymentDetailWithPaymentDetailsRaw(idPaymentDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal PaymentDetail GetPaymentDetailWithPaymentDetailsRaw(long idPaymentDetail,bool shouldRemap=false)
        {
            return GetPaymentDetailWitDetailsRaw(idPaymentDetail,new List<string>() { "Payment"},shouldRemap);
        }

		
        public BusinessResponse<PaymentDetail> GetPaymentDetail(long idPaymentDetail,bool shouldRemap=false)
        {
            BusinessResponse<PaymentDetail> response = new BusinessResponse<PaymentDetail>();
		    try
		    {
			    response.Result = GetPaymentDetailsRaw(idPaymentDetail,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal PaymentDetail GetPaymentDetailsRaw(long idPaymentDetail,bool shouldRemap=false)
        {
            return daoFactory.PaymentDetailDao.GetPaymentDetail(idPaymentDetail,shouldRemap);
        }

        
        public BusinessResponse<PaymentDetail> GetPaymentDetailWitDetails(long idPaymentDetail,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<PaymentDetail> response = new BusinessResponse<PaymentDetail>();
		    try
		    {
			    response.Result = GetPaymentDetailWitDetailsRaw(idPaymentDetail,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal PaymentDetail GetPaymentDetailWitDetailsRaw(long idPaymentDetail,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.PaymentDetailDao.GetPaymentDetailWitDetails(idPaymentDetail,shouldRemap);
        }


		 public BusinessResponse<PaymentDetail> GetPaymentDetailCustom( Expression<Func<PaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<PaymentDetail> response = new BusinessResponse<PaymentDetail>();
		    try
		    {
			    response.Result = GetPaymentDetailCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal PaymentDetail GetPaymentDetailCustomRaw( Expression<Func<PaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.PaymentDetailDao.GetPaymentDetailCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<PaymentDetail>> GetPaymentDetailCustomList( Expression<Func<PaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<PaymentDetail, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<PaymentDetail>> response = new BusinessResponse<BaseListReturnType<PaymentDetail>>();
		    try
		    {
			    response.Result = GetPaymentDetailCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<PaymentDetail> GetPaymentDetailCustomListRaw( Expression<Func<PaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<PaymentDetail, dynamic> orderExpression = null)
		{
            return daoFactory.PaymentDetailDao.GetPaymentDetailCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SavePaymentDetail(PaymentDetail paymentDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SavePaymentDetailRaw(paymentDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SavePaymentDetailRaw(PaymentDetail paymentDetail)
        {
            daoFactory.PaymentDetailDao.SavePaymentDetail(paymentDetail);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyPaymentDetail(PaymentDetail paymentDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyPaymentDetailRaw(paymentDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyPaymentDetailRaw(PaymentDetail paymentDetail)
        {
            daoFactory.PaymentDetailDao.SaveOnlyPaymentDetail(paymentDetail);
            return true;
        }

        public BusinessResponse<bool> DeletePaymentDetail(PaymentDetail paymentDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePaymentDetailRaw(paymentDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePaymentDetailRaw(PaymentDetail paymentDetail)
        {
            daoFactory.PaymentDetailDao.DeletePaymentDetail(paymentDetail);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyPaymentDetail(PaymentDetail paymentDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyPaymentDetailRaw(paymentDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyPaymentDetailRaw(PaymentDetail paymentDetail)
        {
            daoFactory.PaymentDetailDao.DeletePermanentlyPaymentDetail(paymentDetail);
            return true;
        }
	}
	public partial class PaymentDueStateService: BaseService
	{
	    public BusinessResponse<List<PaymentDueState>> GetAllPaymentDueStates(bool shouldRemap=false)
        {
            BusinessResponse<List<PaymentDueState>> response = new BusinessResponse<List<PaymentDueState>>();
		    try
		    {
			    response.Result = GetAllPaymentDueStatesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<PaymentDueState> GetAllPaymentDueStatesRaw(bool shouldRemap=false)
        {
            return daoFactory.PaymentDueStateDao.GetAllPaymentDueStates(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<PaymentDueState>> GetAllPaymentDueStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDueState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<PaymentDueState, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<PaymentDueState>> response = new BusinessResponse<BaseListReturnType<PaymentDueState>>();
		    try
		    {
			    response.Result = GetAllPaymentDueStatesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<PaymentDueState> GetAllPaymentDueStatesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentDueState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<PaymentDueState, dynamic> orderExpression = null)
        {
            return daoFactory.PaymentDueStateDao.GetAllPaymentDueStatesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

		
		public BusinessResponse<BaseListReturnType<PaymentDueState>> GetAllPaymentDueStateWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<PaymentDueState>> response = new BusinessResponse<BaseListReturnType<PaymentDueState>>();
            try
            {
                response.Result = GetAllPaymentDueStateWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentDueState> GetAllPaymentDueStateWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.PaymentDueStateDao.GetAllPaymentDueStateWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<PaymentDueState>> GetPaymentDueStateListByIdList(List<long> paymentDueStateIds)
        {
            BusinessResponse<List<PaymentDueState>> response = new BusinessResponse<List<PaymentDueState>>();
            try
            {
                response.Result = GetPaymentDueStateListByIdListRaw(paymentDueStateIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<PaymentDueState> GetPaymentDueStateListByIdListRaw(List<long> paymentDueStateIds)
        {
            return daoFactory.PaymentDueStateDao.GetPaymentDueStateListByIdList(paymentDueStateIds);
        }

		
		
        public BusinessResponse<PaymentDueState> GetPaymentDueState(long idPaymentDueState,bool shouldRemap=false)
        {
            BusinessResponse<PaymentDueState> response = new BusinessResponse<PaymentDueState>();
		    try
		    {
			    response.Result = GetPaymentDueStatesRaw(idPaymentDueState,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal PaymentDueState GetPaymentDueStatesRaw(long idPaymentDueState,bool shouldRemap=false)
        {
            return daoFactory.PaymentDueStateDao.GetPaymentDueState(idPaymentDueState,shouldRemap);
        }

        
        public BusinessResponse<PaymentDueState> GetPaymentDueStateWitDetails(long idPaymentDueState,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<PaymentDueState> response = new BusinessResponse<PaymentDueState>();
		    try
		    {
			    response.Result = GetPaymentDueStateWitDetailsRaw(idPaymentDueState,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal PaymentDueState GetPaymentDueStateWitDetailsRaw(long idPaymentDueState,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.PaymentDueStateDao.GetPaymentDueStateWitDetails(idPaymentDueState,shouldRemap);
        }


		 public BusinessResponse<PaymentDueState> GetPaymentDueStateCustom( Expression<Func<PaymentDueState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<PaymentDueState> response = new BusinessResponse<PaymentDueState>();
		    try
		    {
			    response.Result = GetPaymentDueStateCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal PaymentDueState GetPaymentDueStateCustomRaw( Expression<Func<PaymentDueState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.PaymentDueStateDao.GetPaymentDueStateCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<PaymentDueState>> GetPaymentDueStateCustomList( Expression<Func<PaymentDueState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<PaymentDueState, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<PaymentDueState>> response = new BusinessResponse<BaseListReturnType<PaymentDueState>>();
		    try
		    {
			    response.Result = GetPaymentDueStateCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<PaymentDueState> GetPaymentDueStateCustomListRaw( Expression<Func<PaymentDueState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<PaymentDueState, dynamic> orderExpression = null)
		{
            return daoFactory.PaymentDueStateDao.GetPaymentDueStateCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SavePaymentDueState(PaymentDueState paymentDueState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SavePaymentDueStateRaw(paymentDueState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SavePaymentDueStateRaw(PaymentDueState paymentDueState)
        {
            daoFactory.PaymentDueStateDao.SavePaymentDueState(paymentDueState);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyPaymentDueState(PaymentDueState paymentDueState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyPaymentDueStateRaw(paymentDueState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyPaymentDueStateRaw(PaymentDueState paymentDueState)
        {
            daoFactory.PaymentDueStateDao.SaveOnlyPaymentDueState(paymentDueState);
            return true;
        }

        public BusinessResponse<bool> DeletePaymentDueState(PaymentDueState paymentDueState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePaymentDueStateRaw(paymentDueState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePaymentDueStateRaw(PaymentDueState paymentDueState)
        {
            daoFactory.PaymentDueStateDao.DeletePaymentDueState(paymentDueState);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyPaymentDueState(PaymentDueState paymentDueState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyPaymentDueStateRaw(paymentDueState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyPaymentDueStateRaw(PaymentDueState paymentDueState)
        {
            daoFactory.PaymentDueStateDao.DeletePermanentlyPaymentDueState(paymentDueState);
            return true;
        }
	}
	public partial class PaymentMethodService: BaseService
	{
	    public BusinessResponse<List<PaymentMethod>> GetAllPaymentMethods(bool shouldRemap=false)
        {
            BusinessResponse<List<PaymentMethod>> response = new BusinessResponse<List<PaymentMethod>>();
		    try
		    {
			    response.Result = GetAllPaymentMethodsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<PaymentMethod> GetAllPaymentMethodsRaw(bool shouldRemap=false)
        {
            return daoFactory.PaymentMethodDao.GetAllPaymentMethods(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<PaymentMethod>> GetAllPaymentMethodsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentMethod, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<PaymentMethod, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<PaymentMethod>> response = new BusinessResponse<BaseListReturnType<PaymentMethod>>();
		    try
		    {
			    response.Result = GetAllPaymentMethodsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<PaymentMethod> GetAllPaymentMethodsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentMethod, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<PaymentMethod, dynamic> orderExpression = null)
        {
            return daoFactory.PaymentMethodDao.GetAllPaymentMethodsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<PaymentMethod>> GetAllPaymentMethodsWithBanksDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentMethod, bool>> expression = null,bool shouldRemap=false, Func<PaymentMethod, dynamic> orderExpression = null)
			{
				return GetAllPaymentMethodsByPage(sortingPagingInfo, expression,new List<string>(){"Banks"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<PaymentMethod>> GetAllPaymentMethodsWithPaymentDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<PaymentMethod, bool>> expression = null,bool shouldRemap=false, Func<PaymentMethod, dynamic> orderExpression = null)
			{
				return GetAllPaymentMethodsByPage(sortingPagingInfo, expression,new List<string>(){"PaymentDetails"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<PaymentMethod>> GetAllPaymentMethodWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<PaymentMethod>> response = new BusinessResponse<BaseListReturnType<PaymentMethod>>();
            try
            {
                response.Result = GetAllPaymentMethodWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentMethod> GetAllPaymentMethodWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.PaymentMethodDao.GetAllPaymentMethodWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<PaymentMethod>> GetPaymentMethodListByIdList(List<long> paymentMethodIds)
        {
            BusinessResponse<List<PaymentMethod>> response = new BusinessResponse<List<PaymentMethod>>();
            try
            {
                response.Result = GetPaymentMethodListByIdListRaw(paymentMethodIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<PaymentMethod> GetPaymentMethodListByIdListRaw(List<long> paymentMethodIds)
        {
            return daoFactory.PaymentMethodDao.GetPaymentMethodListByIdList(paymentMethodIds);
        }

					
		public BusinessResponse<BaseListReturnType<PaymentMethod>> GetAllPaymentMethodsWithBanksDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<PaymentMethod>> response = new BusinessResponse<BaseListReturnType<PaymentMethod>>();
            try
            {
                response.Result = GetAllPaymentMethodsWithBanksDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentMethod> GetAllPaymentMethodsWithBanksDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPaymentMethodWitDetailsRaw(new List<string>() { "Banks" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<PaymentMethod>> GetAllPaymentMethodsWithPaymentDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<PaymentMethod>> response = new BusinessResponse<BaseListReturnType<PaymentMethod>>();
            try
            {
                response.Result = GetAllPaymentMethodsWithPaymentDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<PaymentMethod> GetAllPaymentMethodsWithPaymentDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPaymentMethodWitDetailsRaw(new List<string>() { "PaymentDetails" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Bank>>  UpdateBanksForPaymentMethodWithoutSavingNewItem(List<Bank> newBanks,long idPaymentMethod)
            {
                BusinessResponse<List<Bank>> response = new BusinessResponse<List<Bank>>();
                try
                {
                    response.Result = UpdateBanksForPaymentMethodWithoutSavingNewItemRaw(newBanks, idPaymentMethod);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Bank> UpdateBanksForPaymentMethodWithoutSavingNewItemRaw(List<Bank> newBanks,long idPaymentMethod)
            {
                return daoFactory.PaymentMethodDao.UpdateBanksForPaymentMethodWithoutSavingNewItem(newBanks,idPaymentMethod); 
            }



		    public BusinessResponse<List<Bank>>  UpdateBanksForPaymentMethod(List<Bank> newBanks,long idPaymentMethod)
            {
                BusinessResponse<List<Bank>> response = new BusinessResponse<List<Bank>>();
                try
                {
                    response.Result = UpdateBanksForPaymentMethodRaw(newBanks, idPaymentMethod);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Bank> UpdateBanksForPaymentMethodRaw(List<Bank> newBanks,long idPaymentMethod)
            {
                return daoFactory.PaymentMethodDao.UpdateBanksForPaymentMethod(newBanks,idPaymentMethod); 
            }





		public BusinessResponse<PaymentMethod> GetPaymentMethodWithBanksDetails(long idPaymentMethod,bool shouldRemap=false)
        {
            BusinessResponse<PaymentMethod> response = new BusinessResponse<PaymentMethod>();
            try
            {
                response.Result = GetPaymentMethodWithBanksDetailsRaw(idPaymentMethod,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal PaymentMethod GetPaymentMethodWithBanksDetailsRaw(long idPaymentMethod,bool shouldRemap=false)
        {
            return GetPaymentMethodWitDetailsRaw(idPaymentMethod,new List<string>() { "Banks"},shouldRemap);
        }

		
			public BusinessResponse<List<PaymentDetail>>  UpdatePaymentDetailsForPaymentMethodWithoutSavingNewItem(List<PaymentDetail> newPaymentDetails,long idPaymentMethod)
            {
                BusinessResponse<List<PaymentDetail>> response = new BusinessResponse<List<PaymentDetail>>();
                try
                {
                    response.Result = UpdatePaymentDetailsForPaymentMethodWithoutSavingNewItemRaw(newPaymentDetails, idPaymentMethod);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<PaymentDetail> UpdatePaymentDetailsForPaymentMethodWithoutSavingNewItemRaw(List<PaymentDetail> newPaymentDetails,long idPaymentMethod)
            {
                return daoFactory.PaymentMethodDao.UpdatePaymentDetailsForPaymentMethodWithoutSavingNewItem(newPaymentDetails,idPaymentMethod); 
            }



		    public BusinessResponse<List<PaymentDetail>>  UpdatePaymentDetailsForPaymentMethod(List<PaymentDetail> newPaymentDetails,long idPaymentMethod)
            {
                BusinessResponse<List<PaymentDetail>> response = new BusinessResponse<List<PaymentDetail>>();
                try
                {
                    response.Result = UpdatePaymentDetailsForPaymentMethodRaw(newPaymentDetails, idPaymentMethod);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<PaymentDetail> UpdatePaymentDetailsForPaymentMethodRaw(List<PaymentDetail> newPaymentDetails,long idPaymentMethod)
            {
                return daoFactory.PaymentMethodDao.UpdatePaymentDetailsForPaymentMethod(newPaymentDetails,idPaymentMethod); 
            }





		public BusinessResponse<PaymentMethod> GetPaymentMethodWithPaymentDetailsDetails(long idPaymentMethod,bool shouldRemap=false)
        {
            BusinessResponse<PaymentMethod> response = new BusinessResponse<PaymentMethod>();
            try
            {
                response.Result = GetPaymentMethodWithPaymentDetailsDetailsRaw(idPaymentMethod,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal PaymentMethod GetPaymentMethodWithPaymentDetailsDetailsRaw(long idPaymentMethod,bool shouldRemap=false)
        {
            return GetPaymentMethodWitDetailsRaw(idPaymentMethod,new List<string>() { "PaymentDetails"},shouldRemap);
        }

		
        public BusinessResponse<PaymentMethod> GetPaymentMethod(long idPaymentMethod,bool shouldRemap=false)
        {
            BusinessResponse<PaymentMethod> response = new BusinessResponse<PaymentMethod>();
		    try
		    {
			    response.Result = GetPaymentMethodsRaw(idPaymentMethod,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal PaymentMethod GetPaymentMethodsRaw(long idPaymentMethod,bool shouldRemap=false)
        {
            return daoFactory.PaymentMethodDao.GetPaymentMethod(idPaymentMethod,shouldRemap);
        }

        
        public BusinessResponse<PaymentMethod> GetPaymentMethodWitDetails(long idPaymentMethod,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<PaymentMethod> response = new BusinessResponse<PaymentMethod>();
		    try
		    {
			    response.Result = GetPaymentMethodWitDetailsRaw(idPaymentMethod,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal PaymentMethod GetPaymentMethodWitDetailsRaw(long idPaymentMethod,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.PaymentMethodDao.GetPaymentMethodWitDetails(idPaymentMethod,shouldRemap);
        }


		 public BusinessResponse<PaymentMethod> GetPaymentMethodCustom( Expression<Func<PaymentMethod, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<PaymentMethod> response = new BusinessResponse<PaymentMethod>();
		    try
		    {
			    response.Result = GetPaymentMethodCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal PaymentMethod GetPaymentMethodCustomRaw( Expression<Func<PaymentMethod, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.PaymentMethodDao.GetPaymentMethodCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<PaymentMethod>> GetPaymentMethodCustomList( Expression<Func<PaymentMethod, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<PaymentMethod, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<PaymentMethod>> response = new BusinessResponse<BaseListReturnType<PaymentMethod>>();
		    try
		    {
			    response.Result = GetPaymentMethodCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<PaymentMethod> GetPaymentMethodCustomListRaw( Expression<Func<PaymentMethod, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<PaymentMethod, dynamic> orderExpression = null)
		{
            return daoFactory.PaymentMethodDao.GetPaymentMethodCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SavePaymentMethod(PaymentMethod paymentMethod)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SavePaymentMethodRaw(paymentMethod);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SavePaymentMethodRaw(PaymentMethod paymentMethod)
        {
            daoFactory.PaymentMethodDao.SavePaymentMethod(paymentMethod);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyPaymentMethod(PaymentMethod paymentMethod)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyPaymentMethodRaw(paymentMethod);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyPaymentMethodRaw(PaymentMethod paymentMethod)
        {
            daoFactory.PaymentMethodDao.SaveOnlyPaymentMethod(paymentMethod);
            return true;
        }

        public BusinessResponse<bool> DeletePaymentMethod(PaymentMethod paymentMethod)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePaymentMethodRaw(paymentMethod);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePaymentMethodRaw(PaymentMethod paymentMethod)
        {
            daoFactory.PaymentMethodDao.DeletePaymentMethod(paymentMethod);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyPaymentMethod(PaymentMethod paymentMethod)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyPaymentMethodRaw(paymentMethod);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyPaymentMethodRaw(PaymentMethod paymentMethod)
        {
            daoFactory.PaymentMethodDao.DeletePermanentlyPaymentMethod(paymentMethod);
            return true;
        }
	}
	public partial class PermissionService: BaseService
	{
	    public BusinessResponse<List<Permission>> GetAllPermissions(bool shouldRemap=false)
        {
            BusinessResponse<List<Permission>> response = new BusinessResponse<List<Permission>>();
		    try
		    {
			    response.Result = GetAllPermissionsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Permission> GetAllPermissionsRaw(bool shouldRemap=false)
        {
            return daoFactory.PermissionDao.GetAllPermissions(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Permission>> GetAllPermissionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Permission, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Permission>> response = new BusinessResponse<BaseListReturnType<Permission>>();
		    try
		    {
			    response.Result = GetAllPermissionsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Permission> GetAllPermissionsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Permission, dynamic> orderExpression = null)
        {
            return daoFactory.PermissionDao.GetAllPermissionsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Permission>> GetAllPermissionsWithRole_PermissionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Permission, bool>> expression = null,bool shouldRemap=false, Func<Permission, dynamic> orderExpression = null)
			{
				return GetAllPermissionsByPage(sortingPagingInfo, expression,new List<string>(){"Role_Permission"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Permission>> GetAllPermissionsWithUser_PermissionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Permission, bool>> expression = null,bool shouldRemap=false, Func<Permission, dynamic> orderExpression = null)
			{
				return GetAllPermissionsByPage(sortingPagingInfo, expression,new List<string>(){"User_Permission"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Permission>> GetAllPermissionWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Permission>> response = new BusinessResponse<BaseListReturnType<Permission>>();
            try
            {
                response.Result = GetAllPermissionWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Permission> GetAllPermissionWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.PermissionDao.GetAllPermissionWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Permission>> GetPermissionListByIdList(List<long> permissionIds)
        {
            BusinessResponse<List<Permission>> response = new BusinessResponse<List<Permission>>();
            try
            {
                response.Result = GetPermissionListByIdListRaw(permissionIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Permission> GetPermissionListByIdListRaw(List<long> permissionIds)
        {
            return daoFactory.PermissionDao.GetPermissionListByIdList(permissionIds);
        }

					
		public BusinessResponse<BaseListReturnType<Permission>> GetAllPermissionsWithRole_PermissionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Permission>> response = new BusinessResponse<BaseListReturnType<Permission>>();
            try
            {
                response.Result = GetAllPermissionsWithRole_PermissionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Permission> GetAllPermissionsWithRole_PermissionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPermissionWitDetailsRaw(new List<string>() { "Role_Permission" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Permission>> GetAllPermissionsWithUser_PermissionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Permission>> response = new BusinessResponse<BaseListReturnType<Permission>>();
            try
            {
                response.Result = GetAllPermissionsWithUser_PermissionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Permission> GetAllPermissionsWithUser_PermissionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPermissionWitDetailsRaw(new List<string>() { "User_Permission" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Role_Permission>>  UpdateRole_PermissionForPermissionWithoutSavingNewItem(List<Role_Permission> newRole_Permission,long idPermission)
            {
                BusinessResponse<List<Role_Permission>> response = new BusinessResponse<List<Role_Permission>>();
                try
                {
                    response.Result = UpdateRole_PermissionForPermissionWithoutSavingNewItemRaw(newRole_Permission, idPermission);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Role_Permission> UpdateRole_PermissionForPermissionWithoutSavingNewItemRaw(List<Role_Permission> newRole_Permission,long idPermission)
            {
                return daoFactory.PermissionDao.UpdateRole_PermissionForPermissionWithoutSavingNewItem(newRole_Permission,idPermission); 
            }



		    public BusinessResponse<List<Role_Permission>>  UpdateRole_PermissionForPermission(List<Role_Permission> newRole_Permission,long idPermission)
            {
                BusinessResponse<List<Role_Permission>> response = new BusinessResponse<List<Role_Permission>>();
                try
                {
                    response.Result = UpdateRole_PermissionForPermissionRaw(newRole_Permission, idPermission);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Role_Permission> UpdateRole_PermissionForPermissionRaw(List<Role_Permission> newRole_Permission,long idPermission)
            {
                return daoFactory.PermissionDao.UpdateRole_PermissionForPermission(newRole_Permission,idPermission); 
            }





		public BusinessResponse<Permission> GetPermissionWithRole_PermissionDetails(long idPermission,bool shouldRemap=false)
        {
            BusinessResponse<Permission> response = new BusinessResponse<Permission>();
            try
            {
                response.Result = GetPermissionWithRole_PermissionDetailsRaw(idPermission,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Permission GetPermissionWithRole_PermissionDetailsRaw(long idPermission,bool shouldRemap=false)
        {
            return GetPermissionWitDetailsRaw(idPermission,new List<string>() { "Role_Permission"},shouldRemap);
        }

		
			public BusinessResponse<List<User_Permission>>  UpdateUser_PermissionForPermissionWithoutSavingNewItem(List<User_Permission> newUser_Permission,long idPermission)
            {
                BusinessResponse<List<User_Permission>> response = new BusinessResponse<List<User_Permission>>();
                try
                {
                    response.Result = UpdateUser_PermissionForPermissionWithoutSavingNewItemRaw(newUser_Permission, idPermission);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<User_Permission> UpdateUser_PermissionForPermissionWithoutSavingNewItemRaw(List<User_Permission> newUser_Permission,long idPermission)
            {
                return daoFactory.PermissionDao.UpdateUser_PermissionForPermissionWithoutSavingNewItem(newUser_Permission,idPermission); 
            }



		    public BusinessResponse<List<User_Permission>>  UpdateUser_PermissionForPermission(List<User_Permission> newUser_Permission,long idPermission)
            {
                BusinessResponse<List<User_Permission>> response = new BusinessResponse<List<User_Permission>>();
                try
                {
                    response.Result = UpdateUser_PermissionForPermissionRaw(newUser_Permission, idPermission);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<User_Permission> UpdateUser_PermissionForPermissionRaw(List<User_Permission> newUser_Permission,long idPermission)
            {
                return daoFactory.PermissionDao.UpdateUser_PermissionForPermission(newUser_Permission,idPermission); 
            }





		public BusinessResponse<Permission> GetPermissionWithUser_PermissionDetails(long idPermission,bool shouldRemap=false)
        {
            BusinessResponse<Permission> response = new BusinessResponse<Permission>();
            try
            {
                response.Result = GetPermissionWithUser_PermissionDetailsRaw(idPermission,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Permission GetPermissionWithUser_PermissionDetailsRaw(long idPermission,bool shouldRemap=false)
        {
            return GetPermissionWitDetailsRaw(idPermission,new List<string>() { "User_Permission"},shouldRemap);
        }

		
        public BusinessResponse<Permission> GetPermission(long idPermission,bool shouldRemap=false)
        {
            BusinessResponse<Permission> response = new BusinessResponse<Permission>();
		    try
		    {
			    response.Result = GetPermissionsRaw(idPermission,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Permission GetPermissionsRaw(long idPermission,bool shouldRemap=false)
        {
            return daoFactory.PermissionDao.GetPermission(idPermission,shouldRemap);
        }

        
        public BusinessResponse<Permission> GetPermissionWitDetails(long idPermission,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Permission> response = new BusinessResponse<Permission>();
		    try
		    {
			    response.Result = GetPermissionWitDetailsRaw(idPermission,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Permission GetPermissionWitDetailsRaw(long idPermission,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.PermissionDao.GetPermissionWitDetails(idPermission,shouldRemap);
        }


		 public BusinessResponse<Permission> GetPermissionCustom( Expression<Func<Permission, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Permission> response = new BusinessResponse<Permission>();
		    try
		    {
			    response.Result = GetPermissionCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Permission GetPermissionCustomRaw( Expression<Func<Permission, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.PermissionDao.GetPermissionCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Permission>> GetPermissionCustomList( Expression<Func<Permission, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Permission, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Permission>> response = new BusinessResponse<BaseListReturnType<Permission>>();
		    try
		    {
			    response.Result = GetPermissionCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Permission> GetPermissionCustomListRaw( Expression<Func<Permission, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Permission, dynamic> orderExpression = null)
		{
            return daoFactory.PermissionDao.GetPermissionCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SavePermission(Permission permission)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SavePermissionRaw(permission);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SavePermissionRaw(Permission permission)
        {
            daoFactory.PermissionDao.SavePermission(permission);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyPermission(Permission permission)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyPermissionRaw(permission);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyPermissionRaw(Permission permission)
        {
            daoFactory.PermissionDao.SaveOnlyPermission(permission);
            return true;
        }

        public BusinessResponse<bool> DeletePermission(Permission permission)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermissionRaw(permission);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermissionRaw(Permission permission)
        {
            daoFactory.PermissionDao.DeletePermission(permission);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyPermission(Permission permission)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyPermissionRaw(permission);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyPermissionRaw(Permission permission)
        {
            daoFactory.PermissionDao.DeletePermanentlyPermission(permission);
            return true;
        }
	}
	public partial class PersonService: BaseService
	{
	    public BusinessResponse<List<Person>> GetAllPeople(bool shouldRemap=false)
        {
            BusinessResponse<List<Person>> response = new BusinessResponse<List<Person>>();
		    try
		    {
			    response.Result = GetAllPeopleRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Person> GetAllPeopleRaw(bool shouldRemap=false)
        {
            return daoFactory.PersonDao.GetAllPeople(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Person, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Person>> response = new BusinessResponse<BaseListReturnType<Person>>();
		    try
		    {
			    response.Result = GetAllPeopleByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Person> GetAllPeopleByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Person, dynamic> orderExpression = null)
        {
            return daoFactory.PersonDao.GetAllPeopleByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleWithUsersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap=false, Func<Person, dynamic> orderExpression = null)
			{
				return GetAllPeopleByPage(sortingPagingInfo, expression,new List<string>(){"Users"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleWithTitleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap=false, Func<Person, dynamic> orderExpression = null)
			{
				return GetAllPeopleByPage(sortingPagingInfo, expression,new List<string>(){"Title"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleWithConceptsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap=false, Func<Person, dynamic> orderExpression = null)
			{
				return GetAllPeopleByPage(sortingPagingInfo, expression,new List<string>(){"Concepts"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleWithCustomersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap=false, Func<Person, dynamic> orderExpression = null)
			{
				return GetAllPeopleByPage(sortingPagingInfo, expression,new List<string>(){"Customers"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleWithPerson_AddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap=false, Func<Person, dynamic> orderExpression = null)
			{
				return GetAllPeopleByPage(sortingPagingInfo, expression,new List<string>(){"Person_Address"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleWithPerson_ContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person, bool>> expression = null,bool shouldRemap=false, Func<Person, dynamic> orderExpression = null)
			{
				return GetAllPeopleByPage(sortingPagingInfo, expression,new List<string>(){"Person_ContactType"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Person>> GetAllPersonWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person>> response = new BusinessResponse<BaseListReturnType<Person>>();
            try
            {
                response.Result = GetAllPersonWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person> GetAllPersonWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.PersonDao.GetAllPersonWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Person>> GetPersonListByIdList(List<long> personIds)
        {
            BusinessResponse<List<Person>> response = new BusinessResponse<List<Person>>();
            try
            {
                response.Result = GetPersonListByIdListRaw(personIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Person> GetPersonListByIdListRaw(List<long> personIds)
        {
            return daoFactory.PersonDao.GetPersonListByIdList(personIds);
        }

					
		public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleWithUsersDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person>> response = new BusinessResponse<BaseListReturnType<Person>>();
            try
            {
                response.Result = GetAllPeopleWithUsersDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person> GetAllPeopleWithUsersDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPersonWitDetailsRaw(new List<string>() { "Users" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleWithTitleDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person>> response = new BusinessResponse<BaseListReturnType<Person>>();
            try
            {
                response.Result = GetAllPeopleWithTitleDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person> GetAllPeopleWithTitleDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPersonWitDetailsRaw(new List<string>() { "Title" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Person>> GetAllPersonListByTitle(long idTitle)
        {
            BusinessResponse<BaseListReturnType<Person>> response = new BusinessResponse<BaseListReturnType<Person>>();
            try
            {
                response.Result = GetAllPersonListByTitleRaw(idTitle);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person> GetAllPersonListByTitleRaw(long idTitle)
        {
            return daoFactory.PersonDao.GetAllPersonListByTitle(idTitle);
        }

        public BusinessResponse<BaseListReturnType<Person>> GetAllPersonListByTitleByPage(long idTitle, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Person>> response = new BusinessResponse<BaseListReturnType<Person>>();
            try
            {
                response.Result = GetAllPersonListByTitleByPageRaw(idTitle, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person> GetAllPersonListByTitleByPageRaw(long idTitle,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.PersonDao.GetAllPersonListByTitleByPage(idTitle, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleWithConceptsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person>> response = new BusinessResponse<BaseListReturnType<Person>>();
            try
            {
                response.Result = GetAllPeopleWithConceptsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person> GetAllPeopleWithConceptsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPersonWitDetailsRaw(new List<string>() { "Concepts" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleWithCustomersDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person>> response = new BusinessResponse<BaseListReturnType<Person>>();
            try
            {
                response.Result = GetAllPeopleWithCustomersDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person> GetAllPeopleWithCustomersDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPersonWitDetailsRaw(new List<string>() { "Customers" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleWithPerson_AddressDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person>> response = new BusinessResponse<BaseListReturnType<Person>>();
            try
            {
                response.Result = GetAllPeopleWithPerson_AddressDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person> GetAllPeopleWithPerson_AddressDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPersonWitDetailsRaw(new List<string>() { "Person_Address" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Person>> GetAllPeopleWithPerson_ContactTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person>> response = new BusinessResponse<BaseListReturnType<Person>>();
            try
            {
                response.Result = GetAllPeopleWithPerson_ContactTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person> GetAllPeopleWithPerson_ContactTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPersonWitDetailsRaw(new List<string>() { "Person_ContactType" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<User>>  UpdateUsersForPersonWithoutSavingNewItem(List<User> newUsers,long idPerson)
            {
                BusinessResponse<List<User>> response = new BusinessResponse<List<User>>();
                try
                {
                    response.Result = UpdateUsersForPersonWithoutSavingNewItemRaw(newUsers, idPerson);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<User> UpdateUsersForPersonWithoutSavingNewItemRaw(List<User> newUsers,long idPerson)
            {
                return daoFactory.PersonDao.UpdateUsersForPersonWithoutSavingNewItem(newUsers,idPerson); 
            }



		    public BusinessResponse<List<User>>  UpdateUsersForPerson(List<User> newUsers,long idPerson)
            {
                BusinessResponse<List<User>> response = new BusinessResponse<List<User>>();
                try
                {
                    response.Result = UpdateUsersForPersonRaw(newUsers, idPerson);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<User> UpdateUsersForPersonRaw(List<User> newUsers,long idPerson)
            {
                return daoFactory.PersonDao.UpdateUsersForPerson(newUsers,idPerson); 
            }





		public BusinessResponse<Person> GetPersonWithUsersDetails(long idPerson,bool shouldRemap=false)
        {
            BusinessResponse<Person> response = new BusinessResponse<Person>();
            try
            {
                response.Result = GetPersonWithUsersDetailsRaw(idPerson,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Person GetPersonWithUsersDetailsRaw(long idPerson,bool shouldRemap=false)
        {
            return GetPersonWitDetailsRaw(idPerson,new List<string>() { "Users"},shouldRemap);
        }

		



		public BusinessResponse<Person> GetPersonWithTitleDetails(long idPerson,bool shouldRemap=false)
        {
            BusinessResponse<Person> response = new BusinessResponse<Person>();
            try
            {
                response.Result = GetPersonWithTitleDetailsRaw(idPerson,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Person GetPersonWithTitleDetailsRaw(long idPerson,bool shouldRemap=false)
        {
            return GetPersonWitDetailsRaw(idPerson,new List<string>() { "Title"},shouldRemap);
        }

		
			public BusinessResponse<List<Concept>>  UpdateConceptsForPersonWithoutSavingNewItem(List<Concept> newConcepts,long idPerson)
            {
                BusinessResponse<List<Concept>> response = new BusinessResponse<List<Concept>>();
                try
                {
                    response.Result = UpdateConceptsForPersonWithoutSavingNewItemRaw(newConcepts, idPerson);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Concept> UpdateConceptsForPersonWithoutSavingNewItemRaw(List<Concept> newConcepts,long idPerson)
            {
                return daoFactory.PersonDao.UpdateConceptsForPersonWithoutSavingNewItem(newConcepts,idPerson); 
            }



		    public BusinessResponse<List<Concept>>  UpdateConceptsForPerson(List<Concept> newConcepts,long idPerson)
            {
                BusinessResponse<List<Concept>> response = new BusinessResponse<List<Concept>>();
                try
                {
                    response.Result = UpdateConceptsForPersonRaw(newConcepts, idPerson);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Concept> UpdateConceptsForPersonRaw(List<Concept> newConcepts,long idPerson)
            {
                return daoFactory.PersonDao.UpdateConceptsForPerson(newConcepts,idPerson); 
            }





		public BusinessResponse<Person> GetPersonWithConceptsDetails(long idPerson,bool shouldRemap=false)
        {
            BusinessResponse<Person> response = new BusinessResponse<Person>();
            try
            {
                response.Result = GetPersonWithConceptsDetailsRaw(idPerson,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Person GetPersonWithConceptsDetailsRaw(long idPerson,bool shouldRemap=false)
        {
            return GetPersonWitDetailsRaw(idPerson,new List<string>() { "Concepts"},shouldRemap);
        }

		
			public BusinessResponse<List<Customer>>  UpdateCustomersForPersonWithoutSavingNewItem(List<Customer> newCustomers,long idPerson)
            {
                BusinessResponse<List<Customer>> response = new BusinessResponse<List<Customer>>();
                try
                {
                    response.Result = UpdateCustomersForPersonWithoutSavingNewItemRaw(newCustomers, idPerson);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Customer> UpdateCustomersForPersonWithoutSavingNewItemRaw(List<Customer> newCustomers,long idPerson)
            {
                return daoFactory.PersonDao.UpdateCustomersForPersonWithoutSavingNewItem(newCustomers,idPerson); 
            }



		    public BusinessResponse<List<Customer>>  UpdateCustomersForPerson(List<Customer> newCustomers,long idPerson)
            {
                BusinessResponse<List<Customer>> response = new BusinessResponse<List<Customer>>();
                try
                {
                    response.Result = UpdateCustomersForPersonRaw(newCustomers, idPerson);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Customer> UpdateCustomersForPersonRaw(List<Customer> newCustomers,long idPerson)
            {
                return daoFactory.PersonDao.UpdateCustomersForPerson(newCustomers,idPerson); 
            }





		public BusinessResponse<Person> GetPersonWithCustomersDetails(long idPerson,bool shouldRemap=false)
        {
            BusinessResponse<Person> response = new BusinessResponse<Person>();
            try
            {
                response.Result = GetPersonWithCustomersDetailsRaw(idPerson,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Person GetPersonWithCustomersDetailsRaw(long idPerson,bool shouldRemap=false)
        {
            return GetPersonWitDetailsRaw(idPerson,new List<string>() { "Customers"},shouldRemap);
        }

		
			public BusinessResponse<List<Person_Address>>  UpdatePerson_AddressForPersonWithoutSavingNewItem(List<Person_Address> newPerson_Address,long idPerson)
            {
                BusinessResponse<List<Person_Address>> response = new BusinessResponse<List<Person_Address>>();
                try
                {
                    response.Result = UpdatePerson_AddressForPersonWithoutSavingNewItemRaw(newPerson_Address, idPerson);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Person_Address> UpdatePerson_AddressForPersonWithoutSavingNewItemRaw(List<Person_Address> newPerson_Address,long idPerson)
            {
                return daoFactory.PersonDao.UpdatePerson_AddressForPersonWithoutSavingNewItem(newPerson_Address,idPerson); 
            }



		    public BusinessResponse<List<Person_Address>>  UpdatePerson_AddressForPerson(List<Person_Address> newPerson_Address,long idPerson)
            {
                BusinessResponse<List<Person_Address>> response = new BusinessResponse<List<Person_Address>>();
                try
                {
                    response.Result = UpdatePerson_AddressForPersonRaw(newPerson_Address, idPerson);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Person_Address> UpdatePerson_AddressForPersonRaw(List<Person_Address> newPerson_Address,long idPerson)
            {
                return daoFactory.PersonDao.UpdatePerson_AddressForPerson(newPerson_Address,idPerson); 
            }





		public BusinessResponse<Person> GetPersonWithPerson_AddressDetails(long idPerson,bool shouldRemap=false)
        {
            BusinessResponse<Person> response = new BusinessResponse<Person>();
            try
            {
                response.Result = GetPersonWithPerson_AddressDetailsRaw(idPerson,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Person GetPersonWithPerson_AddressDetailsRaw(long idPerson,bool shouldRemap=false)
        {
            return GetPersonWitDetailsRaw(idPerson,new List<string>() { "Person_Address"},shouldRemap);
        }

		
			public BusinessResponse<List<Person_ContactType>>  UpdatePerson_ContactTypeForPersonWithoutSavingNewItem(List<Person_ContactType> newPerson_ContactType,long idPerson)
            {
                BusinessResponse<List<Person_ContactType>> response = new BusinessResponse<List<Person_ContactType>>();
                try
                {
                    response.Result = UpdatePerson_ContactTypeForPersonWithoutSavingNewItemRaw(newPerson_ContactType, idPerson);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Person_ContactType> UpdatePerson_ContactTypeForPersonWithoutSavingNewItemRaw(List<Person_ContactType> newPerson_ContactType,long idPerson)
            {
                return daoFactory.PersonDao.UpdatePerson_ContactTypeForPersonWithoutSavingNewItem(newPerson_ContactType,idPerson); 
            }



		    public BusinessResponse<List<Person_ContactType>>  UpdatePerson_ContactTypeForPerson(List<Person_ContactType> newPerson_ContactType,long idPerson)
            {
                BusinessResponse<List<Person_ContactType>> response = new BusinessResponse<List<Person_ContactType>>();
                try
                {
                    response.Result = UpdatePerson_ContactTypeForPersonRaw(newPerson_ContactType, idPerson);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Person_ContactType> UpdatePerson_ContactTypeForPersonRaw(List<Person_ContactType> newPerson_ContactType,long idPerson)
            {
                return daoFactory.PersonDao.UpdatePerson_ContactTypeForPerson(newPerson_ContactType,idPerson); 
            }





		public BusinessResponse<Person> GetPersonWithPerson_ContactTypeDetails(long idPerson,bool shouldRemap=false)
        {
            BusinessResponse<Person> response = new BusinessResponse<Person>();
            try
            {
                response.Result = GetPersonWithPerson_ContactTypeDetailsRaw(idPerson,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Person GetPersonWithPerson_ContactTypeDetailsRaw(long idPerson,bool shouldRemap=false)
        {
            return GetPersonWitDetailsRaw(idPerson,new List<string>() { "Person_ContactType"},shouldRemap);
        }

		
        public BusinessResponse<Person> GetPerson(long idPerson,bool shouldRemap=false)
        {
            BusinessResponse<Person> response = new BusinessResponse<Person>();
		    try
		    {
			    response.Result = GetPeopleRaw(idPerson,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Person GetPeopleRaw(long idPerson,bool shouldRemap=false)
        {
            return daoFactory.PersonDao.GetPerson(idPerson,shouldRemap);
        }

        
        public BusinessResponse<Person> GetPersonWitDetails(long idPerson,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Person> response = new BusinessResponse<Person>();
		    try
		    {
			    response.Result = GetPersonWitDetailsRaw(idPerson,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Person GetPersonWitDetailsRaw(long idPerson,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.PersonDao.GetPersonWitDetails(idPerson,shouldRemap);
        }


		 public BusinessResponse<Person> GetPersonCustom( Expression<Func<Person, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Person> response = new BusinessResponse<Person>();
		    try
		    {
			    response.Result = GetPersonCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Person GetPersonCustomRaw( Expression<Func<Person, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.PersonDao.GetPersonCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Person>> GetPersonCustomList( Expression<Func<Person, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Person, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Person>> response = new BusinessResponse<BaseListReturnType<Person>>();
		    try
		    {
			    response.Result = GetPersonCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Person> GetPersonCustomListRaw( Expression<Func<Person, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Person, dynamic> orderExpression = null)
		{
            return daoFactory.PersonDao.GetPersonCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SavePerson(Person person)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SavePersonRaw(person);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SavePersonRaw(Person person)
        {
            daoFactory.PersonDao.SavePerson(person);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyPerson(Person person)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyPersonRaw(person);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyPersonRaw(Person person)
        {
            daoFactory.PersonDao.SaveOnlyPerson(person);
            return true;
        }

        public BusinessResponse<bool> DeletePerson(Person person)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePersonRaw(person);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePersonRaw(Person person)
        {
            daoFactory.PersonDao.DeletePerson(person);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyPerson(Person person)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyPersonRaw(person);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyPersonRaw(Person person)
        {
            daoFactory.PersonDao.DeletePermanentlyPerson(person);
            return true;
        }
	}
	public partial class Person_AddressService: BaseService
	{
	    public BusinessResponse<List<Person_Address>> GetAllPerson_Address(bool shouldRemap=false)
        {
            BusinessResponse<List<Person_Address>> response = new BusinessResponse<List<Person_Address>>();
		    try
		    {
			    response.Result = GetAllPerson_AddressRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Person_Address> GetAllPerson_AddressRaw(bool shouldRemap=false)
        {
            return daoFactory.Person_AddressDao.GetAllPerson_Address(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Person_Address>> GetAllPerson_AddressByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_Address, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Person_Address, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Person_Address>> response = new BusinessResponse<BaseListReturnType<Person_Address>>();
		    try
		    {
			    response.Result = GetAllPerson_AddressByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Person_Address> GetAllPerson_AddressByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_Address, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Person_Address, dynamic> orderExpression = null)
        {
            return daoFactory.Person_AddressDao.GetAllPerson_AddressByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Person_Address>> GetAllPerson_AddressWithAddressDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_Address, bool>> expression = null,bool shouldRemap=false, Func<Person_Address, dynamic> orderExpression = null)
			{
				return GetAllPerson_AddressByPage(sortingPagingInfo, expression,new List<string>(){"Address"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Person_Address>> GetAllPerson_AddressWithPersonDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_Address, bool>> expression = null,bool shouldRemap=false, Func<Person_Address, dynamic> orderExpression = null)
			{
				return GetAllPerson_AddressByPage(sortingPagingInfo, expression,new List<string>(){"Person"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Person_Address>> GetAllPerson_AddressWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person_Address>> response = new BusinessResponse<BaseListReturnType<Person_Address>>();
            try
            {
                response.Result = GetAllPerson_AddressWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_Address> GetAllPerson_AddressWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Person_AddressDao.GetAllPerson_AddressWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Person_Address>> GetPerson_AddressListByIdList(List<long> person_AddressIds)
        {
            BusinessResponse<List<Person_Address>> response = new BusinessResponse<List<Person_Address>>();
            try
            {
                response.Result = GetPerson_AddressListByIdListRaw(person_AddressIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Person_Address> GetPerson_AddressListByIdListRaw(List<long> person_AddressIds)
        {
            return daoFactory.Person_AddressDao.GetPerson_AddressListByIdList(person_AddressIds);
        }

					
		public BusinessResponse<BaseListReturnType<Person_Address>> GetAllPerson_AddressWithAddressDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person_Address>> response = new BusinessResponse<BaseListReturnType<Person_Address>>();
            try
            {
                response.Result = GetAllPerson_AddressWithAddressDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_Address> GetAllPerson_AddressWithAddressDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPerson_AddressWitDetailsRaw(new List<string>() { "Address" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Person_Address>> GetAllPerson_AddressListByAddress(long idAddress)
        {
            BusinessResponse<BaseListReturnType<Person_Address>> response = new BusinessResponse<BaseListReturnType<Person_Address>>();
            try
            {
                response.Result = GetAllPerson_AddressListByAddressRaw(idAddress);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_Address> GetAllPerson_AddressListByAddressRaw(long idAddress)
        {
            return daoFactory.Person_AddressDao.GetAllPerson_AddressListByAddress(idAddress);
        }

        public BusinessResponse<BaseListReturnType<Person_Address>> GetAllPerson_AddressListByAddressByPage(long idAddress, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Person_Address>> response = new BusinessResponse<BaseListReturnType<Person_Address>>();
            try
            {
                response.Result = GetAllPerson_AddressListByAddressByPageRaw(idAddress, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_Address> GetAllPerson_AddressListByAddressByPageRaw(long idAddress,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Person_AddressDao.GetAllPerson_AddressListByAddressByPage(idAddress, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Person_Address>> GetAllPerson_AddressWithPersonDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person_Address>> response = new BusinessResponse<BaseListReturnType<Person_Address>>();
            try
            {
                response.Result = GetAllPerson_AddressWithPersonDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_Address> GetAllPerson_AddressWithPersonDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPerson_AddressWitDetailsRaw(new List<string>() { "Person" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Person_Address>> GetAllPerson_AddressListByPerson(long idPerson)
        {
            BusinessResponse<BaseListReturnType<Person_Address>> response = new BusinessResponse<BaseListReturnType<Person_Address>>();
            try
            {
                response.Result = GetAllPerson_AddressListByPersonRaw(idPerson);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_Address> GetAllPerson_AddressListByPersonRaw(long idPerson)
        {
            return daoFactory.Person_AddressDao.GetAllPerson_AddressListByPerson(idPerson);
        }

        public BusinessResponse<BaseListReturnType<Person_Address>> GetAllPerson_AddressListByPersonByPage(long idPerson, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Person_Address>> response = new BusinessResponse<BaseListReturnType<Person_Address>>();
            try
            {
                response.Result = GetAllPerson_AddressListByPersonByPageRaw(idPerson, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_Address> GetAllPerson_AddressListByPersonByPageRaw(long idPerson,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Person_AddressDao.GetAllPerson_AddressListByPersonByPage(idPerson, sortingPagingInfo);
        }

		
		



		public BusinessResponse<Person_Address> GetPerson_AddressWithAddressDetails(long idPerson_Address,bool shouldRemap=false)
        {
            BusinessResponse<Person_Address> response = new BusinessResponse<Person_Address>();
            try
            {
                response.Result = GetPerson_AddressWithAddressDetailsRaw(idPerson_Address,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Person_Address GetPerson_AddressWithAddressDetailsRaw(long idPerson_Address,bool shouldRemap=false)
        {
            return GetPerson_AddressWitDetailsRaw(idPerson_Address,new List<string>() { "Address"},shouldRemap);
        }

		



		public BusinessResponse<Person_Address> GetPerson_AddressWithPersonDetails(long idPerson_Address,bool shouldRemap=false)
        {
            BusinessResponse<Person_Address> response = new BusinessResponse<Person_Address>();
            try
            {
                response.Result = GetPerson_AddressWithPersonDetailsRaw(idPerson_Address,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Person_Address GetPerson_AddressWithPersonDetailsRaw(long idPerson_Address,bool shouldRemap=false)
        {
            return GetPerson_AddressWitDetailsRaw(idPerson_Address,new List<string>() { "Person"},shouldRemap);
        }

		
        public BusinessResponse<Person_Address> GetPerson_Address(long idPerson_Address,bool shouldRemap=false)
        {
            BusinessResponse<Person_Address> response = new BusinessResponse<Person_Address>();
		    try
		    {
			    response.Result = GetPerson_AddressRaw(idPerson_Address,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Person_Address GetPerson_AddressRaw(long idPerson_Address,bool shouldRemap=false)
        {
            return daoFactory.Person_AddressDao.GetPerson_Address(idPerson_Address,shouldRemap);
        }

        
        public BusinessResponse<Person_Address> GetPerson_AddressWitDetails(long idPerson_Address,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Person_Address> response = new BusinessResponse<Person_Address>();
		    try
		    {
			    response.Result = GetPerson_AddressWitDetailsRaw(idPerson_Address,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Person_Address GetPerson_AddressWitDetailsRaw(long idPerson_Address,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Person_AddressDao.GetPerson_AddressWitDetails(idPerson_Address,shouldRemap);
        }


		 public BusinessResponse<Person_Address> GetPerson_AddressCustom( Expression<Func<Person_Address, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Person_Address> response = new BusinessResponse<Person_Address>();
		    try
		    {
			    response.Result = GetPerson_AddressCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Person_Address GetPerson_AddressCustomRaw( Expression<Func<Person_Address, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.Person_AddressDao.GetPerson_AddressCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Person_Address>> GetPerson_AddressCustomList( Expression<Func<Person_Address, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Person_Address, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Person_Address>> response = new BusinessResponse<BaseListReturnType<Person_Address>>();
		    try
		    {
			    response.Result = GetPerson_AddressCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Person_Address> GetPerson_AddressCustomListRaw( Expression<Func<Person_Address, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Person_Address, dynamic> orderExpression = null)
		{
            return daoFactory.Person_AddressDao.GetPerson_AddressCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SavePerson_Address(Person_Address person_Address)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SavePerson_AddressRaw(person_Address);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SavePerson_AddressRaw(Person_Address person_Address)
        {
            daoFactory.Person_AddressDao.SavePerson_Address(person_Address);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyPerson_Address(Person_Address person_Address)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyPerson_AddressRaw(person_Address);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyPerson_AddressRaw(Person_Address person_Address)
        {
            daoFactory.Person_AddressDao.SaveOnlyPerson_Address(person_Address);
            return true;
        }

        public BusinessResponse<bool> DeletePerson_Address(Person_Address person_Address)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePerson_AddressRaw(person_Address);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePerson_AddressRaw(Person_Address person_Address)
        {
            daoFactory.Person_AddressDao.DeletePerson_Address(person_Address);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyPerson_Address(Person_Address person_Address)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyPerson_AddressRaw(person_Address);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyPerson_AddressRaw(Person_Address person_Address)
        {
            daoFactory.Person_AddressDao.DeletePermanentlyPerson_Address(person_Address);
            return true;
        }
	}
	public partial class Person_ContactTypeService: BaseService
	{
	    public BusinessResponse<List<Person_ContactType>> GetAllPerson_ContactType(bool shouldRemap=false)
        {
            BusinessResponse<List<Person_ContactType>> response = new BusinessResponse<List<Person_ContactType>>();
		    try
		    {
			    response.Result = GetAllPerson_ContactTypeRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Person_ContactType> GetAllPerson_ContactTypeRaw(bool shouldRemap=false)
        {
            return daoFactory.Person_ContactTypeDao.GetAllPerson_ContactType(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Person_ContactType>> GetAllPerson_ContactTypeByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Person_ContactType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Person_ContactType>> response = new BusinessResponse<BaseListReturnType<Person_ContactType>>();
		    try
		    {
			    response.Result = GetAllPerson_ContactTypeByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_ContactType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Person_ContactType, dynamic> orderExpression = null)
        {
            return daoFactory.Person_ContactTypeDao.GetAllPerson_ContactTypeByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Person_ContactType>> GetAllPerson_ContactTypeWithContactTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_ContactType, bool>> expression = null,bool shouldRemap=false, Func<Person_ContactType, dynamic> orderExpression = null)
			{
				return GetAllPerson_ContactTypeByPage(sortingPagingInfo, expression,new List<string>(){"ContactType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Person_ContactType>> GetAllPerson_ContactTypeWithPersonDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Person_ContactType, bool>> expression = null,bool shouldRemap=false, Func<Person_ContactType, dynamic> orderExpression = null)
			{
				return GetAllPerson_ContactTypeByPage(sortingPagingInfo, expression,new List<string>(){"Person"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Person_ContactType>> GetAllPerson_ContactTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person_ContactType>> response = new BusinessResponse<BaseListReturnType<Person_ContactType>>();
            try
            {
                response.Result = GetAllPerson_ContactTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Person_ContactTypeDao.GetAllPerson_ContactTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Person_ContactType>> GetPerson_ContactTypeListByIdList(List<long> person_ContactTypeIds)
        {
            BusinessResponse<List<Person_ContactType>> response = new BusinessResponse<List<Person_ContactType>>();
            try
            {
                response.Result = GetPerson_ContactTypeListByIdListRaw(person_ContactTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Person_ContactType> GetPerson_ContactTypeListByIdListRaw(List<long> person_ContactTypeIds)
        {
            return daoFactory.Person_ContactTypeDao.GetPerson_ContactTypeListByIdList(person_ContactTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<Person_ContactType>> GetAllPerson_ContactTypeWithContactTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person_ContactType>> response = new BusinessResponse<BaseListReturnType<Person_ContactType>>();
            try
            {
                response.Result = GetAllPerson_ContactTypeWithContactTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeWithContactTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPerson_ContactTypeWitDetailsRaw(new List<string>() { "ContactType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Person_ContactType>> GetAllPerson_ContactTypeListByContactType(long idContactType)
        {
            BusinessResponse<BaseListReturnType<Person_ContactType>> response = new BusinessResponse<BaseListReturnType<Person_ContactType>>();
            try
            {
                response.Result = GetAllPerson_ContactTypeListByContactTypeRaw(idContactType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeListByContactTypeRaw(long idContactType)
        {
            return daoFactory.Person_ContactTypeDao.GetAllPerson_ContactTypeListByContactType(idContactType);
        }

        public BusinessResponse<BaseListReturnType<Person_ContactType>> GetAllPerson_ContactTypeListByContactTypeByPage(long idContactType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Person_ContactType>> response = new BusinessResponse<BaseListReturnType<Person_ContactType>>();
            try
            {
                response.Result = GetAllPerson_ContactTypeListByContactTypeByPageRaw(idContactType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeListByContactTypeByPageRaw(long idContactType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Person_ContactTypeDao.GetAllPerson_ContactTypeListByContactTypeByPage(idContactType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Person_ContactType>> GetAllPerson_ContactTypeWithPersonDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Person_ContactType>> response = new BusinessResponse<BaseListReturnType<Person_ContactType>>();
            try
            {
                response.Result = GetAllPerson_ContactTypeWithPersonDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeWithPersonDetailsRaw(bool shouldRemap=false)
        {
            return GetAllPerson_ContactTypeWitDetailsRaw(new List<string>() { "Person" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Person_ContactType>> GetAllPerson_ContactTypeListByPerson(long idPerson)
        {
            BusinessResponse<BaseListReturnType<Person_ContactType>> response = new BusinessResponse<BaseListReturnType<Person_ContactType>>();
            try
            {
                response.Result = GetAllPerson_ContactTypeListByPersonRaw(idPerson);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeListByPersonRaw(long idPerson)
        {
            return daoFactory.Person_ContactTypeDao.GetAllPerson_ContactTypeListByPerson(idPerson);
        }

        public BusinessResponse<BaseListReturnType<Person_ContactType>> GetAllPerson_ContactTypeListByPersonByPage(long idPerson, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Person_ContactType>> response = new BusinessResponse<BaseListReturnType<Person_ContactType>>();
            try
            {
                response.Result = GetAllPerson_ContactTypeListByPersonByPageRaw(idPerson, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Person_ContactType> GetAllPerson_ContactTypeListByPersonByPageRaw(long idPerson,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Person_ContactTypeDao.GetAllPerson_ContactTypeListByPersonByPage(idPerson, sortingPagingInfo);
        }

		
		



		public BusinessResponse<Person_ContactType> GetPerson_ContactTypeWithContactTypeDetails(long idPerson_ContactType,bool shouldRemap=false)
        {
            BusinessResponse<Person_ContactType> response = new BusinessResponse<Person_ContactType>();
            try
            {
                response.Result = GetPerson_ContactTypeWithContactTypeDetailsRaw(idPerson_ContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Person_ContactType GetPerson_ContactTypeWithContactTypeDetailsRaw(long idPerson_ContactType,bool shouldRemap=false)
        {
            return GetPerson_ContactTypeWitDetailsRaw(idPerson_ContactType,new List<string>() { "ContactType"},shouldRemap);
        }

		



		public BusinessResponse<Person_ContactType> GetPerson_ContactTypeWithPersonDetails(long idPerson_ContactType,bool shouldRemap=false)
        {
            BusinessResponse<Person_ContactType> response = new BusinessResponse<Person_ContactType>();
            try
            {
                response.Result = GetPerson_ContactTypeWithPersonDetailsRaw(idPerson_ContactType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Person_ContactType GetPerson_ContactTypeWithPersonDetailsRaw(long idPerson_ContactType,bool shouldRemap=false)
        {
            return GetPerson_ContactTypeWitDetailsRaw(idPerson_ContactType,new List<string>() { "Person"},shouldRemap);
        }

		
        public BusinessResponse<Person_ContactType> GetPerson_ContactType(long idPerson_ContactType,bool shouldRemap=false)
        {
            BusinessResponse<Person_ContactType> response = new BusinessResponse<Person_ContactType>();
		    try
		    {
			    response.Result = GetPerson_ContactTypeRaw(idPerson_ContactType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Person_ContactType GetPerson_ContactTypeRaw(long idPerson_ContactType,bool shouldRemap=false)
        {
            return daoFactory.Person_ContactTypeDao.GetPerson_ContactType(idPerson_ContactType,shouldRemap);
        }

        
        public BusinessResponse<Person_ContactType> GetPerson_ContactTypeWitDetails(long idPerson_ContactType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Person_ContactType> response = new BusinessResponse<Person_ContactType>();
		    try
		    {
			    response.Result = GetPerson_ContactTypeWitDetailsRaw(idPerson_ContactType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Person_ContactType GetPerson_ContactTypeWitDetailsRaw(long idPerson_ContactType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Person_ContactTypeDao.GetPerson_ContactTypeWitDetails(idPerson_ContactType,shouldRemap);
        }


		 public BusinessResponse<Person_ContactType> GetPerson_ContactTypeCustom( Expression<Func<Person_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Person_ContactType> response = new BusinessResponse<Person_ContactType>();
		    try
		    {
			    response.Result = GetPerson_ContactTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Person_ContactType GetPerson_ContactTypeCustomRaw( Expression<Func<Person_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.Person_ContactTypeDao.GetPerson_ContactTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Person_ContactType>> GetPerson_ContactTypeCustomList( Expression<Func<Person_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Person_ContactType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Person_ContactType>> response = new BusinessResponse<BaseListReturnType<Person_ContactType>>();
		    try
		    {
			    response.Result = GetPerson_ContactTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Person_ContactType> GetPerson_ContactTypeCustomListRaw( Expression<Func<Person_ContactType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Person_ContactType, dynamic> orderExpression = null)
		{
            return daoFactory.Person_ContactTypeDao.GetPerson_ContactTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SavePerson_ContactType(Person_ContactType person_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SavePerson_ContactTypeRaw(person_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SavePerson_ContactTypeRaw(Person_ContactType person_ContactType)
        {
            daoFactory.Person_ContactTypeDao.SavePerson_ContactType(person_ContactType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyPerson_ContactType(Person_ContactType person_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyPerson_ContactTypeRaw(person_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyPerson_ContactTypeRaw(Person_ContactType person_ContactType)
        {
            daoFactory.Person_ContactTypeDao.SaveOnlyPerson_ContactType(person_ContactType);
            return true;
        }

        public BusinessResponse<bool> DeletePerson_ContactType(Person_ContactType person_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePerson_ContactTypeRaw(person_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePerson_ContactTypeRaw(Person_ContactType person_ContactType)
        {
            daoFactory.Person_ContactTypeDao.DeletePerson_ContactType(person_ContactType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyPerson_ContactType(Person_ContactType person_ContactType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyPerson_ContactTypeRaw(person_ContactType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyPerson_ContactTypeRaw(Person_ContactType person_ContactType)
        {
            daoFactory.Person_ContactTypeDao.DeletePermanentlyPerson_ContactType(person_ContactType);
            return true;
        }
	}
	public partial class ProductService: BaseService
	{
	    public BusinessResponse<List<Product>> GetAllProducts(bool shouldRemap=false)
        {
            BusinessResponse<List<Product>> response = new BusinessResponse<List<Product>>();
		    try
		    {
			    response.Result = GetAllProductsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Product> GetAllProductsRaw(bool shouldRemap=false)
        {
            return daoFactory.ProductDao.GetAllProducts(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Product>> GetAllProductsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Product, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
		    try
		    {
			    response.Result = GetAllProductsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Product> GetAllProductsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Product, dynamic> orderExpression = null)
        {
            return daoFactory.ProductDao.GetAllProductsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Product>> GetAllProductsWithTransactionDetailPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap=false, Func<Product, dynamic> orderExpression = null)
			{
				return GetAllProductsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionDetailPresets"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Product>> GetAllProductsWithProductTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap=false, Func<Product, dynamic> orderExpression = null)
			{
				return GetAllProductsByPage(sortingPagingInfo, expression,new List<string>(){"ProductType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Product>> GetAllProductsWithOrderDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap=false, Func<Product, dynamic> orderExpression = null)
			{
				return GetAllProductsByPage(sortingPagingInfo, expression,new List<string>(){"OrderDetails"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Product>> GetAllProductsWithProduct1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap=false, Func<Product, dynamic> orderExpression = null)
			{
				return GetAllProductsByPage(sortingPagingInfo, expression,new List<string>(){"Product1"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Product>> GetAllProductsWithProduct2DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap=false, Func<Product, dynamic> orderExpression = null)
			{
				return GetAllProductsByPage(sortingPagingInfo, expression,new List<string>(){"Product2"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Product>> GetAllProductsWithTransactionDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Product, bool>> expression = null,bool shouldRemap=false, Func<Product, dynamic> orderExpression = null)
			{
				return GetAllProductsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionDetails"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Product>> GetAllProductWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
            try
            {
                response.Result = GetAllProductWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Product> GetAllProductWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ProductDao.GetAllProductWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Product>> GetProductListByIdList(List<long> productIds)
        {
            BusinessResponse<List<Product>> response = new BusinessResponse<List<Product>>();
            try
            {
                response.Result = GetProductListByIdListRaw(productIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Product> GetProductListByIdListRaw(List<long> productIds)
        {
            return daoFactory.ProductDao.GetProductListByIdList(productIds);
        }

					
		public BusinessResponse<BaseListReturnType<Product>> GetAllProductsWithTransactionDetailPresetsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
            try
            {
                response.Result = GetAllProductsWithTransactionDetailPresetsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Product> GetAllProductsWithTransactionDetailPresetsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllProductWitDetailsRaw(new List<string>() { "TransactionDetailPresets" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Product>> GetAllProductsWithProductTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
            try
            {
                response.Result = GetAllProductsWithProductTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Product> GetAllProductsWithProductTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllProductWitDetailsRaw(new List<string>() { "ProductType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Product>> GetAllProductListByProductType(long idProductType)
        {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
            try
            {
                response.Result = GetAllProductListByProductTypeRaw(idProductType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Product> GetAllProductListByProductTypeRaw(long idProductType)
        {
            return daoFactory.ProductDao.GetAllProductListByProductType(idProductType);
        }

        public BusinessResponse<BaseListReturnType<Product>> GetAllProductListByProductTypeByPage(long idProductType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
            try
            {
                response.Result = GetAllProductListByProductTypeByPageRaw(idProductType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Product> GetAllProductListByProductTypeByPageRaw(long idProductType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.ProductDao.GetAllProductListByProductTypeByPage(idProductType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Product>> GetAllProductsWithOrderDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
            try
            {
                response.Result = GetAllProductsWithOrderDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Product> GetAllProductsWithOrderDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllProductWitDetailsRaw(new List<string>() { "OrderDetails" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Product>> GetAllProductsWithProduct1Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
            try
            {
                response.Result = GetAllProductsWithProduct1DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Product> GetAllProductsWithProduct1DetailsRaw(bool shouldRemap=false)
        {
            return GetAllProductWitDetailsRaw(new List<string>() { "Product1" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Product>> GetAllProductsWithProduct2Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
            try
            {
                response.Result = GetAllProductsWithProduct2DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Product> GetAllProductsWithProduct2DetailsRaw(bool shouldRemap=false)
        {
            return GetAllProductWitDetailsRaw(new List<string>() { "Product2" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Product>> GetAllProductListByProduct2(long idProduct2)
        {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
            try
            {
                response.Result = GetAllProductListByProduct2Raw(idProduct2);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Product> GetAllProductListByProduct2Raw(long idProduct2)
        {
            return daoFactory.ProductDao.GetAllProductListByProduct2(idProduct2);
        }

        public BusinessResponse<BaseListReturnType<Product>> GetAllProductListByProduct2ByPage(long idProduct2, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
            try
            {
                response.Result = GetAllProductListByProduct2ByPageRaw(idProduct2, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Product> GetAllProductListByProduct2ByPageRaw(long idProduct2,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.ProductDao.GetAllProductListByProduct2ByPage(idProduct2, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Product>> GetAllProductsWithTransactionDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
            try
            {
                response.Result = GetAllProductsWithTransactionDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Product> GetAllProductsWithTransactionDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllProductWitDetailsRaw(new List<string>() { "TransactionDetails" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<TransactionDetailPreset>>  UpdateTransactionDetailPresetsForProductWithoutSavingNewItem(List<TransactionDetailPreset> newTransactionDetailPresets,long idProduct)
            {
                BusinessResponse<List<TransactionDetailPreset>> response = new BusinessResponse<List<TransactionDetailPreset>>();
                try
                {
                    response.Result = UpdateTransactionDetailPresetsForProductWithoutSavingNewItemRaw(newTransactionDetailPresets, idProduct);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDetailPreset> UpdateTransactionDetailPresetsForProductWithoutSavingNewItemRaw(List<TransactionDetailPreset> newTransactionDetailPresets,long idProduct)
            {
                return daoFactory.ProductDao.UpdateTransactionDetailPresetsForProductWithoutSavingNewItem(newTransactionDetailPresets,idProduct); 
            }



		    public BusinessResponse<List<TransactionDetailPreset>>  UpdateTransactionDetailPresetsForProduct(List<TransactionDetailPreset> newTransactionDetailPresets,long idProduct)
            {
                BusinessResponse<List<TransactionDetailPreset>> response = new BusinessResponse<List<TransactionDetailPreset>>();
                try
                {
                    response.Result = UpdateTransactionDetailPresetsForProductRaw(newTransactionDetailPresets, idProduct);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDetailPreset> UpdateTransactionDetailPresetsForProductRaw(List<TransactionDetailPreset> newTransactionDetailPresets,long idProduct)
            {
                return daoFactory.ProductDao.UpdateTransactionDetailPresetsForProduct(newTransactionDetailPresets,idProduct); 
            }





		public BusinessResponse<Product> GetProductWithTransactionDetailPresetsDetails(long idProduct,bool shouldRemap=false)
        {
            BusinessResponse<Product> response = new BusinessResponse<Product>();
            try
            {
                response.Result = GetProductWithTransactionDetailPresetsDetailsRaw(idProduct,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Product GetProductWithTransactionDetailPresetsDetailsRaw(long idProduct,bool shouldRemap=false)
        {
            return GetProductWitDetailsRaw(idProduct,new List<string>() { "TransactionDetailPresets"},shouldRemap);
        }

		



		public BusinessResponse<Product> GetProductWithProductTypeDetails(long idProduct,bool shouldRemap=false)
        {
            BusinessResponse<Product> response = new BusinessResponse<Product>();
            try
            {
                response.Result = GetProductWithProductTypeDetailsRaw(idProduct,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Product GetProductWithProductTypeDetailsRaw(long idProduct,bool shouldRemap=false)
        {
            return GetProductWitDetailsRaw(idProduct,new List<string>() { "ProductType"},shouldRemap);
        }

		
			public BusinessResponse<List<OrderDetail>>  UpdateOrderDetailsForProductWithoutSavingNewItem(List<OrderDetail> newOrderDetails,long idProduct)
            {
                BusinessResponse<List<OrderDetail>> response = new BusinessResponse<List<OrderDetail>>();
                try
                {
                    response.Result = UpdateOrderDetailsForProductWithoutSavingNewItemRaw(newOrderDetails, idProduct);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderDetail> UpdateOrderDetailsForProductWithoutSavingNewItemRaw(List<OrderDetail> newOrderDetails,long idProduct)
            {
                return daoFactory.ProductDao.UpdateOrderDetailsForProductWithoutSavingNewItem(newOrderDetails,idProduct); 
            }



		    public BusinessResponse<List<OrderDetail>>  UpdateOrderDetailsForProduct(List<OrderDetail> newOrderDetails,long idProduct)
            {
                BusinessResponse<List<OrderDetail>> response = new BusinessResponse<List<OrderDetail>>();
                try
                {
                    response.Result = UpdateOrderDetailsForProductRaw(newOrderDetails, idProduct);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderDetail> UpdateOrderDetailsForProductRaw(List<OrderDetail> newOrderDetails,long idProduct)
            {
                return daoFactory.ProductDao.UpdateOrderDetailsForProduct(newOrderDetails,idProduct); 
            }





		public BusinessResponse<Product> GetProductWithOrderDetailsDetails(long idProduct,bool shouldRemap=false)
        {
            BusinessResponse<Product> response = new BusinessResponse<Product>();
            try
            {
                response.Result = GetProductWithOrderDetailsDetailsRaw(idProduct,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Product GetProductWithOrderDetailsDetailsRaw(long idProduct,bool shouldRemap=false)
        {
            return GetProductWitDetailsRaw(idProduct,new List<string>() { "OrderDetails"},shouldRemap);
        }

		
			public BusinessResponse<List<Product>>  UpdateProduct1ForProductWithoutSavingNewItem(List<Product> newProduct1,long idProduct)
            {
                BusinessResponse<List<Product>> response = new BusinessResponse<List<Product>>();
                try
                {
                    response.Result = UpdateProduct1ForProductWithoutSavingNewItemRaw(newProduct1, idProduct);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Product> UpdateProduct1ForProductWithoutSavingNewItemRaw(List<Product> newProduct1,long idProduct)
            {
                return daoFactory.ProductDao.UpdateProduct1ForProductWithoutSavingNewItem(newProduct1,idProduct); 
            }



		    public BusinessResponse<List<Product>>  UpdateProduct1ForProduct(List<Product> newProduct1,long idProduct)
            {
                BusinessResponse<List<Product>> response = new BusinessResponse<List<Product>>();
                try
                {
                    response.Result = UpdateProduct1ForProductRaw(newProduct1, idProduct);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Product> UpdateProduct1ForProductRaw(List<Product> newProduct1,long idProduct)
            {
                return daoFactory.ProductDao.UpdateProduct1ForProduct(newProduct1,idProduct); 
            }





		public BusinessResponse<Product> GetProductWithProduct1Details(long idProduct,bool shouldRemap=false)
        {
            BusinessResponse<Product> response = new BusinessResponse<Product>();
            try
            {
                response.Result = GetProductWithProduct1DetailsRaw(idProduct,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Product GetProductWithProduct1DetailsRaw(long idProduct,bool shouldRemap=false)
        {
            return GetProductWitDetailsRaw(idProduct,new List<string>() { "Product1"},shouldRemap);
        }

		



		public BusinessResponse<Product> GetProductWithProduct2Details(long idProduct,bool shouldRemap=false)
        {
            BusinessResponse<Product> response = new BusinessResponse<Product>();
            try
            {
                response.Result = GetProductWithProduct2DetailsRaw(idProduct,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Product GetProductWithProduct2DetailsRaw(long idProduct,bool shouldRemap=false)
        {
            return GetProductWitDetailsRaw(idProduct,new List<string>() { "Product2"},shouldRemap);
        }

		
			public BusinessResponse<List<TransactionDetail>>  UpdateTransactionDetailsForProductWithoutSavingNewItem(List<TransactionDetail> newTransactionDetails,long idProduct)
            {
                BusinessResponse<List<TransactionDetail>> response = new BusinessResponse<List<TransactionDetail>>();
                try
                {
                    response.Result = UpdateTransactionDetailsForProductWithoutSavingNewItemRaw(newTransactionDetails, idProduct);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDetail> UpdateTransactionDetailsForProductWithoutSavingNewItemRaw(List<TransactionDetail> newTransactionDetails,long idProduct)
            {
                return daoFactory.ProductDao.UpdateTransactionDetailsForProductWithoutSavingNewItem(newTransactionDetails,idProduct); 
            }



		    public BusinessResponse<List<TransactionDetail>>  UpdateTransactionDetailsForProduct(List<TransactionDetail> newTransactionDetails,long idProduct)
            {
                BusinessResponse<List<TransactionDetail>> response = new BusinessResponse<List<TransactionDetail>>();
                try
                {
                    response.Result = UpdateTransactionDetailsForProductRaw(newTransactionDetails, idProduct);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDetail> UpdateTransactionDetailsForProductRaw(List<TransactionDetail> newTransactionDetails,long idProduct)
            {
                return daoFactory.ProductDao.UpdateTransactionDetailsForProduct(newTransactionDetails,idProduct); 
            }





		public BusinessResponse<Product> GetProductWithTransactionDetailsDetails(long idProduct,bool shouldRemap=false)
        {
            BusinessResponse<Product> response = new BusinessResponse<Product>();
            try
            {
                response.Result = GetProductWithTransactionDetailsDetailsRaw(idProduct,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Product GetProductWithTransactionDetailsDetailsRaw(long idProduct,bool shouldRemap=false)
        {
            return GetProductWitDetailsRaw(idProduct,new List<string>() { "TransactionDetails"},shouldRemap);
        }

		
        public BusinessResponse<Product> GetProduct(long idProduct,bool shouldRemap=false)
        {
            BusinessResponse<Product> response = new BusinessResponse<Product>();
		    try
		    {
			    response.Result = GetProductsRaw(idProduct,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Product GetProductsRaw(long idProduct,bool shouldRemap=false)
        {
            return daoFactory.ProductDao.GetProduct(idProduct,shouldRemap);
        }

        
        public BusinessResponse<Product> GetProductWitDetails(long idProduct,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Product> response = new BusinessResponse<Product>();
		    try
		    {
			    response.Result = GetProductWitDetailsRaw(idProduct,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Product GetProductWitDetailsRaw(long idProduct,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ProductDao.GetProductWitDetails(idProduct,shouldRemap);
        }


		 public BusinessResponse<Product> GetProductCustom( Expression<Func<Product, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Product> response = new BusinessResponse<Product>();
		    try
		    {
			    response.Result = GetProductCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Product GetProductCustomRaw( Expression<Func<Product, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.ProductDao.GetProductCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Product>> GetProductCustomList( Expression<Func<Product, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Product, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Product>> response = new BusinessResponse<BaseListReturnType<Product>>();
		    try
		    {
			    response.Result = GetProductCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Product> GetProductCustomListRaw( Expression<Func<Product, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Product, dynamic> orderExpression = null)
		{
            return daoFactory.ProductDao.GetProductCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveProduct(Product product)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveProductRaw(product);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveProductRaw(Product product)
        {
            daoFactory.ProductDao.SaveProduct(product);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyProduct(Product product)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyProductRaw(product);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyProductRaw(Product product)
        {
            daoFactory.ProductDao.SaveOnlyProduct(product);
            return true;
        }

        public BusinessResponse<bool> DeleteProduct(Product product)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteProductRaw(product);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteProductRaw(Product product)
        {
            daoFactory.ProductDao.DeleteProduct(product);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyProduct(Product product)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyProductRaw(product);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyProductRaw(Product product)
        {
            daoFactory.ProductDao.DeletePermanentlyProduct(product);
            return true;
        }
	}
	public partial class ProductTypeService: BaseService
	{
	    public BusinessResponse<List<ProductType>> GetAllProductTypes(bool shouldRemap=false)
        {
            BusinessResponse<List<ProductType>> response = new BusinessResponse<List<ProductType>>();
		    try
		    {
			    response.Result = GetAllProductTypesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<ProductType> GetAllProductTypesRaw(bool shouldRemap=false)
        {
            return daoFactory.ProductTypeDao.GetAllProductTypes(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<ProductType>> GetAllProductTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ProductType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<ProductType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<ProductType>> response = new BusinessResponse<BaseListReturnType<ProductType>>();
		    try
		    {
			    response.Result = GetAllProductTypesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<ProductType> GetAllProductTypesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ProductType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<ProductType, dynamic> orderExpression = null)
        {
            return daoFactory.ProductTypeDao.GetAllProductTypesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<ProductType>> GetAllProductTypesWithProductsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ProductType, bool>> expression = null,bool shouldRemap=false, Func<ProductType, dynamic> orderExpression = null)
			{
				return GetAllProductTypesByPage(sortingPagingInfo, expression,new List<string>(){"Products"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<ProductType>> GetAllProductTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ProductType>> response = new BusinessResponse<BaseListReturnType<ProductType>>();
            try
            {
                response.Result = GetAllProductTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ProductType> GetAllProductTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ProductTypeDao.GetAllProductTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<ProductType>> GetProductTypeListByIdList(List<long> productTypeIds)
        {
            BusinessResponse<List<ProductType>> response = new BusinessResponse<List<ProductType>>();
            try
            {
                response.Result = GetProductTypeListByIdListRaw(productTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<ProductType> GetProductTypeListByIdListRaw(List<long> productTypeIds)
        {
            return daoFactory.ProductTypeDao.GetProductTypeListByIdList(productTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<ProductType>> GetAllProductTypesWithProductsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ProductType>> response = new BusinessResponse<BaseListReturnType<ProductType>>();
            try
            {
                response.Result = GetAllProductTypesWithProductsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ProductType> GetAllProductTypesWithProductsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllProductTypeWitDetailsRaw(new List<string>() { "Products" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Product>>  UpdateProductsForProductTypeWithoutSavingNewItem(List<Product> newProducts,long idProductType)
            {
                BusinessResponse<List<Product>> response = new BusinessResponse<List<Product>>();
                try
                {
                    response.Result = UpdateProductsForProductTypeWithoutSavingNewItemRaw(newProducts, idProductType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Product> UpdateProductsForProductTypeWithoutSavingNewItemRaw(List<Product> newProducts,long idProductType)
            {
                return daoFactory.ProductTypeDao.UpdateProductsForProductTypeWithoutSavingNewItem(newProducts,idProductType); 
            }



		    public BusinessResponse<List<Product>>  UpdateProductsForProductType(List<Product> newProducts,long idProductType)
            {
                BusinessResponse<List<Product>> response = new BusinessResponse<List<Product>>();
                try
                {
                    response.Result = UpdateProductsForProductTypeRaw(newProducts, idProductType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Product> UpdateProductsForProductTypeRaw(List<Product> newProducts,long idProductType)
            {
                return daoFactory.ProductTypeDao.UpdateProductsForProductType(newProducts,idProductType); 
            }





		public BusinessResponse<ProductType> GetProductTypeWithProductsDetails(long idProductType,bool shouldRemap=false)
        {
            BusinessResponse<ProductType> response = new BusinessResponse<ProductType>();
            try
            {
                response.Result = GetProductTypeWithProductsDetailsRaw(idProductType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal ProductType GetProductTypeWithProductsDetailsRaw(long idProductType,bool shouldRemap=false)
        {
            return GetProductTypeWitDetailsRaw(idProductType,new List<string>() { "Products"},shouldRemap);
        }

		
        public BusinessResponse<ProductType> GetProductType(long idProductType,bool shouldRemap=false)
        {
            BusinessResponse<ProductType> response = new BusinessResponse<ProductType>();
		    try
		    {
			    response.Result = GetProductTypesRaw(idProductType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal ProductType GetProductTypesRaw(long idProductType,bool shouldRemap=false)
        {
            return daoFactory.ProductTypeDao.GetProductType(idProductType,shouldRemap);
        }

        
        public BusinessResponse<ProductType> GetProductTypeWitDetails(long idProductType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<ProductType> response = new BusinessResponse<ProductType>();
		    try
		    {
			    response.Result = GetProductTypeWitDetailsRaw(idProductType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal ProductType GetProductTypeWitDetailsRaw(long idProductType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ProductTypeDao.GetProductTypeWitDetails(idProductType,shouldRemap);
        }


		 public BusinessResponse<ProductType> GetProductTypeCustom( Expression<Func<ProductType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<ProductType> response = new BusinessResponse<ProductType>();
		    try
		    {
			    response.Result = GetProductTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal ProductType GetProductTypeCustomRaw( Expression<Func<ProductType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.ProductTypeDao.GetProductTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<ProductType>> GetProductTypeCustomList( Expression<Func<ProductType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<ProductType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<ProductType>> response = new BusinessResponse<BaseListReturnType<ProductType>>();
		    try
		    {
			    response.Result = GetProductTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<ProductType> GetProductTypeCustomListRaw( Expression<Func<ProductType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<ProductType, dynamic> orderExpression = null)
		{
            return daoFactory.ProductTypeDao.GetProductTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveProductType(ProductType productType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveProductTypeRaw(productType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveProductTypeRaw(ProductType productType)
        {
            daoFactory.ProductTypeDao.SaveProductType(productType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyProductType(ProductType productType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyProductTypeRaw(productType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyProductTypeRaw(ProductType productType)
        {
            daoFactory.ProductTypeDao.SaveOnlyProductType(productType);
            return true;
        }

        public BusinessResponse<bool> DeleteProductType(ProductType productType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteProductTypeRaw(productType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteProductTypeRaw(ProductType productType)
        {
            daoFactory.ProductTypeDao.DeleteProductType(productType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyProductType(ProductType productType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyProductTypeRaw(productType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyProductTypeRaw(ProductType productType)
        {
            daoFactory.ProductTypeDao.DeletePermanentlyProductType(productType);
            return true;
        }
	}
	public partial class ReceiptService: BaseService
	{
	    public BusinessResponse<List<Receipt>> GetAllReceipts(bool shouldRemap=false)
        {
            BusinessResponse<List<Receipt>> response = new BusinessResponse<List<Receipt>>();
		    try
		    {
			    response.Result = GetAllReceiptsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Receipt> GetAllReceiptsRaw(bool shouldRemap=false)
        {
            return daoFactory.ReceiptDao.GetAllReceipts(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Receipt>> GetAllReceiptsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Receipt, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Receipt, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Receipt>> response = new BusinessResponse<BaseListReturnType<Receipt>>();
		    try
		    {
			    response.Result = GetAllReceiptsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Receipt> GetAllReceiptsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Receipt, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Receipt, dynamic> orderExpression = null)
        {
            return daoFactory.ReceiptDao.GetAllReceiptsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Receipt>> GetAllReceiptsWithUserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Receipt, bool>> expression = null,bool shouldRemap=false, Func<Receipt, dynamic> orderExpression = null)
			{
				return GetAllReceiptsByPage(sortingPagingInfo, expression,new List<string>(){"User"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Receipt>> GetAllReceiptWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Receipt>> response = new BusinessResponse<BaseListReturnType<Receipt>>();
            try
            {
                response.Result = GetAllReceiptWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Receipt> GetAllReceiptWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ReceiptDao.GetAllReceiptWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Receipt>> GetReceiptListByIdList(List<long> receiptIds)
        {
            BusinessResponse<List<Receipt>> response = new BusinessResponse<List<Receipt>>();
            try
            {
                response.Result = GetReceiptListByIdListRaw(receiptIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Receipt> GetReceiptListByIdListRaw(List<long> receiptIds)
        {
            return daoFactory.ReceiptDao.GetReceiptListByIdList(receiptIds);
        }

					
		public BusinessResponse<BaseListReturnType<Receipt>> GetAllReceiptsWithUserDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Receipt>> response = new BusinessResponse<BaseListReturnType<Receipt>>();
            try
            {
                response.Result = GetAllReceiptsWithUserDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Receipt> GetAllReceiptsWithUserDetailsRaw(bool shouldRemap=false)
        {
            return GetAllReceiptWitDetailsRaw(new List<string>() { "User" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Receipt>> GetAllReceiptListByUser(long idUser)
        {
            BusinessResponse<BaseListReturnType<Receipt>> response = new BusinessResponse<BaseListReturnType<Receipt>>();
            try
            {
                response.Result = GetAllReceiptListByUserRaw(idUser);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Receipt> GetAllReceiptListByUserRaw(long idUser)
        {
            return daoFactory.ReceiptDao.GetAllReceiptListByUser(idUser);
        }

        public BusinessResponse<BaseListReturnType<Receipt>> GetAllReceiptListByUserByPage(long idUser, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Receipt>> response = new BusinessResponse<BaseListReturnType<Receipt>>();
            try
            {
                response.Result = GetAllReceiptListByUserByPageRaw(idUser, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Receipt> GetAllReceiptListByUserByPageRaw(long idUser,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.ReceiptDao.GetAllReceiptListByUserByPage(idUser, sortingPagingInfo);
        }

		
		



		public BusinessResponse<Receipt> GetReceiptWithUserDetails(long idReceipt,bool shouldRemap=false)
        {
            BusinessResponse<Receipt> response = new BusinessResponse<Receipt>();
            try
            {
                response.Result = GetReceiptWithUserDetailsRaw(idReceipt,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Receipt GetReceiptWithUserDetailsRaw(long idReceipt,bool shouldRemap=false)
        {
            return GetReceiptWitDetailsRaw(idReceipt,new List<string>() { "User"},shouldRemap);
        }

		
        public BusinessResponse<Receipt> GetReceipt(long idReceipt,bool shouldRemap=false)
        {
            BusinessResponse<Receipt> response = new BusinessResponse<Receipt>();
		    try
		    {
			    response.Result = GetReceiptsRaw(idReceipt,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Receipt GetReceiptsRaw(long idReceipt,bool shouldRemap=false)
        {
            return daoFactory.ReceiptDao.GetReceipt(idReceipt,shouldRemap);
        }

        
        public BusinessResponse<Receipt> GetReceiptWitDetails(long idReceipt,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Receipt> response = new BusinessResponse<Receipt>();
		    try
		    {
			    response.Result = GetReceiptWitDetailsRaw(idReceipt,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Receipt GetReceiptWitDetailsRaw(long idReceipt,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ReceiptDao.GetReceiptWitDetails(idReceipt,shouldRemap);
        }


		 public BusinessResponse<Receipt> GetReceiptCustom( Expression<Func<Receipt, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Receipt> response = new BusinessResponse<Receipt>();
		    try
		    {
			    response.Result = GetReceiptCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Receipt GetReceiptCustomRaw( Expression<Func<Receipt, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.ReceiptDao.GetReceiptCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Receipt>> GetReceiptCustomList( Expression<Func<Receipt, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Receipt, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Receipt>> response = new BusinessResponse<BaseListReturnType<Receipt>>();
		    try
		    {
			    response.Result = GetReceiptCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Receipt> GetReceiptCustomListRaw( Expression<Func<Receipt, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Receipt, dynamic> orderExpression = null)
		{
            return daoFactory.ReceiptDao.GetReceiptCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveReceipt(Receipt receipt)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveReceiptRaw(receipt);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveReceiptRaw(Receipt receipt)
        {
            daoFactory.ReceiptDao.SaveReceipt(receipt);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyReceipt(Receipt receipt)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyReceiptRaw(receipt);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyReceiptRaw(Receipt receipt)
        {
            daoFactory.ReceiptDao.SaveOnlyReceipt(receipt);
            return true;
        }

        public BusinessResponse<bool> DeleteReceipt(Receipt receipt)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteReceiptRaw(receipt);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteReceiptRaw(Receipt receipt)
        {
            daoFactory.ReceiptDao.DeleteReceipt(receipt);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyReceipt(Receipt receipt)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyReceiptRaw(receipt);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyReceiptRaw(Receipt receipt)
        {
            daoFactory.ReceiptDao.DeletePermanentlyReceipt(receipt);
            return true;
        }
	}
	public partial class RequestService: BaseService
	{
	    public BusinessResponse<List<Request>> GetAllRequests(bool shouldRemap=false)
        {
            BusinessResponse<List<Request>> response = new BusinessResponse<List<Request>>();
		    try
		    {
			    response.Result = GetAllRequestsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Request> GetAllRequestsRaw(bool shouldRemap=false)
        {
            return daoFactory.RequestDao.GetAllRequests(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Request>> GetAllRequestsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Request, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Request>> response = new BusinessResponse<BaseListReturnType<Request>>();
		    try
		    {
			    response.Result = GetAllRequestsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Request> GetAllRequestsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Request, dynamic> orderExpression = null)
        {
            return daoFactory.RequestDao.GetAllRequestsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Request>> GetAllRequestsWithRequestTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null,bool shouldRemap=false, Func<Request, dynamic> orderExpression = null)
			{
				return GetAllRequestsByPage(sortingPagingInfo, expression,new List<string>(){"RequestType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Request>> GetAllRequestsWithWorkflowStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null,bool shouldRemap=false, Func<Request, dynamic> orderExpression = null)
			{
				return GetAllRequestsByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowState"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Request>> GetAllRequestsWithRequestMessageQueuesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Request, bool>> expression = null,bool shouldRemap=false, Func<Request, dynamic> orderExpression = null)
			{
				return GetAllRequestsByPage(sortingPagingInfo, expression,new List<string>(){"RequestMessageQueues"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Request>> GetAllRequestWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Request>> response = new BusinessResponse<BaseListReturnType<Request>>();
            try
            {
                response.Result = GetAllRequestWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Request> GetAllRequestWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.RequestDao.GetAllRequestWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Request>> GetRequestListByIdList(List<long> requestIds)
        {
            BusinessResponse<List<Request>> response = new BusinessResponse<List<Request>>();
            try
            {
                response.Result = GetRequestListByIdListRaw(requestIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Request> GetRequestListByIdListRaw(List<long> requestIds)
        {
            return daoFactory.RequestDao.GetRequestListByIdList(requestIds);
        }

					
		public BusinessResponse<BaseListReturnType<Request>> GetAllRequestsWithRequestTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Request>> response = new BusinessResponse<BaseListReturnType<Request>>();
            try
            {
                response.Result = GetAllRequestsWithRequestTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Request> GetAllRequestsWithRequestTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRequestWitDetailsRaw(new List<string>() { "RequestType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Request>> GetAllRequestListByRequestType(long idRequestType)
        {
            BusinessResponse<BaseListReturnType<Request>> response = new BusinessResponse<BaseListReturnType<Request>>();
            try
            {
                response.Result = GetAllRequestListByRequestTypeRaw(idRequestType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Request> GetAllRequestListByRequestTypeRaw(long idRequestType)
        {
            return daoFactory.RequestDao.GetAllRequestListByRequestType(idRequestType);
        }

        public BusinessResponse<BaseListReturnType<Request>> GetAllRequestListByRequestTypeByPage(long idRequestType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Request>> response = new BusinessResponse<BaseListReturnType<Request>>();
            try
            {
                response.Result = GetAllRequestListByRequestTypeByPageRaw(idRequestType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Request> GetAllRequestListByRequestTypeByPageRaw(long idRequestType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.RequestDao.GetAllRequestListByRequestTypeByPage(idRequestType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Request>> GetAllRequestsWithWorkflowStateDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Request>> response = new BusinessResponse<BaseListReturnType<Request>>();
            try
            {
                response.Result = GetAllRequestsWithWorkflowStateDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Request> GetAllRequestsWithWorkflowStateDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRequestWitDetailsRaw(new List<string>() { "WorkflowState" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Request>> GetAllRequestListByWorkflowState(long idWorkflowState)
        {
            BusinessResponse<BaseListReturnType<Request>> response = new BusinessResponse<BaseListReturnType<Request>>();
            try
            {
                response.Result = GetAllRequestListByWorkflowStateRaw(idWorkflowState);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Request> GetAllRequestListByWorkflowStateRaw(long idWorkflowState)
        {
            return daoFactory.RequestDao.GetAllRequestListByWorkflowState(idWorkflowState);
        }

        public BusinessResponse<BaseListReturnType<Request>> GetAllRequestListByWorkflowStateByPage(long idWorkflowState, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Request>> response = new BusinessResponse<BaseListReturnType<Request>>();
            try
            {
                response.Result = GetAllRequestListByWorkflowStateByPageRaw(idWorkflowState, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Request> GetAllRequestListByWorkflowStateByPageRaw(long idWorkflowState,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.RequestDao.GetAllRequestListByWorkflowStateByPage(idWorkflowState, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Request>> GetAllRequestsWithRequestMessageQueuesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Request>> response = new BusinessResponse<BaseListReturnType<Request>>();
            try
            {
                response.Result = GetAllRequestsWithRequestMessageQueuesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Request> GetAllRequestsWithRequestMessageQueuesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRequestWitDetailsRaw(new List<string>() { "RequestMessageQueues" }, shouldRemap);
        }
        
        






		



		public BusinessResponse<Request> GetRequestWithRequestTypeDetails(long idRequest,bool shouldRemap=false)
        {
            BusinessResponse<Request> response = new BusinessResponse<Request>();
            try
            {
                response.Result = GetRequestWithRequestTypeDetailsRaw(idRequest,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Request GetRequestWithRequestTypeDetailsRaw(long idRequest,bool shouldRemap=false)
        {
            return GetRequestWitDetailsRaw(idRequest,new List<string>() { "RequestType"},shouldRemap);
        }

		



		public BusinessResponse<Request> GetRequestWithWorkflowStateDetails(long idRequest,bool shouldRemap=false)
        {
            BusinessResponse<Request> response = new BusinessResponse<Request>();
            try
            {
                response.Result = GetRequestWithWorkflowStateDetailsRaw(idRequest,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Request GetRequestWithWorkflowStateDetailsRaw(long idRequest,bool shouldRemap=false)
        {
            return GetRequestWitDetailsRaw(idRequest,new List<string>() { "WorkflowState"},shouldRemap);
        }

		
			public BusinessResponse<List<RequestMessageQueue>>  UpdateRequestMessageQueuesForRequestWithoutSavingNewItem(List<RequestMessageQueue> newRequestMessageQueues,long idRequest)
            {
                BusinessResponse<List<RequestMessageQueue>> response = new BusinessResponse<List<RequestMessageQueue>>();
                try
                {
                    response.Result = UpdateRequestMessageQueuesForRequestWithoutSavingNewItemRaw(newRequestMessageQueues, idRequest);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<RequestMessageQueue> UpdateRequestMessageQueuesForRequestWithoutSavingNewItemRaw(List<RequestMessageQueue> newRequestMessageQueues,long idRequest)
            {
                return daoFactory.RequestDao.UpdateRequestMessageQueuesForRequestWithoutSavingNewItem(newRequestMessageQueues,idRequest); 
            }



		    public BusinessResponse<List<RequestMessageQueue>>  UpdateRequestMessageQueuesForRequest(List<RequestMessageQueue> newRequestMessageQueues,long idRequest)
            {
                BusinessResponse<List<RequestMessageQueue>> response = new BusinessResponse<List<RequestMessageQueue>>();
                try
                {
                    response.Result = UpdateRequestMessageQueuesForRequestRaw(newRequestMessageQueues, idRequest);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<RequestMessageQueue> UpdateRequestMessageQueuesForRequestRaw(List<RequestMessageQueue> newRequestMessageQueues,long idRequest)
            {
                return daoFactory.RequestDao.UpdateRequestMessageQueuesForRequest(newRequestMessageQueues,idRequest); 
            }





		public BusinessResponse<Request> GetRequestWithRequestMessageQueuesDetails(long idRequest,bool shouldRemap=false)
        {
            BusinessResponse<Request> response = new BusinessResponse<Request>();
            try
            {
                response.Result = GetRequestWithRequestMessageQueuesDetailsRaw(idRequest,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Request GetRequestWithRequestMessageQueuesDetailsRaw(long idRequest,bool shouldRemap=false)
        {
            return GetRequestWitDetailsRaw(idRequest,new List<string>() { "RequestMessageQueues"},shouldRemap);
        }

		
        public BusinessResponse<Request> GetRequest(long idRequest,bool shouldRemap=false)
        {
            BusinessResponse<Request> response = new BusinessResponse<Request>();
		    try
		    {
			    response.Result = GetRequestsRaw(idRequest,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Request GetRequestsRaw(long idRequest,bool shouldRemap=false)
        {
            return daoFactory.RequestDao.GetRequest(idRequest,shouldRemap);
        }

        
        public BusinessResponse<Request> GetRequestWitDetails(long idRequest,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Request> response = new BusinessResponse<Request>();
		    try
		    {
			    response.Result = GetRequestWitDetailsRaw(idRequest,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Request GetRequestWitDetailsRaw(long idRequest,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.RequestDao.GetRequestWitDetails(idRequest,shouldRemap);
        }


		 public BusinessResponse<Request> GetRequestCustom( Expression<Func<Request, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Request> response = new BusinessResponse<Request>();
		    try
		    {
			    response.Result = GetRequestCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Request GetRequestCustomRaw( Expression<Func<Request, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.RequestDao.GetRequestCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Request>> GetRequestCustomList( Expression<Func<Request, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Request, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Request>> response = new BusinessResponse<BaseListReturnType<Request>>();
		    try
		    {
			    response.Result = GetRequestCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Request> GetRequestCustomListRaw( Expression<Func<Request, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Request, dynamic> orderExpression = null)
		{
            return daoFactory.RequestDao.GetRequestCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveRequest(Request request)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveRequestRaw(request);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveRequestRaw(Request request)
        {
            daoFactory.RequestDao.SaveRequest(request);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyRequest(Request request)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyRequestRaw(request);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyRequestRaw(Request request)
        {
            daoFactory.RequestDao.SaveOnlyRequest(request);
            return true;
        }

        public BusinessResponse<bool> DeleteRequest(Request request)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteRequestRaw(request);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteRequestRaw(Request request)
        {
            daoFactory.RequestDao.DeleteRequest(request);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyRequest(Request request)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyRequestRaw(request);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyRequestRaw(Request request)
        {
            daoFactory.RequestDao.DeletePermanentlyRequest(request);
            return true;
        }
	}
	public partial class RequestMessageQueueService: BaseService
	{
	    public BusinessResponse<List<RequestMessageQueue>> GetAllRequestMessageQueues(bool shouldRemap=false)
        {
            BusinessResponse<List<RequestMessageQueue>> response = new BusinessResponse<List<RequestMessageQueue>>();
		    try
		    {
			    response.Result = GetAllRequestMessageQueuesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<RequestMessageQueue> GetAllRequestMessageQueuesRaw(bool shouldRemap=false)
        {
            return daoFactory.RequestMessageQueueDao.GetAllRequestMessageQueues(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<RequestMessageQueue>> GetAllRequestMessageQueuesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestMessageQueue, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<RequestMessageQueue, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<RequestMessageQueue>> response = new BusinessResponse<BaseListReturnType<RequestMessageQueue>>();
		    try
		    {
			    response.Result = GetAllRequestMessageQueuesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueuesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestMessageQueue, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<RequestMessageQueue, dynamic> orderExpression = null)
        {
            return daoFactory.RequestMessageQueueDao.GetAllRequestMessageQueuesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<RequestMessageQueue>> GetAllRequestMessageQueuesWithRequestDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestMessageQueue, bool>> expression = null,bool shouldRemap=false, Func<RequestMessageQueue, dynamic> orderExpression = null)
			{
				return GetAllRequestMessageQueuesByPage(sortingPagingInfo, expression,new List<string>(){"Request"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<RequestMessageQueue>> GetAllRequestMessageQueueWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<RequestMessageQueue>> response = new BusinessResponse<BaseListReturnType<RequestMessageQueue>>();
            try
            {
                response.Result = GetAllRequestMessageQueueWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueueWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.RequestMessageQueueDao.GetAllRequestMessageQueueWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<RequestMessageQueue>> GetRequestMessageQueueListByIdList(List<long> requestMessageQueueIds)
        {
            BusinessResponse<List<RequestMessageQueue>> response = new BusinessResponse<List<RequestMessageQueue>>();
            try
            {
                response.Result = GetRequestMessageQueueListByIdListRaw(requestMessageQueueIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<RequestMessageQueue> GetRequestMessageQueueListByIdListRaw(List<long> requestMessageQueueIds)
        {
            return daoFactory.RequestMessageQueueDao.GetRequestMessageQueueListByIdList(requestMessageQueueIds);
        }

					
		public BusinessResponse<BaseListReturnType<RequestMessageQueue>> GetAllRequestMessageQueuesWithRequestDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<RequestMessageQueue>> response = new BusinessResponse<BaseListReturnType<RequestMessageQueue>>();
            try
            {
                response.Result = GetAllRequestMessageQueuesWithRequestDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueuesWithRequestDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRequestMessageQueueWitDetailsRaw(new List<string>() { "Request" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<RequestMessageQueue>> GetAllRequestMessageQueueListByRequest(long idRequest)
        {
            BusinessResponse<BaseListReturnType<RequestMessageQueue>> response = new BusinessResponse<BaseListReturnType<RequestMessageQueue>>();
            try
            {
                response.Result = GetAllRequestMessageQueueListByRequestRaw(idRequest);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueueListByRequestRaw(long idRequest)
        {
            return daoFactory.RequestMessageQueueDao.GetAllRequestMessageQueueListByRequest(idRequest);
        }

        public BusinessResponse<BaseListReturnType<RequestMessageQueue>> GetAllRequestMessageQueueListByRequestByPage(long idRequest, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<RequestMessageQueue>> response = new BusinessResponse<BaseListReturnType<RequestMessageQueue>>();
            try
            {
                response.Result = GetAllRequestMessageQueueListByRequestByPageRaw(idRequest, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestMessageQueue> GetAllRequestMessageQueueListByRequestByPageRaw(long idRequest,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.RequestMessageQueueDao.GetAllRequestMessageQueueListByRequestByPage(idRequest, sortingPagingInfo);
        }

		
		



		public BusinessResponse<RequestMessageQueue> GetRequestMessageQueueWithRequestDetails(long idRequestMessageQueue,bool shouldRemap=false)
        {
            BusinessResponse<RequestMessageQueue> response = new BusinessResponse<RequestMessageQueue>();
            try
            {
                response.Result = GetRequestMessageQueueWithRequestDetailsRaw(idRequestMessageQueue,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal RequestMessageQueue GetRequestMessageQueueWithRequestDetailsRaw(long idRequestMessageQueue,bool shouldRemap=false)
        {
            return GetRequestMessageQueueWitDetailsRaw(idRequestMessageQueue,new List<string>() { "Request"},shouldRemap);
        }

		
        public BusinessResponse<RequestMessageQueue> GetRequestMessageQueue(long idRequestMessageQueue,bool shouldRemap=false)
        {
            BusinessResponse<RequestMessageQueue> response = new BusinessResponse<RequestMessageQueue>();
		    try
		    {
			    response.Result = GetRequestMessageQueuesRaw(idRequestMessageQueue,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal RequestMessageQueue GetRequestMessageQueuesRaw(long idRequestMessageQueue,bool shouldRemap=false)
        {
            return daoFactory.RequestMessageQueueDao.GetRequestMessageQueue(idRequestMessageQueue,shouldRemap);
        }

        
        public BusinessResponse<RequestMessageQueue> GetRequestMessageQueueWitDetails(long idRequestMessageQueue,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<RequestMessageQueue> response = new BusinessResponse<RequestMessageQueue>();
		    try
		    {
			    response.Result = GetRequestMessageQueueWitDetailsRaw(idRequestMessageQueue,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal RequestMessageQueue GetRequestMessageQueueWitDetailsRaw(long idRequestMessageQueue,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.RequestMessageQueueDao.GetRequestMessageQueueWitDetails(idRequestMessageQueue,shouldRemap);
        }


		 public BusinessResponse<RequestMessageQueue> GetRequestMessageQueueCustom( Expression<Func<RequestMessageQueue, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<RequestMessageQueue> response = new BusinessResponse<RequestMessageQueue>();
		    try
		    {
			    response.Result = GetRequestMessageQueueCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal RequestMessageQueue GetRequestMessageQueueCustomRaw( Expression<Func<RequestMessageQueue, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.RequestMessageQueueDao.GetRequestMessageQueueCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<RequestMessageQueue>> GetRequestMessageQueueCustomList( Expression<Func<RequestMessageQueue, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<RequestMessageQueue, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<RequestMessageQueue>> response = new BusinessResponse<BaseListReturnType<RequestMessageQueue>>();
		    try
		    {
			    response.Result = GetRequestMessageQueueCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<RequestMessageQueue> GetRequestMessageQueueCustomListRaw( Expression<Func<RequestMessageQueue, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<RequestMessageQueue, dynamic> orderExpression = null)
		{
            return daoFactory.RequestMessageQueueDao.GetRequestMessageQueueCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveRequestMessageQueue(RequestMessageQueue requestMessageQueue)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveRequestMessageQueueRaw(requestMessageQueue);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveRequestMessageQueueRaw(RequestMessageQueue requestMessageQueue)
        {
            daoFactory.RequestMessageQueueDao.SaveRequestMessageQueue(requestMessageQueue);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyRequestMessageQueue(RequestMessageQueue requestMessageQueue)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyRequestMessageQueueRaw(requestMessageQueue);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyRequestMessageQueueRaw(RequestMessageQueue requestMessageQueue)
        {
            daoFactory.RequestMessageQueueDao.SaveOnlyRequestMessageQueue(requestMessageQueue);
            return true;
        }

        public BusinessResponse<bool> DeleteRequestMessageQueue(RequestMessageQueue requestMessageQueue)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteRequestMessageQueueRaw(requestMessageQueue);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteRequestMessageQueueRaw(RequestMessageQueue requestMessageQueue)
        {
            daoFactory.RequestMessageQueueDao.DeleteRequestMessageQueue(requestMessageQueue);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyRequestMessageQueue(RequestMessageQueue requestMessageQueue)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyRequestMessageQueueRaw(requestMessageQueue);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyRequestMessageQueueRaw(RequestMessageQueue requestMessageQueue)
        {
            daoFactory.RequestMessageQueueDao.DeletePermanentlyRequestMessageQueue(requestMessageQueue);
            return true;
        }
	}
	public partial class RequestTypeService: BaseService
	{
	    public BusinessResponse<List<RequestType>> GetAllRequestTypes(bool shouldRemap=false)
        {
            BusinessResponse<List<RequestType>> response = new BusinessResponse<List<RequestType>>();
		    try
		    {
			    response.Result = GetAllRequestTypesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<RequestType> GetAllRequestTypesRaw(bool shouldRemap=false)
        {
            return daoFactory.RequestTypeDao.GetAllRequestTypes(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<RequestType>> GetAllRequestTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<RequestType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<RequestType>> response = new BusinessResponse<BaseListReturnType<RequestType>>();
		    try
		    {
			    response.Result = GetAllRequestTypesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<RequestType> GetAllRequestTypesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<RequestType, dynamic> orderExpression = null)
        {
            return daoFactory.RequestTypeDao.GetAllRequestTypesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<RequestType>> GetAllRequestTypesWithRequestsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null,bool shouldRemap=false, Func<RequestType, dynamic> orderExpression = null)
			{
				return GetAllRequestTypesByPage(sortingPagingInfo, expression,new List<string>(){"Requests"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<RequestType>> GetAllRequestTypesWithWorkflowDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null,bool shouldRemap=false, Func<RequestType, dynamic> orderExpression = null)
			{
				return GetAllRequestTypesByPage(sortingPagingInfo, expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<RequestType>> GetAllRequestTypesWithRequestType_UserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType, bool>> expression = null,bool shouldRemap=false, Func<RequestType, dynamic> orderExpression = null)
			{
				return GetAllRequestTypesByPage(sortingPagingInfo, expression,new List<string>(){"RequestType_User"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<RequestType>> GetAllRequestTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<RequestType>> response = new BusinessResponse<BaseListReturnType<RequestType>>();
            try
            {
                response.Result = GetAllRequestTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType> GetAllRequestTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.RequestTypeDao.GetAllRequestTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<RequestType>> GetRequestTypeListByIdList(List<long> requestTypeIds)
        {
            BusinessResponse<List<RequestType>> response = new BusinessResponse<List<RequestType>>();
            try
            {
                response.Result = GetRequestTypeListByIdListRaw(requestTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<RequestType> GetRequestTypeListByIdListRaw(List<long> requestTypeIds)
        {
            return daoFactory.RequestTypeDao.GetRequestTypeListByIdList(requestTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<RequestType>> GetAllRequestTypesWithRequestsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<RequestType>> response = new BusinessResponse<BaseListReturnType<RequestType>>();
            try
            {
                response.Result = GetAllRequestTypesWithRequestsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType> GetAllRequestTypesWithRequestsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRequestTypeWitDetailsRaw(new List<string>() { "Requests" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<RequestType>> GetAllRequestTypesWithWorkflowDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<RequestType>> response = new BusinessResponse<BaseListReturnType<RequestType>>();
            try
            {
                response.Result = GetAllRequestTypesWithWorkflowDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType> GetAllRequestTypesWithWorkflowDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRequestTypeWitDetailsRaw(new List<string>() { "Workflow" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<RequestType>> GetAllRequestTypeListByWorkflow(long idWorkflow)
        {
            BusinessResponse<BaseListReturnType<RequestType>> response = new BusinessResponse<BaseListReturnType<RequestType>>();
            try
            {
                response.Result = GetAllRequestTypeListByWorkflowRaw(idWorkflow);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType> GetAllRequestTypeListByWorkflowRaw(long idWorkflow)
        {
            return daoFactory.RequestTypeDao.GetAllRequestTypeListByWorkflow(idWorkflow);
        }

        public BusinessResponse<BaseListReturnType<RequestType>> GetAllRequestTypeListByWorkflowByPage(long idWorkflow, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<RequestType>> response = new BusinessResponse<BaseListReturnType<RequestType>>();
            try
            {
                response.Result = GetAllRequestTypeListByWorkflowByPageRaw(idWorkflow, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType> GetAllRequestTypeListByWorkflowByPageRaw(long idWorkflow,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.RequestTypeDao.GetAllRequestTypeListByWorkflowByPage(idWorkflow, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<RequestType>> GetAllRequestTypesWithRequestType_UserDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<RequestType>> response = new BusinessResponse<BaseListReturnType<RequestType>>();
            try
            {
                response.Result = GetAllRequestTypesWithRequestType_UserDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType> GetAllRequestTypesWithRequestType_UserDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRequestTypeWitDetailsRaw(new List<string>() { "RequestType_User" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Request>>  UpdateRequestsForRequestTypeWithoutSavingNewItem(List<Request> newRequests,long idRequestType)
            {
                BusinessResponse<List<Request>> response = new BusinessResponse<List<Request>>();
                try
                {
                    response.Result = UpdateRequestsForRequestTypeWithoutSavingNewItemRaw(newRequests, idRequestType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Request> UpdateRequestsForRequestTypeWithoutSavingNewItemRaw(List<Request> newRequests,long idRequestType)
            {
                return daoFactory.RequestTypeDao.UpdateRequestsForRequestTypeWithoutSavingNewItem(newRequests,idRequestType); 
            }



		    public BusinessResponse<List<Request>>  UpdateRequestsForRequestType(List<Request> newRequests,long idRequestType)
            {
                BusinessResponse<List<Request>> response = new BusinessResponse<List<Request>>();
                try
                {
                    response.Result = UpdateRequestsForRequestTypeRaw(newRequests, idRequestType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Request> UpdateRequestsForRequestTypeRaw(List<Request> newRequests,long idRequestType)
            {
                return daoFactory.RequestTypeDao.UpdateRequestsForRequestType(newRequests,idRequestType); 
            }





		public BusinessResponse<RequestType> GetRequestTypeWithRequestsDetails(long idRequestType,bool shouldRemap=false)
        {
            BusinessResponse<RequestType> response = new BusinessResponse<RequestType>();
            try
            {
                response.Result = GetRequestTypeWithRequestsDetailsRaw(idRequestType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal RequestType GetRequestTypeWithRequestsDetailsRaw(long idRequestType,bool shouldRemap=false)
        {
            return GetRequestTypeWitDetailsRaw(idRequestType,new List<string>() { "Requests"},shouldRemap);
        }

		



		public BusinessResponse<RequestType> GetRequestTypeWithWorkflowDetails(long idRequestType,bool shouldRemap=false)
        {
            BusinessResponse<RequestType> response = new BusinessResponse<RequestType>();
            try
            {
                response.Result = GetRequestTypeWithWorkflowDetailsRaw(idRequestType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal RequestType GetRequestTypeWithWorkflowDetailsRaw(long idRequestType,bool shouldRemap=false)
        {
            return GetRequestTypeWitDetailsRaw(idRequestType,new List<string>() { "Workflow"},shouldRemap);
        }

		
			public BusinessResponse<List<RequestType_User>>  UpdateRequestType_UserForRequestTypeWithoutSavingNewItem(List<RequestType_User> newRequestType_User,long idRequestType)
            {
                BusinessResponse<List<RequestType_User>> response = new BusinessResponse<List<RequestType_User>>();
                try
                {
                    response.Result = UpdateRequestType_UserForRequestTypeWithoutSavingNewItemRaw(newRequestType_User, idRequestType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<RequestType_User> UpdateRequestType_UserForRequestTypeWithoutSavingNewItemRaw(List<RequestType_User> newRequestType_User,long idRequestType)
            {
                return daoFactory.RequestTypeDao.UpdateRequestType_UserForRequestTypeWithoutSavingNewItem(newRequestType_User,idRequestType); 
            }



		    public BusinessResponse<List<RequestType_User>>  UpdateRequestType_UserForRequestType(List<RequestType_User> newRequestType_User,long idRequestType)
            {
                BusinessResponse<List<RequestType_User>> response = new BusinessResponse<List<RequestType_User>>();
                try
                {
                    response.Result = UpdateRequestType_UserForRequestTypeRaw(newRequestType_User, idRequestType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<RequestType_User> UpdateRequestType_UserForRequestTypeRaw(List<RequestType_User> newRequestType_User,long idRequestType)
            {
                return daoFactory.RequestTypeDao.UpdateRequestType_UserForRequestType(newRequestType_User,idRequestType); 
            }





		public BusinessResponse<RequestType> GetRequestTypeWithRequestType_UserDetails(long idRequestType,bool shouldRemap=false)
        {
            BusinessResponse<RequestType> response = new BusinessResponse<RequestType>();
            try
            {
                response.Result = GetRequestTypeWithRequestType_UserDetailsRaw(idRequestType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal RequestType GetRequestTypeWithRequestType_UserDetailsRaw(long idRequestType,bool shouldRemap=false)
        {
            return GetRequestTypeWitDetailsRaw(idRequestType,new List<string>() { "RequestType_User"},shouldRemap);
        }

		
        public BusinessResponse<RequestType> GetRequestType(long idRequestType,bool shouldRemap=false)
        {
            BusinessResponse<RequestType> response = new BusinessResponse<RequestType>();
		    try
		    {
			    response.Result = GetRequestTypesRaw(idRequestType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal RequestType GetRequestTypesRaw(long idRequestType,bool shouldRemap=false)
        {
            return daoFactory.RequestTypeDao.GetRequestType(idRequestType,shouldRemap);
        }

        
        public BusinessResponse<RequestType> GetRequestTypeWitDetails(long idRequestType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<RequestType> response = new BusinessResponse<RequestType>();
		    try
		    {
			    response.Result = GetRequestTypeWitDetailsRaw(idRequestType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal RequestType GetRequestTypeWitDetailsRaw(long idRequestType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.RequestTypeDao.GetRequestTypeWitDetails(idRequestType,shouldRemap);
        }


		 public BusinessResponse<RequestType> GetRequestTypeCustom( Expression<Func<RequestType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<RequestType> response = new BusinessResponse<RequestType>();
		    try
		    {
			    response.Result = GetRequestTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal RequestType GetRequestTypeCustomRaw( Expression<Func<RequestType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.RequestTypeDao.GetRequestTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<RequestType>> GetRequestTypeCustomList( Expression<Func<RequestType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<RequestType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<RequestType>> response = new BusinessResponse<BaseListReturnType<RequestType>>();
		    try
		    {
			    response.Result = GetRequestTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<RequestType> GetRequestTypeCustomListRaw( Expression<Func<RequestType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<RequestType, dynamic> orderExpression = null)
		{
            return daoFactory.RequestTypeDao.GetRequestTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveRequestType(RequestType requestType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveRequestTypeRaw(requestType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveRequestTypeRaw(RequestType requestType)
        {
            daoFactory.RequestTypeDao.SaveRequestType(requestType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyRequestType(RequestType requestType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyRequestTypeRaw(requestType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyRequestTypeRaw(RequestType requestType)
        {
            daoFactory.RequestTypeDao.SaveOnlyRequestType(requestType);
            return true;
        }

        public BusinessResponse<bool> DeleteRequestType(RequestType requestType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteRequestTypeRaw(requestType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteRequestTypeRaw(RequestType requestType)
        {
            daoFactory.RequestTypeDao.DeleteRequestType(requestType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyRequestType(RequestType requestType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyRequestTypeRaw(requestType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyRequestTypeRaw(RequestType requestType)
        {
            daoFactory.RequestTypeDao.DeletePermanentlyRequestType(requestType);
            return true;
        }
	}
	public partial class RequestType_UserService: BaseService
	{
	    public BusinessResponse<List<RequestType_User>> GetAllRequestType_User(bool shouldRemap=false)
        {
            BusinessResponse<List<RequestType_User>> response = new BusinessResponse<List<RequestType_User>>();
		    try
		    {
			    response.Result = GetAllRequestType_UserRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<RequestType_User> GetAllRequestType_UserRaw(bool shouldRemap=false)
        {
            return daoFactory.RequestType_UserDao.GetAllRequestType_User(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<RequestType_User, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
		    try
		    {
			    response.Result = GetAllRequestType_UserByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<RequestType_User> GetAllRequestType_UserByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<RequestType_User, dynamic> orderExpression = null)
        {
            return daoFactory.RequestType_UserDao.GetAllRequestType_UserByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserWithUserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null,bool shouldRemap=false, Func<RequestType_User, dynamic> orderExpression = null)
			{
				return GetAllRequestType_UserByPage(sortingPagingInfo, expression,new List<string>(){"User"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserWithRequestTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null,bool shouldRemap=false, Func<RequestType_User, dynamic> orderExpression = null)
			{
				return GetAllRequestType_UserByPage(sortingPagingInfo, expression,new List<string>(){"RequestType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserWithRequestType_User1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null,bool shouldRemap=false, Func<RequestType_User, dynamic> orderExpression = null)
			{
				return GetAllRequestType_UserByPage(sortingPagingInfo, expression,new List<string>(){"RequestType_User1"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserWithRequestType_User2DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<RequestType_User, bool>> expression = null,bool shouldRemap=false, Func<RequestType_User, dynamic> orderExpression = null)
			{
				return GetAllRequestType_UserByPage(sortingPagingInfo, expression,new List<string>(){"RequestType_User2"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
            try
            {
                response.Result = GetAllRequestType_UserWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType_User> GetAllRequestType_UserWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.RequestType_UserDao.GetAllRequestType_UserWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<RequestType_User>> GetRequestType_UserListByIdList(List<long> requestType_UserIds)
        {
            BusinessResponse<List<RequestType_User>> response = new BusinessResponse<List<RequestType_User>>();
            try
            {
                response.Result = GetRequestType_UserListByIdListRaw(requestType_UserIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<RequestType_User> GetRequestType_UserListByIdListRaw(List<long> requestType_UserIds)
        {
            return daoFactory.RequestType_UserDao.GetRequestType_UserListByIdList(requestType_UserIds);
        }

					
		public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserWithUserDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
            try
            {
                response.Result = GetAllRequestType_UserWithUserDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType_User> GetAllRequestType_UserWithUserDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRequestType_UserWitDetailsRaw(new List<string>() { "User" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserListByUser(long idUser)
        {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
            try
            {
                response.Result = GetAllRequestType_UserListByUserRaw(idUser);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType_User> GetAllRequestType_UserListByUserRaw(long idUser)
        {
            return daoFactory.RequestType_UserDao.GetAllRequestType_UserListByUser(idUser);
        }

        public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserListByUserByPage(long idUser, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
            try
            {
                response.Result = GetAllRequestType_UserListByUserByPageRaw(idUser, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType_User> GetAllRequestType_UserListByUserByPageRaw(long idUser,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.RequestType_UserDao.GetAllRequestType_UserListByUserByPage(idUser, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserWithRequestTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
            try
            {
                response.Result = GetAllRequestType_UserWithRequestTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType_User> GetAllRequestType_UserWithRequestTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRequestType_UserWitDetailsRaw(new List<string>() { "RequestType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserListByRequestType(long idRequestType)
        {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
            try
            {
                response.Result = GetAllRequestType_UserListByRequestTypeRaw(idRequestType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType_User> GetAllRequestType_UserListByRequestTypeRaw(long idRequestType)
        {
            return daoFactory.RequestType_UserDao.GetAllRequestType_UserListByRequestType(idRequestType);
        }

        public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserListByRequestTypeByPage(long idRequestType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
            try
            {
                response.Result = GetAllRequestType_UserListByRequestTypeByPageRaw(idRequestType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType_User> GetAllRequestType_UserListByRequestTypeByPageRaw(long idRequestType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.RequestType_UserDao.GetAllRequestType_UserListByRequestTypeByPage(idRequestType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserWithRequestType_User1Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
            try
            {
                response.Result = GetAllRequestType_UserWithRequestType_User1DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType_User> GetAllRequestType_UserWithRequestType_User1DetailsRaw(bool shouldRemap=false)
        {
            return GetAllRequestType_UserWitDetailsRaw(new List<string>() { "RequestType_User1" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserWithRequestType_User2Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
            try
            {
                response.Result = GetAllRequestType_UserWithRequestType_User2DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType_User> GetAllRequestType_UserWithRequestType_User2DetailsRaw(bool shouldRemap=false)
        {
            return GetAllRequestType_UserWitDetailsRaw(new List<string>() { "RequestType_User2" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserListByRequestType_User2(long idRequestType_User2)
        {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
            try
            {
                response.Result = GetAllRequestType_UserListByRequestType_User2Raw(idRequestType_User2);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType_User> GetAllRequestType_UserListByRequestType_User2Raw(long idRequestType_User2)
        {
            return daoFactory.RequestType_UserDao.GetAllRequestType_UserListByRequestType_User2(idRequestType_User2);
        }

        public BusinessResponse<BaseListReturnType<RequestType_User>> GetAllRequestType_UserListByRequestType_User2ByPage(long idRequestType_User2, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
            try
            {
                response.Result = GetAllRequestType_UserListByRequestType_User2ByPageRaw(idRequestType_User2, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<RequestType_User> GetAllRequestType_UserListByRequestType_User2ByPageRaw(long idRequestType_User2,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.RequestType_UserDao.GetAllRequestType_UserListByRequestType_User2ByPage(idRequestType_User2, sortingPagingInfo);
        }

		
		



		public BusinessResponse<RequestType_User> GetRequestType_UserWithUserDetails(long idRequestType_User,bool shouldRemap=false)
        {
            BusinessResponse<RequestType_User> response = new BusinessResponse<RequestType_User>();
            try
            {
                response.Result = GetRequestType_UserWithUserDetailsRaw(idRequestType_User,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal RequestType_User GetRequestType_UserWithUserDetailsRaw(long idRequestType_User,bool shouldRemap=false)
        {
            return GetRequestType_UserWitDetailsRaw(idRequestType_User,new List<string>() { "User"},shouldRemap);
        }

		



		public BusinessResponse<RequestType_User> GetRequestType_UserWithRequestTypeDetails(long idRequestType_User,bool shouldRemap=false)
        {
            BusinessResponse<RequestType_User> response = new BusinessResponse<RequestType_User>();
            try
            {
                response.Result = GetRequestType_UserWithRequestTypeDetailsRaw(idRequestType_User,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal RequestType_User GetRequestType_UserWithRequestTypeDetailsRaw(long idRequestType_User,bool shouldRemap=false)
        {
            return GetRequestType_UserWitDetailsRaw(idRequestType_User,new List<string>() { "RequestType"},shouldRemap);
        }

		
			public BusinessResponse<List<RequestType_User>>  UpdateRequestType_User1ForRequestType_UserWithoutSavingNewItem(List<RequestType_User> newRequestType_User1,long idRequestType_User)
            {
                BusinessResponse<List<RequestType_User>> response = new BusinessResponse<List<RequestType_User>>();
                try
                {
                    response.Result = UpdateRequestType_User1ForRequestType_UserWithoutSavingNewItemRaw(newRequestType_User1, idRequestType_User);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<RequestType_User> UpdateRequestType_User1ForRequestType_UserWithoutSavingNewItemRaw(List<RequestType_User> newRequestType_User1,long idRequestType_User)
            {
                return daoFactory.RequestType_UserDao.UpdateRequestType_User1ForRequestType_UserWithoutSavingNewItem(newRequestType_User1,idRequestType_User); 
            }



		    public BusinessResponse<List<RequestType_User>>  UpdateRequestType_User1ForRequestType_User(List<RequestType_User> newRequestType_User1,long idRequestType_User)
            {
                BusinessResponse<List<RequestType_User>> response = new BusinessResponse<List<RequestType_User>>();
                try
                {
                    response.Result = UpdateRequestType_User1ForRequestType_UserRaw(newRequestType_User1, idRequestType_User);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<RequestType_User> UpdateRequestType_User1ForRequestType_UserRaw(List<RequestType_User> newRequestType_User1,long idRequestType_User)
            {
                return daoFactory.RequestType_UserDao.UpdateRequestType_User1ForRequestType_User(newRequestType_User1,idRequestType_User); 
            }





		public BusinessResponse<RequestType_User> GetRequestType_UserWithRequestType_User1Details(long idRequestType_User,bool shouldRemap=false)
        {
            BusinessResponse<RequestType_User> response = new BusinessResponse<RequestType_User>();
            try
            {
                response.Result = GetRequestType_UserWithRequestType_User1DetailsRaw(idRequestType_User,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal RequestType_User GetRequestType_UserWithRequestType_User1DetailsRaw(long idRequestType_User,bool shouldRemap=false)
        {
            return GetRequestType_UserWitDetailsRaw(idRequestType_User,new List<string>() { "RequestType_User1"},shouldRemap);
        }

		



		public BusinessResponse<RequestType_User> GetRequestType_UserWithRequestType_User2Details(long idRequestType_User,bool shouldRemap=false)
        {
            BusinessResponse<RequestType_User> response = new BusinessResponse<RequestType_User>();
            try
            {
                response.Result = GetRequestType_UserWithRequestType_User2DetailsRaw(idRequestType_User,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal RequestType_User GetRequestType_UserWithRequestType_User2DetailsRaw(long idRequestType_User,bool shouldRemap=false)
        {
            return GetRequestType_UserWitDetailsRaw(idRequestType_User,new List<string>() { "RequestType_User2"},shouldRemap);
        }

		
        public BusinessResponse<RequestType_User> GetRequestType_User(long idRequestType_User,bool shouldRemap=false)
        {
            BusinessResponse<RequestType_User> response = new BusinessResponse<RequestType_User>();
		    try
		    {
			    response.Result = GetRequestType_UserRaw(idRequestType_User,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal RequestType_User GetRequestType_UserRaw(long idRequestType_User,bool shouldRemap=false)
        {
            return daoFactory.RequestType_UserDao.GetRequestType_User(idRequestType_User,shouldRemap);
        }

        
        public BusinessResponse<RequestType_User> GetRequestType_UserWitDetails(long idRequestType_User,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<RequestType_User> response = new BusinessResponse<RequestType_User>();
		    try
		    {
			    response.Result = GetRequestType_UserWitDetailsRaw(idRequestType_User,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal RequestType_User GetRequestType_UserWitDetailsRaw(long idRequestType_User,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.RequestType_UserDao.GetRequestType_UserWitDetails(idRequestType_User,shouldRemap);
        }


		 public BusinessResponse<RequestType_User> GetRequestType_UserCustom( Expression<Func<RequestType_User, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<RequestType_User> response = new BusinessResponse<RequestType_User>();
		    try
		    {
			    response.Result = GetRequestType_UserCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal RequestType_User GetRequestType_UserCustomRaw( Expression<Func<RequestType_User, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.RequestType_UserDao.GetRequestType_UserCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<RequestType_User>> GetRequestType_UserCustomList( Expression<Func<RequestType_User, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<RequestType_User, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<RequestType_User>> response = new BusinessResponse<BaseListReturnType<RequestType_User>>();
		    try
		    {
			    response.Result = GetRequestType_UserCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<RequestType_User> GetRequestType_UserCustomListRaw( Expression<Func<RequestType_User, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<RequestType_User, dynamic> orderExpression = null)
		{
            return daoFactory.RequestType_UserDao.GetRequestType_UserCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveRequestType_User(RequestType_User requestType_User)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveRequestType_UserRaw(requestType_User);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveRequestType_UserRaw(RequestType_User requestType_User)
        {
            daoFactory.RequestType_UserDao.SaveRequestType_User(requestType_User);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyRequestType_User(RequestType_User requestType_User)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyRequestType_UserRaw(requestType_User);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyRequestType_UserRaw(RequestType_User requestType_User)
        {
            daoFactory.RequestType_UserDao.SaveOnlyRequestType_User(requestType_User);
            return true;
        }

        public BusinessResponse<bool> DeleteRequestType_User(RequestType_User requestType_User)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteRequestType_UserRaw(requestType_User);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteRequestType_UserRaw(RequestType_User requestType_User)
        {
            daoFactory.RequestType_UserDao.DeleteRequestType_User(requestType_User);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyRequestType_User(RequestType_User requestType_User)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyRequestType_UserRaw(requestType_User);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyRequestType_UserRaw(RequestType_User requestType_User)
        {
            daoFactory.RequestType_UserDao.DeletePermanentlyRequestType_User(requestType_User);
            return true;
        }
	}
	public partial class RoleService: BaseService
	{
	    public BusinessResponse<List<Role>> GetAllRoles(bool shouldRemap=false)
        {
            BusinessResponse<List<Role>> response = new BusinessResponse<List<Role>>();
		    try
		    {
			    response.Result = GetAllRolesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Role> GetAllRolesRaw(bool shouldRemap=false)
        {
            return daoFactory.RoleDao.GetAllRoles(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Role>> GetAllRolesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Role, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Role>> response = new BusinessResponse<BaseListReturnType<Role>>();
		    try
		    {
			    response.Result = GetAllRolesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Role> GetAllRolesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Role, dynamic> orderExpression = null)
        {
            return daoFactory.RoleDao.GetAllRolesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Role>> GetAllRolesWithRole_PermissionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role, bool>> expression = null,bool shouldRemap=false, Func<Role, dynamic> orderExpression = null)
			{
				return GetAllRolesByPage(sortingPagingInfo, expression,new List<string>(){"Role_Permission"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Role>> GetAllRolesWithUser_RoleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role, bool>> expression = null,bool shouldRemap=false, Func<Role, dynamic> orderExpression = null)
			{
				return GetAllRolesByPage(sortingPagingInfo, expression,new List<string>(){"User_Role"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Role>> GetAllRoleWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Role>> response = new BusinessResponse<BaseListReturnType<Role>>();
            try
            {
                response.Result = GetAllRoleWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Role> GetAllRoleWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.RoleDao.GetAllRoleWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Role>> GetRoleListByIdList(List<long> roleIds)
        {
            BusinessResponse<List<Role>> response = new BusinessResponse<List<Role>>();
            try
            {
                response.Result = GetRoleListByIdListRaw(roleIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Role> GetRoleListByIdListRaw(List<long> roleIds)
        {
            return daoFactory.RoleDao.GetRoleListByIdList(roleIds);
        }

					
		public BusinessResponse<BaseListReturnType<Role>> GetAllRolesWithRole_PermissionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Role>> response = new BusinessResponse<BaseListReturnType<Role>>();
            try
            {
                response.Result = GetAllRolesWithRole_PermissionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Role> GetAllRolesWithRole_PermissionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRoleWitDetailsRaw(new List<string>() { "Role_Permission" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Role>> GetAllRolesWithUser_RoleDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Role>> response = new BusinessResponse<BaseListReturnType<Role>>();
            try
            {
                response.Result = GetAllRolesWithUser_RoleDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Role> GetAllRolesWithUser_RoleDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRoleWitDetailsRaw(new List<string>() { "User_Role" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Role_Permission>>  UpdateRole_PermissionForRoleWithoutSavingNewItem(List<Role_Permission> newRole_Permission,long idRole)
            {
                BusinessResponse<List<Role_Permission>> response = new BusinessResponse<List<Role_Permission>>();
                try
                {
                    response.Result = UpdateRole_PermissionForRoleWithoutSavingNewItemRaw(newRole_Permission, idRole);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Role_Permission> UpdateRole_PermissionForRoleWithoutSavingNewItemRaw(List<Role_Permission> newRole_Permission,long idRole)
            {
                return daoFactory.RoleDao.UpdateRole_PermissionForRoleWithoutSavingNewItem(newRole_Permission,idRole); 
            }



		    public BusinessResponse<List<Role_Permission>>  UpdateRole_PermissionForRole(List<Role_Permission> newRole_Permission,long idRole)
            {
                BusinessResponse<List<Role_Permission>> response = new BusinessResponse<List<Role_Permission>>();
                try
                {
                    response.Result = UpdateRole_PermissionForRoleRaw(newRole_Permission, idRole);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Role_Permission> UpdateRole_PermissionForRoleRaw(List<Role_Permission> newRole_Permission,long idRole)
            {
                return daoFactory.RoleDao.UpdateRole_PermissionForRole(newRole_Permission,idRole); 
            }





		public BusinessResponse<Role> GetRoleWithRole_PermissionDetails(long idRole,bool shouldRemap=false)
        {
            BusinessResponse<Role> response = new BusinessResponse<Role>();
            try
            {
                response.Result = GetRoleWithRole_PermissionDetailsRaw(idRole,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Role GetRoleWithRole_PermissionDetailsRaw(long idRole,bool shouldRemap=false)
        {
            return GetRoleWitDetailsRaw(idRole,new List<string>() { "Role_Permission"},shouldRemap);
        }

		
			public BusinessResponse<List<User_Role>>  UpdateUser_RoleForRoleWithoutSavingNewItem(List<User_Role> newUser_Role,long idRole)
            {
                BusinessResponse<List<User_Role>> response = new BusinessResponse<List<User_Role>>();
                try
                {
                    response.Result = UpdateUser_RoleForRoleWithoutSavingNewItemRaw(newUser_Role, idRole);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<User_Role> UpdateUser_RoleForRoleWithoutSavingNewItemRaw(List<User_Role> newUser_Role,long idRole)
            {
                return daoFactory.RoleDao.UpdateUser_RoleForRoleWithoutSavingNewItem(newUser_Role,idRole); 
            }



		    public BusinessResponse<List<User_Role>>  UpdateUser_RoleForRole(List<User_Role> newUser_Role,long idRole)
            {
                BusinessResponse<List<User_Role>> response = new BusinessResponse<List<User_Role>>();
                try
                {
                    response.Result = UpdateUser_RoleForRoleRaw(newUser_Role, idRole);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<User_Role> UpdateUser_RoleForRoleRaw(List<User_Role> newUser_Role,long idRole)
            {
                return daoFactory.RoleDao.UpdateUser_RoleForRole(newUser_Role,idRole); 
            }





		public BusinessResponse<Role> GetRoleWithUser_RoleDetails(long idRole,bool shouldRemap=false)
        {
            BusinessResponse<Role> response = new BusinessResponse<Role>();
            try
            {
                response.Result = GetRoleWithUser_RoleDetailsRaw(idRole,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Role GetRoleWithUser_RoleDetailsRaw(long idRole,bool shouldRemap=false)
        {
            return GetRoleWitDetailsRaw(idRole,new List<string>() { "User_Role"},shouldRemap);
        }

		
        public BusinessResponse<Role> GetRole(long idRole,bool shouldRemap=false)
        {
            BusinessResponse<Role> response = new BusinessResponse<Role>();
		    try
		    {
			    response.Result = GetRolesRaw(idRole,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Role GetRolesRaw(long idRole,bool shouldRemap=false)
        {
            return daoFactory.RoleDao.GetRole(idRole,shouldRemap);
        }

        
        public BusinessResponse<Role> GetRoleWitDetails(long idRole,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Role> response = new BusinessResponse<Role>();
		    try
		    {
			    response.Result = GetRoleWitDetailsRaw(idRole,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Role GetRoleWitDetailsRaw(long idRole,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.RoleDao.GetRoleWitDetails(idRole,shouldRemap);
        }


		 public BusinessResponse<Role> GetRoleCustom( Expression<Func<Role, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Role> response = new BusinessResponse<Role>();
		    try
		    {
			    response.Result = GetRoleCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Role GetRoleCustomRaw( Expression<Func<Role, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.RoleDao.GetRoleCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Role>> GetRoleCustomList( Expression<Func<Role, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Role, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Role>> response = new BusinessResponse<BaseListReturnType<Role>>();
		    try
		    {
			    response.Result = GetRoleCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Role> GetRoleCustomListRaw( Expression<Func<Role, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Role, dynamic> orderExpression = null)
		{
            return daoFactory.RoleDao.GetRoleCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveRole(Role role)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveRoleRaw(role);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveRoleRaw(Role role)
        {
            daoFactory.RoleDao.SaveRole(role);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyRole(Role role)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyRoleRaw(role);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyRoleRaw(Role role)
        {
            daoFactory.RoleDao.SaveOnlyRole(role);
            return true;
        }

        public BusinessResponse<bool> DeleteRole(Role role)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteRoleRaw(role);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteRoleRaw(Role role)
        {
            daoFactory.RoleDao.DeleteRole(role);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyRole(Role role)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyRoleRaw(role);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyRoleRaw(Role role)
        {
            daoFactory.RoleDao.DeletePermanentlyRole(role);
            return true;
        }
	}
	public partial class Role_PermissionService: BaseService
	{
	    public BusinessResponse<List<Role_Permission>> GetAllRole_Permission(bool shouldRemap=false)
        {
            BusinessResponse<List<Role_Permission>> response = new BusinessResponse<List<Role_Permission>>();
		    try
		    {
			    response.Result = GetAllRole_PermissionRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Role_Permission> GetAllRole_PermissionRaw(bool shouldRemap=false)
        {
            return daoFactory.Role_PermissionDao.GetAllRole_Permission(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Role_Permission>> GetAllRole_PermissionByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role_Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Role_Permission, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Role_Permission>> response = new BusinessResponse<BaseListReturnType<Role_Permission>>();
		    try
		    {
			    response.Result = GetAllRole_PermissionByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Role_Permission> GetAllRole_PermissionByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role_Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Role_Permission, dynamic> orderExpression = null)
        {
            return daoFactory.Role_PermissionDao.GetAllRole_PermissionByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Role_Permission>> GetAllRole_PermissionWithPermissionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role_Permission, bool>> expression = null,bool shouldRemap=false, Func<Role_Permission, dynamic> orderExpression = null)
			{
				return GetAllRole_PermissionByPage(sortingPagingInfo, expression,new List<string>(){"Permission"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Role_Permission>> GetAllRole_PermissionWithRoleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Role_Permission, bool>> expression = null,bool shouldRemap=false, Func<Role_Permission, dynamic> orderExpression = null)
			{
				return GetAllRole_PermissionByPage(sortingPagingInfo, expression,new List<string>(){"Role"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Role_Permission>> GetAllRole_PermissionWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Role_Permission>> response = new BusinessResponse<BaseListReturnType<Role_Permission>>();
            try
            {
                response.Result = GetAllRole_PermissionWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Role_Permission> GetAllRole_PermissionWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Role_PermissionDao.GetAllRole_PermissionWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Role_Permission>> GetRole_PermissionListByIdList(List<long> role_PermissionIds)
        {
            BusinessResponse<List<Role_Permission>> response = new BusinessResponse<List<Role_Permission>>();
            try
            {
                response.Result = GetRole_PermissionListByIdListRaw(role_PermissionIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Role_Permission> GetRole_PermissionListByIdListRaw(List<long> role_PermissionIds)
        {
            return daoFactory.Role_PermissionDao.GetRole_PermissionListByIdList(role_PermissionIds);
        }

					
		public BusinessResponse<BaseListReturnType<Role_Permission>> GetAllRole_PermissionWithPermissionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Role_Permission>> response = new BusinessResponse<BaseListReturnType<Role_Permission>>();
            try
            {
                response.Result = GetAllRole_PermissionWithPermissionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Role_Permission> GetAllRole_PermissionWithPermissionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRole_PermissionWitDetailsRaw(new List<string>() { "Permission" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Role_Permission>> GetAllRole_PermissionListByPermission(long idPermission)
        {
            BusinessResponse<BaseListReturnType<Role_Permission>> response = new BusinessResponse<BaseListReturnType<Role_Permission>>();
            try
            {
                response.Result = GetAllRole_PermissionListByPermissionRaw(idPermission);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Role_Permission> GetAllRole_PermissionListByPermissionRaw(long idPermission)
        {
            return daoFactory.Role_PermissionDao.GetAllRole_PermissionListByPermission(idPermission);
        }

        public BusinessResponse<BaseListReturnType<Role_Permission>> GetAllRole_PermissionListByPermissionByPage(long idPermission, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Role_Permission>> response = new BusinessResponse<BaseListReturnType<Role_Permission>>();
            try
            {
                response.Result = GetAllRole_PermissionListByPermissionByPageRaw(idPermission, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Role_Permission> GetAllRole_PermissionListByPermissionByPageRaw(long idPermission,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Role_PermissionDao.GetAllRole_PermissionListByPermissionByPage(idPermission, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Role_Permission>> GetAllRole_PermissionWithRoleDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Role_Permission>> response = new BusinessResponse<BaseListReturnType<Role_Permission>>();
            try
            {
                response.Result = GetAllRole_PermissionWithRoleDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Role_Permission> GetAllRole_PermissionWithRoleDetailsRaw(bool shouldRemap=false)
        {
            return GetAllRole_PermissionWitDetailsRaw(new List<string>() { "Role" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Role_Permission>> GetAllRole_PermissionListByRole(long idRole)
        {
            BusinessResponse<BaseListReturnType<Role_Permission>> response = new BusinessResponse<BaseListReturnType<Role_Permission>>();
            try
            {
                response.Result = GetAllRole_PermissionListByRoleRaw(idRole);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Role_Permission> GetAllRole_PermissionListByRoleRaw(long idRole)
        {
            return daoFactory.Role_PermissionDao.GetAllRole_PermissionListByRole(idRole);
        }

        public BusinessResponse<BaseListReturnType<Role_Permission>> GetAllRole_PermissionListByRoleByPage(long idRole, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Role_Permission>> response = new BusinessResponse<BaseListReturnType<Role_Permission>>();
            try
            {
                response.Result = GetAllRole_PermissionListByRoleByPageRaw(idRole, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Role_Permission> GetAllRole_PermissionListByRoleByPageRaw(long idRole,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Role_PermissionDao.GetAllRole_PermissionListByRoleByPage(idRole, sortingPagingInfo);
        }

		
		



		public BusinessResponse<Role_Permission> GetRole_PermissionWithPermissionDetails(long idRole_Permission,bool shouldRemap=false)
        {
            BusinessResponse<Role_Permission> response = new BusinessResponse<Role_Permission>();
            try
            {
                response.Result = GetRole_PermissionWithPermissionDetailsRaw(idRole_Permission,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Role_Permission GetRole_PermissionWithPermissionDetailsRaw(long idRole_Permission,bool shouldRemap=false)
        {
            return GetRole_PermissionWitDetailsRaw(idRole_Permission,new List<string>() { "Permission"},shouldRemap);
        }

		



		public BusinessResponse<Role_Permission> GetRole_PermissionWithRoleDetails(long idRole_Permission,bool shouldRemap=false)
        {
            BusinessResponse<Role_Permission> response = new BusinessResponse<Role_Permission>();
            try
            {
                response.Result = GetRole_PermissionWithRoleDetailsRaw(idRole_Permission,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Role_Permission GetRole_PermissionWithRoleDetailsRaw(long idRole_Permission,bool shouldRemap=false)
        {
            return GetRole_PermissionWitDetailsRaw(idRole_Permission,new List<string>() { "Role"},shouldRemap);
        }

		
        public BusinessResponse<Role_Permission> GetRole_Permission(long idRole_Permission,bool shouldRemap=false)
        {
            BusinessResponse<Role_Permission> response = new BusinessResponse<Role_Permission>();
		    try
		    {
			    response.Result = GetRole_PermissionRaw(idRole_Permission,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Role_Permission GetRole_PermissionRaw(long idRole_Permission,bool shouldRemap=false)
        {
            return daoFactory.Role_PermissionDao.GetRole_Permission(idRole_Permission,shouldRemap);
        }

        
        public BusinessResponse<Role_Permission> GetRole_PermissionWitDetails(long idRole_Permission,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Role_Permission> response = new BusinessResponse<Role_Permission>();
		    try
		    {
			    response.Result = GetRole_PermissionWitDetailsRaw(idRole_Permission,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Role_Permission GetRole_PermissionWitDetailsRaw(long idRole_Permission,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Role_PermissionDao.GetRole_PermissionWitDetails(idRole_Permission,shouldRemap);
        }


		 public BusinessResponse<Role_Permission> GetRole_PermissionCustom( Expression<Func<Role_Permission, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Role_Permission> response = new BusinessResponse<Role_Permission>();
		    try
		    {
			    response.Result = GetRole_PermissionCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Role_Permission GetRole_PermissionCustomRaw( Expression<Func<Role_Permission, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.Role_PermissionDao.GetRole_PermissionCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Role_Permission>> GetRole_PermissionCustomList( Expression<Func<Role_Permission, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Role_Permission, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Role_Permission>> response = new BusinessResponse<BaseListReturnType<Role_Permission>>();
		    try
		    {
			    response.Result = GetRole_PermissionCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Role_Permission> GetRole_PermissionCustomListRaw( Expression<Func<Role_Permission, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Role_Permission, dynamic> orderExpression = null)
		{
            return daoFactory.Role_PermissionDao.GetRole_PermissionCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveRole_Permission(Role_Permission role_Permission)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveRole_PermissionRaw(role_Permission);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveRole_PermissionRaw(Role_Permission role_Permission)
        {
            daoFactory.Role_PermissionDao.SaveRole_Permission(role_Permission);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyRole_Permission(Role_Permission role_Permission)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyRole_PermissionRaw(role_Permission);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyRole_PermissionRaw(Role_Permission role_Permission)
        {
            daoFactory.Role_PermissionDao.SaveOnlyRole_Permission(role_Permission);
            return true;
        }

        public BusinessResponse<bool> DeleteRole_Permission(Role_Permission role_Permission)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteRole_PermissionRaw(role_Permission);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteRole_PermissionRaw(Role_Permission role_Permission)
        {
            daoFactory.Role_PermissionDao.DeleteRole_Permission(role_Permission);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyRole_Permission(Role_Permission role_Permission)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyRole_PermissionRaw(role_Permission);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyRole_PermissionRaw(Role_Permission role_Permission)
        {
            daoFactory.Role_PermissionDao.DeletePermanentlyRole_Permission(role_Permission);
            return true;
        }
	}
	public partial class ScheduleSettingService: BaseService
	{
	    public BusinessResponse<List<ScheduleSetting>> GetAllScheduleSettings(bool shouldRemap=false)
        {
            BusinessResponse<List<ScheduleSetting>> response = new BusinessResponse<List<ScheduleSetting>>();
		    try
		    {
			    response.Result = GetAllScheduleSettingsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<ScheduleSetting> GetAllScheduleSettingsRaw(bool shouldRemap=false)
        {
            return daoFactory.ScheduleSettingDao.GetAllScheduleSettings(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<ScheduleSetting>> GetAllScheduleSettingsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ScheduleSetting, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<ScheduleSetting, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<ScheduleSetting>> response = new BusinessResponse<BaseListReturnType<ScheduleSetting>>();
		    try
		    {
			    response.Result = GetAllScheduleSettingsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ScheduleSetting, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<ScheduleSetting, dynamic> orderExpression = null)
        {
            return daoFactory.ScheduleSettingDao.GetAllScheduleSettingsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<ScheduleSetting>> GetAllScheduleSettingsWithFrequencyDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ScheduleSetting, bool>> expression = null,bool shouldRemap=false, Func<ScheduleSetting, dynamic> orderExpression = null)
			{
				return GetAllScheduleSettingsByPage(sortingPagingInfo, expression,new List<string>(){"Frequency"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<ScheduleSetting>> GetAllScheduleSettingsWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<ScheduleSetting, bool>> expression = null,bool shouldRemap=false, Func<ScheduleSetting, dynamic> orderExpression = null)
			{
				return GetAllScheduleSettingsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<ScheduleSetting>> GetAllScheduleSettingWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ScheduleSetting>> response = new BusinessResponse<BaseListReturnType<ScheduleSetting>>();
            try
            {
                response.Result = GetAllScheduleSettingWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ScheduleSetting> GetAllScheduleSettingWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ScheduleSettingDao.GetAllScheduleSettingWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<ScheduleSetting>> GetScheduleSettingListByIdList(List<long> scheduleSettingIds)
        {
            BusinessResponse<List<ScheduleSetting>> response = new BusinessResponse<List<ScheduleSetting>>();
            try
            {
                response.Result = GetScheduleSettingListByIdListRaw(scheduleSettingIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<ScheduleSetting> GetScheduleSettingListByIdListRaw(List<long> scheduleSettingIds)
        {
            return daoFactory.ScheduleSettingDao.GetScheduleSettingListByIdList(scheduleSettingIds);
        }

					
		public BusinessResponse<BaseListReturnType<ScheduleSetting>> GetAllScheduleSettingsWithFrequencyDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ScheduleSetting>> response = new BusinessResponse<BaseListReturnType<ScheduleSetting>>();
            try
            {
                response.Result = GetAllScheduleSettingsWithFrequencyDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsWithFrequencyDetailsRaw(bool shouldRemap=false)
        {
            return GetAllScheduleSettingWitDetailsRaw(new List<string>() { "Frequency" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<ScheduleSetting>> GetAllScheduleSettingListByFrequency(long idFrequency)
        {
            BusinessResponse<BaseListReturnType<ScheduleSetting>> response = new BusinessResponse<BaseListReturnType<ScheduleSetting>>();
            try
            {
                response.Result = GetAllScheduleSettingListByFrequencyRaw(idFrequency);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ScheduleSetting> GetAllScheduleSettingListByFrequencyRaw(long idFrequency)
        {
            return daoFactory.ScheduleSettingDao.GetAllScheduleSettingListByFrequency(idFrequency);
        }

        public BusinessResponse<BaseListReturnType<ScheduleSetting>> GetAllScheduleSettingListByFrequencyByPage(long idFrequency, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<ScheduleSetting>> response = new BusinessResponse<BaseListReturnType<ScheduleSetting>>();
            try
            {
                response.Result = GetAllScheduleSettingListByFrequencyByPageRaw(idFrequency, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ScheduleSetting> GetAllScheduleSettingListByFrequencyByPageRaw(long idFrequency,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.ScheduleSettingDao.GetAllScheduleSettingListByFrequencyByPage(idFrequency, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<ScheduleSetting>> GetAllScheduleSettingsWithTransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<ScheduleSetting>> response = new BusinessResponse<BaseListReturnType<ScheduleSetting>>();
            try
            {
                response.Result = GetAllScheduleSettingsWithTransactionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ScheduleSetting> GetAllScheduleSettingsWithTransactionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllScheduleSettingWitDetailsRaw(new List<string>() { "Transaction" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<ScheduleSetting>> GetAllScheduleSettingListByTransaction(long idTransaction)
        {
            BusinessResponse<BaseListReturnType<ScheduleSetting>> response = new BusinessResponse<BaseListReturnType<ScheduleSetting>>();
            try
            {
                response.Result = GetAllScheduleSettingListByTransactionRaw(idTransaction);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ScheduleSetting> GetAllScheduleSettingListByTransactionRaw(long idTransaction)
        {
            return daoFactory.ScheduleSettingDao.GetAllScheduleSettingListByTransaction(idTransaction);
        }

        public BusinessResponse<BaseListReturnType<ScheduleSetting>> GetAllScheduleSettingListByTransactionByPage(long idTransaction, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<ScheduleSetting>> response = new BusinessResponse<BaseListReturnType<ScheduleSetting>>();
            try
            {
                response.Result = GetAllScheduleSettingListByTransactionByPageRaw(idTransaction, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<ScheduleSetting> GetAllScheduleSettingListByTransactionByPageRaw(long idTransaction,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.ScheduleSettingDao.GetAllScheduleSettingListByTransactionByPage(idTransaction, sortingPagingInfo);
        }

		
		



		public BusinessResponse<ScheduleSetting> GetScheduleSettingWithFrequencyDetails(long idScheduleSetting,bool shouldRemap=false)
        {
            BusinessResponse<ScheduleSetting> response = new BusinessResponse<ScheduleSetting>();
            try
            {
                response.Result = GetScheduleSettingWithFrequencyDetailsRaw(idScheduleSetting,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal ScheduleSetting GetScheduleSettingWithFrequencyDetailsRaw(long idScheduleSetting,bool shouldRemap=false)
        {
            return GetScheduleSettingWitDetailsRaw(idScheduleSetting,new List<string>() { "Frequency"},shouldRemap);
        }

		



		public BusinessResponse<ScheduleSetting> GetScheduleSettingWithTransactionDetails(long idScheduleSetting,bool shouldRemap=false)
        {
            BusinessResponse<ScheduleSetting> response = new BusinessResponse<ScheduleSetting>();
            try
            {
                response.Result = GetScheduleSettingWithTransactionDetailsRaw(idScheduleSetting,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal ScheduleSetting GetScheduleSettingWithTransactionDetailsRaw(long idScheduleSetting,bool shouldRemap=false)
        {
            return GetScheduleSettingWitDetailsRaw(idScheduleSetting,new List<string>() { "Transaction"},shouldRemap);
        }

		
        public BusinessResponse<ScheduleSetting> GetScheduleSetting(long idScheduleSetting,bool shouldRemap=false)
        {
            BusinessResponse<ScheduleSetting> response = new BusinessResponse<ScheduleSetting>();
		    try
		    {
			    response.Result = GetScheduleSettingsRaw(idScheduleSetting,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal ScheduleSetting GetScheduleSettingsRaw(long idScheduleSetting,bool shouldRemap=false)
        {
            return daoFactory.ScheduleSettingDao.GetScheduleSetting(idScheduleSetting,shouldRemap);
        }

        
        public BusinessResponse<ScheduleSetting> GetScheduleSettingWitDetails(long idScheduleSetting,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<ScheduleSetting> response = new BusinessResponse<ScheduleSetting>();
		    try
		    {
			    response.Result = GetScheduleSettingWitDetailsRaw(idScheduleSetting,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal ScheduleSetting GetScheduleSettingWitDetailsRaw(long idScheduleSetting,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.ScheduleSettingDao.GetScheduleSettingWitDetails(idScheduleSetting,shouldRemap);
        }


		 public BusinessResponse<ScheduleSetting> GetScheduleSettingCustom( Expression<Func<ScheduleSetting, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<ScheduleSetting> response = new BusinessResponse<ScheduleSetting>();
		    try
		    {
			    response.Result = GetScheduleSettingCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal ScheduleSetting GetScheduleSettingCustomRaw( Expression<Func<ScheduleSetting, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.ScheduleSettingDao.GetScheduleSettingCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<ScheduleSetting>> GetScheduleSettingCustomList( Expression<Func<ScheduleSetting, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<ScheduleSetting, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<ScheduleSetting>> response = new BusinessResponse<BaseListReturnType<ScheduleSetting>>();
		    try
		    {
			    response.Result = GetScheduleSettingCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<ScheduleSetting> GetScheduleSettingCustomListRaw( Expression<Func<ScheduleSetting, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<ScheduleSetting, dynamic> orderExpression = null)
		{
            return daoFactory.ScheduleSettingDao.GetScheduleSettingCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveScheduleSetting(ScheduleSetting scheduleSetting)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveScheduleSettingRaw(scheduleSetting);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveScheduleSettingRaw(ScheduleSetting scheduleSetting)
        {
            daoFactory.ScheduleSettingDao.SaveScheduleSetting(scheduleSetting);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyScheduleSetting(ScheduleSetting scheduleSetting)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyScheduleSettingRaw(scheduleSetting);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyScheduleSettingRaw(ScheduleSetting scheduleSetting)
        {
            daoFactory.ScheduleSettingDao.SaveOnlyScheduleSetting(scheduleSetting);
            return true;
        }

        public BusinessResponse<bool> DeleteScheduleSetting(ScheduleSetting scheduleSetting)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteScheduleSettingRaw(scheduleSetting);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteScheduleSettingRaw(ScheduleSetting scheduleSetting)
        {
            daoFactory.ScheduleSettingDao.DeleteScheduleSetting(scheduleSetting);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyScheduleSetting(ScheduleSetting scheduleSetting)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyScheduleSettingRaw(scheduleSetting);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyScheduleSettingRaw(ScheduleSetting scheduleSetting)
        {
            daoFactory.ScheduleSettingDao.DeletePermanentlyScheduleSetting(scheduleSetting);
            return true;
        }
	}
	public partial class StockLocationService: BaseService
	{
	    public BusinessResponse<List<StockLocation>> GetAllStockLocations(bool shouldRemap=false)
        {
            BusinessResponse<List<StockLocation>> response = new BusinessResponse<List<StockLocation>>();
		    try
		    {
			    response.Result = GetAllStockLocationsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<StockLocation> GetAllStockLocationsRaw(bool shouldRemap=false)
        {
            return daoFactory.StockLocationDao.GetAllStockLocations(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<StockLocation>> GetAllStockLocationsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<StockLocation, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<StockLocation, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<StockLocation>> response = new BusinessResponse<BaseListReturnType<StockLocation>>();
		    try
		    {
			    response.Result = GetAllStockLocationsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<StockLocation> GetAllStockLocationsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<StockLocation, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<StockLocation, dynamic> orderExpression = null)
        {
            return daoFactory.StockLocationDao.GetAllStockLocationsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

		
		public BusinessResponse<BaseListReturnType<StockLocation>> GetAllStockLocationWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<StockLocation>> response = new BusinessResponse<BaseListReturnType<StockLocation>>();
            try
            {
                response.Result = GetAllStockLocationWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<StockLocation> GetAllStockLocationWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.StockLocationDao.GetAllStockLocationWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<StockLocation>> GetStockLocationListByIdList(List<long> stockLocationIds)
        {
            BusinessResponse<List<StockLocation>> response = new BusinessResponse<List<StockLocation>>();
            try
            {
                response.Result = GetStockLocationListByIdListRaw(stockLocationIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<StockLocation> GetStockLocationListByIdListRaw(List<long> stockLocationIds)
        {
            return daoFactory.StockLocationDao.GetStockLocationListByIdList(stockLocationIds);
        }

		
		
        public BusinessResponse<StockLocation> GetStockLocation(long idStockLocation,bool shouldRemap=false)
        {
            BusinessResponse<StockLocation> response = new BusinessResponse<StockLocation>();
		    try
		    {
			    response.Result = GetStockLocationsRaw(idStockLocation,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal StockLocation GetStockLocationsRaw(long idStockLocation,bool shouldRemap=false)
        {
            return daoFactory.StockLocationDao.GetStockLocation(idStockLocation,shouldRemap);
        }

        
        public BusinessResponse<StockLocation> GetStockLocationWitDetails(long idStockLocation,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<StockLocation> response = new BusinessResponse<StockLocation>();
		    try
		    {
			    response.Result = GetStockLocationWitDetailsRaw(idStockLocation,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal StockLocation GetStockLocationWitDetailsRaw(long idStockLocation,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.StockLocationDao.GetStockLocationWitDetails(idStockLocation,shouldRemap);
        }


		 public BusinessResponse<StockLocation> GetStockLocationCustom( Expression<Func<StockLocation, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<StockLocation> response = new BusinessResponse<StockLocation>();
		    try
		    {
			    response.Result = GetStockLocationCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal StockLocation GetStockLocationCustomRaw( Expression<Func<StockLocation, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.StockLocationDao.GetStockLocationCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<StockLocation>> GetStockLocationCustomList( Expression<Func<StockLocation, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<StockLocation, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<StockLocation>> response = new BusinessResponse<BaseListReturnType<StockLocation>>();
		    try
		    {
			    response.Result = GetStockLocationCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<StockLocation> GetStockLocationCustomListRaw( Expression<Func<StockLocation, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<StockLocation, dynamic> orderExpression = null)
		{
            return daoFactory.StockLocationDao.GetStockLocationCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveStockLocation(StockLocation stockLocation)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveStockLocationRaw(stockLocation);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveStockLocationRaw(StockLocation stockLocation)
        {
            daoFactory.StockLocationDao.SaveStockLocation(stockLocation);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyStockLocation(StockLocation stockLocation)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyStockLocationRaw(stockLocation);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyStockLocationRaw(StockLocation stockLocation)
        {
            daoFactory.StockLocationDao.SaveOnlyStockLocation(stockLocation);
            return true;
        }

        public BusinessResponse<bool> DeleteStockLocation(StockLocation stockLocation)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteStockLocationRaw(stockLocation);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteStockLocationRaw(StockLocation stockLocation)
        {
            daoFactory.StockLocationDao.DeleteStockLocation(stockLocation);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyStockLocation(StockLocation stockLocation)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyStockLocationRaw(stockLocation);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyStockLocationRaw(StockLocation stockLocation)
        {
            daoFactory.StockLocationDao.DeletePermanentlyStockLocation(stockLocation);
            return true;
        }
	}
	public partial class TemporaryPaymentService: BaseService
	{
	    public BusinessResponse<List<TemporaryPayment>> GetAllTemporaryPayments(bool shouldRemap=false)
        {
            BusinessResponse<List<TemporaryPayment>> response = new BusinessResponse<List<TemporaryPayment>>();
		    try
		    {
			    response.Result = GetAllTemporaryPaymentsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TemporaryPayment> GetAllTemporaryPaymentsRaw(bool shouldRemap=false)
        {
            return daoFactory.TemporaryPaymentDao.GetAllTemporaryPayments(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TemporaryPayment>> GetAllTemporaryPaymentsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPayment, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TemporaryPayment, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TemporaryPayment>> response = new BusinessResponse<BaseListReturnType<TemporaryPayment>>();
		    try
		    {
			    response.Result = GetAllTemporaryPaymentsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPayment, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TemporaryPayment, dynamic> orderExpression = null)
        {
            return daoFactory.TemporaryPaymentDao.GetAllTemporaryPaymentsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TemporaryPayment>> GetAllTemporaryPaymentsWithTemporaryPaymentDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPayment, bool>> expression = null,bool shouldRemap=false, Func<TemporaryPayment, dynamic> orderExpression = null)
			{
				return GetAllTemporaryPaymentsByPage(sortingPagingInfo, expression,new List<string>(){"TemporaryPaymentDetails"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TemporaryPayment>> GetAllTemporaryPaymentsWithTemporaryTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPayment, bool>> expression = null,bool shouldRemap=false, Func<TemporaryPayment, dynamic> orderExpression = null)
			{
				return GetAllTemporaryPaymentsByPage(sortingPagingInfo, expression,new List<string>(){"TemporaryTransactions"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TemporaryPayment>> GetAllTemporaryPaymentWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryPayment>> response = new BusinessResponse<BaseListReturnType<TemporaryPayment>>();
            try
            {
                response.Result = GetAllTemporaryPaymentWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TemporaryPaymentDao.GetAllTemporaryPaymentWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TemporaryPayment>> GetTemporaryPaymentListByIdList(List<long> temporaryPaymentIds)
        {
            BusinessResponse<List<TemporaryPayment>> response = new BusinessResponse<List<TemporaryPayment>>();
            try
            {
                response.Result = GetTemporaryPaymentListByIdListRaw(temporaryPaymentIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TemporaryPayment> GetTemporaryPaymentListByIdListRaw(List<long> temporaryPaymentIds)
        {
            return daoFactory.TemporaryPaymentDao.GetTemporaryPaymentListByIdList(temporaryPaymentIds);
        }

					
		public BusinessResponse<BaseListReturnType<TemporaryPayment>> GetAllTemporaryPaymentsWithTemporaryPaymentDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryPayment>> response = new BusinessResponse<BaseListReturnType<TemporaryPayment>>();
            try
            {
                response.Result = GetAllTemporaryPaymentsWithTemporaryPaymentDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsWithTemporaryPaymentDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTemporaryPaymentWitDetailsRaw(new List<string>() { "TemporaryPaymentDetails" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TemporaryPayment>> GetAllTemporaryPaymentsWithTemporaryTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryPayment>> response = new BusinessResponse<BaseListReturnType<TemporaryPayment>>();
            try
            {
                response.Result = GetAllTemporaryPaymentsWithTemporaryTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryPayment> GetAllTemporaryPaymentsWithTemporaryTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTemporaryPaymentWitDetailsRaw(new List<string>() { "TemporaryTransactions" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<TemporaryPaymentDetail>>  UpdateTemporaryPaymentDetailsForTemporaryPaymentWithoutSavingNewItem(List<TemporaryPaymentDetail> newTemporaryPaymentDetails,long idTemporaryPayment)
            {
                BusinessResponse<List<TemporaryPaymentDetail>> response = new BusinessResponse<List<TemporaryPaymentDetail>>();
                try
                {
                    response.Result = UpdateTemporaryPaymentDetailsForTemporaryPaymentWithoutSavingNewItemRaw(newTemporaryPaymentDetails, idTemporaryPayment);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryPaymentDetail> UpdateTemporaryPaymentDetailsForTemporaryPaymentWithoutSavingNewItemRaw(List<TemporaryPaymentDetail> newTemporaryPaymentDetails,long idTemporaryPayment)
            {
                return daoFactory.TemporaryPaymentDao.UpdateTemporaryPaymentDetailsForTemporaryPaymentWithoutSavingNewItem(newTemporaryPaymentDetails,idTemporaryPayment); 
            }



		    public BusinessResponse<List<TemporaryPaymentDetail>>  UpdateTemporaryPaymentDetailsForTemporaryPayment(List<TemporaryPaymentDetail> newTemporaryPaymentDetails,long idTemporaryPayment)
            {
                BusinessResponse<List<TemporaryPaymentDetail>> response = new BusinessResponse<List<TemporaryPaymentDetail>>();
                try
                {
                    response.Result = UpdateTemporaryPaymentDetailsForTemporaryPaymentRaw(newTemporaryPaymentDetails, idTemporaryPayment);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryPaymentDetail> UpdateTemporaryPaymentDetailsForTemporaryPaymentRaw(List<TemporaryPaymentDetail> newTemporaryPaymentDetails,long idTemporaryPayment)
            {
                return daoFactory.TemporaryPaymentDao.UpdateTemporaryPaymentDetailsForTemporaryPayment(newTemporaryPaymentDetails,idTemporaryPayment); 
            }





		public BusinessResponse<TemporaryPayment> GetTemporaryPaymentWithTemporaryPaymentDetailsDetails(long idTemporaryPayment,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryPayment> response = new BusinessResponse<TemporaryPayment>();
            try
            {
                response.Result = GetTemporaryPaymentWithTemporaryPaymentDetailsDetailsRaw(idTemporaryPayment,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TemporaryPayment GetTemporaryPaymentWithTemporaryPaymentDetailsDetailsRaw(long idTemporaryPayment,bool shouldRemap=false)
        {
            return GetTemporaryPaymentWitDetailsRaw(idTemporaryPayment,new List<string>() { "TemporaryPaymentDetails"},shouldRemap);
        }

		
			public BusinessResponse<List<TemporaryTransaction>>  UpdateTemporaryTransactionsForTemporaryPaymentWithoutSavingNewItem(List<TemporaryTransaction> newTemporaryTransactions,long idTemporaryPayment)
            {
                BusinessResponse<List<TemporaryTransaction>> response = new BusinessResponse<List<TemporaryTransaction>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionsForTemporaryPaymentWithoutSavingNewItemRaw(newTemporaryTransactions, idTemporaryPayment);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransaction> UpdateTemporaryTransactionsForTemporaryPaymentWithoutSavingNewItemRaw(List<TemporaryTransaction> newTemporaryTransactions,long idTemporaryPayment)
            {
                return daoFactory.TemporaryPaymentDao.UpdateTemporaryTransactionsForTemporaryPaymentWithoutSavingNewItem(newTemporaryTransactions,idTemporaryPayment); 
            }



		    public BusinessResponse<List<TemporaryTransaction>>  UpdateTemporaryTransactionsForTemporaryPayment(List<TemporaryTransaction> newTemporaryTransactions,long idTemporaryPayment)
            {
                BusinessResponse<List<TemporaryTransaction>> response = new BusinessResponse<List<TemporaryTransaction>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionsForTemporaryPaymentRaw(newTemporaryTransactions, idTemporaryPayment);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransaction> UpdateTemporaryTransactionsForTemporaryPaymentRaw(List<TemporaryTransaction> newTemporaryTransactions,long idTemporaryPayment)
            {
                return daoFactory.TemporaryPaymentDao.UpdateTemporaryTransactionsForTemporaryPayment(newTemporaryTransactions,idTemporaryPayment); 
            }





		public BusinessResponse<TemporaryPayment> GetTemporaryPaymentWithTemporaryTransactionsDetails(long idTemporaryPayment,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryPayment> response = new BusinessResponse<TemporaryPayment>();
            try
            {
                response.Result = GetTemporaryPaymentWithTemporaryTransactionsDetailsRaw(idTemporaryPayment,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TemporaryPayment GetTemporaryPaymentWithTemporaryTransactionsDetailsRaw(long idTemporaryPayment,bool shouldRemap=false)
        {
            return GetTemporaryPaymentWitDetailsRaw(idTemporaryPayment,new List<string>() { "TemporaryTransactions"},shouldRemap);
        }

		
        public BusinessResponse<TemporaryPayment> GetTemporaryPayment(long idTemporaryPayment,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryPayment> response = new BusinessResponse<TemporaryPayment>();
		    try
		    {
			    response.Result = GetTemporaryPaymentsRaw(idTemporaryPayment,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TemporaryPayment GetTemporaryPaymentsRaw(long idTemporaryPayment,bool shouldRemap=false)
        {
            return daoFactory.TemporaryPaymentDao.GetTemporaryPayment(idTemporaryPayment,shouldRemap);
        }

        
        public BusinessResponse<TemporaryPayment> GetTemporaryPaymentWitDetails(long idTemporaryPayment,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryPayment> response = new BusinessResponse<TemporaryPayment>();
		    try
		    {
			    response.Result = GetTemporaryPaymentWitDetailsRaw(idTemporaryPayment,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TemporaryPayment GetTemporaryPaymentWitDetailsRaw(long idTemporaryPayment,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TemporaryPaymentDao.GetTemporaryPaymentWitDetails(idTemporaryPayment,shouldRemap);
        }


		 public BusinessResponse<TemporaryPayment> GetTemporaryPaymentCustom( Expression<Func<TemporaryPayment, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TemporaryPayment> response = new BusinessResponse<TemporaryPayment>();
		    try
		    {
			    response.Result = GetTemporaryPaymentCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TemporaryPayment GetTemporaryPaymentCustomRaw( Expression<Func<TemporaryPayment, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TemporaryPaymentDao.GetTemporaryPaymentCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TemporaryPayment>> GetTemporaryPaymentCustomList( Expression<Func<TemporaryPayment, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TemporaryPayment, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TemporaryPayment>> response = new BusinessResponse<BaseListReturnType<TemporaryPayment>>();
		    try
		    {
			    response.Result = GetTemporaryPaymentCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TemporaryPayment> GetTemporaryPaymentCustomListRaw( Expression<Func<TemporaryPayment, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TemporaryPayment, dynamic> orderExpression = null)
		{
            return daoFactory.TemporaryPaymentDao.GetTemporaryPaymentCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTemporaryPayment(TemporaryPayment temporaryPayment)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTemporaryPaymentRaw(temporaryPayment);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTemporaryPaymentRaw(TemporaryPayment temporaryPayment)
        {
            daoFactory.TemporaryPaymentDao.SaveTemporaryPayment(temporaryPayment);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTemporaryPayment(TemporaryPayment temporaryPayment)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTemporaryPaymentRaw(temporaryPayment);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTemporaryPaymentRaw(TemporaryPayment temporaryPayment)
        {
            daoFactory.TemporaryPaymentDao.SaveOnlyTemporaryPayment(temporaryPayment);
            return true;
        }

        public BusinessResponse<bool> DeleteTemporaryPayment(TemporaryPayment temporaryPayment)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTemporaryPaymentRaw(temporaryPayment);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTemporaryPaymentRaw(TemporaryPayment temporaryPayment)
        {
            daoFactory.TemporaryPaymentDao.DeleteTemporaryPayment(temporaryPayment);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTemporaryPayment(TemporaryPayment temporaryPayment)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTemporaryPaymentRaw(temporaryPayment);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTemporaryPaymentRaw(TemporaryPayment temporaryPayment)
        {
            daoFactory.TemporaryPaymentDao.DeletePermanentlyTemporaryPayment(temporaryPayment);
            return true;
        }
	}
	public partial class TemporaryPaymentDetailService: BaseService
	{
	    public BusinessResponse<List<TemporaryPaymentDetail>> GetAllTemporaryPaymentDetails(bool shouldRemap=false)
        {
            BusinessResponse<List<TemporaryPaymentDetail>> response = new BusinessResponse<List<TemporaryPaymentDetail>>();
		    try
		    {
			    response.Result = GetAllTemporaryPaymentDetailsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailsRaw(bool shouldRemap=false)
        {
            return daoFactory.TemporaryPaymentDetailDao.GetAllTemporaryPaymentDetails(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> GetAllTemporaryPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPaymentDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> response = new BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>>();
		    try
		    {
			    response.Result = GetAllTemporaryPaymentDetailsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPaymentDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
        {
            return daoFactory.TemporaryPaymentDetailDao.GetAllTemporaryPaymentDetailsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> GetAllTemporaryPaymentDetailsWithTemporaryPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryPaymentDetail, bool>> expression = null,bool shouldRemap=false, Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
			{
				return GetAllTemporaryPaymentDetailsByPage(sortingPagingInfo, expression,new List<string>(){"TemporaryPayment"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> GetAllTemporaryPaymentDetailWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> response = new BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>>();
            try
            {
                response.Result = GetAllTemporaryPaymentDetailWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TemporaryPaymentDetailDao.GetAllTemporaryPaymentDetailWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TemporaryPaymentDetail>> GetTemporaryPaymentDetailListByIdList(List<long> temporaryPaymentDetailIds)
        {
            BusinessResponse<List<TemporaryPaymentDetail>> response = new BusinessResponse<List<TemporaryPaymentDetail>>();
            try
            {
                response.Result = GetTemporaryPaymentDetailListByIdListRaw(temporaryPaymentDetailIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TemporaryPaymentDetail> GetTemporaryPaymentDetailListByIdListRaw(List<long> temporaryPaymentDetailIds)
        {
            return daoFactory.TemporaryPaymentDetailDao.GetTemporaryPaymentDetailListByIdList(temporaryPaymentDetailIds);
        }

					
		public BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> GetAllTemporaryPaymentDetailsWithTemporaryPaymentDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> response = new BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>>();
            try
            {
                response.Result = GetAllTemporaryPaymentDetailsWithTemporaryPaymentDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailsWithTemporaryPaymentDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTemporaryPaymentDetailWitDetailsRaw(new List<string>() { "TemporaryPayment" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> GetAllTemporaryPaymentDetailListByTemporaryPayment(long idTemporaryPayment)
        {
            BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> response = new BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>>();
            try
            {
                response.Result = GetAllTemporaryPaymentDetailListByTemporaryPaymentRaw(idTemporaryPayment);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailListByTemporaryPaymentRaw(long idTemporaryPayment)
        {
            return daoFactory.TemporaryPaymentDetailDao.GetAllTemporaryPaymentDetailListByTemporaryPayment(idTemporaryPayment);
        }

        public BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> GetAllTemporaryPaymentDetailListByTemporaryPaymentByPage(long idTemporaryPayment, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> response = new BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>>();
            try
            {
                response.Result = GetAllTemporaryPaymentDetailListByTemporaryPaymentByPageRaw(idTemporaryPayment, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryPaymentDetail> GetAllTemporaryPaymentDetailListByTemporaryPaymentByPageRaw(long idTemporaryPayment,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TemporaryPaymentDetailDao.GetAllTemporaryPaymentDetailListByTemporaryPaymentByPage(idTemporaryPayment, sortingPagingInfo);
        }

		
		



		public BusinessResponse<TemporaryPaymentDetail> GetTemporaryPaymentDetailWithTemporaryPaymentDetails(long idTemporaryPaymentDetail,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryPaymentDetail> response = new BusinessResponse<TemporaryPaymentDetail>();
            try
            {
                response.Result = GetTemporaryPaymentDetailWithTemporaryPaymentDetailsRaw(idTemporaryPaymentDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TemporaryPaymentDetail GetTemporaryPaymentDetailWithTemporaryPaymentDetailsRaw(long idTemporaryPaymentDetail,bool shouldRemap=false)
        {
            return GetTemporaryPaymentDetailWitDetailsRaw(idTemporaryPaymentDetail,new List<string>() { "TemporaryPayment"},shouldRemap);
        }

		
        public BusinessResponse<TemporaryPaymentDetail> GetTemporaryPaymentDetail(long idTemporaryPaymentDetail,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryPaymentDetail> response = new BusinessResponse<TemporaryPaymentDetail>();
		    try
		    {
			    response.Result = GetTemporaryPaymentDetailsRaw(idTemporaryPaymentDetail,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TemporaryPaymentDetail GetTemporaryPaymentDetailsRaw(long idTemporaryPaymentDetail,bool shouldRemap=false)
        {
            return daoFactory.TemporaryPaymentDetailDao.GetTemporaryPaymentDetail(idTemporaryPaymentDetail,shouldRemap);
        }

        
        public BusinessResponse<TemporaryPaymentDetail> GetTemporaryPaymentDetailWitDetails(long idTemporaryPaymentDetail,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryPaymentDetail> response = new BusinessResponse<TemporaryPaymentDetail>();
		    try
		    {
			    response.Result = GetTemporaryPaymentDetailWitDetailsRaw(idTemporaryPaymentDetail,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TemporaryPaymentDetail GetTemporaryPaymentDetailWitDetailsRaw(long idTemporaryPaymentDetail,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TemporaryPaymentDetailDao.GetTemporaryPaymentDetailWitDetails(idTemporaryPaymentDetail,shouldRemap);
        }


		 public BusinessResponse<TemporaryPaymentDetail> GetTemporaryPaymentDetailCustom( Expression<Func<TemporaryPaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TemporaryPaymentDetail> response = new BusinessResponse<TemporaryPaymentDetail>();
		    try
		    {
			    response.Result = GetTemporaryPaymentDetailCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TemporaryPaymentDetail GetTemporaryPaymentDetailCustomRaw( Expression<Func<TemporaryPaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TemporaryPaymentDetailDao.GetTemporaryPaymentDetailCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> GetTemporaryPaymentDetailCustomList( Expression<Func<TemporaryPaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>> response = new BusinessResponse<BaseListReturnType<TemporaryPaymentDetail>>();
		    try
		    {
			    response.Result = GetTemporaryPaymentDetailCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TemporaryPaymentDetail> GetTemporaryPaymentDetailCustomListRaw( Expression<Func<TemporaryPaymentDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TemporaryPaymentDetail, dynamic> orderExpression = null)
		{
            return daoFactory.TemporaryPaymentDetailDao.GetTemporaryPaymentDetailCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTemporaryPaymentDetail(TemporaryPaymentDetail temporaryPaymentDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTemporaryPaymentDetailRaw(temporaryPaymentDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTemporaryPaymentDetailRaw(TemporaryPaymentDetail temporaryPaymentDetail)
        {
            daoFactory.TemporaryPaymentDetailDao.SaveTemporaryPaymentDetail(temporaryPaymentDetail);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTemporaryPaymentDetail(TemporaryPaymentDetail temporaryPaymentDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTemporaryPaymentDetailRaw(temporaryPaymentDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTemporaryPaymentDetailRaw(TemporaryPaymentDetail temporaryPaymentDetail)
        {
            daoFactory.TemporaryPaymentDetailDao.SaveOnlyTemporaryPaymentDetail(temporaryPaymentDetail);
            return true;
        }

        public BusinessResponse<bool> DeleteTemporaryPaymentDetail(TemporaryPaymentDetail temporaryPaymentDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTemporaryPaymentDetailRaw(temporaryPaymentDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTemporaryPaymentDetailRaw(TemporaryPaymentDetail temporaryPaymentDetail)
        {
            daoFactory.TemporaryPaymentDetailDao.DeleteTemporaryPaymentDetail(temporaryPaymentDetail);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTemporaryPaymentDetail(TemporaryPaymentDetail temporaryPaymentDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTemporaryPaymentDetailRaw(temporaryPaymentDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTemporaryPaymentDetailRaw(TemporaryPaymentDetail temporaryPaymentDetail)
        {
            daoFactory.TemporaryPaymentDetailDao.DeletePermanentlyTemporaryPaymentDetail(temporaryPaymentDetail);
            return true;
        }
	}
	public partial class TemporaryTransactionService: BaseService
	{
	    public BusinessResponse<List<TemporaryTransaction>> GetAllTemporaryTransactions(bool shouldRemap=false)
        {
            BusinessResponse<List<TemporaryTransaction>> response = new BusinessResponse<List<TemporaryTransaction>>();
		    try
		    {
			    response.Result = GetAllTemporaryTransactionsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TemporaryTransaction> GetAllTemporaryTransactionsRaw(bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionDao.GetAllTemporaryTransactions(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TemporaryTransaction, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
		    try
		    {
			    response.Result = GetAllTemporaryTransactionsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TemporaryTransaction, dynamic> orderExpression = null)
        {
            return daoFactory.TemporaryTransactionDao.GetAllTemporaryTransactionsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionsWithBankStatementHitListDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap=false, Func<TemporaryTransaction, dynamic> orderExpression = null)
			{
				return GetAllTemporaryTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementHitList"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionsWithBankStatementStagingDetailDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap=false, Func<TemporaryTransaction, dynamic> orderExpression = null)
			{
				return GetAllTemporaryTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingDetail"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionsWithBankStatementStagingHitDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap=false, Func<TemporaryTransaction, dynamic> orderExpression = null)
			{
				return GetAllTemporaryTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingHit"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionsWithTemporaryPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap=false, Func<TemporaryTransaction, dynamic> orderExpression = null)
			{
				return GetAllTemporaryTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"TemporaryPayment"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionsWithTemporaryTransactionDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransaction, bool>> expression = null,bool shouldRemap=false, Func<TemporaryTransaction, dynamic> orderExpression = null)
			{
				return GetAllTemporaryTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"TemporaryTransactionDetails"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionDao.GetAllTemporaryTransactionWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TemporaryTransaction>> GetTemporaryTransactionListByIdList(List<long> temporaryTransactionIds)
        {
            BusinessResponse<List<TemporaryTransaction>> response = new BusinessResponse<List<TemporaryTransaction>>();
            try
            {
                response.Result = GetTemporaryTransactionListByIdListRaw(temporaryTransactionIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TemporaryTransaction> GetTemporaryTransactionListByIdListRaw(List<long> temporaryTransactionIds)
        {
            return daoFactory.TemporaryTransactionDao.GetTemporaryTransactionListByIdList(temporaryTransactionIds);
        }

					
		public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionsWithBankStatementHitListDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionsWithBankStatementHitListDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithBankStatementHitListDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTemporaryTransactionWitDetailsRaw(new List<string>() { "BankStatementHitList" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionListByBankStatementHitList(long idBankStatementHitList)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionListByBankStatementHitListRaw(idBankStatementHitList);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementHitListRaw(long idBankStatementHitList)
        {
            return daoFactory.TemporaryTransactionDao.GetAllTemporaryTransactionListByBankStatementHitList(idBankStatementHitList);
        }

        public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionListByBankStatementHitListByPage(long idBankStatementHitList, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionListByBankStatementHitListByPageRaw(idBankStatementHitList, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementHitListByPageRaw(long idBankStatementHitList,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TemporaryTransactionDao.GetAllTemporaryTransactionListByBankStatementHitListByPage(idBankStatementHitList, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionsWithBankStatementStagingDetailDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionsWithBankStatementStagingDetailDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithBankStatementStagingDetailDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTemporaryTransactionWitDetailsRaw(new List<string>() { "BankStatementStagingDetail" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionListByBankStatementStagingDetail(long idBankStatementStagingDetail)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionListByBankStatementStagingDetailRaw(idBankStatementStagingDetail);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementStagingDetailRaw(long idBankStatementStagingDetail)
        {
            return daoFactory.TemporaryTransactionDao.GetAllTemporaryTransactionListByBankStatementStagingDetail(idBankStatementStagingDetail);
        }

        public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionListByBankStatementStagingDetailByPage(long idBankStatementStagingDetail, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionListByBankStatementStagingDetailByPageRaw(idBankStatementStagingDetail, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementStagingDetailByPageRaw(long idBankStatementStagingDetail,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TemporaryTransactionDao.GetAllTemporaryTransactionListByBankStatementStagingDetailByPage(idBankStatementStagingDetail, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionsWithBankStatementStagingHitDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionsWithBankStatementStagingHitDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithBankStatementStagingHitDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTemporaryTransactionWitDetailsRaw(new List<string>() { "BankStatementStagingHit" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionListByBankStatementStagingHit(long idBankStatementStagingHit)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionListByBankStatementStagingHitRaw(idBankStatementStagingHit);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementStagingHitRaw(long idBankStatementStagingHit)
        {
            return daoFactory.TemporaryTransactionDao.GetAllTemporaryTransactionListByBankStatementStagingHit(idBankStatementStagingHit);
        }

        public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionListByBankStatementStagingHitByPage(long idBankStatementStagingHit, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionListByBankStatementStagingHitByPageRaw(idBankStatementStagingHit, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByBankStatementStagingHitByPageRaw(long idBankStatementStagingHit,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TemporaryTransactionDao.GetAllTemporaryTransactionListByBankStatementStagingHitByPage(idBankStatementStagingHit, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionsWithTemporaryPaymentDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionsWithTemporaryPaymentDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithTemporaryPaymentDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTemporaryTransactionWitDetailsRaw(new List<string>() { "TemporaryPayment" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionListByTemporaryPayment(long idTemporaryPayment)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionListByTemporaryPaymentRaw(idTemporaryPayment);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByTemporaryPaymentRaw(long idTemporaryPayment)
        {
            return daoFactory.TemporaryTransactionDao.GetAllTemporaryTransactionListByTemporaryPayment(idTemporaryPayment);
        }

        public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionListByTemporaryPaymentByPage(long idTemporaryPayment, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionListByTemporaryPaymentByPageRaw(idTemporaryPayment, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionListByTemporaryPaymentByPageRaw(long idTemporaryPayment,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TemporaryTransactionDao.GetAllTemporaryTransactionListByTemporaryPaymentByPage(idTemporaryPayment, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetAllTemporaryTransactionsWithTemporaryTransactionDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
            try
            {
                response.Result = GetAllTemporaryTransactionsWithTemporaryTransactionDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransaction> GetAllTemporaryTransactionsWithTemporaryTransactionDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTemporaryTransactionWitDetailsRaw(new List<string>() { "TemporaryTransactionDetails" }, shouldRemap);
        }
        
        






		



		public BusinessResponse<TemporaryTransaction> GetTemporaryTransactionWithBankStatementHitListDetails(long idTemporaryTransaction,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransaction> response = new BusinessResponse<TemporaryTransaction>();
            try
            {
                response.Result = GetTemporaryTransactionWithBankStatementHitListDetailsRaw(idTemporaryTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TemporaryTransaction GetTemporaryTransactionWithBankStatementHitListDetailsRaw(long idTemporaryTransaction,bool shouldRemap=false)
        {
            return GetTemporaryTransactionWitDetailsRaw(idTemporaryTransaction,new List<string>() { "BankStatementHitList"},shouldRemap);
        }

		



		public BusinessResponse<TemporaryTransaction> GetTemporaryTransactionWithBankStatementStagingDetailDetails(long idTemporaryTransaction,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransaction> response = new BusinessResponse<TemporaryTransaction>();
            try
            {
                response.Result = GetTemporaryTransactionWithBankStatementStagingDetailDetailsRaw(idTemporaryTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TemporaryTransaction GetTemporaryTransactionWithBankStatementStagingDetailDetailsRaw(long idTemporaryTransaction,bool shouldRemap=false)
        {
            return GetTemporaryTransactionWitDetailsRaw(idTemporaryTransaction,new List<string>() { "BankStatementStagingDetail"},shouldRemap);
        }

		



		public BusinessResponse<TemporaryTransaction> GetTemporaryTransactionWithBankStatementStagingHitDetails(long idTemporaryTransaction,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransaction> response = new BusinessResponse<TemporaryTransaction>();
            try
            {
                response.Result = GetTemporaryTransactionWithBankStatementStagingHitDetailsRaw(idTemporaryTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TemporaryTransaction GetTemporaryTransactionWithBankStatementStagingHitDetailsRaw(long idTemporaryTransaction,bool shouldRemap=false)
        {
            return GetTemporaryTransactionWitDetailsRaw(idTemporaryTransaction,new List<string>() { "BankStatementStagingHit"},shouldRemap);
        }

		



		public BusinessResponse<TemporaryTransaction> GetTemporaryTransactionWithTemporaryPaymentDetails(long idTemporaryTransaction,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransaction> response = new BusinessResponse<TemporaryTransaction>();
            try
            {
                response.Result = GetTemporaryTransactionWithTemporaryPaymentDetailsRaw(idTemporaryTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TemporaryTransaction GetTemporaryTransactionWithTemporaryPaymentDetailsRaw(long idTemporaryTransaction,bool shouldRemap=false)
        {
            return GetTemporaryTransactionWitDetailsRaw(idTemporaryTransaction,new List<string>() { "TemporaryPayment"},shouldRemap);
        }

		
			public BusinessResponse<List<TemporaryTransactionDetail>>  UpdateTemporaryTransactionDetailsForTemporaryTransactionWithoutSavingNewItem(List<TemporaryTransactionDetail> newTemporaryTransactionDetails,long idTemporaryTransaction)
            {
                BusinessResponse<List<TemporaryTransactionDetail>> response = new BusinessResponse<List<TemporaryTransactionDetail>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionDetailsForTemporaryTransactionWithoutSavingNewItemRaw(newTemporaryTransactionDetails, idTemporaryTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransactionDetail> UpdateTemporaryTransactionDetailsForTemporaryTransactionWithoutSavingNewItemRaw(List<TemporaryTransactionDetail> newTemporaryTransactionDetails,long idTemporaryTransaction)
            {
                return daoFactory.TemporaryTransactionDao.UpdateTemporaryTransactionDetailsForTemporaryTransactionWithoutSavingNewItem(newTemporaryTransactionDetails,idTemporaryTransaction); 
            }



		    public BusinessResponse<List<TemporaryTransactionDetail>>  UpdateTemporaryTransactionDetailsForTemporaryTransaction(List<TemporaryTransactionDetail> newTemporaryTransactionDetails,long idTemporaryTransaction)
            {
                BusinessResponse<List<TemporaryTransactionDetail>> response = new BusinessResponse<List<TemporaryTransactionDetail>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionDetailsForTemporaryTransactionRaw(newTemporaryTransactionDetails, idTemporaryTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransactionDetail> UpdateTemporaryTransactionDetailsForTemporaryTransactionRaw(List<TemporaryTransactionDetail> newTemporaryTransactionDetails,long idTemporaryTransaction)
            {
                return daoFactory.TemporaryTransactionDao.UpdateTemporaryTransactionDetailsForTemporaryTransaction(newTemporaryTransactionDetails,idTemporaryTransaction); 
            }





		public BusinessResponse<TemporaryTransaction> GetTemporaryTransactionWithTemporaryTransactionDetailsDetails(long idTemporaryTransaction,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransaction> response = new BusinessResponse<TemporaryTransaction>();
            try
            {
                response.Result = GetTemporaryTransactionWithTemporaryTransactionDetailsDetailsRaw(idTemporaryTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TemporaryTransaction GetTemporaryTransactionWithTemporaryTransactionDetailsDetailsRaw(long idTemporaryTransaction,bool shouldRemap=false)
        {
            return GetTemporaryTransactionWitDetailsRaw(idTemporaryTransaction,new List<string>() { "TemporaryTransactionDetails"},shouldRemap);
        }

		
        public BusinessResponse<TemporaryTransaction> GetTemporaryTransaction(long idTemporaryTransaction,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransaction> response = new BusinessResponse<TemporaryTransaction>();
		    try
		    {
			    response.Result = GetTemporaryTransactionsRaw(idTemporaryTransaction,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TemporaryTransaction GetTemporaryTransactionsRaw(long idTemporaryTransaction,bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionDao.GetTemporaryTransaction(idTemporaryTransaction,shouldRemap);
        }

        
        public BusinessResponse<TemporaryTransaction> GetTemporaryTransactionWitDetails(long idTemporaryTransaction,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransaction> response = new BusinessResponse<TemporaryTransaction>();
		    try
		    {
			    response.Result = GetTemporaryTransactionWitDetailsRaw(idTemporaryTransaction,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TemporaryTransaction GetTemporaryTransactionWitDetailsRaw(long idTemporaryTransaction,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionDao.GetTemporaryTransactionWitDetails(idTemporaryTransaction,shouldRemap);
        }


		 public BusinessResponse<TemporaryTransaction> GetTemporaryTransactionCustom( Expression<Func<TemporaryTransaction, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TemporaryTransaction> response = new BusinessResponse<TemporaryTransaction>();
		    try
		    {
			    response.Result = GetTemporaryTransactionCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TemporaryTransaction GetTemporaryTransactionCustomRaw( Expression<Func<TemporaryTransaction, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TemporaryTransactionDao.GetTemporaryTransactionCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TemporaryTransaction>> GetTemporaryTransactionCustomList( Expression<Func<TemporaryTransaction, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TemporaryTransaction, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TemporaryTransaction>> response = new BusinessResponse<BaseListReturnType<TemporaryTransaction>>();
		    try
		    {
			    response.Result = GetTemporaryTransactionCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TemporaryTransaction> GetTemporaryTransactionCustomListRaw( Expression<Func<TemporaryTransaction, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TemporaryTransaction, dynamic> orderExpression = null)
		{
            return daoFactory.TemporaryTransactionDao.GetTemporaryTransactionCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTemporaryTransaction(TemporaryTransaction temporaryTransaction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTemporaryTransactionRaw(temporaryTransaction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTemporaryTransactionRaw(TemporaryTransaction temporaryTransaction)
        {
            daoFactory.TemporaryTransactionDao.SaveTemporaryTransaction(temporaryTransaction);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTemporaryTransaction(TemporaryTransaction temporaryTransaction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTemporaryTransactionRaw(temporaryTransaction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTemporaryTransactionRaw(TemporaryTransaction temporaryTransaction)
        {
            daoFactory.TemporaryTransactionDao.SaveOnlyTemporaryTransaction(temporaryTransaction);
            return true;
        }

        public BusinessResponse<bool> DeleteTemporaryTransaction(TemporaryTransaction temporaryTransaction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTemporaryTransactionRaw(temporaryTransaction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTemporaryTransactionRaw(TemporaryTransaction temporaryTransaction)
        {
            daoFactory.TemporaryTransactionDao.DeleteTemporaryTransaction(temporaryTransaction);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTemporaryTransaction(TemporaryTransaction temporaryTransaction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTemporaryTransactionRaw(temporaryTransaction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTemporaryTransactionRaw(TemporaryTransaction temporaryTransaction)
        {
            daoFactory.TemporaryTransactionDao.DeletePermanentlyTemporaryTransaction(temporaryTransaction);
            return true;
        }
	}
	public partial class TemporaryTransactionDetailService: BaseService
	{
	    public BusinessResponse<List<TemporaryTransactionDetail>> GetAllTemporaryTransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<List<TemporaryTransactionDetail>> response = new BusinessResponse<List<TemporaryTransactionDetail>>();
		    try
		    {
			    response.Result = GetAllTemporaryTransactionDetailsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailsRaw(bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionDetailDao.GetAllTemporaryTransactionDetails(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> GetAllTemporaryTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>>();
		    try
		    {
			    response.Result = GetAllTemporaryTransactionDetailsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
        {
            return daoFactory.TemporaryTransactionDetailDao.GetAllTemporaryTransactionDetailsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> GetAllTemporaryTransactionDetailsWithTemporaryTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionDetail, bool>> expression = null,bool shouldRemap=false, Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
			{
				return GetAllTemporaryTransactionDetailsByPage(sortingPagingInfo, expression,new List<string>(){"TemporaryTransaction"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> GetAllTemporaryTransactionDetailWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>>();
            try
            {
                response.Result = GetAllTemporaryTransactionDetailWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionDetailDao.GetAllTemporaryTransactionDetailWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TemporaryTransactionDetail>> GetTemporaryTransactionDetailListByIdList(List<long> temporaryTransactionDetailIds)
        {
            BusinessResponse<List<TemporaryTransactionDetail>> response = new BusinessResponse<List<TemporaryTransactionDetail>>();
            try
            {
                response.Result = GetTemporaryTransactionDetailListByIdListRaw(temporaryTransactionDetailIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TemporaryTransactionDetail> GetTemporaryTransactionDetailListByIdListRaw(List<long> temporaryTransactionDetailIds)
        {
            return daoFactory.TemporaryTransactionDetailDao.GetTemporaryTransactionDetailListByIdList(temporaryTransactionDetailIds);
        }

					
		public BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> GetAllTemporaryTransactionDetailsWithTemporaryTransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>>();
            try
            {
                response.Result = GetAllTemporaryTransactionDetailsWithTemporaryTransactionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailsWithTemporaryTransactionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTemporaryTransactionDetailWitDetailsRaw(new List<string>() { "TemporaryTransaction" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> GetAllTemporaryTransactionDetailListByTemporaryTransaction(long idTemporaryTransaction)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>>();
            try
            {
                response.Result = GetAllTemporaryTransactionDetailListByTemporaryTransactionRaw(idTemporaryTransaction);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailListByTemporaryTransactionRaw(long idTemporaryTransaction)
        {
            return daoFactory.TemporaryTransactionDetailDao.GetAllTemporaryTransactionDetailListByTemporaryTransaction(idTemporaryTransaction);
        }

        public BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> GetAllTemporaryTransactionDetailListByTemporaryTransactionByPage(long idTemporaryTransaction, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>>();
            try
            {
                response.Result = GetAllTemporaryTransactionDetailListByTemporaryTransactionByPageRaw(idTemporaryTransaction, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionDetail> GetAllTemporaryTransactionDetailListByTemporaryTransactionByPageRaw(long idTemporaryTransaction,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TemporaryTransactionDetailDao.GetAllTemporaryTransactionDetailListByTemporaryTransactionByPage(idTemporaryTransaction, sortingPagingInfo);
        }

		
		



		public BusinessResponse<TemporaryTransactionDetail> GetTemporaryTransactionDetailWithTemporaryTransactionDetails(long idTemporaryTransactionDetail,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransactionDetail> response = new BusinessResponse<TemporaryTransactionDetail>();
            try
            {
                response.Result = GetTemporaryTransactionDetailWithTemporaryTransactionDetailsRaw(idTemporaryTransactionDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TemporaryTransactionDetail GetTemporaryTransactionDetailWithTemporaryTransactionDetailsRaw(long idTemporaryTransactionDetail,bool shouldRemap=false)
        {
            return GetTemporaryTransactionDetailWitDetailsRaw(idTemporaryTransactionDetail,new List<string>() { "TemporaryTransaction"},shouldRemap);
        }

		
        public BusinessResponse<TemporaryTransactionDetail> GetTemporaryTransactionDetail(long idTemporaryTransactionDetail,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransactionDetail> response = new BusinessResponse<TemporaryTransactionDetail>();
		    try
		    {
			    response.Result = GetTemporaryTransactionDetailsRaw(idTemporaryTransactionDetail,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TemporaryTransactionDetail GetTemporaryTransactionDetailsRaw(long idTemporaryTransactionDetail,bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionDetailDao.GetTemporaryTransactionDetail(idTemporaryTransactionDetail,shouldRemap);
        }

        
        public BusinessResponse<TemporaryTransactionDetail> GetTemporaryTransactionDetailWitDetails(long idTemporaryTransactionDetail,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransactionDetail> response = new BusinessResponse<TemporaryTransactionDetail>();
		    try
		    {
			    response.Result = GetTemporaryTransactionDetailWitDetailsRaw(idTemporaryTransactionDetail,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TemporaryTransactionDetail GetTemporaryTransactionDetailWitDetailsRaw(long idTemporaryTransactionDetail,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionDetailDao.GetTemporaryTransactionDetailWitDetails(idTemporaryTransactionDetail,shouldRemap);
        }


		 public BusinessResponse<TemporaryTransactionDetail> GetTemporaryTransactionDetailCustom( Expression<Func<TemporaryTransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TemporaryTransactionDetail> response = new BusinessResponse<TemporaryTransactionDetail>();
		    try
		    {
			    response.Result = GetTemporaryTransactionDetailCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TemporaryTransactionDetail GetTemporaryTransactionDetailCustomRaw( Expression<Func<TemporaryTransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TemporaryTransactionDetailDao.GetTemporaryTransactionDetailCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> GetTemporaryTransactionDetailCustomList( Expression<Func<TemporaryTransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionDetail>>();
		    try
		    {
			    response.Result = GetTemporaryTransactionDetailCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TemporaryTransactionDetail> GetTemporaryTransactionDetailCustomListRaw( Expression<Func<TemporaryTransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TemporaryTransactionDetail, dynamic> orderExpression = null)
		{
            return daoFactory.TemporaryTransactionDetailDao.GetTemporaryTransactionDetailCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTemporaryTransactionDetail(TemporaryTransactionDetail temporaryTransactionDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTemporaryTransactionDetailRaw(temporaryTransactionDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTemporaryTransactionDetailRaw(TemporaryTransactionDetail temporaryTransactionDetail)
        {
            daoFactory.TemporaryTransactionDetailDao.SaveTemporaryTransactionDetail(temporaryTransactionDetail);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTemporaryTransactionDetail(TemporaryTransactionDetail temporaryTransactionDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTemporaryTransactionDetailRaw(temporaryTransactionDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTemporaryTransactionDetailRaw(TemporaryTransactionDetail temporaryTransactionDetail)
        {
            daoFactory.TemporaryTransactionDetailDao.SaveOnlyTemporaryTransactionDetail(temporaryTransactionDetail);
            return true;
        }

        public BusinessResponse<bool> DeleteTemporaryTransactionDetail(TemporaryTransactionDetail temporaryTransactionDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTemporaryTransactionDetailRaw(temporaryTransactionDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTemporaryTransactionDetailRaw(TemporaryTransactionDetail temporaryTransactionDetail)
        {
            daoFactory.TemporaryTransactionDetailDao.DeleteTemporaryTransactionDetail(temporaryTransactionDetail);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTemporaryTransactionDetail(TemporaryTransactionDetail temporaryTransactionDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTemporaryTransactionDetailRaw(temporaryTransactionDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTemporaryTransactionDetailRaw(TemporaryTransactionDetail temporaryTransactionDetail)
        {
            daoFactory.TemporaryTransactionDetailDao.DeletePermanentlyTemporaryTransactionDetail(temporaryTransactionDetail);
            return true;
        }
	}
	public partial class TemporaryTransactionOrderService: BaseService
	{
	    public BusinessResponse<List<TemporaryTransactionOrder>> GetAllTemporaryTransactionOrders(bool shouldRemap=false)
        {
            BusinessResponse<List<TemporaryTransactionOrder>> response = new BusinessResponse<List<TemporaryTransactionOrder>>();
		    try
		    {
			    response.Result = GetAllTemporaryTransactionOrdersRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersRaw(bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionOrderDao.GetAllTemporaryTransactionOrders(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> GetAllTemporaryTransactionOrdersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrder, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>>();
		    try
		    {
			    response.Result = GetAllTemporaryTransactionOrdersByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrder, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
        {
            return daoFactory.TemporaryTransactionOrderDao.GetAllTemporaryTransactionOrdersByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> GetAllTemporaryTransactionOrdersWithTemporaryTransactionOrderStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrder, bool>> expression = null,bool shouldRemap=false, Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
			{
				return GetAllTemporaryTransactionOrdersByPage(sortingPagingInfo, expression,new List<string>(){"TemporaryTransactionOrderState"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> GetAllTemporaryTransactionOrdersWithDocumentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrder, bool>> expression = null,bool shouldRemap=false, Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
			{
				return GetAllTemporaryTransactionOrdersByPage(sortingPagingInfo, expression,new List<string>(){"Document"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> GetAllTemporaryTransactionOrderWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>>();
            try
            {
                response.Result = GetAllTemporaryTransactionOrderWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionOrderDao.GetAllTemporaryTransactionOrderWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TemporaryTransactionOrder>> GetTemporaryTransactionOrderListByIdList(List<long> temporaryTransactionOrderIds)
        {
            BusinessResponse<List<TemporaryTransactionOrder>> response = new BusinessResponse<List<TemporaryTransactionOrder>>();
            try
            {
                response.Result = GetTemporaryTransactionOrderListByIdListRaw(temporaryTransactionOrderIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TemporaryTransactionOrder> GetTemporaryTransactionOrderListByIdListRaw(List<long> temporaryTransactionOrderIds)
        {
            return daoFactory.TemporaryTransactionOrderDao.GetTemporaryTransactionOrderListByIdList(temporaryTransactionOrderIds);
        }

					
		public BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> GetAllTemporaryTransactionOrdersWithTemporaryTransactionOrderStateDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>>();
            try
            {
                response.Result = GetAllTemporaryTransactionOrdersWithTemporaryTransactionOrderStateDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersWithTemporaryTransactionOrderStateDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTemporaryTransactionOrderWitDetailsRaw(new List<string>() { "TemporaryTransactionOrderState" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderState(long idTemporaryTransactionOrderState)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>>();
            try
            {
                response.Result = GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderStateRaw(idTemporaryTransactionOrderState);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderStateRaw(long idTemporaryTransactionOrderState)
        {
            return daoFactory.TemporaryTransactionOrderDao.GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderState(idTemporaryTransactionOrderState);
        }

        public BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderStateByPage(long idTemporaryTransactionOrderState, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>>();
            try
            {
                response.Result = GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderStateByPageRaw(idTemporaryTransactionOrderState, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderStateByPageRaw(long idTemporaryTransactionOrderState,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TemporaryTransactionOrderDao.GetAllTemporaryTransactionOrderListByTemporaryTransactionOrderStateByPage(idTemporaryTransactionOrderState, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> GetAllTemporaryTransactionOrdersWithDocumentDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>>();
            try
            {
                response.Result = GetAllTemporaryTransactionOrdersWithDocumentDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrdersWithDocumentDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTemporaryTransactionOrderWitDetailsRaw(new List<string>() { "Document" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> GetAllTemporaryTransactionOrderListByDocument(long idDocument)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>>();
            try
            {
                response.Result = GetAllTemporaryTransactionOrderListByDocumentRaw(idDocument);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderListByDocumentRaw(long idDocument)
        {
            return daoFactory.TemporaryTransactionOrderDao.GetAllTemporaryTransactionOrderListByDocument(idDocument);
        }

        public BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> GetAllTemporaryTransactionOrderListByDocumentByPage(long idDocument, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>>();
            try
            {
                response.Result = GetAllTemporaryTransactionOrderListByDocumentByPageRaw(idDocument, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionOrder> GetAllTemporaryTransactionOrderListByDocumentByPageRaw(long idDocument,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TemporaryTransactionOrderDao.GetAllTemporaryTransactionOrderListByDocumentByPage(idDocument, sortingPagingInfo);
        }

		
		



		public BusinessResponse<TemporaryTransactionOrder> GetTemporaryTransactionOrderWithTemporaryTransactionOrderStateDetails(long idTemporaryTransactionOrder,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransactionOrder> response = new BusinessResponse<TemporaryTransactionOrder>();
            try
            {
                response.Result = GetTemporaryTransactionOrderWithTemporaryTransactionOrderStateDetailsRaw(idTemporaryTransactionOrder,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TemporaryTransactionOrder GetTemporaryTransactionOrderWithTemporaryTransactionOrderStateDetailsRaw(long idTemporaryTransactionOrder,bool shouldRemap=false)
        {
            return GetTemporaryTransactionOrderWitDetailsRaw(idTemporaryTransactionOrder,new List<string>() { "TemporaryTransactionOrderState"},shouldRemap);
        }

		



		public BusinessResponse<TemporaryTransactionOrder> GetTemporaryTransactionOrderWithDocumentDetails(long idTemporaryTransactionOrder,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransactionOrder> response = new BusinessResponse<TemporaryTransactionOrder>();
            try
            {
                response.Result = GetTemporaryTransactionOrderWithDocumentDetailsRaw(idTemporaryTransactionOrder,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TemporaryTransactionOrder GetTemporaryTransactionOrderWithDocumentDetailsRaw(long idTemporaryTransactionOrder,bool shouldRemap=false)
        {
            return GetTemporaryTransactionOrderWitDetailsRaw(idTemporaryTransactionOrder,new List<string>() { "Document"},shouldRemap);
        }

		
        public BusinessResponse<TemporaryTransactionOrder> GetTemporaryTransactionOrder(long idTemporaryTransactionOrder,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransactionOrder> response = new BusinessResponse<TemporaryTransactionOrder>();
		    try
		    {
			    response.Result = GetTemporaryTransactionOrdersRaw(idTemporaryTransactionOrder,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TemporaryTransactionOrder GetTemporaryTransactionOrdersRaw(long idTemporaryTransactionOrder,bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionOrderDao.GetTemporaryTransactionOrder(idTemporaryTransactionOrder,shouldRemap);
        }

        
        public BusinessResponse<TemporaryTransactionOrder> GetTemporaryTransactionOrderWitDetails(long idTemporaryTransactionOrder,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransactionOrder> response = new BusinessResponse<TemporaryTransactionOrder>();
		    try
		    {
			    response.Result = GetTemporaryTransactionOrderWitDetailsRaw(idTemporaryTransactionOrder,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TemporaryTransactionOrder GetTemporaryTransactionOrderWitDetailsRaw(long idTemporaryTransactionOrder,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionOrderDao.GetTemporaryTransactionOrderWitDetails(idTemporaryTransactionOrder,shouldRemap);
        }


		 public BusinessResponse<TemporaryTransactionOrder> GetTemporaryTransactionOrderCustom( Expression<Func<TemporaryTransactionOrder, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TemporaryTransactionOrder> response = new BusinessResponse<TemporaryTransactionOrder>();
		    try
		    {
			    response.Result = GetTemporaryTransactionOrderCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TemporaryTransactionOrder GetTemporaryTransactionOrderCustomRaw( Expression<Func<TemporaryTransactionOrder, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TemporaryTransactionOrderDao.GetTemporaryTransactionOrderCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> GetTemporaryTransactionOrderCustomList( Expression<Func<TemporaryTransactionOrder, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrder>>();
		    try
		    {
			    response.Result = GetTemporaryTransactionOrderCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TemporaryTransactionOrder> GetTemporaryTransactionOrderCustomListRaw( Expression<Func<TemporaryTransactionOrder, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TemporaryTransactionOrder, dynamic> orderExpression = null)
		{
            return daoFactory.TemporaryTransactionOrderDao.GetTemporaryTransactionOrderCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTemporaryTransactionOrder(TemporaryTransactionOrder temporaryTransactionOrder)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTemporaryTransactionOrderRaw(temporaryTransactionOrder);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTemporaryTransactionOrderRaw(TemporaryTransactionOrder temporaryTransactionOrder)
        {
            daoFactory.TemporaryTransactionOrderDao.SaveTemporaryTransactionOrder(temporaryTransactionOrder);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTemporaryTransactionOrder(TemporaryTransactionOrder temporaryTransactionOrder)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTemporaryTransactionOrderRaw(temporaryTransactionOrder);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTemporaryTransactionOrderRaw(TemporaryTransactionOrder temporaryTransactionOrder)
        {
            daoFactory.TemporaryTransactionOrderDao.SaveOnlyTemporaryTransactionOrder(temporaryTransactionOrder);
            return true;
        }

        public BusinessResponse<bool> DeleteTemporaryTransactionOrder(TemporaryTransactionOrder temporaryTransactionOrder)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTemporaryTransactionOrderRaw(temporaryTransactionOrder);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTemporaryTransactionOrderRaw(TemporaryTransactionOrder temporaryTransactionOrder)
        {
            daoFactory.TemporaryTransactionOrderDao.DeleteTemporaryTransactionOrder(temporaryTransactionOrder);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTemporaryTransactionOrder(TemporaryTransactionOrder temporaryTransactionOrder)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTemporaryTransactionOrderRaw(temporaryTransactionOrder);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTemporaryTransactionOrderRaw(TemporaryTransactionOrder temporaryTransactionOrder)
        {
            daoFactory.TemporaryTransactionOrderDao.DeletePermanentlyTemporaryTransactionOrder(temporaryTransactionOrder);
            return true;
        }
	}
	public partial class TemporaryTransactionOrderStateService: BaseService
	{
	    public BusinessResponse<List<TemporaryTransactionOrderState>> GetAllTemporaryTransactionOrderStates(bool shouldRemap=false)
        {
            BusinessResponse<List<TemporaryTransactionOrderState>> response = new BusinessResponse<List<TemporaryTransactionOrderState>>();
		    try
		    {
			    response.Result = GetAllTemporaryTransactionOrderStatesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStatesRaw(bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionOrderStateDao.GetAllTemporaryTransactionOrderStates(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>> GetAllTemporaryTransactionOrderStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrderState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>>();
		    try
		    {
			    response.Result = GetAllTemporaryTransactionOrderStatesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStatesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrderState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
        {
            return daoFactory.TemporaryTransactionOrderStateDao.GetAllTemporaryTransactionOrderStatesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>> GetAllTemporaryTransactionOrderStatesWithTemporaryTransactionOrdersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TemporaryTransactionOrderState, bool>> expression = null,bool shouldRemap=false, Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
			{
				return GetAllTemporaryTransactionOrderStatesByPage(sortingPagingInfo, expression,new List<string>(){"TemporaryTransactionOrders"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>> GetAllTemporaryTransactionOrderStateWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>>();
            try
            {
                response.Result = GetAllTemporaryTransactionOrderStateWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStateWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionOrderStateDao.GetAllTemporaryTransactionOrderStateWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TemporaryTransactionOrderState>> GetTemporaryTransactionOrderStateListByIdList(List<long> temporaryTransactionOrderStateIds)
        {
            BusinessResponse<List<TemporaryTransactionOrderState>> response = new BusinessResponse<List<TemporaryTransactionOrderState>>();
            try
            {
                response.Result = GetTemporaryTransactionOrderStateListByIdListRaw(temporaryTransactionOrderStateIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TemporaryTransactionOrderState> GetTemporaryTransactionOrderStateListByIdListRaw(List<long> temporaryTransactionOrderStateIds)
        {
            return daoFactory.TemporaryTransactionOrderStateDao.GetTemporaryTransactionOrderStateListByIdList(temporaryTransactionOrderStateIds);
        }

					
		public BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>> GetAllTemporaryTransactionOrderStatesWithTemporaryTransactionOrdersDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>>();
            try
            {
                response.Result = GetAllTemporaryTransactionOrderStatesWithTemporaryTransactionOrdersDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TemporaryTransactionOrderState> GetAllTemporaryTransactionOrderStatesWithTemporaryTransactionOrdersDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTemporaryTransactionOrderStateWitDetailsRaw(new List<string>() { "TemporaryTransactionOrders" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<TemporaryTransactionOrder>>  UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderStateWithoutSavingNewItem(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idTemporaryTransactionOrderState)
            {
                BusinessResponse<List<TemporaryTransactionOrder>> response = new BusinessResponse<List<TemporaryTransactionOrder>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderStateWithoutSavingNewItemRaw(newTemporaryTransactionOrders, idTemporaryTransactionOrderState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransactionOrder> UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderStateWithoutSavingNewItemRaw(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idTemporaryTransactionOrderState)
            {
                return daoFactory.TemporaryTransactionOrderStateDao.UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderStateWithoutSavingNewItem(newTemporaryTransactionOrders,idTemporaryTransactionOrderState); 
            }



		    public BusinessResponse<List<TemporaryTransactionOrder>>  UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderState(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idTemporaryTransactionOrderState)
            {
                BusinessResponse<List<TemporaryTransactionOrder>> response = new BusinessResponse<List<TemporaryTransactionOrder>>();
                try
                {
                    response.Result = UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderStateRaw(newTemporaryTransactionOrders, idTemporaryTransactionOrderState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TemporaryTransactionOrder> UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderStateRaw(List<TemporaryTransactionOrder> newTemporaryTransactionOrders,long idTemporaryTransactionOrderState)
            {
                return daoFactory.TemporaryTransactionOrderStateDao.UpdateTemporaryTransactionOrdersForTemporaryTransactionOrderState(newTemporaryTransactionOrders,idTemporaryTransactionOrderState); 
            }





		public BusinessResponse<TemporaryTransactionOrderState> GetTemporaryTransactionOrderStateWithTemporaryTransactionOrdersDetails(long idTemporaryTransactionOrderState,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransactionOrderState> response = new BusinessResponse<TemporaryTransactionOrderState>();
            try
            {
                response.Result = GetTemporaryTransactionOrderStateWithTemporaryTransactionOrdersDetailsRaw(idTemporaryTransactionOrderState,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TemporaryTransactionOrderState GetTemporaryTransactionOrderStateWithTemporaryTransactionOrdersDetailsRaw(long idTemporaryTransactionOrderState,bool shouldRemap=false)
        {
            return GetTemporaryTransactionOrderStateWitDetailsRaw(idTemporaryTransactionOrderState,new List<string>() { "TemporaryTransactionOrders"},shouldRemap);
        }

		
        public BusinessResponse<TemporaryTransactionOrderState> GetTemporaryTransactionOrderState(long idTemporaryTransactionOrderState,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransactionOrderState> response = new BusinessResponse<TemporaryTransactionOrderState>();
		    try
		    {
			    response.Result = GetTemporaryTransactionOrderStatesRaw(idTemporaryTransactionOrderState,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TemporaryTransactionOrderState GetTemporaryTransactionOrderStatesRaw(long idTemporaryTransactionOrderState,bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionOrderStateDao.GetTemporaryTransactionOrderState(idTemporaryTransactionOrderState,shouldRemap);
        }

        
        public BusinessResponse<TemporaryTransactionOrderState> GetTemporaryTransactionOrderStateWitDetails(long idTemporaryTransactionOrderState,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TemporaryTransactionOrderState> response = new BusinessResponse<TemporaryTransactionOrderState>();
		    try
		    {
			    response.Result = GetTemporaryTransactionOrderStateWitDetailsRaw(idTemporaryTransactionOrderState,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TemporaryTransactionOrderState GetTemporaryTransactionOrderStateWitDetailsRaw(long idTemporaryTransactionOrderState,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TemporaryTransactionOrderStateDao.GetTemporaryTransactionOrderStateWitDetails(idTemporaryTransactionOrderState,shouldRemap);
        }


		 public BusinessResponse<TemporaryTransactionOrderState> GetTemporaryTransactionOrderStateCustom( Expression<Func<TemporaryTransactionOrderState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TemporaryTransactionOrderState> response = new BusinessResponse<TemporaryTransactionOrderState>();
		    try
		    {
			    response.Result = GetTemporaryTransactionOrderStateCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TemporaryTransactionOrderState GetTemporaryTransactionOrderStateCustomRaw( Expression<Func<TemporaryTransactionOrderState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TemporaryTransactionOrderStateDao.GetTemporaryTransactionOrderStateCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>> GetTemporaryTransactionOrderStateCustomList( Expression<Func<TemporaryTransactionOrderState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>> response = new BusinessResponse<BaseListReturnType<TemporaryTransactionOrderState>>();
		    try
		    {
			    response.Result = GetTemporaryTransactionOrderStateCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TemporaryTransactionOrderState> GetTemporaryTransactionOrderStateCustomListRaw( Expression<Func<TemporaryTransactionOrderState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TemporaryTransactionOrderState, dynamic> orderExpression = null)
		{
            return daoFactory.TemporaryTransactionOrderStateDao.GetTemporaryTransactionOrderStateCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTemporaryTransactionOrderState(TemporaryTransactionOrderState temporaryTransactionOrderState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTemporaryTransactionOrderStateRaw(temporaryTransactionOrderState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTemporaryTransactionOrderStateRaw(TemporaryTransactionOrderState temporaryTransactionOrderState)
        {
            daoFactory.TemporaryTransactionOrderStateDao.SaveTemporaryTransactionOrderState(temporaryTransactionOrderState);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTemporaryTransactionOrderState(TemporaryTransactionOrderState temporaryTransactionOrderState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTemporaryTransactionOrderStateRaw(temporaryTransactionOrderState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTemporaryTransactionOrderStateRaw(TemporaryTransactionOrderState temporaryTransactionOrderState)
        {
            daoFactory.TemporaryTransactionOrderStateDao.SaveOnlyTemporaryTransactionOrderState(temporaryTransactionOrderState);
            return true;
        }

        public BusinessResponse<bool> DeleteTemporaryTransactionOrderState(TemporaryTransactionOrderState temporaryTransactionOrderState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTemporaryTransactionOrderStateRaw(temporaryTransactionOrderState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTemporaryTransactionOrderStateRaw(TemporaryTransactionOrderState temporaryTransactionOrderState)
        {
            daoFactory.TemporaryTransactionOrderStateDao.DeleteTemporaryTransactionOrderState(temporaryTransactionOrderState);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTemporaryTransactionOrderState(TemporaryTransactionOrderState temporaryTransactionOrderState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTemporaryTransactionOrderStateRaw(temporaryTransactionOrderState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTemporaryTransactionOrderStateRaw(TemporaryTransactionOrderState temporaryTransactionOrderState)
        {
            daoFactory.TemporaryTransactionOrderStateDao.DeletePermanentlyTemporaryTransactionOrderState(temporaryTransactionOrderState);
            return true;
        }
	}
	public partial class TitleService: BaseService
	{
	    public BusinessResponse<List<Title>> GetAllTitles(bool shouldRemap=false)
        {
            BusinessResponse<List<Title>> response = new BusinessResponse<List<Title>>();
		    try
		    {
			    response.Result = GetAllTitlesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Title> GetAllTitlesRaw(bool shouldRemap=false)
        {
            return daoFactory.TitleDao.GetAllTitles(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Title>> GetAllTitlesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Title, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Title, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Title>> response = new BusinessResponse<BaseListReturnType<Title>>();
		    try
		    {
			    response.Result = GetAllTitlesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Title> GetAllTitlesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Title, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Title, dynamic> orderExpression = null)
        {
            return daoFactory.TitleDao.GetAllTitlesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Title>> GetAllTitlesWithOrderPersonsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Title, bool>> expression = null,bool shouldRemap=false, Func<Title, dynamic> orderExpression = null)
			{
				return GetAllTitlesByPage(sortingPagingInfo, expression,new List<string>(){"OrderPersons"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Title>> GetAllTitlesWithPeopleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Title, bool>> expression = null,bool shouldRemap=false, Func<Title, dynamic> orderExpression = null)
			{
				return GetAllTitlesByPage(sortingPagingInfo, expression,new List<string>(){"People"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Title>> GetAllTitleWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Title>> response = new BusinessResponse<BaseListReturnType<Title>>();
            try
            {
                response.Result = GetAllTitleWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Title> GetAllTitleWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TitleDao.GetAllTitleWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Title>> GetTitleListByIdList(List<long> titleIds)
        {
            BusinessResponse<List<Title>> response = new BusinessResponse<List<Title>>();
            try
            {
                response.Result = GetTitleListByIdListRaw(titleIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Title> GetTitleListByIdListRaw(List<long> titleIds)
        {
            return daoFactory.TitleDao.GetTitleListByIdList(titleIds);
        }

					
		public BusinessResponse<BaseListReturnType<Title>> GetAllTitlesWithOrderPersonsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Title>> response = new BusinessResponse<BaseListReturnType<Title>>();
            try
            {
                response.Result = GetAllTitlesWithOrderPersonsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Title> GetAllTitlesWithOrderPersonsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTitleWitDetailsRaw(new List<string>() { "OrderPersons" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Title>> GetAllTitlesWithPeopleDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Title>> response = new BusinessResponse<BaseListReturnType<Title>>();
            try
            {
                response.Result = GetAllTitlesWithPeopleDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Title> GetAllTitlesWithPeopleDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTitleWitDetailsRaw(new List<string>() { "People" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<OrderPerson>>  UpdateOrderPersonsForTitleWithoutSavingNewItem(List<OrderPerson> newOrderPersons,long idTitle)
            {
                BusinessResponse<List<OrderPerson>> response = new BusinessResponse<List<OrderPerson>>();
                try
                {
                    response.Result = UpdateOrderPersonsForTitleWithoutSavingNewItemRaw(newOrderPersons, idTitle);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderPerson> UpdateOrderPersonsForTitleWithoutSavingNewItemRaw(List<OrderPerson> newOrderPersons,long idTitle)
            {
                return daoFactory.TitleDao.UpdateOrderPersonsForTitleWithoutSavingNewItem(newOrderPersons,idTitle); 
            }



		    public BusinessResponse<List<OrderPerson>>  UpdateOrderPersonsForTitle(List<OrderPerson> newOrderPersons,long idTitle)
            {
                BusinessResponse<List<OrderPerson>> response = new BusinessResponse<List<OrderPerson>>();
                try
                {
                    response.Result = UpdateOrderPersonsForTitleRaw(newOrderPersons, idTitle);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<OrderPerson> UpdateOrderPersonsForTitleRaw(List<OrderPerson> newOrderPersons,long idTitle)
            {
                return daoFactory.TitleDao.UpdateOrderPersonsForTitle(newOrderPersons,idTitle); 
            }





		public BusinessResponse<Title> GetTitleWithOrderPersonsDetails(long idTitle,bool shouldRemap=false)
        {
            BusinessResponse<Title> response = new BusinessResponse<Title>();
            try
            {
                response.Result = GetTitleWithOrderPersonsDetailsRaw(idTitle,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Title GetTitleWithOrderPersonsDetailsRaw(long idTitle,bool shouldRemap=false)
        {
            return GetTitleWitDetailsRaw(idTitle,new List<string>() { "OrderPersons"},shouldRemap);
        }

		
			public BusinessResponse<List<Person>>  UpdatePeopleForTitleWithoutSavingNewItem(List<Person> newPeople,long idTitle)
            {
                BusinessResponse<List<Person>> response = new BusinessResponse<List<Person>>();
                try
                {
                    response.Result = UpdatePeopleForTitleWithoutSavingNewItemRaw(newPeople, idTitle);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Person> UpdatePeopleForTitleWithoutSavingNewItemRaw(List<Person> newPeople,long idTitle)
            {
                return daoFactory.TitleDao.UpdatePeopleForTitleWithoutSavingNewItem(newPeople,idTitle); 
            }



		    public BusinessResponse<List<Person>>  UpdatePeopleForTitle(List<Person> newPeople,long idTitle)
            {
                BusinessResponse<List<Person>> response = new BusinessResponse<List<Person>>();
                try
                {
                    response.Result = UpdatePeopleForTitleRaw(newPeople, idTitle);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Person> UpdatePeopleForTitleRaw(List<Person> newPeople,long idTitle)
            {
                return daoFactory.TitleDao.UpdatePeopleForTitle(newPeople,idTitle); 
            }





		public BusinessResponse<Title> GetTitleWithPeopleDetails(long idTitle,bool shouldRemap=false)
        {
            BusinessResponse<Title> response = new BusinessResponse<Title>();
            try
            {
                response.Result = GetTitleWithPeopleDetailsRaw(idTitle,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Title GetTitleWithPeopleDetailsRaw(long idTitle,bool shouldRemap=false)
        {
            return GetTitleWitDetailsRaw(idTitle,new List<string>() { "People"},shouldRemap);
        }

		
        public BusinessResponse<Title> GetTitle(long idTitle,bool shouldRemap=false)
        {
            BusinessResponse<Title> response = new BusinessResponse<Title>();
		    try
		    {
			    response.Result = GetTitlesRaw(idTitle,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Title GetTitlesRaw(long idTitle,bool shouldRemap=false)
        {
            return daoFactory.TitleDao.GetTitle(idTitle,shouldRemap);
        }

        
        public BusinessResponse<Title> GetTitleWitDetails(long idTitle,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Title> response = new BusinessResponse<Title>();
		    try
		    {
			    response.Result = GetTitleWitDetailsRaw(idTitle,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Title GetTitleWitDetailsRaw(long idTitle,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TitleDao.GetTitleWitDetails(idTitle,shouldRemap);
        }


		 public BusinessResponse<Title> GetTitleCustom( Expression<Func<Title, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Title> response = new BusinessResponse<Title>();
		    try
		    {
			    response.Result = GetTitleCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Title GetTitleCustomRaw( Expression<Func<Title, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TitleDao.GetTitleCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Title>> GetTitleCustomList( Expression<Func<Title, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Title, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Title>> response = new BusinessResponse<BaseListReturnType<Title>>();
		    try
		    {
			    response.Result = GetTitleCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Title> GetTitleCustomListRaw( Expression<Func<Title, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Title, dynamic> orderExpression = null)
		{
            return daoFactory.TitleDao.GetTitleCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTitle(Title title)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTitleRaw(title);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTitleRaw(Title title)
        {
            daoFactory.TitleDao.SaveTitle(title);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTitle(Title title)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTitleRaw(title);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTitleRaw(Title title)
        {
            daoFactory.TitleDao.SaveOnlyTitle(title);
            return true;
        }

        public BusinessResponse<bool> DeleteTitle(Title title)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTitleRaw(title);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTitleRaw(Title title)
        {
            daoFactory.TitleDao.DeleteTitle(title);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTitle(Title title)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTitleRaw(title);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTitleRaw(Title title)
        {
            daoFactory.TitleDao.DeletePermanentlyTitle(title);
            return true;
        }
	}
	public partial class TransactionService: BaseService
	{
	    public BusinessResponse<List<Transaction>> GetAllTransactions(bool shouldRemap=false)
        {
            BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
		    try
		    {
			    response.Result = GetAllTransactionsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Transaction> GetAllTransactionsRaw(bool shouldRemap=false)
        {
            return daoFactory.TransactionDao.GetAllTransactions(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
		    try
		    {
			    response.Result = GetAllTransactionsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
        {
            return daoFactory.TransactionDao.GetAllTransactionsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithUserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"User"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionState"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithCustomerDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"Customer"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithDocumentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"Document"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithScheduleSettingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"ScheduleSettings"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionDuesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionDues"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionDue_TransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionDue_Transaction"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithPaymentsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"Payments"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"Payment"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction1"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction2DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction2"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction11DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction11"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction3DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction3"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction_PaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction_Payment"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionDetails"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction_MailToSendDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction_MailToSend"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction_BankStatementStagingDetailDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction_BankStatementStagingDetail"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionAccountDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionAccount"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionClassDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionClass"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionTemplateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction, bool>> expression = null,bool shouldRemap=false, Func<Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionTemplate"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionDao.GetAllTransactionWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Transaction>> GetTransactionListByIdList(List<long> transactionIds)
        {
            BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
            try
            {
                response.Result = GetTransactionListByIdListRaw(transactionIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Transaction> GetTransactionListByIdListRaw(List<long> transactionIds)
        {
            return daoFactory.TransactionDao.GetTransactionListByIdList(transactionIds);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithUserDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithUserDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithUserDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "User" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByUser(long idUser)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByUserRaw(idUser);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByUserRaw(long idUser)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByUser(idUser);
        }

        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByUserByPage(long idUser, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByUserByPageRaw(idUser, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByUserByPageRaw(long idUser,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByUserByPage(idUser, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionStateDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransactionStateDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransactionStateDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "TransactionState" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransactionState(long idTransactionState)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransactionStateRaw(idTransactionState);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransactionStateRaw(long idTransactionState)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransactionState(idTransactionState);
        }

        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransactionStateByPage(long idTransactionState, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransactionStateByPageRaw(idTransactionState, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransactionStateByPageRaw(long idTransactionState,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransactionStateByPage(idTransactionState, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransactionTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransactionTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "TransactionType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransactionType(long idTransactionType)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransactionTypeRaw(idTransactionType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransactionTypeRaw(long idTransactionType)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransactionType(idTransactionType);
        }

        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransactionTypeByPage(long idTransactionType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransactionTypeByPageRaw(idTransactionType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransactionTypeByPageRaw(long idTransactionType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransactionTypeByPage(idTransactionType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithCustomerDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithCustomerDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithCustomerDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "Customer" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByCustomer(long idCustomer)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByCustomerRaw(idCustomer);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByCustomerRaw(long idCustomer)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByCustomer(idCustomer);
        }

        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByCustomerByPage(long idCustomer, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByCustomerByPageRaw(idCustomer, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByCustomerByPageRaw(long idCustomer,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByCustomerByPage(idCustomer, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithDocumentDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithDocumentDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithDocumentDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "Document" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByDocument(long idDocument)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByDocumentRaw(idDocument);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByDocumentRaw(long idDocument)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByDocument(idDocument);
        }

        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByDocumentByPage(long idDocument, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByDocumentByPageRaw(idDocument, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByDocumentByPageRaw(long idDocument,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByDocumentByPage(idDocument, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithScheduleSettingsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithScheduleSettingsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithScheduleSettingsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "ScheduleSettings" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionDuesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransactionDuesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransactionDuesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "TransactionDues" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionDue_TransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransactionDue_TransactionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransactionDue_TransactionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "TransactionDue_Transaction" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithPaymentsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithPaymentsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithPaymentsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "Payments" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithPaymentDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithPaymentDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithPaymentDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "Payment" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByPayment(long idPayment)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByPaymentRaw(idPayment);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByPaymentRaw(long idPayment)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByPayment(idPayment);
        }

        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByPaymentByPage(long idPayment, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByPaymentByPageRaw(idPayment, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByPaymentByPageRaw(long idPayment,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByPaymentByPage(idPayment, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction1Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransaction1DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransaction1DetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "Transaction1" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransaction1(long idTransaction1)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransaction1Raw(idTransaction1);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransaction1Raw(long idTransaction1)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransaction1(idTransaction1);
        }

        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransaction1ByPage(long idTransaction1, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransaction1ByPageRaw(idTransaction1, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransaction1ByPageRaw(long idTransaction1,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransaction1ByPage(idTransaction1, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction2Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransaction2DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransaction2DetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "Transaction2" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction11Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransaction11DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransaction11DetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "Transaction11" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransaction11(long idTransaction11)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransaction11Raw(idTransaction11);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransaction11Raw(long idTransaction11)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransaction11(idTransaction11);
        }

        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransaction11ByPage(long idTransaction11, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransaction11ByPageRaw(idTransaction11, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransaction11ByPageRaw(long idTransaction11,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransaction11ByPage(idTransaction11, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction3Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransaction3DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransaction3DetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "Transaction3" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction_PaymentDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransaction_PaymentDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransaction_PaymentDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "Transaction_Payment" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransactionDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransactionDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "TransactionDetails" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction_MailToSendDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransaction_MailToSendDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransaction_MailToSendDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "Transaction_MailToSend" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransaction_BankStatementStagingDetailDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransaction_BankStatementStagingDetailDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransaction_BankStatementStagingDetailDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "Transaction_BankStatementStagingDetail" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionAccountDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransactionAccountDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransactionAccountDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "TransactionAccount" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransactionAccount(long idTransactionAccount)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransactionAccountRaw(idTransactionAccount);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransactionAccountRaw(long idTransactionAccount)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransactionAccount(idTransactionAccount);
        }

        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransactionAccountByPage(long idTransactionAccount, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransactionAccountByPageRaw(idTransactionAccount, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransactionAccountByPageRaw(long idTransactionAccount,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransactionAccountByPage(idTransactionAccount, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionClassDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransactionClassDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransactionClassDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "TransactionClass" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransactionClass(long idTransactionClass)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransactionClassRaw(idTransactionClass);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransactionClassRaw(long idTransactionClass)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransactionClass(idTransactionClass);
        }

        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransactionClassByPage(long idTransactionClass, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransactionClassByPageRaw(idTransactionClass, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransactionClassByPageRaw(long idTransactionClass,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransactionClassByPage(idTransactionClass, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionsWithTransactionTemplateDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionsWithTransactionTemplateDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionsWithTransactionTemplateDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionWitDetailsRaw(new List<string>() { "TransactionTemplate" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransactionTemplate(long idTransactionTemplate)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransactionTemplateRaw(idTransactionTemplate);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransactionTemplateRaw(long idTransactionTemplate)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransactionTemplate(idTransactionTemplate);
        }

        public BusinessResponse<BaseListReturnType<Transaction>> GetAllTransactionListByTransactionTemplateByPage(long idTransactionTemplate, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
            try
            {
                response.Result = GetAllTransactionListByTransactionTemplateByPageRaw(idTransactionTemplate, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction> GetAllTransactionListByTransactionTemplateByPageRaw(long idTransactionTemplate,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDao.GetAllTransactionListByTransactionTemplateByPage(idTransactionTemplate, sortingPagingInfo);
        }

		
		



		public BusinessResponse<Transaction> GetTransactionWithUserDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithUserDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithUserDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "User"},shouldRemap);
        }

		



		public BusinessResponse<Transaction> GetTransactionWithTransactionStateDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransactionStateDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransactionStateDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "TransactionState"},shouldRemap);
        }

		



		public BusinessResponse<Transaction> GetTransactionWithTransactionTypeDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransactionTypeDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransactionTypeDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "TransactionType"},shouldRemap);
        }

		



		public BusinessResponse<Transaction> GetTransactionWithCustomerDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithCustomerDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithCustomerDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "Customer"},shouldRemap);
        }

		



		public BusinessResponse<Transaction> GetTransactionWithDocumentDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithDocumentDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithDocumentDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "Document"},shouldRemap);
        }

		
			public BusinessResponse<List<ScheduleSetting>>  UpdateScheduleSettingsForTransactionWithoutSavingNewItem(List<ScheduleSetting> newScheduleSettings,long idTransaction)
            {
                BusinessResponse<List<ScheduleSetting>> response = new BusinessResponse<List<ScheduleSetting>>();
                try
                {
                    response.Result = UpdateScheduleSettingsForTransactionWithoutSavingNewItemRaw(newScheduleSettings, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<ScheduleSetting> UpdateScheduleSettingsForTransactionWithoutSavingNewItemRaw(List<ScheduleSetting> newScheduleSettings,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateScheduleSettingsForTransactionWithoutSavingNewItem(newScheduleSettings,idTransaction); 
            }



		    public BusinessResponse<List<ScheduleSetting>>  UpdateScheduleSettingsForTransaction(List<ScheduleSetting> newScheduleSettings,long idTransaction)
            {
                BusinessResponse<List<ScheduleSetting>> response = new BusinessResponse<List<ScheduleSetting>>();
                try
                {
                    response.Result = UpdateScheduleSettingsForTransactionRaw(newScheduleSettings, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<ScheduleSetting> UpdateScheduleSettingsForTransactionRaw(List<ScheduleSetting> newScheduleSettings,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateScheduleSettingsForTransaction(newScheduleSettings,idTransaction); 
            }





		public BusinessResponse<Transaction> GetTransactionWithScheduleSettingsDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithScheduleSettingsDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithScheduleSettingsDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "ScheduleSettings"},shouldRemap);
        }

		
			public BusinessResponse<List<TransactionDue>>  UpdateTransactionDuesForTransactionWithoutSavingNewItem(List<TransactionDue> newTransactionDues,long idTransaction)
            {
                BusinessResponse<List<TransactionDue>> response = new BusinessResponse<List<TransactionDue>>();
                try
                {
                    response.Result = UpdateTransactionDuesForTransactionWithoutSavingNewItemRaw(newTransactionDues, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDue> UpdateTransactionDuesForTransactionWithoutSavingNewItemRaw(List<TransactionDue> newTransactionDues,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateTransactionDuesForTransactionWithoutSavingNewItem(newTransactionDues,idTransaction); 
            }



		    public BusinessResponse<List<TransactionDue>>  UpdateTransactionDuesForTransaction(List<TransactionDue> newTransactionDues,long idTransaction)
            {
                BusinessResponse<List<TransactionDue>> response = new BusinessResponse<List<TransactionDue>>();
                try
                {
                    response.Result = UpdateTransactionDuesForTransactionRaw(newTransactionDues, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDue> UpdateTransactionDuesForTransactionRaw(List<TransactionDue> newTransactionDues,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateTransactionDuesForTransaction(newTransactionDues,idTransaction); 
            }





		public BusinessResponse<Transaction> GetTransactionWithTransactionDuesDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransactionDuesDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransactionDuesDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "TransactionDues"},shouldRemap);
        }

		
			public BusinessResponse<List<TransactionDue_Transaction>>  UpdateTransactionDue_TransactionForTransactionWithoutSavingNewItem(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransaction)
            {
                BusinessResponse<List<TransactionDue_Transaction>> response = new BusinessResponse<List<TransactionDue_Transaction>>();
                try
                {
                    response.Result = UpdateTransactionDue_TransactionForTransactionWithoutSavingNewItemRaw(newTransactionDue_Transaction, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDue_Transaction> UpdateTransactionDue_TransactionForTransactionWithoutSavingNewItemRaw(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateTransactionDue_TransactionForTransactionWithoutSavingNewItem(newTransactionDue_Transaction,idTransaction); 
            }



		    public BusinessResponse<List<TransactionDue_Transaction>>  UpdateTransactionDue_TransactionForTransaction(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransaction)
            {
                BusinessResponse<List<TransactionDue_Transaction>> response = new BusinessResponse<List<TransactionDue_Transaction>>();
                try
                {
                    response.Result = UpdateTransactionDue_TransactionForTransactionRaw(newTransactionDue_Transaction, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDue_Transaction> UpdateTransactionDue_TransactionForTransactionRaw(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateTransactionDue_TransactionForTransaction(newTransactionDue_Transaction,idTransaction); 
            }





		public BusinessResponse<Transaction> GetTransactionWithTransactionDue_TransactionDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransactionDue_TransactionDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransactionDue_TransactionDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "TransactionDue_Transaction"},shouldRemap);
        }

		
			public BusinessResponse<List<Payment>>  UpdatePaymentsForTransactionWithoutSavingNewItem(List<Payment> newPayments,long idTransaction)
            {
                BusinessResponse<List<Payment>> response = new BusinessResponse<List<Payment>>();
                try
                {
                    response.Result = UpdatePaymentsForTransactionWithoutSavingNewItemRaw(newPayments, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Payment> UpdatePaymentsForTransactionWithoutSavingNewItemRaw(List<Payment> newPayments,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdatePaymentsForTransactionWithoutSavingNewItem(newPayments,idTransaction); 
            }



		    public BusinessResponse<List<Payment>>  UpdatePaymentsForTransaction(List<Payment> newPayments,long idTransaction)
            {
                BusinessResponse<List<Payment>> response = new BusinessResponse<List<Payment>>();
                try
                {
                    response.Result = UpdatePaymentsForTransactionRaw(newPayments, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Payment> UpdatePaymentsForTransactionRaw(List<Payment> newPayments,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdatePaymentsForTransaction(newPayments,idTransaction); 
            }





		public BusinessResponse<Transaction> GetTransactionWithPaymentsDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithPaymentsDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithPaymentsDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "Payments"},shouldRemap);
        }

		



		public BusinessResponse<Transaction> GetTransactionWithPaymentDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithPaymentDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithPaymentDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "Payment"},shouldRemap);
        }

		



		public BusinessResponse<Transaction> GetTransactionWithTransaction1Details(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransaction1DetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransaction1DetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "Transaction1"},shouldRemap);
        }

		



		public BusinessResponse<Transaction> GetTransactionWithTransaction2Details(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransaction2DetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransaction2DetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "Transaction2"},shouldRemap);
        }

		



		public BusinessResponse<Transaction> GetTransactionWithTransaction11Details(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransaction11DetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransaction11DetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "Transaction11"},shouldRemap);
        }

		



		public BusinessResponse<Transaction> GetTransactionWithTransaction3Details(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransaction3DetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransaction3DetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "Transaction3"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction_Payment>>  UpdateTransaction_PaymentForTransactionWithoutSavingNewItem(List<Transaction_Payment> newTransaction_Payment,long idTransaction)
            {
                BusinessResponse<List<Transaction_Payment>> response = new BusinessResponse<List<Transaction_Payment>>();
                try
                {
                    response.Result = UpdateTransaction_PaymentForTransactionWithoutSavingNewItemRaw(newTransaction_Payment, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction_Payment> UpdateTransaction_PaymentForTransactionWithoutSavingNewItemRaw(List<Transaction_Payment> newTransaction_Payment,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateTransaction_PaymentForTransactionWithoutSavingNewItem(newTransaction_Payment,idTransaction); 
            }



		    public BusinessResponse<List<Transaction_Payment>>  UpdateTransaction_PaymentForTransaction(List<Transaction_Payment> newTransaction_Payment,long idTransaction)
            {
                BusinessResponse<List<Transaction_Payment>> response = new BusinessResponse<List<Transaction_Payment>>();
                try
                {
                    response.Result = UpdateTransaction_PaymentForTransactionRaw(newTransaction_Payment, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction_Payment> UpdateTransaction_PaymentForTransactionRaw(List<Transaction_Payment> newTransaction_Payment,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateTransaction_PaymentForTransaction(newTransaction_Payment,idTransaction); 
            }





		public BusinessResponse<Transaction> GetTransactionWithTransaction_PaymentDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransaction_PaymentDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransaction_PaymentDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "Transaction_Payment"},shouldRemap);
        }

		
			public BusinessResponse<List<TransactionDetail>>  UpdateTransactionDetailsForTransactionWithoutSavingNewItem(List<TransactionDetail> newTransactionDetails,long idTransaction)
            {
                BusinessResponse<List<TransactionDetail>> response = new BusinessResponse<List<TransactionDetail>>();
                try
                {
                    response.Result = UpdateTransactionDetailsForTransactionWithoutSavingNewItemRaw(newTransactionDetails, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDetail> UpdateTransactionDetailsForTransactionWithoutSavingNewItemRaw(List<TransactionDetail> newTransactionDetails,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateTransactionDetailsForTransactionWithoutSavingNewItem(newTransactionDetails,idTransaction); 
            }



		    public BusinessResponse<List<TransactionDetail>>  UpdateTransactionDetailsForTransaction(List<TransactionDetail> newTransactionDetails,long idTransaction)
            {
                BusinessResponse<List<TransactionDetail>> response = new BusinessResponse<List<TransactionDetail>>();
                try
                {
                    response.Result = UpdateTransactionDetailsForTransactionRaw(newTransactionDetails, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDetail> UpdateTransactionDetailsForTransactionRaw(List<TransactionDetail> newTransactionDetails,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateTransactionDetailsForTransaction(newTransactionDetails,idTransaction); 
            }





		public BusinessResponse<Transaction> GetTransactionWithTransactionDetailsDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransactionDetailsDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransactionDetailsDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "TransactionDetails"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction_MailToSend>>  UpdateTransaction_MailToSendForTransactionWithoutSavingNewItem(List<Transaction_MailToSend> newTransaction_MailToSend,long idTransaction)
            {
                BusinessResponse<List<Transaction_MailToSend>> response = new BusinessResponse<List<Transaction_MailToSend>>();
                try
                {
                    response.Result = UpdateTransaction_MailToSendForTransactionWithoutSavingNewItemRaw(newTransaction_MailToSend, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction_MailToSend> UpdateTransaction_MailToSendForTransactionWithoutSavingNewItemRaw(List<Transaction_MailToSend> newTransaction_MailToSend,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateTransaction_MailToSendForTransactionWithoutSavingNewItem(newTransaction_MailToSend,idTransaction); 
            }



		    public BusinessResponse<List<Transaction_MailToSend>>  UpdateTransaction_MailToSendForTransaction(List<Transaction_MailToSend> newTransaction_MailToSend,long idTransaction)
            {
                BusinessResponse<List<Transaction_MailToSend>> response = new BusinessResponse<List<Transaction_MailToSend>>();
                try
                {
                    response.Result = UpdateTransaction_MailToSendForTransactionRaw(newTransaction_MailToSend, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction_MailToSend> UpdateTransaction_MailToSendForTransactionRaw(List<Transaction_MailToSend> newTransaction_MailToSend,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateTransaction_MailToSendForTransaction(newTransaction_MailToSend,idTransaction); 
            }





		public BusinessResponse<Transaction> GetTransactionWithTransaction_MailToSendDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransaction_MailToSendDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransaction_MailToSendDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "Transaction_MailToSend"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction_BankStatementStagingDetail>>  UpdateTransaction_BankStatementStagingDetailForTransactionWithoutSavingNewItem(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idTransaction)
            {
                BusinessResponse<List<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<List<Transaction_BankStatementStagingDetail>>();
                try
                {
                    response.Result = UpdateTransaction_BankStatementStagingDetailForTransactionWithoutSavingNewItemRaw(newTransaction_BankStatementStagingDetail, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction_BankStatementStagingDetail> UpdateTransaction_BankStatementStagingDetailForTransactionWithoutSavingNewItemRaw(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateTransaction_BankStatementStagingDetailForTransactionWithoutSavingNewItem(newTransaction_BankStatementStagingDetail,idTransaction); 
            }



		    public BusinessResponse<List<Transaction_BankStatementStagingDetail>>  UpdateTransaction_BankStatementStagingDetailForTransaction(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idTransaction)
            {
                BusinessResponse<List<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<List<Transaction_BankStatementStagingDetail>>();
                try
                {
                    response.Result = UpdateTransaction_BankStatementStagingDetailForTransactionRaw(newTransaction_BankStatementStagingDetail, idTransaction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction_BankStatementStagingDetail> UpdateTransaction_BankStatementStagingDetailForTransactionRaw(List<Transaction_BankStatementStagingDetail> newTransaction_BankStatementStagingDetail,long idTransaction)
            {
                return daoFactory.TransactionDao.UpdateTransaction_BankStatementStagingDetailForTransaction(newTransaction_BankStatementStagingDetail,idTransaction); 
            }





		public BusinessResponse<Transaction> GetTransactionWithTransaction_BankStatementStagingDetailDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransaction_BankStatementStagingDetailDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransaction_BankStatementStagingDetailDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "Transaction_BankStatementStagingDetail"},shouldRemap);
        }

		



		public BusinessResponse<Transaction> GetTransactionWithTransactionAccountDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransactionAccountDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransactionAccountDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "TransactionAccount"},shouldRemap);
        }

		



		public BusinessResponse<Transaction> GetTransactionWithTransactionClassDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransactionClassDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransactionClassDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "TransactionClass"},shouldRemap);
        }

		



		public BusinessResponse<Transaction> GetTransactionWithTransactionTemplateDetails(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
            try
            {
                response.Result = GetTransactionWithTransactionTemplateDetailsRaw(idTransaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction GetTransactionWithTransactionTemplateDetailsRaw(long idTransaction,bool shouldRemap=false)
        {
            return GetTransactionWitDetailsRaw(idTransaction,new List<string>() { "TransactionTemplate"},shouldRemap);
        }

		
        public BusinessResponse<Transaction> GetTransaction(long idTransaction,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
		    try
		    {
			    response.Result = GetTransactionsRaw(idTransaction,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Transaction GetTransactionsRaw(long idTransaction,bool shouldRemap=false)
        {
            return daoFactory.TransactionDao.GetTransaction(idTransaction,shouldRemap);
        }

        
        public BusinessResponse<Transaction> GetTransactionWitDetails(long idTransaction,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
		    try
		    {
			    response.Result = GetTransactionWitDetailsRaw(idTransaction,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Transaction GetTransactionWitDetailsRaw(long idTransaction,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionDao.GetTransactionWitDetails(idTransaction,shouldRemap);
        }


		 public BusinessResponse<Transaction> GetTransactionCustom( Expression<Func<Transaction, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Transaction> response = new BusinessResponse<Transaction>();
		    try
		    {
			    response.Result = GetTransactionCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Transaction GetTransactionCustomRaw( Expression<Func<Transaction, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TransactionDao.GetTransactionCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Transaction>> GetTransactionCustomList( Expression<Func<Transaction, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Transaction, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Transaction>> response = new BusinessResponse<BaseListReturnType<Transaction>>();
		    try
		    {
			    response.Result = GetTransactionCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Transaction> GetTransactionCustomListRaw( Expression<Func<Transaction, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Transaction, dynamic> orderExpression = null)
		{
            return daoFactory.TransactionDao.GetTransactionCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransaction(Transaction transaction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransactionRaw(transaction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransactionRaw(Transaction transaction)
        {
            daoFactory.TransactionDao.SaveTransaction(transaction);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransaction(Transaction transaction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransactionRaw(transaction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransactionRaw(Transaction transaction)
        {
            daoFactory.TransactionDao.SaveOnlyTransaction(transaction);
            return true;
        }

        public BusinessResponse<bool> DeleteTransaction(Transaction transaction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransactionRaw(transaction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransactionRaw(Transaction transaction)
        {
            daoFactory.TransactionDao.DeleteTransaction(transaction);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransaction(Transaction transaction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransactionRaw(transaction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransactionRaw(Transaction transaction)
        {
            daoFactory.TransactionDao.DeletePermanentlyTransaction(transaction);
            return true;
        }
	}
	public partial class Transaction_BankStatementStagingDetailService: BaseService
	{
	    public BusinessResponse<List<Transaction_BankStatementStagingDetail>> GetAllTransaction_BankStatementStagingDetail(bool shouldRemap=false)
        {
            BusinessResponse<List<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<List<Transaction_BankStatementStagingDetail>>();
		    try
		    {
			    response.Result = GetAllTransaction_BankStatementStagingDetailRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailRaw(bool shouldRemap=false)
        {
            return daoFactory.Transaction_BankStatementStagingDetailDao.GetAllTransaction_BankStatementStagingDetail(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> GetAllTransaction_BankStatementStagingDetailByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>>();
		    try
		    {
			    response.Result = GetAllTransaction_BankStatementStagingDetailByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
        {
            return daoFactory.Transaction_BankStatementStagingDetailDao.GetAllTransaction_BankStatementStagingDetailByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> GetAllTransaction_BankStatementStagingDetailWithBankStatementStagingDetailDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = null,bool shouldRemap=false, Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
			{
				return GetAllTransaction_BankStatementStagingDetailByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingDetail"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> GetAllTransaction_BankStatementStagingDetailWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression = null,bool shouldRemap=false, Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
			{
				return GetAllTransaction_BankStatementStagingDetailByPage(sortingPagingInfo, expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> GetAllTransaction_BankStatementStagingDetailWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllTransaction_BankStatementStagingDetailWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Transaction_BankStatementStagingDetailDao.GetAllTransaction_BankStatementStagingDetailWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Transaction_BankStatementStagingDetail>> GetTransaction_BankStatementStagingDetailListByIdList(List<long> transaction_BankStatementStagingDetailIds)
        {
            BusinessResponse<List<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<List<Transaction_BankStatementStagingDetail>>();
            try
            {
                response.Result = GetTransaction_BankStatementStagingDetailListByIdListRaw(transaction_BankStatementStagingDetailIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Transaction_BankStatementStagingDetail> GetTransaction_BankStatementStagingDetailListByIdListRaw(List<long> transaction_BankStatementStagingDetailIds)
        {
            return daoFactory.Transaction_BankStatementStagingDetailDao.GetTransaction_BankStatementStagingDetailListByIdList(transaction_BankStatementStagingDetailIds);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> GetAllTransaction_BankStatementStagingDetailWithBankStatementStagingDetailDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllTransaction_BankStatementStagingDetailWithBankStatementStagingDetailDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailWithBankStatementStagingDetailDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransaction_BankStatementStagingDetailWitDetailsRaw(new List<string>() { "BankStatementStagingDetail" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetail(long idBankStatementStagingDetail)
        {
            BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetailRaw(idBankStatementStagingDetail);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetailRaw(long idBankStatementStagingDetail)
        {
            return daoFactory.Transaction_BankStatementStagingDetailDao.GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetail(idBankStatementStagingDetail);
        }

        public BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetailByPage(long idBankStatementStagingDetail, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetailByPageRaw(idBankStatementStagingDetail, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetailByPageRaw(long idBankStatementStagingDetail,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Transaction_BankStatementStagingDetailDao.GetAllTransaction_BankStatementStagingDetailListByBankStatementStagingDetailByPage(idBankStatementStagingDetail, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> GetAllTransaction_BankStatementStagingDetailWithTransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllTransaction_BankStatementStagingDetailWithTransactionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailWithTransactionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransaction_BankStatementStagingDetailWitDetailsRaw(new List<string>() { "Transaction" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> GetAllTransaction_BankStatementStagingDetailListByTransaction(long idTransaction)
        {
            BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllTransaction_BankStatementStagingDetailListByTransactionRaw(idTransaction);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailListByTransactionRaw(long idTransaction)
        {
            return daoFactory.Transaction_BankStatementStagingDetailDao.GetAllTransaction_BankStatementStagingDetailListByTransaction(idTransaction);
        }

        public BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> GetAllTransaction_BankStatementStagingDetailListByTransactionByPage(long idTransaction, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>>();
            try
            {
                response.Result = GetAllTransaction_BankStatementStagingDetailListByTransactionByPageRaw(idTransaction, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_BankStatementStagingDetail> GetAllTransaction_BankStatementStagingDetailListByTransactionByPageRaw(long idTransaction,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Transaction_BankStatementStagingDetailDao.GetAllTransaction_BankStatementStagingDetailListByTransactionByPage(idTransaction, sortingPagingInfo);
        }

		
		



		public BusinessResponse<Transaction_BankStatementStagingDetail> GetTransaction_BankStatementStagingDetailWithBankStatementStagingDetailDetails(long idTransaction_BankStatementStagingDetail,bool shouldRemap=false)
        {
            BusinessResponse<Transaction_BankStatementStagingDetail> response = new BusinessResponse<Transaction_BankStatementStagingDetail>();
            try
            {
                response.Result = GetTransaction_BankStatementStagingDetailWithBankStatementStagingDetailDetailsRaw(idTransaction_BankStatementStagingDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailWithBankStatementStagingDetailDetailsRaw(long idTransaction_BankStatementStagingDetail,bool shouldRemap=false)
        {
            return GetTransaction_BankStatementStagingDetailWitDetailsRaw(idTransaction_BankStatementStagingDetail,new List<string>() { "BankStatementStagingDetail"},shouldRemap);
        }

		



		public BusinessResponse<Transaction_BankStatementStagingDetail> GetTransaction_BankStatementStagingDetailWithTransactionDetails(long idTransaction_BankStatementStagingDetail,bool shouldRemap=false)
        {
            BusinessResponse<Transaction_BankStatementStagingDetail> response = new BusinessResponse<Transaction_BankStatementStagingDetail>();
            try
            {
                response.Result = GetTransaction_BankStatementStagingDetailWithTransactionDetailsRaw(idTransaction_BankStatementStagingDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailWithTransactionDetailsRaw(long idTransaction_BankStatementStagingDetail,bool shouldRemap=false)
        {
            return GetTransaction_BankStatementStagingDetailWitDetailsRaw(idTransaction_BankStatementStagingDetail,new List<string>() { "Transaction"},shouldRemap);
        }

		
        public BusinessResponse<Transaction_BankStatementStagingDetail> GetTransaction_BankStatementStagingDetail(long idTransaction_BankStatementStagingDetail,bool shouldRemap=false)
        {
            BusinessResponse<Transaction_BankStatementStagingDetail> response = new BusinessResponse<Transaction_BankStatementStagingDetail>();
		    try
		    {
			    response.Result = GetTransaction_BankStatementStagingDetailRaw(idTransaction_BankStatementStagingDetail,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailRaw(long idTransaction_BankStatementStagingDetail,bool shouldRemap=false)
        {
            return daoFactory.Transaction_BankStatementStagingDetailDao.GetTransaction_BankStatementStagingDetail(idTransaction_BankStatementStagingDetail,shouldRemap);
        }

        
        public BusinessResponse<Transaction_BankStatementStagingDetail> GetTransaction_BankStatementStagingDetailWitDetails(long idTransaction_BankStatementStagingDetail,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Transaction_BankStatementStagingDetail> response = new BusinessResponse<Transaction_BankStatementStagingDetail>();
		    try
		    {
			    response.Result = GetTransaction_BankStatementStagingDetailWitDetailsRaw(idTransaction_BankStatementStagingDetail,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailWitDetailsRaw(long idTransaction_BankStatementStagingDetail,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Transaction_BankStatementStagingDetailDao.GetTransaction_BankStatementStagingDetailWitDetails(idTransaction_BankStatementStagingDetail,shouldRemap);
        }


		 public BusinessResponse<Transaction_BankStatementStagingDetail> GetTransaction_BankStatementStagingDetailCustom( Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Transaction_BankStatementStagingDetail> response = new BusinessResponse<Transaction_BankStatementStagingDetail>();
		    try
		    {
			    response.Result = GetTransaction_BankStatementStagingDetailCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Transaction_BankStatementStagingDetail GetTransaction_BankStatementStagingDetailCustomRaw( Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.Transaction_BankStatementStagingDetailDao.GetTransaction_BankStatementStagingDetailCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> GetTransaction_BankStatementStagingDetailCustomList( Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>> response = new BusinessResponse<BaseListReturnType<Transaction_BankStatementStagingDetail>>();
		    try
		    {
			    response.Result = GetTransaction_BankStatementStagingDetailCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Transaction_BankStatementStagingDetail> GetTransaction_BankStatementStagingDetailCustomListRaw( Expression<Func<Transaction_BankStatementStagingDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Transaction_BankStatementStagingDetail, dynamic> orderExpression = null)
		{
            return daoFactory.Transaction_BankStatementStagingDetailDao.GetTransaction_BankStatementStagingDetailCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransaction_BankStatementStagingDetail(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransaction_BankStatementStagingDetailRaw(transaction_BankStatementStagingDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransaction_BankStatementStagingDetailRaw(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail)
        {
            daoFactory.Transaction_BankStatementStagingDetailDao.SaveTransaction_BankStatementStagingDetail(transaction_BankStatementStagingDetail);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransaction_BankStatementStagingDetail(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransaction_BankStatementStagingDetailRaw(transaction_BankStatementStagingDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransaction_BankStatementStagingDetailRaw(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail)
        {
            daoFactory.Transaction_BankStatementStagingDetailDao.SaveOnlyTransaction_BankStatementStagingDetail(transaction_BankStatementStagingDetail);
            return true;
        }

        public BusinessResponse<bool> DeleteTransaction_BankStatementStagingDetail(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransaction_BankStatementStagingDetailRaw(transaction_BankStatementStagingDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransaction_BankStatementStagingDetailRaw(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail)
        {
            daoFactory.Transaction_BankStatementStagingDetailDao.DeleteTransaction_BankStatementStagingDetail(transaction_BankStatementStagingDetail);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransaction_BankStatementStagingDetail(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransaction_BankStatementStagingDetailRaw(transaction_BankStatementStagingDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransaction_BankStatementStagingDetailRaw(Transaction_BankStatementStagingDetail transaction_BankStatementStagingDetail)
        {
            daoFactory.Transaction_BankStatementStagingDetailDao.DeletePermanentlyTransaction_BankStatementStagingDetail(transaction_BankStatementStagingDetail);
            return true;
        }
	}
	public partial class Transaction_MailToSendService: BaseService
	{
	    public BusinessResponse<List<Transaction_MailToSend>> GetAllTransaction_MailToSend(bool shouldRemap=false)
        {
            BusinessResponse<List<Transaction_MailToSend>> response = new BusinessResponse<List<Transaction_MailToSend>>();
		    try
		    {
			    response.Result = GetAllTransaction_MailToSendRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Transaction_MailToSend> GetAllTransaction_MailToSendRaw(bool shouldRemap=false)
        {
            return daoFactory.Transaction_MailToSendDao.GetAllTransaction_MailToSend(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Transaction_MailToSend>> GetAllTransaction_MailToSendByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_MailToSend, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Transaction_MailToSend, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Transaction_MailToSend>> response = new BusinessResponse<BaseListReturnType<Transaction_MailToSend>>();
		    try
		    {
			    response.Result = GetAllTransaction_MailToSendByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_MailToSend, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Transaction_MailToSend, dynamic> orderExpression = null)
        {
            return daoFactory.Transaction_MailToSendDao.GetAllTransaction_MailToSendByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Transaction_MailToSend>> GetAllTransaction_MailToSendWithMailToSendDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_MailToSend, bool>> expression = null,bool shouldRemap=false, Func<Transaction_MailToSend, dynamic> orderExpression = null)
			{
				return GetAllTransaction_MailToSendByPage(sortingPagingInfo, expression,new List<string>(){"MailToSend"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction_MailToSend>> GetAllTransaction_MailToSendWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_MailToSend, bool>> expression = null,bool shouldRemap=false, Func<Transaction_MailToSend, dynamic> orderExpression = null)
			{
				return GetAllTransaction_MailToSendByPage(sortingPagingInfo, expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Transaction_MailToSend>> GetAllTransaction_MailToSendWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction_MailToSend>> response = new BusinessResponse<BaseListReturnType<Transaction_MailToSend>>();
            try
            {
                response.Result = GetAllTransaction_MailToSendWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Transaction_MailToSendDao.GetAllTransaction_MailToSendWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Transaction_MailToSend>> GetTransaction_MailToSendListByIdList(List<long> transaction_MailToSendIds)
        {
            BusinessResponse<List<Transaction_MailToSend>> response = new BusinessResponse<List<Transaction_MailToSend>>();
            try
            {
                response.Result = GetTransaction_MailToSendListByIdListRaw(transaction_MailToSendIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Transaction_MailToSend> GetTransaction_MailToSendListByIdListRaw(List<long> transaction_MailToSendIds)
        {
            return daoFactory.Transaction_MailToSendDao.GetTransaction_MailToSendListByIdList(transaction_MailToSendIds);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction_MailToSend>> GetAllTransaction_MailToSendWithMailToSendDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction_MailToSend>> response = new BusinessResponse<BaseListReturnType<Transaction_MailToSend>>();
            try
            {
                response.Result = GetAllTransaction_MailToSendWithMailToSendDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendWithMailToSendDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransaction_MailToSendWitDetailsRaw(new List<string>() { "MailToSend" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction_MailToSend>> GetAllTransaction_MailToSendListByMailToSend(long idMailToSend)
        {
            BusinessResponse<BaseListReturnType<Transaction_MailToSend>> response = new BusinessResponse<BaseListReturnType<Transaction_MailToSend>>();
            try
            {
                response.Result = GetAllTransaction_MailToSendListByMailToSendRaw(idMailToSend);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendListByMailToSendRaw(long idMailToSend)
        {
            return daoFactory.Transaction_MailToSendDao.GetAllTransaction_MailToSendListByMailToSend(idMailToSend);
        }

        public BusinessResponse<BaseListReturnType<Transaction_MailToSend>> GetAllTransaction_MailToSendListByMailToSendByPage(long idMailToSend, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction_MailToSend>> response = new BusinessResponse<BaseListReturnType<Transaction_MailToSend>>();
            try
            {
                response.Result = GetAllTransaction_MailToSendListByMailToSendByPageRaw(idMailToSend, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendListByMailToSendByPageRaw(long idMailToSend,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Transaction_MailToSendDao.GetAllTransaction_MailToSendListByMailToSendByPage(idMailToSend, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction_MailToSend>> GetAllTransaction_MailToSendWithTransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction_MailToSend>> response = new BusinessResponse<BaseListReturnType<Transaction_MailToSend>>();
            try
            {
                response.Result = GetAllTransaction_MailToSendWithTransactionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendWithTransactionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransaction_MailToSendWitDetailsRaw(new List<string>() { "Transaction" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction_MailToSend>> GetAllTransaction_MailToSendListByTransaction(long idTransaction)
        {
            BusinessResponse<BaseListReturnType<Transaction_MailToSend>> response = new BusinessResponse<BaseListReturnType<Transaction_MailToSend>>();
            try
            {
                response.Result = GetAllTransaction_MailToSendListByTransactionRaw(idTransaction);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendListByTransactionRaw(long idTransaction)
        {
            return daoFactory.Transaction_MailToSendDao.GetAllTransaction_MailToSendListByTransaction(idTransaction);
        }

        public BusinessResponse<BaseListReturnType<Transaction_MailToSend>> GetAllTransaction_MailToSendListByTransactionByPage(long idTransaction, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction_MailToSend>> response = new BusinessResponse<BaseListReturnType<Transaction_MailToSend>>();
            try
            {
                response.Result = GetAllTransaction_MailToSendListByTransactionByPageRaw(idTransaction, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_MailToSend> GetAllTransaction_MailToSendListByTransactionByPageRaw(long idTransaction,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Transaction_MailToSendDao.GetAllTransaction_MailToSendListByTransactionByPage(idTransaction, sortingPagingInfo);
        }

		
		



		public BusinessResponse<Transaction_MailToSend> GetTransaction_MailToSendWithMailToSendDetails(long idTransaction_MailToSend,bool shouldRemap=false)
        {
            BusinessResponse<Transaction_MailToSend> response = new BusinessResponse<Transaction_MailToSend>();
            try
            {
                response.Result = GetTransaction_MailToSendWithMailToSendDetailsRaw(idTransaction_MailToSend,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction_MailToSend GetTransaction_MailToSendWithMailToSendDetailsRaw(long idTransaction_MailToSend,bool shouldRemap=false)
        {
            return GetTransaction_MailToSendWitDetailsRaw(idTransaction_MailToSend,new List<string>() { "MailToSend"},shouldRemap);
        }

		



		public BusinessResponse<Transaction_MailToSend> GetTransaction_MailToSendWithTransactionDetails(long idTransaction_MailToSend,bool shouldRemap=false)
        {
            BusinessResponse<Transaction_MailToSend> response = new BusinessResponse<Transaction_MailToSend>();
            try
            {
                response.Result = GetTransaction_MailToSendWithTransactionDetailsRaw(idTransaction_MailToSend,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction_MailToSend GetTransaction_MailToSendWithTransactionDetailsRaw(long idTransaction_MailToSend,bool shouldRemap=false)
        {
            return GetTransaction_MailToSendWitDetailsRaw(idTransaction_MailToSend,new List<string>() { "Transaction"},shouldRemap);
        }

		
        public BusinessResponse<Transaction_MailToSend> GetTransaction_MailToSend(long idTransaction_MailToSend,bool shouldRemap=false)
        {
            BusinessResponse<Transaction_MailToSend> response = new BusinessResponse<Transaction_MailToSend>();
		    try
		    {
			    response.Result = GetTransaction_MailToSendRaw(idTransaction_MailToSend,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Transaction_MailToSend GetTransaction_MailToSendRaw(long idTransaction_MailToSend,bool shouldRemap=false)
        {
            return daoFactory.Transaction_MailToSendDao.GetTransaction_MailToSend(idTransaction_MailToSend,shouldRemap);
        }

        
        public BusinessResponse<Transaction_MailToSend> GetTransaction_MailToSendWitDetails(long idTransaction_MailToSend,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Transaction_MailToSend> response = new BusinessResponse<Transaction_MailToSend>();
		    try
		    {
			    response.Result = GetTransaction_MailToSendWitDetailsRaw(idTransaction_MailToSend,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Transaction_MailToSend GetTransaction_MailToSendWitDetailsRaw(long idTransaction_MailToSend,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Transaction_MailToSendDao.GetTransaction_MailToSendWitDetails(idTransaction_MailToSend,shouldRemap);
        }


		 public BusinessResponse<Transaction_MailToSend> GetTransaction_MailToSendCustom( Expression<Func<Transaction_MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Transaction_MailToSend> response = new BusinessResponse<Transaction_MailToSend>();
		    try
		    {
			    response.Result = GetTransaction_MailToSendCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Transaction_MailToSend GetTransaction_MailToSendCustomRaw( Expression<Func<Transaction_MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.Transaction_MailToSendDao.GetTransaction_MailToSendCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Transaction_MailToSend>> GetTransaction_MailToSendCustomList( Expression<Func<Transaction_MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Transaction_MailToSend, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Transaction_MailToSend>> response = new BusinessResponse<BaseListReturnType<Transaction_MailToSend>>();
		    try
		    {
			    response.Result = GetTransaction_MailToSendCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Transaction_MailToSend> GetTransaction_MailToSendCustomListRaw( Expression<Func<Transaction_MailToSend, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Transaction_MailToSend, dynamic> orderExpression = null)
		{
            return daoFactory.Transaction_MailToSendDao.GetTransaction_MailToSendCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransaction_MailToSend(Transaction_MailToSend transaction_MailToSend)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransaction_MailToSendRaw(transaction_MailToSend);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransaction_MailToSendRaw(Transaction_MailToSend transaction_MailToSend)
        {
            daoFactory.Transaction_MailToSendDao.SaveTransaction_MailToSend(transaction_MailToSend);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransaction_MailToSend(Transaction_MailToSend transaction_MailToSend)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransaction_MailToSendRaw(transaction_MailToSend);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransaction_MailToSendRaw(Transaction_MailToSend transaction_MailToSend)
        {
            daoFactory.Transaction_MailToSendDao.SaveOnlyTransaction_MailToSend(transaction_MailToSend);
            return true;
        }

        public BusinessResponse<bool> DeleteTransaction_MailToSend(Transaction_MailToSend transaction_MailToSend)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransaction_MailToSendRaw(transaction_MailToSend);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransaction_MailToSendRaw(Transaction_MailToSend transaction_MailToSend)
        {
            daoFactory.Transaction_MailToSendDao.DeleteTransaction_MailToSend(transaction_MailToSend);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransaction_MailToSend(Transaction_MailToSend transaction_MailToSend)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransaction_MailToSendRaw(transaction_MailToSend);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransaction_MailToSendRaw(Transaction_MailToSend transaction_MailToSend)
        {
            daoFactory.Transaction_MailToSendDao.DeletePermanentlyTransaction_MailToSend(transaction_MailToSend);
            return true;
        }
	}
	public partial class Transaction_PaymentService: BaseService
	{
	    public BusinessResponse<List<Transaction_Payment>> GetAllTransaction_Payment(bool shouldRemap=false)
        {
            BusinessResponse<List<Transaction_Payment>> response = new BusinessResponse<List<Transaction_Payment>>();
		    try
		    {
			    response.Result = GetAllTransaction_PaymentRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Transaction_Payment> GetAllTransaction_PaymentRaw(bool shouldRemap=false)
        {
            return daoFactory.Transaction_PaymentDao.GetAllTransaction_Payment(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Transaction_Payment>> GetAllTransaction_PaymentByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_Payment, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Transaction_Payment, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Transaction_Payment>> response = new BusinessResponse<BaseListReturnType<Transaction_Payment>>();
		    try
		    {
			    response.Result = GetAllTransaction_PaymentByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_Payment, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Transaction_Payment, dynamic> orderExpression = null)
        {
            return daoFactory.Transaction_PaymentDao.GetAllTransaction_PaymentByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Transaction_Payment>> GetAllTransaction_PaymentWithPaymentDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_Payment, bool>> expression = null,bool shouldRemap=false, Func<Transaction_Payment, dynamic> orderExpression = null)
			{
				return GetAllTransaction_PaymentByPage(sortingPagingInfo, expression,new List<string>(){"Payment"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Transaction_Payment>> GetAllTransaction_PaymentWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Transaction_Payment, bool>> expression = null,bool shouldRemap=false, Func<Transaction_Payment, dynamic> orderExpression = null)
			{
				return GetAllTransaction_PaymentByPage(sortingPagingInfo, expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Transaction_Payment>> GetAllTransaction_PaymentWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction_Payment>> response = new BusinessResponse<BaseListReturnType<Transaction_Payment>>();
            try
            {
                response.Result = GetAllTransaction_PaymentWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Transaction_PaymentDao.GetAllTransaction_PaymentWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Transaction_Payment>> GetTransaction_PaymentListByIdList(List<long> transaction_PaymentIds)
        {
            BusinessResponse<List<Transaction_Payment>> response = new BusinessResponse<List<Transaction_Payment>>();
            try
            {
                response.Result = GetTransaction_PaymentListByIdListRaw(transaction_PaymentIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Transaction_Payment> GetTransaction_PaymentListByIdListRaw(List<long> transaction_PaymentIds)
        {
            return daoFactory.Transaction_PaymentDao.GetTransaction_PaymentListByIdList(transaction_PaymentIds);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction_Payment>> GetAllTransaction_PaymentWithPaymentDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction_Payment>> response = new BusinessResponse<BaseListReturnType<Transaction_Payment>>();
            try
            {
                response.Result = GetAllTransaction_PaymentWithPaymentDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentWithPaymentDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransaction_PaymentWitDetailsRaw(new List<string>() { "Payment" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction_Payment>> GetAllTransaction_PaymentListByPayment(long idPayment)
        {
            BusinessResponse<BaseListReturnType<Transaction_Payment>> response = new BusinessResponse<BaseListReturnType<Transaction_Payment>>();
            try
            {
                response.Result = GetAllTransaction_PaymentListByPaymentRaw(idPayment);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentListByPaymentRaw(long idPayment)
        {
            return daoFactory.Transaction_PaymentDao.GetAllTransaction_PaymentListByPayment(idPayment);
        }

        public BusinessResponse<BaseListReturnType<Transaction_Payment>> GetAllTransaction_PaymentListByPaymentByPage(long idPayment, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction_Payment>> response = new BusinessResponse<BaseListReturnType<Transaction_Payment>>();
            try
            {
                response.Result = GetAllTransaction_PaymentListByPaymentByPageRaw(idPayment, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentListByPaymentByPageRaw(long idPayment,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Transaction_PaymentDao.GetAllTransaction_PaymentListByPaymentByPage(idPayment, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<Transaction_Payment>> GetAllTransaction_PaymentWithTransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Transaction_Payment>> response = new BusinessResponse<BaseListReturnType<Transaction_Payment>>();
            try
            {
                response.Result = GetAllTransaction_PaymentWithTransactionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentWithTransactionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransaction_PaymentWitDetailsRaw(new List<string>() { "Transaction" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<Transaction_Payment>> GetAllTransaction_PaymentListByTransaction(long idTransaction)
        {
            BusinessResponse<BaseListReturnType<Transaction_Payment>> response = new BusinessResponse<BaseListReturnType<Transaction_Payment>>();
            try
            {
                response.Result = GetAllTransaction_PaymentListByTransactionRaw(idTransaction);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentListByTransactionRaw(long idTransaction)
        {
            return daoFactory.Transaction_PaymentDao.GetAllTransaction_PaymentListByTransaction(idTransaction);
        }

        public BusinessResponse<BaseListReturnType<Transaction_Payment>> GetAllTransaction_PaymentListByTransactionByPage(long idTransaction, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<Transaction_Payment>> response = new BusinessResponse<BaseListReturnType<Transaction_Payment>>();
            try
            {
                response.Result = GetAllTransaction_PaymentListByTransactionByPageRaw(idTransaction, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Transaction_Payment> GetAllTransaction_PaymentListByTransactionByPageRaw(long idTransaction,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.Transaction_PaymentDao.GetAllTransaction_PaymentListByTransactionByPage(idTransaction, sortingPagingInfo);
        }

		
		



		public BusinessResponse<Transaction_Payment> GetTransaction_PaymentWithPaymentDetails(long idTransaction_Payment,bool shouldRemap=false)
        {
            BusinessResponse<Transaction_Payment> response = new BusinessResponse<Transaction_Payment>();
            try
            {
                response.Result = GetTransaction_PaymentWithPaymentDetailsRaw(idTransaction_Payment,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction_Payment GetTransaction_PaymentWithPaymentDetailsRaw(long idTransaction_Payment,bool shouldRemap=false)
        {
            return GetTransaction_PaymentWitDetailsRaw(idTransaction_Payment,new List<string>() { "Payment"},shouldRemap);
        }

		



		public BusinessResponse<Transaction_Payment> GetTransaction_PaymentWithTransactionDetails(long idTransaction_Payment,bool shouldRemap=false)
        {
            BusinessResponse<Transaction_Payment> response = new BusinessResponse<Transaction_Payment>();
            try
            {
                response.Result = GetTransaction_PaymentWithTransactionDetailsRaw(idTransaction_Payment,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Transaction_Payment GetTransaction_PaymentWithTransactionDetailsRaw(long idTransaction_Payment,bool shouldRemap=false)
        {
            return GetTransaction_PaymentWitDetailsRaw(idTransaction_Payment,new List<string>() { "Transaction"},shouldRemap);
        }

		
        public BusinessResponse<Transaction_Payment> GetTransaction_Payment(long idTransaction_Payment,bool shouldRemap=false)
        {
            BusinessResponse<Transaction_Payment> response = new BusinessResponse<Transaction_Payment>();
		    try
		    {
			    response.Result = GetTransaction_PaymentRaw(idTransaction_Payment,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Transaction_Payment GetTransaction_PaymentRaw(long idTransaction_Payment,bool shouldRemap=false)
        {
            return daoFactory.Transaction_PaymentDao.GetTransaction_Payment(idTransaction_Payment,shouldRemap);
        }

        
        public BusinessResponse<Transaction_Payment> GetTransaction_PaymentWitDetails(long idTransaction_Payment,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Transaction_Payment> response = new BusinessResponse<Transaction_Payment>();
		    try
		    {
			    response.Result = GetTransaction_PaymentWitDetailsRaw(idTransaction_Payment,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Transaction_Payment GetTransaction_PaymentWitDetailsRaw(long idTransaction_Payment,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.Transaction_PaymentDao.GetTransaction_PaymentWitDetails(idTransaction_Payment,shouldRemap);
        }


		 public BusinessResponse<Transaction_Payment> GetTransaction_PaymentCustom( Expression<Func<Transaction_Payment, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Transaction_Payment> response = new BusinessResponse<Transaction_Payment>();
		    try
		    {
			    response.Result = GetTransaction_PaymentCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Transaction_Payment GetTransaction_PaymentCustomRaw( Expression<Func<Transaction_Payment, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.Transaction_PaymentDao.GetTransaction_PaymentCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Transaction_Payment>> GetTransaction_PaymentCustomList( Expression<Func<Transaction_Payment, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Transaction_Payment, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Transaction_Payment>> response = new BusinessResponse<BaseListReturnType<Transaction_Payment>>();
		    try
		    {
			    response.Result = GetTransaction_PaymentCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Transaction_Payment> GetTransaction_PaymentCustomListRaw( Expression<Func<Transaction_Payment, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Transaction_Payment, dynamic> orderExpression = null)
		{
            return daoFactory.Transaction_PaymentDao.GetTransaction_PaymentCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransaction_Payment(Transaction_Payment transaction_Payment)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransaction_PaymentRaw(transaction_Payment);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransaction_PaymentRaw(Transaction_Payment transaction_Payment)
        {
            daoFactory.Transaction_PaymentDao.SaveTransaction_Payment(transaction_Payment);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransaction_Payment(Transaction_Payment transaction_Payment)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransaction_PaymentRaw(transaction_Payment);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransaction_PaymentRaw(Transaction_Payment transaction_Payment)
        {
            daoFactory.Transaction_PaymentDao.SaveOnlyTransaction_Payment(transaction_Payment);
            return true;
        }

        public BusinessResponse<bool> DeleteTransaction_Payment(Transaction_Payment transaction_Payment)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransaction_PaymentRaw(transaction_Payment);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransaction_PaymentRaw(Transaction_Payment transaction_Payment)
        {
            daoFactory.Transaction_PaymentDao.DeleteTransaction_Payment(transaction_Payment);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransaction_Payment(Transaction_Payment transaction_Payment)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransaction_PaymentRaw(transaction_Payment);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransaction_PaymentRaw(Transaction_Payment transaction_Payment)
        {
            daoFactory.Transaction_PaymentDao.DeletePermanentlyTransaction_Payment(transaction_Payment);
            return true;
        }
	}
	public partial class TransactionAccountService: BaseService
	{
	    public BusinessResponse<List<TransactionAccount>> GetAllTransactionAccounts(bool shouldRemap=false)
        {
            BusinessResponse<List<TransactionAccount>> response = new BusinessResponse<List<TransactionAccount>>();
		    try
		    {
			    response.Result = GetAllTransactionAccountsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TransactionAccount> GetAllTransactionAccountsRaw(bool shouldRemap=false)
        {
            return daoFactory.TransactionAccountDao.GetAllTransactionAccounts(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TransactionAccount>> GetAllTransactionAccountsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionAccount, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TransactionAccount>> response = new BusinessResponse<BaseListReturnType<TransactionAccount>>();
		    try
		    {
			    response.Result = GetAllTransactionAccountsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TransactionAccount> GetAllTransactionAccountsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionAccount, dynamic> orderExpression = null)
        {
            return daoFactory.TransactionAccountDao.GetAllTransactionAccountsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TransactionAccount>> GetAllTransactionAccountsWithTransactionPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null,bool shouldRemap=false, Func<TransactionAccount, dynamic> orderExpression = null)
			{
				return GetAllTransactionAccountsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionAccount>> GetAllTransactionAccountsWithBanksDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null,bool shouldRemap=false, Func<TransactionAccount, dynamic> orderExpression = null)
			{
				return GetAllTransactionAccountsByPage(sortingPagingInfo, expression,new List<string>(){"Banks"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionAccount>> GetAllTransactionAccountsWithTransactionAccountTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null,bool shouldRemap=false, Func<TransactionAccount, dynamic> orderExpression = null)
			{
				return GetAllTransactionAccountsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionAccountType"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionAccount>> GetAllTransactionAccountsWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccount, bool>> expression = null,bool shouldRemap=false, Func<TransactionAccount, dynamic> orderExpression = null)
			{
				return GetAllTransactionAccountsByPage(sortingPagingInfo, expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TransactionAccount>> GetAllTransactionAccountWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionAccount>> response = new BusinessResponse<BaseListReturnType<TransactionAccount>>();
            try
            {
                response.Result = GetAllTransactionAccountWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionAccount> GetAllTransactionAccountWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionAccountDao.GetAllTransactionAccountWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TransactionAccount>> GetTransactionAccountListByIdList(List<long> transactionAccountIds)
        {
            BusinessResponse<List<TransactionAccount>> response = new BusinessResponse<List<TransactionAccount>>();
            try
            {
                response.Result = GetTransactionAccountListByIdListRaw(transactionAccountIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TransactionAccount> GetTransactionAccountListByIdListRaw(List<long> transactionAccountIds)
        {
            return daoFactory.TransactionAccountDao.GetTransactionAccountListByIdList(transactionAccountIds);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionAccount>> GetAllTransactionAccountsWithTransactionPresetsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionAccount>> response = new BusinessResponse<BaseListReturnType<TransactionAccount>>();
            try
            {
                response.Result = GetAllTransactionAccountsWithTransactionPresetsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithTransactionPresetsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionAccountWitDetailsRaw(new List<string>() { "TransactionPresets" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TransactionAccount>> GetAllTransactionAccountsWithBanksDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionAccount>> response = new BusinessResponse<BaseListReturnType<TransactionAccount>>();
            try
            {
                response.Result = GetAllTransactionAccountsWithBanksDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithBanksDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionAccountWitDetailsRaw(new List<string>() { "Banks" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TransactionAccount>> GetAllTransactionAccountsWithTransactionAccountTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionAccount>> response = new BusinessResponse<BaseListReturnType<TransactionAccount>>();
            try
            {
                response.Result = GetAllTransactionAccountsWithTransactionAccountTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithTransactionAccountTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionAccountWitDetailsRaw(new List<string>() { "TransactionAccountType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionAccount>> GetAllTransactionAccountListByTransactionAccountType(long idTransactionAccountType)
        {
            BusinessResponse<BaseListReturnType<TransactionAccount>> response = new BusinessResponse<BaseListReturnType<TransactionAccount>>();
            try
            {
                response.Result = GetAllTransactionAccountListByTransactionAccountTypeRaw(idTransactionAccountType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionAccount> GetAllTransactionAccountListByTransactionAccountTypeRaw(long idTransactionAccountType)
        {
            return daoFactory.TransactionAccountDao.GetAllTransactionAccountListByTransactionAccountType(idTransactionAccountType);
        }

        public BusinessResponse<BaseListReturnType<TransactionAccount>> GetAllTransactionAccountListByTransactionAccountTypeByPage(long idTransactionAccountType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionAccount>> response = new BusinessResponse<BaseListReturnType<TransactionAccount>>();
            try
            {
                response.Result = GetAllTransactionAccountListByTransactionAccountTypeByPageRaw(idTransactionAccountType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionAccount> GetAllTransactionAccountListByTransactionAccountTypeByPageRaw(long idTransactionAccountType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionAccountDao.GetAllTransactionAccountListByTransactionAccountTypeByPage(idTransactionAccountType, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionAccount>> GetAllTransactionAccountsWithTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionAccount>> response = new BusinessResponse<BaseListReturnType<TransactionAccount>>();
            try
            {
                response.Result = GetAllTransactionAccountsWithTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionAccount> GetAllTransactionAccountsWithTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionAccountWitDetailsRaw(new List<string>() { "Transactions" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<TransactionPreset>>  UpdateTransactionPresetsForTransactionAccountWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idTransactionAccount)
            {
                BusinessResponse<List<TransactionPreset>> response = new BusinessResponse<List<TransactionPreset>>();
                try
                {
                    response.Result = UpdateTransactionPresetsForTransactionAccountWithoutSavingNewItemRaw(newTransactionPresets, idTransactionAccount);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionPreset> UpdateTransactionPresetsForTransactionAccountWithoutSavingNewItemRaw(List<TransactionPreset> newTransactionPresets,long idTransactionAccount)
            {
                return daoFactory.TransactionAccountDao.UpdateTransactionPresetsForTransactionAccountWithoutSavingNewItem(newTransactionPresets,idTransactionAccount); 
            }



		    public BusinessResponse<List<TransactionPreset>>  UpdateTransactionPresetsForTransactionAccount(List<TransactionPreset> newTransactionPresets,long idTransactionAccount)
            {
                BusinessResponse<List<TransactionPreset>> response = new BusinessResponse<List<TransactionPreset>>();
                try
                {
                    response.Result = UpdateTransactionPresetsForTransactionAccountRaw(newTransactionPresets, idTransactionAccount);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionPreset> UpdateTransactionPresetsForTransactionAccountRaw(List<TransactionPreset> newTransactionPresets,long idTransactionAccount)
            {
                return daoFactory.TransactionAccountDao.UpdateTransactionPresetsForTransactionAccount(newTransactionPresets,idTransactionAccount); 
            }





		public BusinessResponse<TransactionAccount> GetTransactionAccountWithTransactionPresetsDetails(long idTransactionAccount,bool shouldRemap=false)
        {
            BusinessResponse<TransactionAccount> response = new BusinessResponse<TransactionAccount>();
            try
            {
                response.Result = GetTransactionAccountWithTransactionPresetsDetailsRaw(idTransactionAccount,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionAccount GetTransactionAccountWithTransactionPresetsDetailsRaw(long idTransactionAccount,bool shouldRemap=false)
        {
            return GetTransactionAccountWitDetailsRaw(idTransactionAccount,new List<string>() { "TransactionPresets"},shouldRemap);
        }

		
			public BusinessResponse<List<Bank>>  UpdateBanksForTransactionAccountWithoutSavingNewItem(List<Bank> newBanks,long idTransactionAccount)
            {
                BusinessResponse<List<Bank>> response = new BusinessResponse<List<Bank>>();
                try
                {
                    response.Result = UpdateBanksForTransactionAccountWithoutSavingNewItemRaw(newBanks, idTransactionAccount);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Bank> UpdateBanksForTransactionAccountWithoutSavingNewItemRaw(List<Bank> newBanks,long idTransactionAccount)
            {
                return daoFactory.TransactionAccountDao.UpdateBanksForTransactionAccountWithoutSavingNewItem(newBanks,idTransactionAccount); 
            }



		    public BusinessResponse<List<Bank>>  UpdateBanksForTransactionAccount(List<Bank> newBanks,long idTransactionAccount)
            {
                BusinessResponse<List<Bank>> response = new BusinessResponse<List<Bank>>();
                try
                {
                    response.Result = UpdateBanksForTransactionAccountRaw(newBanks, idTransactionAccount);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Bank> UpdateBanksForTransactionAccountRaw(List<Bank> newBanks,long idTransactionAccount)
            {
                return daoFactory.TransactionAccountDao.UpdateBanksForTransactionAccount(newBanks,idTransactionAccount); 
            }





		public BusinessResponse<TransactionAccount> GetTransactionAccountWithBanksDetails(long idTransactionAccount,bool shouldRemap=false)
        {
            BusinessResponse<TransactionAccount> response = new BusinessResponse<TransactionAccount>();
            try
            {
                response.Result = GetTransactionAccountWithBanksDetailsRaw(idTransactionAccount,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionAccount GetTransactionAccountWithBanksDetailsRaw(long idTransactionAccount,bool shouldRemap=false)
        {
            return GetTransactionAccountWitDetailsRaw(idTransactionAccount,new List<string>() { "Banks"},shouldRemap);
        }

		



		public BusinessResponse<TransactionAccount> GetTransactionAccountWithTransactionAccountTypeDetails(long idTransactionAccount,bool shouldRemap=false)
        {
            BusinessResponse<TransactionAccount> response = new BusinessResponse<TransactionAccount>();
            try
            {
                response.Result = GetTransactionAccountWithTransactionAccountTypeDetailsRaw(idTransactionAccount,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionAccount GetTransactionAccountWithTransactionAccountTypeDetailsRaw(long idTransactionAccount,bool shouldRemap=false)
        {
            return GetTransactionAccountWitDetailsRaw(idTransactionAccount,new List<string>() { "TransactionAccountType"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction>>  UpdateTransactionsForTransactionAccountWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionAccount)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForTransactionAccountWithoutSavingNewItemRaw(newTransactions, idTransactionAccount);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForTransactionAccountWithoutSavingNewItemRaw(List<Transaction> newTransactions,long idTransactionAccount)
            {
                return daoFactory.TransactionAccountDao.UpdateTransactionsForTransactionAccountWithoutSavingNewItem(newTransactions,idTransactionAccount); 
            }



		    public BusinessResponse<List<Transaction>>  UpdateTransactionsForTransactionAccount(List<Transaction> newTransactions,long idTransactionAccount)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForTransactionAccountRaw(newTransactions, idTransactionAccount);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForTransactionAccountRaw(List<Transaction> newTransactions,long idTransactionAccount)
            {
                return daoFactory.TransactionAccountDao.UpdateTransactionsForTransactionAccount(newTransactions,idTransactionAccount); 
            }





		public BusinessResponse<TransactionAccount> GetTransactionAccountWithTransactionsDetails(long idTransactionAccount,bool shouldRemap=false)
        {
            BusinessResponse<TransactionAccount> response = new BusinessResponse<TransactionAccount>();
            try
            {
                response.Result = GetTransactionAccountWithTransactionsDetailsRaw(idTransactionAccount,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionAccount GetTransactionAccountWithTransactionsDetailsRaw(long idTransactionAccount,bool shouldRemap=false)
        {
            return GetTransactionAccountWitDetailsRaw(idTransactionAccount,new List<string>() { "Transactions"},shouldRemap);
        }

		
        public BusinessResponse<TransactionAccount> GetTransactionAccount(long idTransactionAccount,bool shouldRemap=false)
        {
            BusinessResponse<TransactionAccount> response = new BusinessResponse<TransactionAccount>();
		    try
		    {
			    response.Result = GetTransactionAccountsRaw(idTransactionAccount,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionAccount GetTransactionAccountsRaw(long idTransactionAccount,bool shouldRemap=false)
        {
            return daoFactory.TransactionAccountDao.GetTransactionAccount(idTransactionAccount,shouldRemap);
        }

        
        public BusinessResponse<TransactionAccount> GetTransactionAccountWitDetails(long idTransactionAccount,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TransactionAccount> response = new BusinessResponse<TransactionAccount>();
		    try
		    {
			    response.Result = GetTransactionAccountWitDetailsRaw(idTransactionAccount,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionAccount GetTransactionAccountWitDetailsRaw(long idTransactionAccount,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionAccountDao.GetTransactionAccountWitDetails(idTransactionAccount,shouldRemap);
        }


		 public BusinessResponse<TransactionAccount> GetTransactionAccountCustom( Expression<Func<TransactionAccount, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TransactionAccount> response = new BusinessResponse<TransactionAccount>();
		    try
		    {
			    response.Result = GetTransactionAccountCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TransactionAccount GetTransactionAccountCustomRaw( Expression<Func<TransactionAccount, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TransactionAccountDao.GetTransactionAccountCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TransactionAccount>> GetTransactionAccountCustomList( Expression<Func<TransactionAccount, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionAccount, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TransactionAccount>> response = new BusinessResponse<BaseListReturnType<TransactionAccount>>();
		    try
		    {
			    response.Result = GetTransactionAccountCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TransactionAccount> GetTransactionAccountCustomListRaw( Expression<Func<TransactionAccount, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionAccount, dynamic> orderExpression = null)
		{
            return daoFactory.TransactionAccountDao.GetTransactionAccountCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransactionAccount(TransactionAccount transactionAccount)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransactionAccountRaw(transactionAccount);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransactionAccountRaw(TransactionAccount transactionAccount)
        {
            daoFactory.TransactionAccountDao.SaveTransactionAccount(transactionAccount);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransactionAccount(TransactionAccount transactionAccount)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransactionAccountRaw(transactionAccount);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransactionAccountRaw(TransactionAccount transactionAccount)
        {
            daoFactory.TransactionAccountDao.SaveOnlyTransactionAccount(transactionAccount);
            return true;
        }

        public BusinessResponse<bool> DeleteTransactionAccount(TransactionAccount transactionAccount)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransactionAccountRaw(transactionAccount);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransactionAccountRaw(TransactionAccount transactionAccount)
        {
            daoFactory.TransactionAccountDao.DeleteTransactionAccount(transactionAccount);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransactionAccount(TransactionAccount transactionAccount)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransactionAccountRaw(transactionAccount);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransactionAccountRaw(TransactionAccount transactionAccount)
        {
            daoFactory.TransactionAccountDao.DeletePermanentlyTransactionAccount(transactionAccount);
            return true;
        }
	}
	public partial class TransactionAccountTypeService: BaseService
	{
	    public BusinessResponse<List<TransactionAccountType>> GetAllTransactionAccountTypes(bool shouldRemap=false)
        {
            BusinessResponse<List<TransactionAccountType>> response = new BusinessResponse<List<TransactionAccountType>>();
		    try
		    {
			    response.Result = GetAllTransactionAccountTypesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TransactionAccountType> GetAllTransactionAccountTypesRaw(bool shouldRemap=false)
        {
            return daoFactory.TransactionAccountTypeDao.GetAllTransactionAccountTypes(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TransactionAccountType>> GetAllTransactionAccountTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccountType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionAccountType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TransactionAccountType>> response = new BusinessResponse<BaseListReturnType<TransactionAccountType>>();
		    try
		    {
			    response.Result = GetAllTransactionAccountTypesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TransactionAccountType> GetAllTransactionAccountTypesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccountType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionAccountType, dynamic> orderExpression = null)
        {
            return daoFactory.TransactionAccountTypeDao.GetAllTransactionAccountTypesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TransactionAccountType>> GetAllTransactionAccountTypesWithTransactionAccountsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionAccountType, bool>> expression = null,bool shouldRemap=false, Func<TransactionAccountType, dynamic> orderExpression = null)
			{
				return GetAllTransactionAccountTypesByPage(sortingPagingInfo, expression,new List<string>(){"TransactionAccounts"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TransactionAccountType>> GetAllTransactionAccountTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionAccountType>> response = new BusinessResponse<BaseListReturnType<TransactionAccountType>>();
            try
            {
                response.Result = GetAllTransactionAccountTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionAccountType> GetAllTransactionAccountTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionAccountTypeDao.GetAllTransactionAccountTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TransactionAccountType>> GetTransactionAccountTypeListByIdList(List<long> transactionAccountTypeIds)
        {
            BusinessResponse<List<TransactionAccountType>> response = new BusinessResponse<List<TransactionAccountType>>();
            try
            {
                response.Result = GetTransactionAccountTypeListByIdListRaw(transactionAccountTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TransactionAccountType> GetTransactionAccountTypeListByIdListRaw(List<long> transactionAccountTypeIds)
        {
            return daoFactory.TransactionAccountTypeDao.GetTransactionAccountTypeListByIdList(transactionAccountTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionAccountType>> GetAllTransactionAccountTypesWithTransactionAccountsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionAccountType>> response = new BusinessResponse<BaseListReturnType<TransactionAccountType>>();
            try
            {
                response.Result = GetAllTransactionAccountTypesWithTransactionAccountsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionAccountType> GetAllTransactionAccountTypesWithTransactionAccountsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionAccountTypeWitDetailsRaw(new List<string>() { "TransactionAccounts" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<TransactionAccount>>  UpdateTransactionAccountsForTransactionAccountTypeWithoutSavingNewItem(List<TransactionAccount> newTransactionAccounts,long idTransactionAccountType)
            {
                BusinessResponse<List<TransactionAccount>> response = new BusinessResponse<List<TransactionAccount>>();
                try
                {
                    response.Result = UpdateTransactionAccountsForTransactionAccountTypeWithoutSavingNewItemRaw(newTransactionAccounts, idTransactionAccountType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionAccount> UpdateTransactionAccountsForTransactionAccountTypeWithoutSavingNewItemRaw(List<TransactionAccount> newTransactionAccounts,long idTransactionAccountType)
            {
                return daoFactory.TransactionAccountTypeDao.UpdateTransactionAccountsForTransactionAccountTypeWithoutSavingNewItem(newTransactionAccounts,idTransactionAccountType); 
            }



		    public BusinessResponse<List<TransactionAccount>>  UpdateTransactionAccountsForTransactionAccountType(List<TransactionAccount> newTransactionAccounts,long idTransactionAccountType)
            {
                BusinessResponse<List<TransactionAccount>> response = new BusinessResponse<List<TransactionAccount>>();
                try
                {
                    response.Result = UpdateTransactionAccountsForTransactionAccountTypeRaw(newTransactionAccounts, idTransactionAccountType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionAccount> UpdateTransactionAccountsForTransactionAccountTypeRaw(List<TransactionAccount> newTransactionAccounts,long idTransactionAccountType)
            {
                return daoFactory.TransactionAccountTypeDao.UpdateTransactionAccountsForTransactionAccountType(newTransactionAccounts,idTransactionAccountType); 
            }





		public BusinessResponse<TransactionAccountType> GetTransactionAccountTypeWithTransactionAccountsDetails(long idTransactionAccountType,bool shouldRemap=false)
        {
            BusinessResponse<TransactionAccountType> response = new BusinessResponse<TransactionAccountType>();
            try
            {
                response.Result = GetTransactionAccountTypeWithTransactionAccountsDetailsRaw(idTransactionAccountType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionAccountType GetTransactionAccountTypeWithTransactionAccountsDetailsRaw(long idTransactionAccountType,bool shouldRemap=false)
        {
            return GetTransactionAccountTypeWitDetailsRaw(idTransactionAccountType,new List<string>() { "TransactionAccounts"},shouldRemap);
        }

		
        public BusinessResponse<TransactionAccountType> GetTransactionAccountType(long idTransactionAccountType,bool shouldRemap=false)
        {
            BusinessResponse<TransactionAccountType> response = new BusinessResponse<TransactionAccountType>();
		    try
		    {
			    response.Result = GetTransactionAccountTypesRaw(idTransactionAccountType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionAccountType GetTransactionAccountTypesRaw(long idTransactionAccountType,bool shouldRemap=false)
        {
            return daoFactory.TransactionAccountTypeDao.GetTransactionAccountType(idTransactionAccountType,shouldRemap);
        }

        
        public BusinessResponse<TransactionAccountType> GetTransactionAccountTypeWitDetails(long idTransactionAccountType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TransactionAccountType> response = new BusinessResponse<TransactionAccountType>();
		    try
		    {
			    response.Result = GetTransactionAccountTypeWitDetailsRaw(idTransactionAccountType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionAccountType GetTransactionAccountTypeWitDetailsRaw(long idTransactionAccountType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionAccountTypeDao.GetTransactionAccountTypeWitDetails(idTransactionAccountType,shouldRemap);
        }


		 public BusinessResponse<TransactionAccountType> GetTransactionAccountTypeCustom( Expression<Func<TransactionAccountType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TransactionAccountType> response = new BusinessResponse<TransactionAccountType>();
		    try
		    {
			    response.Result = GetTransactionAccountTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TransactionAccountType GetTransactionAccountTypeCustomRaw( Expression<Func<TransactionAccountType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TransactionAccountTypeDao.GetTransactionAccountTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TransactionAccountType>> GetTransactionAccountTypeCustomList( Expression<Func<TransactionAccountType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionAccountType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TransactionAccountType>> response = new BusinessResponse<BaseListReturnType<TransactionAccountType>>();
		    try
		    {
			    response.Result = GetTransactionAccountTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TransactionAccountType> GetTransactionAccountTypeCustomListRaw( Expression<Func<TransactionAccountType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionAccountType, dynamic> orderExpression = null)
		{
            return daoFactory.TransactionAccountTypeDao.GetTransactionAccountTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransactionAccountType(TransactionAccountType transactionAccountType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransactionAccountTypeRaw(transactionAccountType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransactionAccountTypeRaw(TransactionAccountType transactionAccountType)
        {
            daoFactory.TransactionAccountTypeDao.SaveTransactionAccountType(transactionAccountType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransactionAccountType(TransactionAccountType transactionAccountType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransactionAccountTypeRaw(transactionAccountType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransactionAccountTypeRaw(TransactionAccountType transactionAccountType)
        {
            daoFactory.TransactionAccountTypeDao.SaveOnlyTransactionAccountType(transactionAccountType);
            return true;
        }

        public BusinessResponse<bool> DeleteTransactionAccountType(TransactionAccountType transactionAccountType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransactionAccountTypeRaw(transactionAccountType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransactionAccountTypeRaw(TransactionAccountType transactionAccountType)
        {
            daoFactory.TransactionAccountTypeDao.DeleteTransactionAccountType(transactionAccountType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransactionAccountType(TransactionAccountType transactionAccountType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransactionAccountTypeRaw(transactionAccountType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransactionAccountTypeRaw(TransactionAccountType transactionAccountType)
        {
            daoFactory.TransactionAccountTypeDao.DeletePermanentlyTransactionAccountType(transactionAccountType);
            return true;
        }
	}
	public partial class TransactionClassService: BaseService
	{
	    public BusinessResponse<List<TransactionClass>> GetAllTransactionClasses(bool shouldRemap=false)
        {
            BusinessResponse<List<TransactionClass>> response = new BusinessResponse<List<TransactionClass>>();
		    try
		    {
			    response.Result = GetAllTransactionClassesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TransactionClass> GetAllTransactionClassesRaw(bool shouldRemap=false)
        {
            return daoFactory.TransactionClassDao.GetAllTransactionClasses(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionClass, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TransactionClass>> response = new BusinessResponse<BaseListReturnType<TransactionClass>>();
		    try
		    {
			    response.Result = GetAllTransactionClassesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TransactionClass> GetAllTransactionClassesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionClass, dynamic> orderExpression = null)
        {
            return daoFactory.TransactionClassDao.GetAllTransactionClassesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesWithTransactionDetailPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap=false, Func<TransactionClass, dynamic> orderExpression = null)
			{
				return GetAllTransactionClassesByPage(sortingPagingInfo, expression,new List<string>(){"TransactionDetailPresets"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesWithTransactionPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap=false, Func<TransactionClass, dynamic> orderExpression = null)
			{
				return GetAllTransactionClassesByPage(sortingPagingInfo, expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesWithTransactionClass1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap=false, Func<TransactionClass, dynamic> orderExpression = null)
			{
				return GetAllTransactionClassesByPage(sortingPagingInfo, expression,new List<string>(){"TransactionClass1"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesWithTransactionClass2DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap=false, Func<TransactionClass, dynamic> orderExpression = null)
			{
				return GetAllTransactionClassesByPage(sortingPagingInfo, expression,new List<string>(){"TransactionClass2"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesWithTransactionDetailsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap=false, Func<TransactionClass, dynamic> orderExpression = null)
			{
				return GetAllTransactionClassesByPage(sortingPagingInfo, expression,new List<string>(){"TransactionDetails"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionClass, bool>> expression = null,bool shouldRemap=false, Func<TransactionClass, dynamic> orderExpression = null)
			{
				return GetAllTransactionClassesByPage(sortingPagingInfo, expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionClass>> response = new BusinessResponse<BaseListReturnType<TransactionClass>>();
            try
            {
                response.Result = GetAllTransactionClassWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionClass> GetAllTransactionClassWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionClassDao.GetAllTransactionClassWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TransactionClass>> GetTransactionClassListByIdList(List<long> transactionClassIds)
        {
            BusinessResponse<List<TransactionClass>> response = new BusinessResponse<List<TransactionClass>>();
            try
            {
                response.Result = GetTransactionClassListByIdListRaw(transactionClassIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TransactionClass> GetTransactionClassListByIdListRaw(List<long> transactionClassIds)
        {
            return daoFactory.TransactionClassDao.GetTransactionClassListByIdList(transactionClassIds);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesWithTransactionDetailPresetsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionClass>> response = new BusinessResponse<BaseListReturnType<TransactionClass>>();
            try
            {
                response.Result = GetAllTransactionClassesWithTransactionDetailPresetsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionDetailPresetsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionClassWitDetailsRaw(new List<string>() { "TransactionDetailPresets" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesWithTransactionPresetsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionClass>> response = new BusinessResponse<BaseListReturnType<TransactionClass>>();
            try
            {
                response.Result = GetAllTransactionClassesWithTransactionPresetsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionPresetsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionClassWitDetailsRaw(new List<string>() { "TransactionPresets" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesWithTransactionClass1Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionClass>> response = new BusinessResponse<BaseListReturnType<TransactionClass>>();
            try
            {
                response.Result = GetAllTransactionClassesWithTransactionClass1DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionClass1DetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionClassWitDetailsRaw(new List<string>() { "TransactionClass1" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesWithTransactionClass2Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionClass>> response = new BusinessResponse<BaseListReturnType<TransactionClass>>();
            try
            {
                response.Result = GetAllTransactionClassesWithTransactionClass2DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionClass2DetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionClassWitDetailsRaw(new List<string>() { "TransactionClass2" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassListByTransactionClass2(long idTransactionClass2)
        {
            BusinessResponse<BaseListReturnType<TransactionClass>> response = new BusinessResponse<BaseListReturnType<TransactionClass>>();
            try
            {
                response.Result = GetAllTransactionClassListByTransactionClass2Raw(idTransactionClass2);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionClass> GetAllTransactionClassListByTransactionClass2Raw(long idTransactionClass2)
        {
            return daoFactory.TransactionClassDao.GetAllTransactionClassListByTransactionClass2(idTransactionClass2);
        }

        public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassListByTransactionClass2ByPage(long idTransactionClass2, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionClass>> response = new BusinessResponse<BaseListReturnType<TransactionClass>>();
            try
            {
                response.Result = GetAllTransactionClassListByTransactionClass2ByPageRaw(idTransactionClass2, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionClass> GetAllTransactionClassListByTransactionClass2ByPageRaw(long idTransactionClass2,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionClassDao.GetAllTransactionClassListByTransactionClass2ByPage(idTransactionClass2, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesWithTransactionDetailsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionClass>> response = new BusinessResponse<BaseListReturnType<TransactionClass>>();
            try
            {
                response.Result = GetAllTransactionClassesWithTransactionDetailsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionDetailsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionClassWitDetailsRaw(new List<string>() { "TransactionDetails" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TransactionClass>> GetAllTransactionClassesWithTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionClass>> response = new BusinessResponse<BaseListReturnType<TransactionClass>>();
            try
            {
                response.Result = GetAllTransactionClassesWithTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionClass> GetAllTransactionClassesWithTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionClassWitDetailsRaw(new List<string>() { "Transactions" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<TransactionDetailPreset>>  UpdateTransactionDetailPresetsForTransactionClassWithoutSavingNewItem(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionClass)
            {
                BusinessResponse<List<TransactionDetailPreset>> response = new BusinessResponse<List<TransactionDetailPreset>>();
                try
                {
                    response.Result = UpdateTransactionDetailPresetsForTransactionClassWithoutSavingNewItemRaw(newTransactionDetailPresets, idTransactionClass);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDetailPreset> UpdateTransactionDetailPresetsForTransactionClassWithoutSavingNewItemRaw(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionClass)
            {
                return daoFactory.TransactionClassDao.UpdateTransactionDetailPresetsForTransactionClassWithoutSavingNewItem(newTransactionDetailPresets,idTransactionClass); 
            }



		    public BusinessResponse<List<TransactionDetailPreset>>  UpdateTransactionDetailPresetsForTransactionClass(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionClass)
            {
                BusinessResponse<List<TransactionDetailPreset>> response = new BusinessResponse<List<TransactionDetailPreset>>();
                try
                {
                    response.Result = UpdateTransactionDetailPresetsForTransactionClassRaw(newTransactionDetailPresets, idTransactionClass);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDetailPreset> UpdateTransactionDetailPresetsForTransactionClassRaw(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionClass)
            {
                return daoFactory.TransactionClassDao.UpdateTransactionDetailPresetsForTransactionClass(newTransactionDetailPresets,idTransactionClass); 
            }





		public BusinessResponse<TransactionClass> GetTransactionClassWithTransactionDetailPresetsDetails(long idTransactionClass,bool shouldRemap=false)
        {
            BusinessResponse<TransactionClass> response = new BusinessResponse<TransactionClass>();
            try
            {
                response.Result = GetTransactionClassWithTransactionDetailPresetsDetailsRaw(idTransactionClass,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionClass GetTransactionClassWithTransactionDetailPresetsDetailsRaw(long idTransactionClass,bool shouldRemap=false)
        {
            return GetTransactionClassWitDetailsRaw(idTransactionClass,new List<string>() { "TransactionDetailPresets"},shouldRemap);
        }

		
			public BusinessResponse<List<TransactionPreset>>  UpdateTransactionPresetsForTransactionClassWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idTransactionClass)
            {
                BusinessResponse<List<TransactionPreset>> response = new BusinessResponse<List<TransactionPreset>>();
                try
                {
                    response.Result = UpdateTransactionPresetsForTransactionClassWithoutSavingNewItemRaw(newTransactionPresets, idTransactionClass);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionPreset> UpdateTransactionPresetsForTransactionClassWithoutSavingNewItemRaw(List<TransactionPreset> newTransactionPresets,long idTransactionClass)
            {
                return daoFactory.TransactionClassDao.UpdateTransactionPresetsForTransactionClassWithoutSavingNewItem(newTransactionPresets,idTransactionClass); 
            }



		    public BusinessResponse<List<TransactionPreset>>  UpdateTransactionPresetsForTransactionClass(List<TransactionPreset> newTransactionPresets,long idTransactionClass)
            {
                BusinessResponse<List<TransactionPreset>> response = new BusinessResponse<List<TransactionPreset>>();
                try
                {
                    response.Result = UpdateTransactionPresetsForTransactionClassRaw(newTransactionPresets, idTransactionClass);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionPreset> UpdateTransactionPresetsForTransactionClassRaw(List<TransactionPreset> newTransactionPresets,long idTransactionClass)
            {
                return daoFactory.TransactionClassDao.UpdateTransactionPresetsForTransactionClass(newTransactionPresets,idTransactionClass); 
            }





		public BusinessResponse<TransactionClass> GetTransactionClassWithTransactionPresetsDetails(long idTransactionClass,bool shouldRemap=false)
        {
            BusinessResponse<TransactionClass> response = new BusinessResponse<TransactionClass>();
            try
            {
                response.Result = GetTransactionClassWithTransactionPresetsDetailsRaw(idTransactionClass,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionClass GetTransactionClassWithTransactionPresetsDetailsRaw(long idTransactionClass,bool shouldRemap=false)
        {
            return GetTransactionClassWitDetailsRaw(idTransactionClass,new List<string>() { "TransactionPresets"},shouldRemap);
        }

		
			public BusinessResponse<List<TransactionClass>>  UpdateTransactionClass1ForTransactionClassWithoutSavingNewItem(List<TransactionClass> newTransactionClass1,long idTransactionClass)
            {
                BusinessResponse<List<TransactionClass>> response = new BusinessResponse<List<TransactionClass>>();
                try
                {
                    response.Result = UpdateTransactionClass1ForTransactionClassWithoutSavingNewItemRaw(newTransactionClass1, idTransactionClass);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionClass> UpdateTransactionClass1ForTransactionClassWithoutSavingNewItemRaw(List<TransactionClass> newTransactionClass1,long idTransactionClass)
            {
                return daoFactory.TransactionClassDao.UpdateTransactionClass1ForTransactionClassWithoutSavingNewItem(newTransactionClass1,idTransactionClass); 
            }



		    public BusinessResponse<List<TransactionClass>>  UpdateTransactionClass1ForTransactionClass(List<TransactionClass> newTransactionClass1,long idTransactionClass)
            {
                BusinessResponse<List<TransactionClass>> response = new BusinessResponse<List<TransactionClass>>();
                try
                {
                    response.Result = UpdateTransactionClass1ForTransactionClassRaw(newTransactionClass1, idTransactionClass);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionClass> UpdateTransactionClass1ForTransactionClassRaw(List<TransactionClass> newTransactionClass1,long idTransactionClass)
            {
                return daoFactory.TransactionClassDao.UpdateTransactionClass1ForTransactionClass(newTransactionClass1,idTransactionClass); 
            }





		public BusinessResponse<TransactionClass> GetTransactionClassWithTransactionClass1Details(long idTransactionClass,bool shouldRemap=false)
        {
            BusinessResponse<TransactionClass> response = new BusinessResponse<TransactionClass>();
            try
            {
                response.Result = GetTransactionClassWithTransactionClass1DetailsRaw(idTransactionClass,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionClass GetTransactionClassWithTransactionClass1DetailsRaw(long idTransactionClass,bool shouldRemap=false)
        {
            return GetTransactionClassWitDetailsRaw(idTransactionClass,new List<string>() { "TransactionClass1"},shouldRemap);
        }

		



		public BusinessResponse<TransactionClass> GetTransactionClassWithTransactionClass2Details(long idTransactionClass,bool shouldRemap=false)
        {
            BusinessResponse<TransactionClass> response = new BusinessResponse<TransactionClass>();
            try
            {
                response.Result = GetTransactionClassWithTransactionClass2DetailsRaw(idTransactionClass,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionClass GetTransactionClassWithTransactionClass2DetailsRaw(long idTransactionClass,bool shouldRemap=false)
        {
            return GetTransactionClassWitDetailsRaw(idTransactionClass,new List<string>() { "TransactionClass2"},shouldRemap);
        }

		
			public BusinessResponse<List<TransactionDetail>>  UpdateTransactionDetailsForTransactionClassWithoutSavingNewItem(List<TransactionDetail> newTransactionDetails,long idTransactionClass)
            {
                BusinessResponse<List<TransactionDetail>> response = new BusinessResponse<List<TransactionDetail>>();
                try
                {
                    response.Result = UpdateTransactionDetailsForTransactionClassWithoutSavingNewItemRaw(newTransactionDetails, idTransactionClass);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDetail> UpdateTransactionDetailsForTransactionClassWithoutSavingNewItemRaw(List<TransactionDetail> newTransactionDetails,long idTransactionClass)
            {
                return daoFactory.TransactionClassDao.UpdateTransactionDetailsForTransactionClassWithoutSavingNewItem(newTransactionDetails,idTransactionClass); 
            }



		    public BusinessResponse<List<TransactionDetail>>  UpdateTransactionDetailsForTransactionClass(List<TransactionDetail> newTransactionDetails,long idTransactionClass)
            {
                BusinessResponse<List<TransactionDetail>> response = new BusinessResponse<List<TransactionDetail>>();
                try
                {
                    response.Result = UpdateTransactionDetailsForTransactionClassRaw(newTransactionDetails, idTransactionClass);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDetail> UpdateTransactionDetailsForTransactionClassRaw(List<TransactionDetail> newTransactionDetails,long idTransactionClass)
            {
                return daoFactory.TransactionClassDao.UpdateTransactionDetailsForTransactionClass(newTransactionDetails,idTransactionClass); 
            }





		public BusinessResponse<TransactionClass> GetTransactionClassWithTransactionDetailsDetails(long idTransactionClass,bool shouldRemap=false)
        {
            BusinessResponse<TransactionClass> response = new BusinessResponse<TransactionClass>();
            try
            {
                response.Result = GetTransactionClassWithTransactionDetailsDetailsRaw(idTransactionClass,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionClass GetTransactionClassWithTransactionDetailsDetailsRaw(long idTransactionClass,bool shouldRemap=false)
        {
            return GetTransactionClassWitDetailsRaw(idTransactionClass,new List<string>() { "TransactionDetails"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction>>  UpdateTransactionsForTransactionClassWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionClass)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForTransactionClassWithoutSavingNewItemRaw(newTransactions, idTransactionClass);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForTransactionClassWithoutSavingNewItemRaw(List<Transaction> newTransactions,long idTransactionClass)
            {
                return daoFactory.TransactionClassDao.UpdateTransactionsForTransactionClassWithoutSavingNewItem(newTransactions,idTransactionClass); 
            }



		    public BusinessResponse<List<Transaction>>  UpdateTransactionsForTransactionClass(List<Transaction> newTransactions,long idTransactionClass)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForTransactionClassRaw(newTransactions, idTransactionClass);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForTransactionClassRaw(List<Transaction> newTransactions,long idTransactionClass)
            {
                return daoFactory.TransactionClassDao.UpdateTransactionsForTransactionClass(newTransactions,idTransactionClass); 
            }





		public BusinessResponse<TransactionClass> GetTransactionClassWithTransactionsDetails(long idTransactionClass,bool shouldRemap=false)
        {
            BusinessResponse<TransactionClass> response = new BusinessResponse<TransactionClass>();
            try
            {
                response.Result = GetTransactionClassWithTransactionsDetailsRaw(idTransactionClass,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionClass GetTransactionClassWithTransactionsDetailsRaw(long idTransactionClass,bool shouldRemap=false)
        {
            return GetTransactionClassWitDetailsRaw(idTransactionClass,new List<string>() { "Transactions"},shouldRemap);
        }

		
        public BusinessResponse<TransactionClass> GetTransactionClass(long idTransactionClass,bool shouldRemap=false)
        {
            BusinessResponse<TransactionClass> response = new BusinessResponse<TransactionClass>();
		    try
		    {
			    response.Result = GetTransactionClassesRaw(idTransactionClass,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionClass GetTransactionClassesRaw(long idTransactionClass,bool shouldRemap=false)
        {
            return daoFactory.TransactionClassDao.GetTransactionClass(idTransactionClass,shouldRemap);
        }

        
        public BusinessResponse<TransactionClass> GetTransactionClassWitDetails(long idTransactionClass,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TransactionClass> response = new BusinessResponse<TransactionClass>();
		    try
		    {
			    response.Result = GetTransactionClassWitDetailsRaw(idTransactionClass,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionClass GetTransactionClassWitDetailsRaw(long idTransactionClass,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionClassDao.GetTransactionClassWitDetails(idTransactionClass,shouldRemap);
        }


		 public BusinessResponse<TransactionClass> GetTransactionClassCustom( Expression<Func<TransactionClass, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TransactionClass> response = new BusinessResponse<TransactionClass>();
		    try
		    {
			    response.Result = GetTransactionClassCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TransactionClass GetTransactionClassCustomRaw( Expression<Func<TransactionClass, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TransactionClassDao.GetTransactionClassCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TransactionClass>> GetTransactionClassCustomList( Expression<Func<TransactionClass, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionClass, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TransactionClass>> response = new BusinessResponse<BaseListReturnType<TransactionClass>>();
		    try
		    {
			    response.Result = GetTransactionClassCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TransactionClass> GetTransactionClassCustomListRaw( Expression<Func<TransactionClass, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionClass, dynamic> orderExpression = null)
		{
            return daoFactory.TransactionClassDao.GetTransactionClassCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransactionClass(TransactionClass transactionClass)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransactionClassRaw(transactionClass);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransactionClassRaw(TransactionClass transactionClass)
        {
            daoFactory.TransactionClassDao.SaveTransactionClass(transactionClass);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransactionClass(TransactionClass transactionClass)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransactionClassRaw(transactionClass);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransactionClassRaw(TransactionClass transactionClass)
        {
            daoFactory.TransactionClassDao.SaveOnlyTransactionClass(transactionClass);
            return true;
        }

        public BusinessResponse<bool> DeleteTransactionClass(TransactionClass transactionClass)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransactionClassRaw(transactionClass);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransactionClassRaw(TransactionClass transactionClass)
        {
            daoFactory.TransactionClassDao.DeleteTransactionClass(transactionClass);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransactionClass(TransactionClass transactionClass)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransactionClassRaw(transactionClass);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransactionClassRaw(TransactionClass transactionClass)
        {
            daoFactory.TransactionClassDao.DeletePermanentlyTransactionClass(transactionClass);
            return true;
        }
	}
	public partial class TransactionDetailService: BaseService
	{
	    public BusinessResponse<List<TransactionDetail>> GetAllTransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<List<TransactionDetail>> response = new BusinessResponse<List<TransactionDetail>>();
		    try
		    {
			    response.Result = GetAllTransactionDetailsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TransactionDetail> GetAllTransactionDetailsRaw(bool shouldRemap=false)
        {
            return daoFactory.TransactionDetailDao.GetAllTransactionDetails(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionDetail, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TransactionDetail>> response = new BusinessResponse<BaseListReturnType<TransactionDetail>>();
		    try
		    {
			    response.Result = GetAllTransactionDetailsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TransactionDetail> GetAllTransactionDetailsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionDetail, dynamic> orderExpression = null)
        {
            return daoFactory.TransactionDetailDao.GetAllTransactionDetailsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailsWithProductDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null,bool shouldRemap=false, Func<TransactionDetail, dynamic> orderExpression = null)
			{
				return GetAllTransactionDetailsByPage(sortingPagingInfo, expression,new List<string>(){"Product"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailsWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null,bool shouldRemap=false, Func<TransactionDetail, dynamic> orderExpression = null)
			{
				return GetAllTransactionDetailsByPage(sortingPagingInfo, expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailsWithTransactionClassDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetail, bool>> expression = null,bool shouldRemap=false, Func<TransactionDetail, dynamic> orderExpression = null)
			{
				return GetAllTransactionDetailsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionClass"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDetail>> response = new BusinessResponse<BaseListReturnType<TransactionDetail>>();
            try
            {
                response.Result = GetAllTransactionDetailWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetail> GetAllTransactionDetailWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionDetailDao.GetAllTransactionDetailWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TransactionDetail>> GetTransactionDetailListByIdList(List<long> transactionDetailIds)
        {
            BusinessResponse<List<TransactionDetail>> response = new BusinessResponse<List<TransactionDetail>>();
            try
            {
                response.Result = GetTransactionDetailListByIdListRaw(transactionDetailIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TransactionDetail> GetTransactionDetailListByIdListRaw(List<long> transactionDetailIds)
        {
            return daoFactory.TransactionDetailDao.GetTransactionDetailListByIdList(transactionDetailIds);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailsWithProductDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDetail>> response = new BusinessResponse<BaseListReturnType<TransactionDetail>>();
            try
            {
                response.Result = GetAllTransactionDetailsWithProductDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetail> GetAllTransactionDetailsWithProductDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionDetailWitDetailsRaw(new List<string>() { "Product" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailListByProduct(long idProduct)
        {
            BusinessResponse<BaseListReturnType<TransactionDetail>> response = new BusinessResponse<BaseListReturnType<TransactionDetail>>();
            try
            {
                response.Result = GetAllTransactionDetailListByProductRaw(idProduct);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByProductRaw(long idProduct)
        {
            return daoFactory.TransactionDetailDao.GetAllTransactionDetailListByProduct(idProduct);
        }

        public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailListByProductByPage(long idProduct, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionDetail>> response = new BusinessResponse<BaseListReturnType<TransactionDetail>>();
            try
            {
                response.Result = GetAllTransactionDetailListByProductByPageRaw(idProduct, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByProductByPageRaw(long idProduct,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDetailDao.GetAllTransactionDetailListByProductByPage(idProduct, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailsWithTransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDetail>> response = new BusinessResponse<BaseListReturnType<TransactionDetail>>();
            try
            {
                response.Result = GetAllTransactionDetailsWithTransactionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetail> GetAllTransactionDetailsWithTransactionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionDetailWitDetailsRaw(new List<string>() { "Transaction" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailListByTransaction(long idTransaction)
        {
            BusinessResponse<BaseListReturnType<TransactionDetail>> response = new BusinessResponse<BaseListReturnType<TransactionDetail>>();
            try
            {
                response.Result = GetAllTransactionDetailListByTransactionRaw(idTransaction);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByTransactionRaw(long idTransaction)
        {
            return daoFactory.TransactionDetailDao.GetAllTransactionDetailListByTransaction(idTransaction);
        }

        public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailListByTransactionByPage(long idTransaction, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionDetail>> response = new BusinessResponse<BaseListReturnType<TransactionDetail>>();
            try
            {
                response.Result = GetAllTransactionDetailListByTransactionByPageRaw(idTransaction, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByTransactionByPageRaw(long idTransaction,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDetailDao.GetAllTransactionDetailListByTransactionByPage(idTransaction, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailsWithTransactionClassDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDetail>> response = new BusinessResponse<BaseListReturnType<TransactionDetail>>();
            try
            {
                response.Result = GetAllTransactionDetailsWithTransactionClassDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetail> GetAllTransactionDetailsWithTransactionClassDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionDetailWitDetailsRaw(new List<string>() { "TransactionClass" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailListByTransactionClass(long idTransactionClass)
        {
            BusinessResponse<BaseListReturnType<TransactionDetail>> response = new BusinessResponse<BaseListReturnType<TransactionDetail>>();
            try
            {
                response.Result = GetAllTransactionDetailListByTransactionClassRaw(idTransactionClass);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByTransactionClassRaw(long idTransactionClass)
        {
            return daoFactory.TransactionDetailDao.GetAllTransactionDetailListByTransactionClass(idTransactionClass);
        }

        public BusinessResponse<BaseListReturnType<TransactionDetail>> GetAllTransactionDetailListByTransactionClassByPage(long idTransactionClass, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionDetail>> response = new BusinessResponse<BaseListReturnType<TransactionDetail>>();
            try
            {
                response.Result = GetAllTransactionDetailListByTransactionClassByPageRaw(idTransactionClass, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetail> GetAllTransactionDetailListByTransactionClassByPageRaw(long idTransactionClass,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDetailDao.GetAllTransactionDetailListByTransactionClassByPage(idTransactionClass, sortingPagingInfo);
        }

		
		



		public BusinessResponse<TransactionDetail> GetTransactionDetailWithProductDetails(long idTransactionDetail,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDetail> response = new BusinessResponse<TransactionDetail>();
            try
            {
                response.Result = GetTransactionDetailWithProductDetailsRaw(idTransactionDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionDetail GetTransactionDetailWithProductDetailsRaw(long idTransactionDetail,bool shouldRemap=false)
        {
            return GetTransactionDetailWitDetailsRaw(idTransactionDetail,new List<string>() { "Product"},shouldRemap);
        }

		



		public BusinessResponse<TransactionDetail> GetTransactionDetailWithTransactionDetails(long idTransactionDetail,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDetail> response = new BusinessResponse<TransactionDetail>();
            try
            {
                response.Result = GetTransactionDetailWithTransactionDetailsRaw(idTransactionDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionDetail GetTransactionDetailWithTransactionDetailsRaw(long idTransactionDetail,bool shouldRemap=false)
        {
            return GetTransactionDetailWitDetailsRaw(idTransactionDetail,new List<string>() { "Transaction"},shouldRemap);
        }

		



		public BusinessResponse<TransactionDetail> GetTransactionDetailWithTransactionClassDetails(long idTransactionDetail,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDetail> response = new BusinessResponse<TransactionDetail>();
            try
            {
                response.Result = GetTransactionDetailWithTransactionClassDetailsRaw(idTransactionDetail,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionDetail GetTransactionDetailWithTransactionClassDetailsRaw(long idTransactionDetail,bool shouldRemap=false)
        {
            return GetTransactionDetailWitDetailsRaw(idTransactionDetail,new List<string>() { "TransactionClass"},shouldRemap);
        }

		
        public BusinessResponse<TransactionDetail> GetTransactionDetail(long idTransactionDetail,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDetail> response = new BusinessResponse<TransactionDetail>();
		    try
		    {
			    response.Result = GetTransactionDetailsRaw(idTransactionDetail,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionDetail GetTransactionDetailsRaw(long idTransactionDetail,bool shouldRemap=false)
        {
            return daoFactory.TransactionDetailDao.GetTransactionDetail(idTransactionDetail,shouldRemap);
        }

        
        public BusinessResponse<TransactionDetail> GetTransactionDetailWitDetails(long idTransactionDetail,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDetail> response = new BusinessResponse<TransactionDetail>();
		    try
		    {
			    response.Result = GetTransactionDetailWitDetailsRaw(idTransactionDetail,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionDetail GetTransactionDetailWitDetailsRaw(long idTransactionDetail,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionDetailDao.GetTransactionDetailWitDetails(idTransactionDetail,shouldRemap);
        }


		 public BusinessResponse<TransactionDetail> GetTransactionDetailCustom( Expression<Func<TransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TransactionDetail> response = new BusinessResponse<TransactionDetail>();
		    try
		    {
			    response.Result = GetTransactionDetailCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TransactionDetail GetTransactionDetailCustomRaw( Expression<Func<TransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TransactionDetailDao.GetTransactionDetailCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TransactionDetail>> GetTransactionDetailCustomList( Expression<Func<TransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionDetail, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TransactionDetail>> response = new BusinessResponse<BaseListReturnType<TransactionDetail>>();
		    try
		    {
			    response.Result = GetTransactionDetailCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TransactionDetail> GetTransactionDetailCustomListRaw( Expression<Func<TransactionDetail, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionDetail, dynamic> orderExpression = null)
		{
            return daoFactory.TransactionDetailDao.GetTransactionDetailCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransactionDetail(TransactionDetail transactionDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransactionDetailRaw(transactionDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransactionDetailRaw(TransactionDetail transactionDetail)
        {
            daoFactory.TransactionDetailDao.SaveTransactionDetail(transactionDetail);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransactionDetail(TransactionDetail transactionDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransactionDetailRaw(transactionDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransactionDetailRaw(TransactionDetail transactionDetail)
        {
            daoFactory.TransactionDetailDao.SaveOnlyTransactionDetail(transactionDetail);
            return true;
        }

        public BusinessResponse<bool> DeleteTransactionDetail(TransactionDetail transactionDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransactionDetailRaw(transactionDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransactionDetailRaw(TransactionDetail transactionDetail)
        {
            daoFactory.TransactionDetailDao.DeleteTransactionDetail(transactionDetail);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransactionDetail(TransactionDetail transactionDetail)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransactionDetailRaw(transactionDetail);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransactionDetailRaw(TransactionDetail transactionDetail)
        {
            daoFactory.TransactionDetailDao.DeletePermanentlyTransactionDetail(transactionDetail);
            return true;
        }
	}
	public partial class TransactionDetailPresetService: BaseService
	{
	    public BusinessResponse<List<TransactionDetailPreset>> GetAllTransactionDetailPresets(bool shouldRemap=false)
        {
            BusinessResponse<List<TransactionDetailPreset>> response = new BusinessResponse<List<TransactionDetailPreset>>();
		    try
		    {
			    response.Result = GetAllTransactionDetailPresetsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TransactionDetailPreset> GetAllTransactionDetailPresetsRaw(bool shouldRemap=false)
        {
            return daoFactory.TransactionDetailPresetDao.GetAllTransactionDetailPresets(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TransactionDetailPreset>> response = new BusinessResponse<BaseListReturnType<TransactionDetailPreset>>();
		    try
		    {
			    response.Result = GetAllTransactionDetailPresetsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
        {
            return daoFactory.TransactionDetailPresetDao.GetAllTransactionDetailPresetsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetsWithProductDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null,bool shouldRemap=false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
			{
				return GetAllTransactionDetailPresetsByPage(sortingPagingInfo, expression,new List<string>(){"Product"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetsWithTransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null,bool shouldRemap=false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
			{
				return GetAllTransactionDetailPresetsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionPreset"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetsWithTransactionClassDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDetailPreset, bool>> expression = null,bool shouldRemap=false, Func<TransactionDetailPreset, dynamic> orderExpression = null)
			{
				return GetAllTransactionDetailPresetsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionClass"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDetailPreset>> response = new BusinessResponse<BaseListReturnType<TransactionDetailPreset>>();
            try
            {
                response.Result = GetAllTransactionDetailPresetWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionDetailPresetDao.GetAllTransactionDetailPresetWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TransactionDetailPreset>> GetTransactionDetailPresetListByIdList(List<long> transactionDetailPresetIds)
        {
            BusinessResponse<List<TransactionDetailPreset>> response = new BusinessResponse<List<TransactionDetailPreset>>();
            try
            {
                response.Result = GetTransactionDetailPresetListByIdListRaw(transactionDetailPresetIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TransactionDetailPreset> GetTransactionDetailPresetListByIdListRaw(List<long> transactionDetailPresetIds)
        {
            return daoFactory.TransactionDetailPresetDao.GetTransactionDetailPresetListByIdList(transactionDetailPresetIds);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetsWithProductDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDetailPreset>> response = new BusinessResponse<BaseListReturnType<TransactionDetailPreset>>();
            try
            {
                response.Result = GetAllTransactionDetailPresetsWithProductDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsWithProductDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionDetailPresetWitDetailsRaw(new List<string>() { "Product" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetListByProduct(long idProduct)
        {
            BusinessResponse<BaseListReturnType<TransactionDetailPreset>> response = new BusinessResponse<BaseListReturnType<TransactionDetailPreset>>();
            try
            {
                response.Result = GetAllTransactionDetailPresetListByProductRaw(idProduct);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByProductRaw(long idProduct)
        {
            return daoFactory.TransactionDetailPresetDao.GetAllTransactionDetailPresetListByProduct(idProduct);
        }

        public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetListByProductByPage(long idProduct, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionDetailPreset>> response = new BusinessResponse<BaseListReturnType<TransactionDetailPreset>>();
            try
            {
                response.Result = GetAllTransactionDetailPresetListByProductByPageRaw(idProduct, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByProductByPageRaw(long idProduct,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDetailPresetDao.GetAllTransactionDetailPresetListByProductByPage(idProduct, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetsWithTransactionPresetDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDetailPreset>> response = new BusinessResponse<BaseListReturnType<TransactionDetailPreset>>();
            try
            {
                response.Result = GetAllTransactionDetailPresetsWithTransactionPresetDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsWithTransactionPresetDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionDetailPresetWitDetailsRaw(new List<string>() { "TransactionPreset" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetListByTransactionPreset(long idTransactionPreset)
        {
            BusinessResponse<BaseListReturnType<TransactionDetailPreset>> response = new BusinessResponse<BaseListReturnType<TransactionDetailPreset>>();
            try
            {
                response.Result = GetAllTransactionDetailPresetListByTransactionPresetRaw(idTransactionPreset);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByTransactionPresetRaw(long idTransactionPreset)
        {
            return daoFactory.TransactionDetailPresetDao.GetAllTransactionDetailPresetListByTransactionPreset(idTransactionPreset);
        }

        public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetListByTransactionPresetByPage(long idTransactionPreset, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionDetailPreset>> response = new BusinessResponse<BaseListReturnType<TransactionDetailPreset>>();
            try
            {
                response.Result = GetAllTransactionDetailPresetListByTransactionPresetByPageRaw(idTransactionPreset, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByTransactionPresetByPageRaw(long idTransactionPreset,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDetailPresetDao.GetAllTransactionDetailPresetListByTransactionPresetByPage(idTransactionPreset, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetsWithTransactionClassDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDetailPreset>> response = new BusinessResponse<BaseListReturnType<TransactionDetailPreset>>();
            try
            {
                response.Result = GetAllTransactionDetailPresetsWithTransactionClassDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetsWithTransactionClassDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionDetailPresetWitDetailsRaw(new List<string>() { "TransactionClass" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetListByTransactionClass(long idTransactionClass)
        {
            BusinessResponse<BaseListReturnType<TransactionDetailPreset>> response = new BusinessResponse<BaseListReturnType<TransactionDetailPreset>>();
            try
            {
                response.Result = GetAllTransactionDetailPresetListByTransactionClassRaw(idTransactionClass);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByTransactionClassRaw(long idTransactionClass)
        {
            return daoFactory.TransactionDetailPresetDao.GetAllTransactionDetailPresetListByTransactionClass(idTransactionClass);
        }

        public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetAllTransactionDetailPresetListByTransactionClassByPage(long idTransactionClass, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionDetailPreset>> response = new BusinessResponse<BaseListReturnType<TransactionDetailPreset>>();
            try
            {
                response.Result = GetAllTransactionDetailPresetListByTransactionClassByPageRaw(idTransactionClass, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDetailPreset> GetAllTransactionDetailPresetListByTransactionClassByPageRaw(long idTransactionClass,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDetailPresetDao.GetAllTransactionDetailPresetListByTransactionClassByPage(idTransactionClass, sortingPagingInfo);
        }

		
		



		public BusinessResponse<TransactionDetailPreset> GetTransactionDetailPresetWithProductDetails(long idTransactionDetailPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDetailPreset> response = new BusinessResponse<TransactionDetailPreset>();
            try
            {
                response.Result = GetTransactionDetailPresetWithProductDetailsRaw(idTransactionDetailPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionDetailPreset GetTransactionDetailPresetWithProductDetailsRaw(long idTransactionDetailPreset,bool shouldRemap=false)
        {
            return GetTransactionDetailPresetWitDetailsRaw(idTransactionDetailPreset,new List<string>() { "Product"},shouldRemap);
        }

		



		public BusinessResponse<TransactionDetailPreset> GetTransactionDetailPresetWithTransactionPresetDetails(long idTransactionDetailPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDetailPreset> response = new BusinessResponse<TransactionDetailPreset>();
            try
            {
                response.Result = GetTransactionDetailPresetWithTransactionPresetDetailsRaw(idTransactionDetailPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionDetailPreset GetTransactionDetailPresetWithTransactionPresetDetailsRaw(long idTransactionDetailPreset,bool shouldRemap=false)
        {
            return GetTransactionDetailPresetWitDetailsRaw(idTransactionDetailPreset,new List<string>() { "TransactionPreset"},shouldRemap);
        }

		



		public BusinessResponse<TransactionDetailPreset> GetTransactionDetailPresetWithTransactionClassDetails(long idTransactionDetailPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDetailPreset> response = new BusinessResponse<TransactionDetailPreset>();
            try
            {
                response.Result = GetTransactionDetailPresetWithTransactionClassDetailsRaw(idTransactionDetailPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionDetailPreset GetTransactionDetailPresetWithTransactionClassDetailsRaw(long idTransactionDetailPreset,bool shouldRemap=false)
        {
            return GetTransactionDetailPresetWitDetailsRaw(idTransactionDetailPreset,new List<string>() { "TransactionClass"},shouldRemap);
        }

		
        public BusinessResponse<TransactionDetailPreset> GetTransactionDetailPreset(long idTransactionDetailPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDetailPreset> response = new BusinessResponse<TransactionDetailPreset>();
		    try
		    {
			    response.Result = GetTransactionDetailPresetsRaw(idTransactionDetailPreset,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionDetailPreset GetTransactionDetailPresetsRaw(long idTransactionDetailPreset,bool shouldRemap=false)
        {
            return daoFactory.TransactionDetailPresetDao.GetTransactionDetailPreset(idTransactionDetailPreset,shouldRemap);
        }

        
        public BusinessResponse<TransactionDetailPreset> GetTransactionDetailPresetWitDetails(long idTransactionDetailPreset,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDetailPreset> response = new BusinessResponse<TransactionDetailPreset>();
		    try
		    {
			    response.Result = GetTransactionDetailPresetWitDetailsRaw(idTransactionDetailPreset,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionDetailPreset GetTransactionDetailPresetWitDetailsRaw(long idTransactionDetailPreset,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionDetailPresetDao.GetTransactionDetailPresetWitDetails(idTransactionDetailPreset,shouldRemap);
        }


		 public BusinessResponse<TransactionDetailPreset> GetTransactionDetailPresetCustom( Expression<Func<TransactionDetailPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TransactionDetailPreset> response = new BusinessResponse<TransactionDetailPreset>();
		    try
		    {
			    response.Result = GetTransactionDetailPresetCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TransactionDetailPreset GetTransactionDetailPresetCustomRaw( Expression<Func<TransactionDetailPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TransactionDetailPresetDao.GetTransactionDetailPresetCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TransactionDetailPreset>> GetTransactionDetailPresetCustomList( Expression<Func<TransactionDetailPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionDetailPreset, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TransactionDetailPreset>> response = new BusinessResponse<BaseListReturnType<TransactionDetailPreset>>();
		    try
		    {
			    response.Result = GetTransactionDetailPresetCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TransactionDetailPreset> GetTransactionDetailPresetCustomListRaw( Expression<Func<TransactionDetailPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionDetailPreset, dynamic> orderExpression = null)
		{
            return daoFactory.TransactionDetailPresetDao.GetTransactionDetailPresetCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransactionDetailPreset(TransactionDetailPreset transactionDetailPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransactionDetailPresetRaw(transactionDetailPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransactionDetailPresetRaw(TransactionDetailPreset transactionDetailPreset)
        {
            daoFactory.TransactionDetailPresetDao.SaveTransactionDetailPreset(transactionDetailPreset);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransactionDetailPreset(TransactionDetailPreset transactionDetailPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransactionDetailPresetRaw(transactionDetailPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransactionDetailPresetRaw(TransactionDetailPreset transactionDetailPreset)
        {
            daoFactory.TransactionDetailPresetDao.SaveOnlyTransactionDetailPreset(transactionDetailPreset);
            return true;
        }

        public BusinessResponse<bool> DeleteTransactionDetailPreset(TransactionDetailPreset transactionDetailPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransactionDetailPresetRaw(transactionDetailPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransactionDetailPresetRaw(TransactionDetailPreset transactionDetailPreset)
        {
            daoFactory.TransactionDetailPresetDao.DeleteTransactionDetailPreset(transactionDetailPreset);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransactionDetailPreset(TransactionDetailPreset transactionDetailPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransactionDetailPresetRaw(transactionDetailPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransactionDetailPresetRaw(TransactionDetailPreset transactionDetailPreset)
        {
            daoFactory.TransactionDetailPresetDao.DeletePermanentlyTransactionDetailPreset(transactionDetailPreset);
            return true;
        }
	}
	public partial class TransactionDueService: BaseService
	{
	    public BusinessResponse<List<TransactionDue>> GetAllTransactionDues(bool shouldRemap=false)
        {
            BusinessResponse<List<TransactionDue>> response = new BusinessResponse<List<TransactionDue>>();
		    try
		    {
			    response.Result = GetAllTransactionDuesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TransactionDue> GetAllTransactionDuesRaw(bool shouldRemap=false)
        {
            return daoFactory.TransactionDueDao.GetAllTransactionDues(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TransactionDue>> GetAllTransactionDuesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionDue, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TransactionDue>> response = new BusinessResponse<BaseListReturnType<TransactionDue>>();
		    try
		    {
			    response.Result = GetAllTransactionDuesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TransactionDue> GetAllTransactionDuesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionDue, dynamic> orderExpression = null)
        {
            return daoFactory.TransactionDueDao.GetAllTransactionDuesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TransactionDue>> GetAllTransactionDuesWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue, bool>> expression = null,bool shouldRemap=false, Func<TransactionDue, dynamic> orderExpression = null)
			{
				return GetAllTransactionDuesByPage(sortingPagingInfo, expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionDue>> GetAllTransactionDuesWithTransactionDue_TransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue, bool>> expression = null,bool shouldRemap=false, Func<TransactionDue, dynamic> orderExpression = null)
			{
				return GetAllTransactionDuesByPage(sortingPagingInfo, expression,new List<string>(){"TransactionDue_Transaction"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TransactionDue>> GetAllTransactionDueWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDue>> response = new BusinessResponse<BaseListReturnType<TransactionDue>>();
            try
            {
                response.Result = GetAllTransactionDueWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDue> GetAllTransactionDueWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionDueDao.GetAllTransactionDueWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TransactionDue>> GetTransactionDueListByIdList(List<long> transactionDueIds)
        {
            BusinessResponse<List<TransactionDue>> response = new BusinessResponse<List<TransactionDue>>();
            try
            {
                response.Result = GetTransactionDueListByIdListRaw(transactionDueIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TransactionDue> GetTransactionDueListByIdListRaw(List<long> transactionDueIds)
        {
            return daoFactory.TransactionDueDao.GetTransactionDueListByIdList(transactionDueIds);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionDue>> GetAllTransactionDuesWithTransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDue>> response = new BusinessResponse<BaseListReturnType<TransactionDue>>();
            try
            {
                response.Result = GetAllTransactionDuesWithTransactionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDue> GetAllTransactionDuesWithTransactionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionDueWitDetailsRaw(new List<string>() { "Transaction" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionDue>> GetAllTransactionDueListByTransaction(long idTransaction)
        {
            BusinessResponse<BaseListReturnType<TransactionDue>> response = new BusinessResponse<BaseListReturnType<TransactionDue>>();
            try
            {
                response.Result = GetAllTransactionDueListByTransactionRaw(idTransaction);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDue> GetAllTransactionDueListByTransactionRaw(long idTransaction)
        {
            return daoFactory.TransactionDueDao.GetAllTransactionDueListByTransaction(idTransaction);
        }

        public BusinessResponse<BaseListReturnType<TransactionDue>> GetAllTransactionDueListByTransactionByPage(long idTransaction, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionDue>> response = new BusinessResponse<BaseListReturnType<TransactionDue>>();
            try
            {
                response.Result = GetAllTransactionDueListByTransactionByPageRaw(idTransaction, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDue> GetAllTransactionDueListByTransactionByPageRaw(long idTransaction,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDueDao.GetAllTransactionDueListByTransactionByPage(idTransaction, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionDue>> GetAllTransactionDuesWithTransactionDue_TransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDue>> response = new BusinessResponse<BaseListReturnType<TransactionDue>>();
            try
            {
                response.Result = GetAllTransactionDuesWithTransactionDue_TransactionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDue> GetAllTransactionDuesWithTransactionDue_TransactionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionDueWitDetailsRaw(new List<string>() { "TransactionDue_Transaction" }, shouldRemap);
        }
        
        






		



		public BusinessResponse<TransactionDue> GetTransactionDueWithTransactionDetails(long idTransactionDue,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDue> response = new BusinessResponse<TransactionDue>();
            try
            {
                response.Result = GetTransactionDueWithTransactionDetailsRaw(idTransactionDue,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionDue GetTransactionDueWithTransactionDetailsRaw(long idTransactionDue,bool shouldRemap=false)
        {
            return GetTransactionDueWitDetailsRaw(idTransactionDue,new List<string>() { "Transaction"},shouldRemap);
        }

		
			public BusinessResponse<List<TransactionDue_Transaction>>  UpdateTransactionDue_TransactionForTransactionDueWithoutSavingNewItem(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransactionDue)
            {
                BusinessResponse<List<TransactionDue_Transaction>> response = new BusinessResponse<List<TransactionDue_Transaction>>();
                try
                {
                    response.Result = UpdateTransactionDue_TransactionForTransactionDueWithoutSavingNewItemRaw(newTransactionDue_Transaction, idTransactionDue);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDue_Transaction> UpdateTransactionDue_TransactionForTransactionDueWithoutSavingNewItemRaw(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransactionDue)
            {
                return daoFactory.TransactionDueDao.UpdateTransactionDue_TransactionForTransactionDueWithoutSavingNewItem(newTransactionDue_Transaction,idTransactionDue); 
            }



		    public BusinessResponse<List<TransactionDue_Transaction>>  UpdateTransactionDue_TransactionForTransactionDue(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransactionDue)
            {
                BusinessResponse<List<TransactionDue_Transaction>> response = new BusinessResponse<List<TransactionDue_Transaction>>();
                try
                {
                    response.Result = UpdateTransactionDue_TransactionForTransactionDueRaw(newTransactionDue_Transaction, idTransactionDue);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDue_Transaction> UpdateTransactionDue_TransactionForTransactionDueRaw(List<TransactionDue_Transaction> newTransactionDue_Transaction,long idTransactionDue)
            {
                return daoFactory.TransactionDueDao.UpdateTransactionDue_TransactionForTransactionDue(newTransactionDue_Transaction,idTransactionDue); 
            }





		public BusinessResponse<TransactionDue> GetTransactionDueWithTransactionDue_TransactionDetails(long idTransactionDue,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDue> response = new BusinessResponse<TransactionDue>();
            try
            {
                response.Result = GetTransactionDueWithTransactionDue_TransactionDetailsRaw(idTransactionDue,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionDue GetTransactionDueWithTransactionDue_TransactionDetailsRaw(long idTransactionDue,bool shouldRemap=false)
        {
            return GetTransactionDueWitDetailsRaw(idTransactionDue,new List<string>() { "TransactionDue_Transaction"},shouldRemap);
        }

		
        public BusinessResponse<TransactionDue> GetTransactionDue(long idTransactionDue,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDue> response = new BusinessResponse<TransactionDue>();
		    try
		    {
			    response.Result = GetTransactionDuesRaw(idTransactionDue,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionDue GetTransactionDuesRaw(long idTransactionDue,bool shouldRemap=false)
        {
            return daoFactory.TransactionDueDao.GetTransactionDue(idTransactionDue,shouldRemap);
        }

        
        public BusinessResponse<TransactionDue> GetTransactionDueWitDetails(long idTransactionDue,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDue> response = new BusinessResponse<TransactionDue>();
		    try
		    {
			    response.Result = GetTransactionDueWitDetailsRaw(idTransactionDue,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionDue GetTransactionDueWitDetailsRaw(long idTransactionDue,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionDueDao.GetTransactionDueWitDetails(idTransactionDue,shouldRemap);
        }


		 public BusinessResponse<TransactionDue> GetTransactionDueCustom( Expression<Func<TransactionDue, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TransactionDue> response = new BusinessResponse<TransactionDue>();
		    try
		    {
			    response.Result = GetTransactionDueCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TransactionDue GetTransactionDueCustomRaw( Expression<Func<TransactionDue, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TransactionDueDao.GetTransactionDueCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TransactionDue>> GetTransactionDueCustomList( Expression<Func<TransactionDue, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionDue, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TransactionDue>> response = new BusinessResponse<BaseListReturnType<TransactionDue>>();
		    try
		    {
			    response.Result = GetTransactionDueCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TransactionDue> GetTransactionDueCustomListRaw( Expression<Func<TransactionDue, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionDue, dynamic> orderExpression = null)
		{
            return daoFactory.TransactionDueDao.GetTransactionDueCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransactionDue(TransactionDue transactionDue)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransactionDueRaw(transactionDue);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransactionDueRaw(TransactionDue transactionDue)
        {
            daoFactory.TransactionDueDao.SaveTransactionDue(transactionDue);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransactionDue(TransactionDue transactionDue)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransactionDueRaw(transactionDue);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransactionDueRaw(TransactionDue transactionDue)
        {
            daoFactory.TransactionDueDao.SaveOnlyTransactionDue(transactionDue);
            return true;
        }

        public BusinessResponse<bool> DeleteTransactionDue(TransactionDue transactionDue)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransactionDueRaw(transactionDue);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransactionDueRaw(TransactionDue transactionDue)
        {
            daoFactory.TransactionDueDao.DeleteTransactionDue(transactionDue);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransactionDue(TransactionDue transactionDue)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransactionDueRaw(transactionDue);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransactionDueRaw(TransactionDue transactionDue)
        {
            daoFactory.TransactionDueDao.DeletePermanentlyTransactionDue(transactionDue);
            return true;
        }
	}
	public partial class TransactionDue_TransactionService: BaseService
	{
	    public BusinessResponse<List<TransactionDue_Transaction>> GetAllTransactionDue_Transaction(bool shouldRemap=false)
        {
            BusinessResponse<List<TransactionDue_Transaction>> response = new BusinessResponse<List<TransactionDue_Transaction>>();
		    try
		    {
			    response.Result = GetAllTransactionDue_TransactionRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TransactionDue_Transaction> GetAllTransactionDue_TransactionRaw(bool shouldRemap=false)
        {
            return daoFactory.TransactionDue_TransactionDao.GetAllTransactionDue_Transaction(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> GetAllTransactionDue_TransactionByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue_Transaction, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionDue_Transaction, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> response = new BusinessResponse<BaseListReturnType<TransactionDue_Transaction>>();
		    try
		    {
			    response.Result = GetAllTransactionDue_TransactionByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue_Transaction, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionDue_Transaction, dynamic> orderExpression = null)
        {
            return daoFactory.TransactionDue_TransactionDao.GetAllTransactionDue_TransactionByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> GetAllTransactionDue_TransactionWithTransactionDueDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue_Transaction, bool>> expression = null,bool shouldRemap=false, Func<TransactionDue_Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionDue_TransactionByPage(sortingPagingInfo, expression,new List<string>(){"TransactionDue"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> GetAllTransactionDue_TransactionWithTransactionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionDue_Transaction, bool>> expression = null,bool shouldRemap=false, Func<TransactionDue_Transaction, dynamic> orderExpression = null)
			{
				return GetAllTransactionDue_TransactionByPage(sortingPagingInfo, expression,new List<string>(){"Transaction"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> GetAllTransactionDue_TransactionWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> response = new BusinessResponse<BaseListReturnType<TransactionDue_Transaction>>();
            try
            {
                response.Result = GetAllTransactionDue_TransactionWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionDue_TransactionDao.GetAllTransactionDue_TransactionWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TransactionDue_Transaction>> GetTransactionDue_TransactionListByIdList(List<long> transactionDue_TransactionIds)
        {
            BusinessResponse<List<TransactionDue_Transaction>> response = new BusinessResponse<List<TransactionDue_Transaction>>();
            try
            {
                response.Result = GetTransactionDue_TransactionListByIdListRaw(transactionDue_TransactionIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TransactionDue_Transaction> GetTransactionDue_TransactionListByIdListRaw(List<long> transactionDue_TransactionIds)
        {
            return daoFactory.TransactionDue_TransactionDao.GetTransactionDue_TransactionListByIdList(transactionDue_TransactionIds);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> GetAllTransactionDue_TransactionWithTransactionDueDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> response = new BusinessResponse<BaseListReturnType<TransactionDue_Transaction>>();
            try
            {
                response.Result = GetAllTransactionDue_TransactionWithTransactionDueDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionWithTransactionDueDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionDue_TransactionWitDetailsRaw(new List<string>() { "TransactionDue" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> GetAllTransactionDue_TransactionListByTransactionDue(long idTransactionDue)
        {
            BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> response = new BusinessResponse<BaseListReturnType<TransactionDue_Transaction>>();
            try
            {
                response.Result = GetAllTransactionDue_TransactionListByTransactionDueRaw(idTransactionDue);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionListByTransactionDueRaw(long idTransactionDue)
        {
            return daoFactory.TransactionDue_TransactionDao.GetAllTransactionDue_TransactionListByTransactionDue(idTransactionDue);
        }

        public BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> GetAllTransactionDue_TransactionListByTransactionDueByPage(long idTransactionDue, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> response = new BusinessResponse<BaseListReturnType<TransactionDue_Transaction>>();
            try
            {
                response.Result = GetAllTransactionDue_TransactionListByTransactionDueByPageRaw(idTransactionDue, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionListByTransactionDueByPageRaw(long idTransactionDue,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDue_TransactionDao.GetAllTransactionDue_TransactionListByTransactionDueByPage(idTransactionDue, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> GetAllTransactionDue_TransactionWithTransactionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> response = new BusinessResponse<BaseListReturnType<TransactionDue_Transaction>>();
            try
            {
                response.Result = GetAllTransactionDue_TransactionWithTransactionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionWithTransactionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionDue_TransactionWitDetailsRaw(new List<string>() { "Transaction" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> GetAllTransactionDue_TransactionListByTransaction(long idTransaction)
        {
            BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> response = new BusinessResponse<BaseListReturnType<TransactionDue_Transaction>>();
            try
            {
                response.Result = GetAllTransactionDue_TransactionListByTransactionRaw(idTransaction);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionListByTransactionRaw(long idTransaction)
        {
            return daoFactory.TransactionDue_TransactionDao.GetAllTransactionDue_TransactionListByTransaction(idTransaction);
        }

        public BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> GetAllTransactionDue_TransactionListByTransactionByPage(long idTransaction, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> response = new BusinessResponse<BaseListReturnType<TransactionDue_Transaction>>();
            try
            {
                response.Result = GetAllTransactionDue_TransactionListByTransactionByPageRaw(idTransaction, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionDue_Transaction> GetAllTransactionDue_TransactionListByTransactionByPageRaw(long idTransaction,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionDue_TransactionDao.GetAllTransactionDue_TransactionListByTransactionByPage(idTransaction, sortingPagingInfo);
        }

		
		



		public BusinessResponse<TransactionDue_Transaction> GetTransactionDue_TransactionWithTransactionDueDetails(long idTransactionDue_Transaction,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDue_Transaction> response = new BusinessResponse<TransactionDue_Transaction>();
            try
            {
                response.Result = GetTransactionDue_TransactionWithTransactionDueDetailsRaw(idTransactionDue_Transaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionDue_Transaction GetTransactionDue_TransactionWithTransactionDueDetailsRaw(long idTransactionDue_Transaction,bool shouldRemap=false)
        {
            return GetTransactionDue_TransactionWitDetailsRaw(idTransactionDue_Transaction,new List<string>() { "TransactionDue"},shouldRemap);
        }

		



		public BusinessResponse<TransactionDue_Transaction> GetTransactionDue_TransactionWithTransactionDetails(long idTransactionDue_Transaction,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDue_Transaction> response = new BusinessResponse<TransactionDue_Transaction>();
            try
            {
                response.Result = GetTransactionDue_TransactionWithTransactionDetailsRaw(idTransactionDue_Transaction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionDue_Transaction GetTransactionDue_TransactionWithTransactionDetailsRaw(long idTransactionDue_Transaction,bool shouldRemap=false)
        {
            return GetTransactionDue_TransactionWitDetailsRaw(idTransactionDue_Transaction,new List<string>() { "Transaction"},shouldRemap);
        }

		
        public BusinessResponse<TransactionDue_Transaction> GetTransactionDue_Transaction(long idTransactionDue_Transaction,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDue_Transaction> response = new BusinessResponse<TransactionDue_Transaction>();
		    try
		    {
			    response.Result = GetTransactionDue_TransactionRaw(idTransactionDue_Transaction,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionDue_Transaction GetTransactionDue_TransactionRaw(long idTransactionDue_Transaction,bool shouldRemap=false)
        {
            return daoFactory.TransactionDue_TransactionDao.GetTransactionDue_Transaction(idTransactionDue_Transaction,shouldRemap);
        }

        
        public BusinessResponse<TransactionDue_Transaction> GetTransactionDue_TransactionWitDetails(long idTransactionDue_Transaction,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TransactionDue_Transaction> response = new BusinessResponse<TransactionDue_Transaction>();
		    try
		    {
			    response.Result = GetTransactionDue_TransactionWitDetailsRaw(idTransactionDue_Transaction,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionDue_Transaction GetTransactionDue_TransactionWitDetailsRaw(long idTransactionDue_Transaction,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionDue_TransactionDao.GetTransactionDue_TransactionWitDetails(idTransactionDue_Transaction,shouldRemap);
        }


		 public BusinessResponse<TransactionDue_Transaction> GetTransactionDue_TransactionCustom( Expression<Func<TransactionDue_Transaction, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TransactionDue_Transaction> response = new BusinessResponse<TransactionDue_Transaction>();
		    try
		    {
			    response.Result = GetTransactionDue_TransactionCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TransactionDue_Transaction GetTransactionDue_TransactionCustomRaw( Expression<Func<TransactionDue_Transaction, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TransactionDue_TransactionDao.GetTransactionDue_TransactionCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> GetTransactionDue_TransactionCustomList( Expression<Func<TransactionDue_Transaction, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionDue_Transaction, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TransactionDue_Transaction>> response = new BusinessResponse<BaseListReturnType<TransactionDue_Transaction>>();
		    try
		    {
			    response.Result = GetTransactionDue_TransactionCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TransactionDue_Transaction> GetTransactionDue_TransactionCustomListRaw( Expression<Func<TransactionDue_Transaction, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionDue_Transaction, dynamic> orderExpression = null)
		{
            return daoFactory.TransactionDue_TransactionDao.GetTransactionDue_TransactionCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransactionDue_Transaction(TransactionDue_Transaction transactionDue_Transaction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransactionDue_TransactionRaw(transactionDue_Transaction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransactionDue_TransactionRaw(TransactionDue_Transaction transactionDue_Transaction)
        {
            daoFactory.TransactionDue_TransactionDao.SaveTransactionDue_Transaction(transactionDue_Transaction);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransactionDue_Transaction(TransactionDue_Transaction transactionDue_Transaction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransactionDue_TransactionRaw(transactionDue_Transaction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransactionDue_TransactionRaw(TransactionDue_Transaction transactionDue_Transaction)
        {
            daoFactory.TransactionDue_TransactionDao.SaveOnlyTransactionDue_Transaction(transactionDue_Transaction);
            return true;
        }

        public BusinessResponse<bool> DeleteTransactionDue_Transaction(TransactionDue_Transaction transactionDue_Transaction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransactionDue_TransactionRaw(transactionDue_Transaction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransactionDue_TransactionRaw(TransactionDue_Transaction transactionDue_Transaction)
        {
            daoFactory.TransactionDue_TransactionDao.DeleteTransactionDue_Transaction(transactionDue_Transaction);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransactionDue_Transaction(TransactionDue_Transaction transactionDue_Transaction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransactionDue_TransactionRaw(transactionDue_Transaction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransactionDue_TransactionRaw(TransactionDue_Transaction transactionDue_Transaction)
        {
            daoFactory.TransactionDue_TransactionDao.DeletePermanentlyTransactionDue_Transaction(transactionDue_Transaction);
            return true;
        }
	}
	public partial class TransactionPresetService: BaseService
	{
	    public BusinessResponse<List<TransactionPreset>> GetAllTransactionPresets(bool shouldRemap=false)
        {
            BusinessResponse<List<TransactionPreset>> response = new BusinessResponse<List<TransactionPreset>>();
		    try
		    {
			    response.Result = GetAllTransactionPresetsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TransactionPreset> GetAllTransactionPresetsRaw(bool shouldRemap=false)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresets(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionPreset, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
		    try
		    {
			    response.Result = GetAllTransactionPresetsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionPreset, dynamic> orderExpression = null)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresetsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithBankStatementHitList_TransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap=false, Func<TransactionPreset, dynamic> orderExpression = null)
			{
				return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementHitList_TransactionPreset"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithBankStatementStagingHit_TransactionPresetDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap=false, Func<TransactionPreset, dynamic> orderExpression = null)
			{
				return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagingHit_TransactionPreset"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithTransactionDetailPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap=false, Func<TransactionPreset, dynamic> orderExpression = null)
			{
				return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionDetailPresets"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithCustomerDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap=false, Func<TransactionPreset, dynamic> orderExpression = null)
			{
				return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,new List<string>(){"Customer"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithTransactionAccountDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap=false, Func<TransactionPreset, dynamic> orderExpression = null)
			{
				return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionAccount"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithTransactionClassDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap=false, Func<TransactionPreset, dynamic> orderExpression = null)
			{
				return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionClass"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithTransactionTemplateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap=false, Func<TransactionPreset, dynamic> orderExpression = null)
			{
				return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionTemplate"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithTransactionTypeDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionPreset, bool>> expression = null,bool shouldRemap=false, Func<TransactionPreset, dynamic> orderExpression = null)
			{
				return GetAllTransactionPresetsByPage(sortingPagingInfo, expression,new List<string>(){"TransactionType"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresetWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TransactionPreset>> GetTransactionPresetListByIdList(List<long> transactionPresetIds)
        {
            BusinessResponse<List<TransactionPreset>> response = new BusinessResponse<List<TransactionPreset>>();
            try
            {
                response.Result = GetTransactionPresetListByIdListRaw(transactionPresetIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TransactionPreset> GetTransactionPresetListByIdListRaw(List<long> transactionPresetIds)
        {
            return daoFactory.TransactionPresetDao.GetTransactionPresetListByIdList(transactionPresetIds);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithBankStatementHitList_TransactionPresetDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetsWithBankStatementHitList_TransactionPresetDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithBankStatementHitList_TransactionPresetDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionPresetWitDetailsRaw(new List<string>() { "BankStatementHitList_TransactionPreset" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithBankStatementStagingHit_TransactionPresetDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetsWithBankStatementStagingHit_TransactionPresetDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithBankStatementStagingHit_TransactionPresetDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionPresetWitDetailsRaw(new List<string>() { "BankStatementStagingHit_TransactionPreset" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithTransactionDetailPresetsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetsWithTransactionDetailPresetsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionDetailPresetsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionPresetWitDetailsRaw(new List<string>() { "TransactionDetailPresets" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithCustomerDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetsWithCustomerDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithCustomerDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionPresetWitDetailsRaw(new List<string>() { "Customer" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetListByCustomer(long idCustomer)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetListByCustomerRaw(idCustomer);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByCustomerRaw(long idCustomer)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresetListByCustomer(idCustomer);
        }

        public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetListByCustomerByPage(long idCustomer, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetListByCustomerByPageRaw(idCustomer, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByCustomerByPageRaw(long idCustomer,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresetListByCustomerByPage(idCustomer, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithTransactionAccountDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetsWithTransactionAccountDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionAccountDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionPresetWitDetailsRaw(new List<string>() { "TransactionAccount" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetListByTransactionAccount(long idTransactionAccount)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetListByTransactionAccountRaw(idTransactionAccount);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionAccountRaw(long idTransactionAccount)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresetListByTransactionAccount(idTransactionAccount);
        }

        public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetListByTransactionAccountByPage(long idTransactionAccount, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetListByTransactionAccountByPageRaw(idTransactionAccount, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionAccountByPageRaw(long idTransactionAccount,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresetListByTransactionAccountByPage(idTransactionAccount, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithTransactionClassDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetsWithTransactionClassDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionClassDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionPresetWitDetailsRaw(new List<string>() { "TransactionClass" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetListByTransactionClass(long idTransactionClass)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetListByTransactionClassRaw(idTransactionClass);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionClassRaw(long idTransactionClass)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresetListByTransactionClass(idTransactionClass);
        }

        public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetListByTransactionClassByPage(long idTransactionClass, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetListByTransactionClassByPageRaw(idTransactionClass, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionClassByPageRaw(long idTransactionClass,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresetListByTransactionClassByPage(idTransactionClass, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithTransactionTemplateDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetsWithTransactionTemplateDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionTemplateDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionPresetWitDetailsRaw(new List<string>() { "TransactionTemplate" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetListByTransactionTemplate(long idTransactionTemplate)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetListByTransactionTemplateRaw(idTransactionTemplate);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionTemplateRaw(long idTransactionTemplate)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresetListByTransactionTemplate(idTransactionTemplate);
        }

        public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetListByTransactionTemplateByPage(long idTransactionTemplate, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetListByTransactionTemplateByPageRaw(idTransactionTemplate, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionTemplateByPageRaw(long idTransactionTemplate,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresetListByTransactionTemplateByPage(idTransactionTemplate, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetsWithTransactionTypeDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetsWithTransactionTypeDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetsWithTransactionTypeDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionPresetWitDetailsRaw(new List<string>() { "TransactionType" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetListByTransactionType(long idTransactionType)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetListByTransactionTypeRaw(idTransactionType);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionTypeRaw(long idTransactionType)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresetListByTransactionType(idTransactionType);
        }

        public BusinessResponse<BaseListReturnType<TransactionPreset>> GetAllTransactionPresetListByTransactionTypeByPage(long idTransactionType, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
            try
            {
                response.Result = GetAllTransactionPresetListByTransactionTypeByPageRaw(idTransactionType, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionPreset> GetAllTransactionPresetListByTransactionTypeByPageRaw(long idTransactionType,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.TransactionPresetDao.GetAllTransactionPresetListByTransactionTypeByPage(idTransactionType, sortingPagingInfo);
        }

		
		
			public BusinessResponse<List<BankStatementHitList_TransactionPreset>>  UpdateBankStatementHitList_TransactionPresetForTransactionPresetWithoutSavingNewItem(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idTransactionPreset)
            {
                BusinessResponse<List<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<List<BankStatementHitList_TransactionPreset>>();
                try
                {
                    response.Result = UpdateBankStatementHitList_TransactionPresetForTransactionPresetWithoutSavingNewItemRaw(newBankStatementHitList_TransactionPreset, idTransactionPreset);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementHitList_TransactionPreset> UpdateBankStatementHitList_TransactionPresetForTransactionPresetWithoutSavingNewItemRaw(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idTransactionPreset)
            {
                return daoFactory.TransactionPresetDao.UpdateBankStatementHitList_TransactionPresetForTransactionPresetWithoutSavingNewItem(newBankStatementHitList_TransactionPreset,idTransactionPreset); 
            }



		    public BusinessResponse<List<BankStatementHitList_TransactionPreset>>  UpdateBankStatementHitList_TransactionPresetForTransactionPreset(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idTransactionPreset)
            {
                BusinessResponse<List<BankStatementHitList_TransactionPreset>> response = new BusinessResponse<List<BankStatementHitList_TransactionPreset>>();
                try
                {
                    response.Result = UpdateBankStatementHitList_TransactionPresetForTransactionPresetRaw(newBankStatementHitList_TransactionPreset, idTransactionPreset);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementHitList_TransactionPreset> UpdateBankStatementHitList_TransactionPresetForTransactionPresetRaw(List<BankStatementHitList_TransactionPreset> newBankStatementHitList_TransactionPreset,long idTransactionPreset)
            {
                return daoFactory.TransactionPresetDao.UpdateBankStatementHitList_TransactionPresetForTransactionPreset(newBankStatementHitList_TransactionPreset,idTransactionPreset); 
            }





		public BusinessResponse<TransactionPreset> GetTransactionPresetWithBankStatementHitList_TransactionPresetDetails(long idTransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionPreset> response = new BusinessResponse<TransactionPreset>();
            try
            {
                response.Result = GetTransactionPresetWithBankStatementHitList_TransactionPresetDetailsRaw(idTransactionPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionPreset GetTransactionPresetWithBankStatementHitList_TransactionPresetDetailsRaw(long idTransactionPreset,bool shouldRemap=false)
        {
            return GetTransactionPresetWitDetailsRaw(idTransactionPreset,new List<string>() { "BankStatementHitList_TransactionPreset"},shouldRemap);
        }

		
			public BusinessResponse<List<BankStatementStagingHit_TransactionPreset>>  UpdateBankStatementStagingHit_TransactionPresetForTransactionPresetWithoutSavingNewItem(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idTransactionPreset)
            {
                BusinessResponse<List<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<List<BankStatementStagingHit_TransactionPreset>>();
                try
                {
                    response.Result = UpdateBankStatementStagingHit_TransactionPresetForTransactionPresetWithoutSavingNewItemRaw(newBankStatementStagingHit_TransactionPreset, idTransactionPreset);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingHit_TransactionPreset> UpdateBankStatementStagingHit_TransactionPresetForTransactionPresetWithoutSavingNewItemRaw(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idTransactionPreset)
            {
                return daoFactory.TransactionPresetDao.UpdateBankStatementStagingHit_TransactionPresetForTransactionPresetWithoutSavingNewItem(newBankStatementStagingHit_TransactionPreset,idTransactionPreset); 
            }



		    public BusinessResponse<List<BankStatementStagingHit_TransactionPreset>>  UpdateBankStatementStagingHit_TransactionPresetForTransactionPreset(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idTransactionPreset)
            {
                BusinessResponse<List<BankStatementStagingHit_TransactionPreset>> response = new BusinessResponse<List<BankStatementStagingHit_TransactionPreset>>();
                try
                {
                    response.Result = UpdateBankStatementStagingHit_TransactionPresetForTransactionPresetRaw(newBankStatementStagingHit_TransactionPreset, idTransactionPreset);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStagingHit_TransactionPreset> UpdateBankStatementStagingHit_TransactionPresetForTransactionPresetRaw(List<BankStatementStagingHit_TransactionPreset> newBankStatementStagingHit_TransactionPreset,long idTransactionPreset)
            {
                return daoFactory.TransactionPresetDao.UpdateBankStatementStagingHit_TransactionPresetForTransactionPreset(newBankStatementStagingHit_TransactionPreset,idTransactionPreset); 
            }





		public BusinessResponse<TransactionPreset> GetTransactionPresetWithBankStatementStagingHit_TransactionPresetDetails(long idTransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionPreset> response = new BusinessResponse<TransactionPreset>();
            try
            {
                response.Result = GetTransactionPresetWithBankStatementStagingHit_TransactionPresetDetailsRaw(idTransactionPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionPreset GetTransactionPresetWithBankStatementStagingHit_TransactionPresetDetailsRaw(long idTransactionPreset,bool shouldRemap=false)
        {
            return GetTransactionPresetWitDetailsRaw(idTransactionPreset,new List<string>() { "BankStatementStagingHit_TransactionPreset"},shouldRemap);
        }

		
			public BusinessResponse<List<TransactionDetailPreset>>  UpdateTransactionDetailPresetsForTransactionPresetWithoutSavingNewItem(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionPreset)
            {
                BusinessResponse<List<TransactionDetailPreset>> response = new BusinessResponse<List<TransactionDetailPreset>>();
                try
                {
                    response.Result = UpdateTransactionDetailPresetsForTransactionPresetWithoutSavingNewItemRaw(newTransactionDetailPresets, idTransactionPreset);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDetailPreset> UpdateTransactionDetailPresetsForTransactionPresetWithoutSavingNewItemRaw(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionPreset)
            {
                return daoFactory.TransactionPresetDao.UpdateTransactionDetailPresetsForTransactionPresetWithoutSavingNewItem(newTransactionDetailPresets,idTransactionPreset); 
            }



		    public BusinessResponse<List<TransactionDetailPreset>>  UpdateTransactionDetailPresetsForTransactionPreset(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionPreset)
            {
                BusinessResponse<List<TransactionDetailPreset>> response = new BusinessResponse<List<TransactionDetailPreset>>();
                try
                {
                    response.Result = UpdateTransactionDetailPresetsForTransactionPresetRaw(newTransactionDetailPresets, idTransactionPreset);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionDetailPreset> UpdateTransactionDetailPresetsForTransactionPresetRaw(List<TransactionDetailPreset> newTransactionDetailPresets,long idTransactionPreset)
            {
                return daoFactory.TransactionPresetDao.UpdateTransactionDetailPresetsForTransactionPreset(newTransactionDetailPresets,idTransactionPreset); 
            }





		public BusinessResponse<TransactionPreset> GetTransactionPresetWithTransactionDetailPresetsDetails(long idTransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionPreset> response = new BusinessResponse<TransactionPreset>();
            try
            {
                response.Result = GetTransactionPresetWithTransactionDetailPresetsDetailsRaw(idTransactionPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionPreset GetTransactionPresetWithTransactionDetailPresetsDetailsRaw(long idTransactionPreset,bool shouldRemap=false)
        {
            return GetTransactionPresetWitDetailsRaw(idTransactionPreset,new List<string>() { "TransactionDetailPresets"},shouldRemap);
        }

		



		public BusinessResponse<TransactionPreset> GetTransactionPresetWithCustomerDetails(long idTransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionPreset> response = new BusinessResponse<TransactionPreset>();
            try
            {
                response.Result = GetTransactionPresetWithCustomerDetailsRaw(idTransactionPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionPreset GetTransactionPresetWithCustomerDetailsRaw(long idTransactionPreset,bool shouldRemap=false)
        {
            return GetTransactionPresetWitDetailsRaw(idTransactionPreset,new List<string>() { "Customer"},shouldRemap);
        }

		



		public BusinessResponse<TransactionPreset> GetTransactionPresetWithTransactionAccountDetails(long idTransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionPreset> response = new BusinessResponse<TransactionPreset>();
            try
            {
                response.Result = GetTransactionPresetWithTransactionAccountDetailsRaw(idTransactionPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionPreset GetTransactionPresetWithTransactionAccountDetailsRaw(long idTransactionPreset,bool shouldRemap=false)
        {
            return GetTransactionPresetWitDetailsRaw(idTransactionPreset,new List<string>() { "TransactionAccount"},shouldRemap);
        }

		



		public BusinessResponse<TransactionPreset> GetTransactionPresetWithTransactionClassDetails(long idTransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionPreset> response = new BusinessResponse<TransactionPreset>();
            try
            {
                response.Result = GetTransactionPresetWithTransactionClassDetailsRaw(idTransactionPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionPreset GetTransactionPresetWithTransactionClassDetailsRaw(long idTransactionPreset,bool shouldRemap=false)
        {
            return GetTransactionPresetWitDetailsRaw(idTransactionPreset,new List<string>() { "TransactionClass"},shouldRemap);
        }

		



		public BusinessResponse<TransactionPreset> GetTransactionPresetWithTransactionTemplateDetails(long idTransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionPreset> response = new BusinessResponse<TransactionPreset>();
            try
            {
                response.Result = GetTransactionPresetWithTransactionTemplateDetailsRaw(idTransactionPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionPreset GetTransactionPresetWithTransactionTemplateDetailsRaw(long idTransactionPreset,bool shouldRemap=false)
        {
            return GetTransactionPresetWitDetailsRaw(idTransactionPreset,new List<string>() { "TransactionTemplate"},shouldRemap);
        }

		



		public BusinessResponse<TransactionPreset> GetTransactionPresetWithTransactionTypeDetails(long idTransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionPreset> response = new BusinessResponse<TransactionPreset>();
            try
            {
                response.Result = GetTransactionPresetWithTransactionTypeDetailsRaw(idTransactionPreset,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionPreset GetTransactionPresetWithTransactionTypeDetailsRaw(long idTransactionPreset,bool shouldRemap=false)
        {
            return GetTransactionPresetWitDetailsRaw(idTransactionPreset,new List<string>() { "TransactionType"},shouldRemap);
        }

		
        public BusinessResponse<TransactionPreset> GetTransactionPreset(long idTransactionPreset,bool shouldRemap=false)
        {
            BusinessResponse<TransactionPreset> response = new BusinessResponse<TransactionPreset>();
		    try
		    {
			    response.Result = GetTransactionPresetsRaw(idTransactionPreset,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionPreset GetTransactionPresetsRaw(long idTransactionPreset,bool shouldRemap=false)
        {
            return daoFactory.TransactionPresetDao.GetTransactionPreset(idTransactionPreset,shouldRemap);
        }

        
        public BusinessResponse<TransactionPreset> GetTransactionPresetWitDetails(long idTransactionPreset,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TransactionPreset> response = new BusinessResponse<TransactionPreset>();
		    try
		    {
			    response.Result = GetTransactionPresetWitDetailsRaw(idTransactionPreset,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionPreset GetTransactionPresetWitDetailsRaw(long idTransactionPreset,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionPresetDao.GetTransactionPresetWitDetails(idTransactionPreset,shouldRemap);
        }


		 public BusinessResponse<TransactionPreset> GetTransactionPresetCustom( Expression<Func<TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TransactionPreset> response = new BusinessResponse<TransactionPreset>();
		    try
		    {
			    response.Result = GetTransactionPresetCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TransactionPreset GetTransactionPresetCustomRaw( Expression<Func<TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TransactionPresetDao.GetTransactionPresetCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TransactionPreset>> GetTransactionPresetCustomList( Expression<Func<TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionPreset, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TransactionPreset>> response = new BusinessResponse<BaseListReturnType<TransactionPreset>>();
		    try
		    {
			    response.Result = GetTransactionPresetCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TransactionPreset> GetTransactionPresetCustomListRaw( Expression<Func<TransactionPreset, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionPreset, dynamic> orderExpression = null)
		{
            return daoFactory.TransactionPresetDao.GetTransactionPresetCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransactionPreset(TransactionPreset transactionPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransactionPresetRaw(transactionPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransactionPresetRaw(TransactionPreset transactionPreset)
        {
            daoFactory.TransactionPresetDao.SaveTransactionPreset(transactionPreset);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransactionPreset(TransactionPreset transactionPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransactionPresetRaw(transactionPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransactionPresetRaw(TransactionPreset transactionPreset)
        {
            daoFactory.TransactionPresetDao.SaveOnlyTransactionPreset(transactionPreset);
            return true;
        }

        public BusinessResponse<bool> DeleteTransactionPreset(TransactionPreset transactionPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransactionPresetRaw(transactionPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransactionPresetRaw(TransactionPreset transactionPreset)
        {
            daoFactory.TransactionPresetDao.DeleteTransactionPreset(transactionPreset);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransactionPreset(TransactionPreset transactionPreset)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransactionPresetRaw(transactionPreset);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransactionPresetRaw(TransactionPreset transactionPreset)
        {
            daoFactory.TransactionPresetDao.DeletePermanentlyTransactionPreset(transactionPreset);
            return true;
        }
	}
	public partial class TransactionStateService: BaseService
	{
	    public BusinessResponse<List<TransactionState>> GetAllTransactionStates(bool shouldRemap=false)
        {
            BusinessResponse<List<TransactionState>> response = new BusinessResponse<List<TransactionState>>();
		    try
		    {
			    response.Result = GetAllTransactionStatesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TransactionState> GetAllTransactionStatesRaw(bool shouldRemap=false)
        {
            return daoFactory.TransactionStateDao.GetAllTransactionStates(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TransactionState>> GetAllTransactionStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionState, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TransactionState>> response = new BusinessResponse<BaseListReturnType<TransactionState>>();
		    try
		    {
			    response.Result = GetAllTransactionStatesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TransactionState> GetAllTransactionStatesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionState, dynamic> orderExpression = null)
        {
            return daoFactory.TransactionStateDao.GetAllTransactionStatesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TransactionState>> GetAllTransactionStatesWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionState, bool>> expression = null,bool shouldRemap=false, Func<TransactionState, dynamic> orderExpression = null)
			{
				return GetAllTransactionStatesByPage(sortingPagingInfo, expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TransactionState>> GetAllTransactionStateWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionState>> response = new BusinessResponse<BaseListReturnType<TransactionState>>();
            try
            {
                response.Result = GetAllTransactionStateWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionState> GetAllTransactionStateWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionStateDao.GetAllTransactionStateWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TransactionState>> GetTransactionStateListByIdList(List<long> transactionStateIds)
        {
            BusinessResponse<List<TransactionState>> response = new BusinessResponse<List<TransactionState>>();
            try
            {
                response.Result = GetTransactionStateListByIdListRaw(transactionStateIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TransactionState> GetTransactionStateListByIdListRaw(List<long> transactionStateIds)
        {
            return daoFactory.TransactionStateDao.GetTransactionStateListByIdList(transactionStateIds);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionState>> GetAllTransactionStatesWithTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionState>> response = new BusinessResponse<BaseListReturnType<TransactionState>>();
            try
            {
                response.Result = GetAllTransactionStatesWithTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionState> GetAllTransactionStatesWithTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionStateWitDetailsRaw(new List<string>() { "Transactions" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Transaction>>  UpdateTransactionsForTransactionStateWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionState)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForTransactionStateWithoutSavingNewItemRaw(newTransactions, idTransactionState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForTransactionStateWithoutSavingNewItemRaw(List<Transaction> newTransactions,long idTransactionState)
            {
                return daoFactory.TransactionStateDao.UpdateTransactionsForTransactionStateWithoutSavingNewItem(newTransactions,idTransactionState); 
            }



		    public BusinessResponse<List<Transaction>>  UpdateTransactionsForTransactionState(List<Transaction> newTransactions,long idTransactionState)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForTransactionStateRaw(newTransactions, idTransactionState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForTransactionStateRaw(List<Transaction> newTransactions,long idTransactionState)
            {
                return daoFactory.TransactionStateDao.UpdateTransactionsForTransactionState(newTransactions,idTransactionState); 
            }





		public BusinessResponse<TransactionState> GetTransactionStateWithTransactionsDetails(long idTransactionState,bool shouldRemap=false)
        {
            BusinessResponse<TransactionState> response = new BusinessResponse<TransactionState>();
            try
            {
                response.Result = GetTransactionStateWithTransactionsDetailsRaw(idTransactionState,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionState GetTransactionStateWithTransactionsDetailsRaw(long idTransactionState,bool shouldRemap=false)
        {
            return GetTransactionStateWitDetailsRaw(idTransactionState,new List<string>() { "Transactions"},shouldRemap);
        }

		
        public BusinessResponse<TransactionState> GetTransactionState(long idTransactionState,bool shouldRemap=false)
        {
            BusinessResponse<TransactionState> response = new BusinessResponse<TransactionState>();
		    try
		    {
			    response.Result = GetTransactionStatesRaw(idTransactionState,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionState GetTransactionStatesRaw(long idTransactionState,bool shouldRemap=false)
        {
            return daoFactory.TransactionStateDao.GetTransactionState(idTransactionState,shouldRemap);
        }

        
        public BusinessResponse<TransactionState> GetTransactionStateWitDetails(long idTransactionState,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TransactionState> response = new BusinessResponse<TransactionState>();
		    try
		    {
			    response.Result = GetTransactionStateWitDetailsRaw(idTransactionState,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionState GetTransactionStateWitDetailsRaw(long idTransactionState,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionStateDao.GetTransactionStateWitDetails(idTransactionState,shouldRemap);
        }


		 public BusinessResponse<TransactionState> GetTransactionStateCustom( Expression<Func<TransactionState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TransactionState> response = new BusinessResponse<TransactionState>();
		    try
		    {
			    response.Result = GetTransactionStateCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TransactionState GetTransactionStateCustomRaw( Expression<Func<TransactionState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TransactionStateDao.GetTransactionStateCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TransactionState>> GetTransactionStateCustomList( Expression<Func<TransactionState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionState, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TransactionState>> response = new BusinessResponse<BaseListReturnType<TransactionState>>();
		    try
		    {
			    response.Result = GetTransactionStateCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TransactionState> GetTransactionStateCustomListRaw( Expression<Func<TransactionState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionState, dynamic> orderExpression = null)
		{
            return daoFactory.TransactionStateDao.GetTransactionStateCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransactionState(TransactionState transactionState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransactionStateRaw(transactionState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransactionStateRaw(TransactionState transactionState)
        {
            daoFactory.TransactionStateDao.SaveTransactionState(transactionState);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransactionState(TransactionState transactionState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransactionStateRaw(transactionState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransactionStateRaw(TransactionState transactionState)
        {
            daoFactory.TransactionStateDao.SaveOnlyTransactionState(transactionState);
            return true;
        }

        public BusinessResponse<bool> DeleteTransactionState(TransactionState transactionState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransactionStateRaw(transactionState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransactionStateRaw(TransactionState transactionState)
        {
            daoFactory.TransactionStateDao.DeleteTransactionState(transactionState);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransactionState(TransactionState transactionState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransactionStateRaw(transactionState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransactionStateRaw(TransactionState transactionState)
        {
            daoFactory.TransactionStateDao.DeletePermanentlyTransactionState(transactionState);
            return true;
        }
	}
	public partial class TransactionTemplateService: BaseService
	{
	    public BusinessResponse<List<TransactionTemplate>> GetAllTransactionTemplates(bool shouldRemap=false)
        {
            BusinessResponse<List<TransactionTemplate>> response = new BusinessResponse<List<TransactionTemplate>>();
		    try
		    {
			    response.Result = GetAllTransactionTemplatesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TransactionTemplate> GetAllTransactionTemplatesRaw(bool shouldRemap=false)
        {
            return daoFactory.TransactionTemplateDao.GetAllTransactionTemplates(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TransactionTemplate>> GetAllTransactionTemplatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionTemplate, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TransactionTemplate>> response = new BusinessResponse<BaseListReturnType<TransactionTemplate>>();
		    try
		    {
			    response.Result = GetAllTransactionTemplatesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionTemplate, dynamic> orderExpression = null)
        {
            return daoFactory.TransactionTemplateDao.GetAllTransactionTemplatesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TransactionTemplate>> GetAllTransactionTemplatesWithTransactionPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null,bool shouldRemap=false, Func<TransactionTemplate, dynamic> orderExpression = null)
			{
				return GetAllTransactionTemplatesByPage(sortingPagingInfo, expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionTemplate>> GetAllTransactionTemplatesWithBanksDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null,bool shouldRemap=false, Func<TransactionTemplate, dynamic> orderExpression = null)
			{
				return GetAllTransactionTemplatesByPage(sortingPagingInfo, expression,new List<string>(){"Banks"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionTemplate>> GetAllTransactionTemplatesWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionTemplate, bool>> expression = null,bool shouldRemap=false, Func<TransactionTemplate, dynamic> orderExpression = null)
			{
				return GetAllTransactionTemplatesByPage(sortingPagingInfo, expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TransactionTemplate>> GetAllTransactionTemplateWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionTemplate>> response = new BusinessResponse<BaseListReturnType<TransactionTemplate>>();
            try
            {
                response.Result = GetAllTransactionTemplateWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionTemplate> GetAllTransactionTemplateWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionTemplateDao.GetAllTransactionTemplateWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TransactionTemplate>> GetTransactionTemplateListByIdList(List<long> transactionTemplateIds)
        {
            BusinessResponse<List<TransactionTemplate>> response = new BusinessResponse<List<TransactionTemplate>>();
            try
            {
                response.Result = GetTransactionTemplateListByIdListRaw(transactionTemplateIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TransactionTemplate> GetTransactionTemplateListByIdListRaw(List<long> transactionTemplateIds)
        {
            return daoFactory.TransactionTemplateDao.GetTransactionTemplateListByIdList(transactionTemplateIds);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionTemplate>> GetAllTransactionTemplatesWithTransactionPresetsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionTemplate>> response = new BusinessResponse<BaseListReturnType<TransactionTemplate>>();
            try
            {
                response.Result = GetAllTransactionTemplatesWithTransactionPresetsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesWithTransactionPresetsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionTemplateWitDetailsRaw(new List<string>() { "TransactionPresets" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TransactionTemplate>> GetAllTransactionTemplatesWithBanksDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionTemplate>> response = new BusinessResponse<BaseListReturnType<TransactionTemplate>>();
            try
            {
                response.Result = GetAllTransactionTemplatesWithBanksDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesWithBanksDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionTemplateWitDetailsRaw(new List<string>() { "Banks" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TransactionTemplate>> GetAllTransactionTemplatesWithTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionTemplate>> response = new BusinessResponse<BaseListReturnType<TransactionTemplate>>();
            try
            {
                response.Result = GetAllTransactionTemplatesWithTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionTemplate> GetAllTransactionTemplatesWithTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionTemplateWitDetailsRaw(new List<string>() { "Transactions" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<TransactionPreset>>  UpdateTransactionPresetsForTransactionTemplateWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idTransactionTemplate)
            {
                BusinessResponse<List<TransactionPreset>> response = new BusinessResponse<List<TransactionPreset>>();
                try
                {
                    response.Result = UpdateTransactionPresetsForTransactionTemplateWithoutSavingNewItemRaw(newTransactionPresets, idTransactionTemplate);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionPreset> UpdateTransactionPresetsForTransactionTemplateWithoutSavingNewItemRaw(List<TransactionPreset> newTransactionPresets,long idTransactionTemplate)
            {
                return daoFactory.TransactionTemplateDao.UpdateTransactionPresetsForTransactionTemplateWithoutSavingNewItem(newTransactionPresets,idTransactionTemplate); 
            }



		    public BusinessResponse<List<TransactionPreset>>  UpdateTransactionPresetsForTransactionTemplate(List<TransactionPreset> newTransactionPresets,long idTransactionTemplate)
            {
                BusinessResponse<List<TransactionPreset>> response = new BusinessResponse<List<TransactionPreset>>();
                try
                {
                    response.Result = UpdateTransactionPresetsForTransactionTemplateRaw(newTransactionPresets, idTransactionTemplate);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionPreset> UpdateTransactionPresetsForTransactionTemplateRaw(List<TransactionPreset> newTransactionPresets,long idTransactionTemplate)
            {
                return daoFactory.TransactionTemplateDao.UpdateTransactionPresetsForTransactionTemplate(newTransactionPresets,idTransactionTemplate); 
            }





		public BusinessResponse<TransactionTemplate> GetTransactionTemplateWithTransactionPresetsDetails(long idTransactionTemplate,bool shouldRemap=false)
        {
            BusinessResponse<TransactionTemplate> response = new BusinessResponse<TransactionTemplate>();
            try
            {
                response.Result = GetTransactionTemplateWithTransactionPresetsDetailsRaw(idTransactionTemplate,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionTemplate GetTransactionTemplateWithTransactionPresetsDetailsRaw(long idTransactionTemplate,bool shouldRemap=false)
        {
            return GetTransactionTemplateWitDetailsRaw(idTransactionTemplate,new List<string>() { "TransactionPresets"},shouldRemap);
        }

		
			public BusinessResponse<List<Bank>>  UpdateBanksForTransactionTemplateWithoutSavingNewItem(List<Bank> newBanks,long idTransactionTemplate)
            {
                BusinessResponse<List<Bank>> response = new BusinessResponse<List<Bank>>();
                try
                {
                    response.Result = UpdateBanksForTransactionTemplateWithoutSavingNewItemRaw(newBanks, idTransactionTemplate);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Bank> UpdateBanksForTransactionTemplateWithoutSavingNewItemRaw(List<Bank> newBanks,long idTransactionTemplate)
            {
                return daoFactory.TransactionTemplateDao.UpdateBanksForTransactionTemplateWithoutSavingNewItem(newBanks,idTransactionTemplate); 
            }



		    public BusinessResponse<List<Bank>>  UpdateBanksForTransactionTemplate(List<Bank> newBanks,long idTransactionTemplate)
            {
                BusinessResponse<List<Bank>> response = new BusinessResponse<List<Bank>>();
                try
                {
                    response.Result = UpdateBanksForTransactionTemplateRaw(newBanks, idTransactionTemplate);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Bank> UpdateBanksForTransactionTemplateRaw(List<Bank> newBanks,long idTransactionTemplate)
            {
                return daoFactory.TransactionTemplateDao.UpdateBanksForTransactionTemplate(newBanks,idTransactionTemplate); 
            }





		public BusinessResponse<TransactionTemplate> GetTransactionTemplateWithBanksDetails(long idTransactionTemplate,bool shouldRemap=false)
        {
            BusinessResponse<TransactionTemplate> response = new BusinessResponse<TransactionTemplate>();
            try
            {
                response.Result = GetTransactionTemplateWithBanksDetailsRaw(idTransactionTemplate,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionTemplate GetTransactionTemplateWithBanksDetailsRaw(long idTransactionTemplate,bool shouldRemap=false)
        {
            return GetTransactionTemplateWitDetailsRaw(idTransactionTemplate,new List<string>() { "Banks"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction>>  UpdateTransactionsForTransactionTemplateWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionTemplate)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForTransactionTemplateWithoutSavingNewItemRaw(newTransactions, idTransactionTemplate);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForTransactionTemplateWithoutSavingNewItemRaw(List<Transaction> newTransactions,long idTransactionTemplate)
            {
                return daoFactory.TransactionTemplateDao.UpdateTransactionsForTransactionTemplateWithoutSavingNewItem(newTransactions,idTransactionTemplate); 
            }



		    public BusinessResponse<List<Transaction>>  UpdateTransactionsForTransactionTemplate(List<Transaction> newTransactions,long idTransactionTemplate)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForTransactionTemplateRaw(newTransactions, idTransactionTemplate);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForTransactionTemplateRaw(List<Transaction> newTransactions,long idTransactionTemplate)
            {
                return daoFactory.TransactionTemplateDao.UpdateTransactionsForTransactionTemplate(newTransactions,idTransactionTemplate); 
            }





		public BusinessResponse<TransactionTemplate> GetTransactionTemplateWithTransactionsDetails(long idTransactionTemplate,bool shouldRemap=false)
        {
            BusinessResponse<TransactionTemplate> response = new BusinessResponse<TransactionTemplate>();
            try
            {
                response.Result = GetTransactionTemplateWithTransactionsDetailsRaw(idTransactionTemplate,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionTemplate GetTransactionTemplateWithTransactionsDetailsRaw(long idTransactionTemplate,bool shouldRemap=false)
        {
            return GetTransactionTemplateWitDetailsRaw(idTransactionTemplate,new List<string>() { "Transactions"},shouldRemap);
        }

		
        public BusinessResponse<TransactionTemplate> GetTransactionTemplate(long idTransactionTemplate,bool shouldRemap=false)
        {
            BusinessResponse<TransactionTemplate> response = new BusinessResponse<TransactionTemplate>();
		    try
		    {
			    response.Result = GetTransactionTemplatesRaw(idTransactionTemplate,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionTemplate GetTransactionTemplatesRaw(long idTransactionTemplate,bool shouldRemap=false)
        {
            return daoFactory.TransactionTemplateDao.GetTransactionTemplate(idTransactionTemplate,shouldRemap);
        }

        
        public BusinessResponse<TransactionTemplate> GetTransactionTemplateWitDetails(long idTransactionTemplate,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TransactionTemplate> response = new BusinessResponse<TransactionTemplate>();
		    try
		    {
			    response.Result = GetTransactionTemplateWitDetailsRaw(idTransactionTemplate,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionTemplate GetTransactionTemplateWitDetailsRaw(long idTransactionTemplate,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionTemplateDao.GetTransactionTemplateWitDetails(idTransactionTemplate,shouldRemap);
        }


		 public BusinessResponse<TransactionTemplate> GetTransactionTemplateCustom( Expression<Func<TransactionTemplate, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TransactionTemplate> response = new BusinessResponse<TransactionTemplate>();
		    try
		    {
			    response.Result = GetTransactionTemplateCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TransactionTemplate GetTransactionTemplateCustomRaw( Expression<Func<TransactionTemplate, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TransactionTemplateDao.GetTransactionTemplateCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TransactionTemplate>> GetTransactionTemplateCustomList( Expression<Func<TransactionTemplate, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionTemplate, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TransactionTemplate>> response = new BusinessResponse<BaseListReturnType<TransactionTemplate>>();
		    try
		    {
			    response.Result = GetTransactionTemplateCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TransactionTemplate> GetTransactionTemplateCustomListRaw( Expression<Func<TransactionTemplate, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionTemplate, dynamic> orderExpression = null)
		{
            return daoFactory.TransactionTemplateDao.GetTransactionTemplateCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransactionTemplate(TransactionTemplate transactionTemplate)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransactionTemplateRaw(transactionTemplate);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransactionTemplateRaw(TransactionTemplate transactionTemplate)
        {
            daoFactory.TransactionTemplateDao.SaveTransactionTemplate(transactionTemplate);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransactionTemplate(TransactionTemplate transactionTemplate)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransactionTemplateRaw(transactionTemplate);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransactionTemplateRaw(TransactionTemplate transactionTemplate)
        {
            daoFactory.TransactionTemplateDao.SaveOnlyTransactionTemplate(transactionTemplate);
            return true;
        }

        public BusinessResponse<bool> DeleteTransactionTemplate(TransactionTemplate transactionTemplate)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransactionTemplateRaw(transactionTemplate);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransactionTemplateRaw(TransactionTemplate transactionTemplate)
        {
            daoFactory.TransactionTemplateDao.DeleteTransactionTemplate(transactionTemplate);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransactionTemplate(TransactionTemplate transactionTemplate)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransactionTemplateRaw(transactionTemplate);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransactionTemplateRaw(TransactionTemplate transactionTemplate)
        {
            daoFactory.TransactionTemplateDao.DeletePermanentlyTransactionTemplate(transactionTemplate);
            return true;
        }
	}
	public partial class TransactionTypeService: BaseService
	{
	    public BusinessResponse<List<TransactionType>> GetAllTransactionTypes(bool shouldRemap=false)
        {
            BusinessResponse<List<TransactionType>> response = new BusinessResponse<List<TransactionType>>();
		    try
		    {
			    response.Result = GetAllTransactionTypesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<TransactionType> GetAllTransactionTypesRaw(bool shouldRemap=false)
        {
            return daoFactory.TransactionTypeDao.GetAllTransactionTypes(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<TransactionType>> GetAllTransactionTypesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionType, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<TransactionType>> response = new BusinessResponse<BaseListReturnType<TransactionType>>();
		    try
		    {
			    response.Result = GetAllTransactionTypesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<TransactionType> GetAllTransactionTypesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionType, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<TransactionType, dynamic> orderExpression = null)
        {
            return daoFactory.TransactionTypeDao.GetAllTransactionTypesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<TransactionType>> GetAllTransactionTypesWithTransactionPresetsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionType, bool>> expression = null,bool shouldRemap=false, Func<TransactionType, dynamic> orderExpression = null)
			{
				return GetAllTransactionTypesByPage(sortingPagingInfo, expression,new List<string>(){"TransactionPresets"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<TransactionType>> GetAllTransactionTypesWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<TransactionType, bool>> expression = null,bool shouldRemap=false, Func<TransactionType, dynamic> orderExpression = null)
			{
				return GetAllTransactionTypesByPage(sortingPagingInfo, expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<TransactionType>> GetAllTransactionTypeWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionType>> response = new BusinessResponse<BaseListReturnType<TransactionType>>();
            try
            {
                response.Result = GetAllTransactionTypeWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionType> GetAllTransactionTypeWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionTypeDao.GetAllTransactionTypeWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<TransactionType>> GetTransactionTypeListByIdList(List<long> transactionTypeIds)
        {
            BusinessResponse<List<TransactionType>> response = new BusinessResponse<List<TransactionType>>();
            try
            {
                response.Result = GetTransactionTypeListByIdListRaw(transactionTypeIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<TransactionType> GetTransactionTypeListByIdListRaw(List<long> transactionTypeIds)
        {
            return daoFactory.TransactionTypeDao.GetTransactionTypeListByIdList(transactionTypeIds);
        }

					
		public BusinessResponse<BaseListReturnType<TransactionType>> GetAllTransactionTypesWithTransactionPresetsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionType>> response = new BusinessResponse<BaseListReturnType<TransactionType>>();
            try
            {
                response.Result = GetAllTransactionTypesWithTransactionPresetsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionType> GetAllTransactionTypesWithTransactionPresetsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionTypeWitDetailsRaw(new List<string>() { "TransactionPresets" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<TransactionType>> GetAllTransactionTypesWithTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<TransactionType>> response = new BusinessResponse<BaseListReturnType<TransactionType>>();
            try
            {
                response.Result = GetAllTransactionTypesWithTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<TransactionType> GetAllTransactionTypesWithTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllTransactionTypeWitDetailsRaw(new List<string>() { "Transactions" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<TransactionPreset>>  UpdateTransactionPresetsForTransactionTypeWithoutSavingNewItem(List<TransactionPreset> newTransactionPresets,long idTransactionType)
            {
                BusinessResponse<List<TransactionPreset>> response = new BusinessResponse<List<TransactionPreset>>();
                try
                {
                    response.Result = UpdateTransactionPresetsForTransactionTypeWithoutSavingNewItemRaw(newTransactionPresets, idTransactionType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionPreset> UpdateTransactionPresetsForTransactionTypeWithoutSavingNewItemRaw(List<TransactionPreset> newTransactionPresets,long idTransactionType)
            {
                return daoFactory.TransactionTypeDao.UpdateTransactionPresetsForTransactionTypeWithoutSavingNewItem(newTransactionPresets,idTransactionType); 
            }



		    public BusinessResponse<List<TransactionPreset>>  UpdateTransactionPresetsForTransactionType(List<TransactionPreset> newTransactionPresets,long idTransactionType)
            {
                BusinessResponse<List<TransactionPreset>> response = new BusinessResponse<List<TransactionPreset>>();
                try
                {
                    response.Result = UpdateTransactionPresetsForTransactionTypeRaw(newTransactionPresets, idTransactionType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<TransactionPreset> UpdateTransactionPresetsForTransactionTypeRaw(List<TransactionPreset> newTransactionPresets,long idTransactionType)
            {
                return daoFactory.TransactionTypeDao.UpdateTransactionPresetsForTransactionType(newTransactionPresets,idTransactionType); 
            }





		public BusinessResponse<TransactionType> GetTransactionTypeWithTransactionPresetsDetails(long idTransactionType,bool shouldRemap=false)
        {
            BusinessResponse<TransactionType> response = new BusinessResponse<TransactionType>();
            try
            {
                response.Result = GetTransactionTypeWithTransactionPresetsDetailsRaw(idTransactionType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionType GetTransactionTypeWithTransactionPresetsDetailsRaw(long idTransactionType,bool shouldRemap=false)
        {
            return GetTransactionTypeWitDetailsRaw(idTransactionType,new List<string>() { "TransactionPresets"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction>>  UpdateTransactionsForTransactionTypeWithoutSavingNewItem(List<Transaction> newTransactions,long idTransactionType)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForTransactionTypeWithoutSavingNewItemRaw(newTransactions, idTransactionType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForTransactionTypeWithoutSavingNewItemRaw(List<Transaction> newTransactions,long idTransactionType)
            {
                return daoFactory.TransactionTypeDao.UpdateTransactionsForTransactionTypeWithoutSavingNewItem(newTransactions,idTransactionType); 
            }



		    public BusinessResponse<List<Transaction>>  UpdateTransactionsForTransactionType(List<Transaction> newTransactions,long idTransactionType)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForTransactionTypeRaw(newTransactions, idTransactionType);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForTransactionTypeRaw(List<Transaction> newTransactions,long idTransactionType)
            {
                return daoFactory.TransactionTypeDao.UpdateTransactionsForTransactionType(newTransactions,idTransactionType); 
            }





		public BusinessResponse<TransactionType> GetTransactionTypeWithTransactionsDetails(long idTransactionType,bool shouldRemap=false)
        {
            BusinessResponse<TransactionType> response = new BusinessResponse<TransactionType>();
            try
            {
                response.Result = GetTransactionTypeWithTransactionsDetailsRaw(idTransactionType,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal TransactionType GetTransactionTypeWithTransactionsDetailsRaw(long idTransactionType,bool shouldRemap=false)
        {
            return GetTransactionTypeWitDetailsRaw(idTransactionType,new List<string>() { "Transactions"},shouldRemap);
        }

		
        public BusinessResponse<TransactionType> GetTransactionType(long idTransactionType,bool shouldRemap=false)
        {
            BusinessResponse<TransactionType> response = new BusinessResponse<TransactionType>();
		    try
		    {
			    response.Result = GetTransactionTypesRaw(idTransactionType,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionType GetTransactionTypesRaw(long idTransactionType,bool shouldRemap=false)
        {
            return daoFactory.TransactionTypeDao.GetTransactionType(idTransactionType,shouldRemap);
        }

        
        public BusinessResponse<TransactionType> GetTransactionTypeWitDetails(long idTransactionType,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<TransactionType> response = new BusinessResponse<TransactionType>();
		    try
		    {
			    response.Result = GetTransactionTypeWitDetailsRaw(idTransactionType,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal TransactionType GetTransactionTypeWitDetailsRaw(long idTransactionType,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.TransactionTypeDao.GetTransactionTypeWitDetails(idTransactionType,shouldRemap);
        }


		 public BusinessResponse<TransactionType> GetTransactionTypeCustom( Expression<Func<TransactionType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<TransactionType> response = new BusinessResponse<TransactionType>();
		    try
		    {
			    response.Result = GetTransactionTypeCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal TransactionType GetTransactionTypeCustomRaw( Expression<Func<TransactionType, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.TransactionTypeDao.GetTransactionTypeCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<TransactionType>> GetTransactionTypeCustomList( Expression<Func<TransactionType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionType, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<TransactionType>> response = new BusinessResponse<BaseListReturnType<TransactionType>>();
		    try
		    {
			    response.Result = GetTransactionTypeCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<TransactionType> GetTransactionTypeCustomListRaw( Expression<Func<TransactionType, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<TransactionType, dynamic> orderExpression = null)
		{
            return daoFactory.TransactionTypeDao.GetTransactionTypeCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveTransactionType(TransactionType transactionType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveTransactionTypeRaw(transactionType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveTransactionTypeRaw(TransactionType transactionType)
        {
            daoFactory.TransactionTypeDao.SaveTransactionType(transactionType);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyTransactionType(TransactionType transactionType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyTransactionTypeRaw(transactionType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyTransactionTypeRaw(TransactionType transactionType)
        {
            daoFactory.TransactionTypeDao.SaveOnlyTransactionType(transactionType);
            return true;
        }

        public BusinessResponse<bool> DeleteTransactionType(TransactionType transactionType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteTransactionTypeRaw(transactionType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteTransactionTypeRaw(TransactionType transactionType)
        {
            daoFactory.TransactionTypeDao.DeleteTransactionType(transactionType);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyTransactionType(TransactionType transactionType)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyTransactionTypeRaw(transactionType);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyTransactionTypeRaw(TransactionType transactionType)
        {
            daoFactory.TransactionTypeDao.DeletePermanentlyTransactionType(transactionType);
            return true;
        }
	}
	public partial class UserService: BaseService
	{
	    public BusinessResponse<List<User>> GetAllUsers(bool shouldRemap=false)
        {
            BusinessResponse<List<User>> response = new BusinessResponse<List<User>>();
		    try
		    {
			    response.Result = GetAllUsersRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<User> GetAllUsersRaw(bool shouldRemap=false)
        {
            return daoFactory.UserDao.GetAllUsers(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<User>> GetAllUsersByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<User, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<User>> response = new BusinessResponse<BaseListReturnType<User>>();
		    try
		    {
			    response.Result = GetAllUsersByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<User> GetAllUsersByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<User, dynamic> orderExpression = null)
        {
            return daoFactory.UserDao.GetAllUsersByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithBankStatementStagingsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap=false, Func<User, dynamic> orderExpression = null)
			{
				return GetAllUsersByPage(sortingPagingInfo, expression,new List<string>(){"BankStatementStagings"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithOrdersDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap=false, Func<User, dynamic> orderExpression = null)
			{
				return GetAllUsersByPage(sortingPagingInfo, expression,new List<string>(){"Orders"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithPaymentsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap=false, Func<User, dynamic> orderExpression = null)
			{
				return GetAllUsersByPage(sortingPagingInfo, expression,new List<string>(){"Payments"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithReceiptsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap=false, Func<User, dynamic> orderExpression = null)
			{
				return GetAllUsersByPage(sortingPagingInfo, expression,new List<string>(){"Receipts"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithRequestType_UserDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap=false, Func<User, dynamic> orderExpression = null)
			{
				return GetAllUsersByPage(sortingPagingInfo, expression,new List<string>(){"RequestType_User"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithTransactionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap=false, Func<User, dynamic> orderExpression = null)
			{
				return GetAllUsersByPage(sortingPagingInfo, expression,new List<string>(){"Transactions"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithPersonDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User, bool>> expression = null,bool shouldRemap=false, Func<User, dynamic> orderExpression = null)
			{
				return GetAllUsersByPage(sortingPagingInfo, expression,new List<string>(){"Person"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<User>> GetAllUserWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User>> response = new BusinessResponse<BaseListReturnType<User>>();
            try
            {
                response.Result = GetAllUserWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User> GetAllUserWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.UserDao.GetAllUserWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<User>> GetUserListByIdList(List<long> userIds)
        {
            BusinessResponse<List<User>> response = new BusinessResponse<List<User>>();
            try
            {
                response.Result = GetUserListByIdListRaw(userIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<User> GetUserListByIdListRaw(List<long> userIds)
        {
            return daoFactory.UserDao.GetUserListByIdList(userIds);
        }

					
		public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithBankStatementStagingsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User>> response = new BusinessResponse<BaseListReturnType<User>>();
            try
            {
                response.Result = GetAllUsersWithBankStatementStagingsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User> GetAllUsersWithBankStatementStagingsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllUserWitDetailsRaw(new List<string>() { "BankStatementStagings" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithOrdersDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User>> response = new BusinessResponse<BaseListReturnType<User>>();
            try
            {
                response.Result = GetAllUsersWithOrdersDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User> GetAllUsersWithOrdersDetailsRaw(bool shouldRemap=false)
        {
            return GetAllUserWitDetailsRaw(new List<string>() { "Orders" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithPaymentsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User>> response = new BusinessResponse<BaseListReturnType<User>>();
            try
            {
                response.Result = GetAllUsersWithPaymentsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User> GetAllUsersWithPaymentsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllUserWitDetailsRaw(new List<string>() { "Payments" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithReceiptsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User>> response = new BusinessResponse<BaseListReturnType<User>>();
            try
            {
                response.Result = GetAllUsersWithReceiptsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User> GetAllUsersWithReceiptsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllUserWitDetailsRaw(new List<string>() { "Receipts" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithRequestType_UserDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User>> response = new BusinessResponse<BaseListReturnType<User>>();
            try
            {
                response.Result = GetAllUsersWithRequestType_UserDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User> GetAllUsersWithRequestType_UserDetailsRaw(bool shouldRemap=false)
        {
            return GetAllUserWitDetailsRaw(new List<string>() { "RequestType_User" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithTransactionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User>> response = new BusinessResponse<BaseListReturnType<User>>();
            try
            {
                response.Result = GetAllUsersWithTransactionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User> GetAllUsersWithTransactionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllUserWitDetailsRaw(new List<string>() { "Transactions" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<User>> GetAllUsersWithPersonDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User>> response = new BusinessResponse<BaseListReturnType<User>>();
            try
            {
                response.Result = GetAllUsersWithPersonDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User> GetAllUsersWithPersonDetailsRaw(bool shouldRemap=false)
        {
            return GetAllUserWitDetailsRaw(new List<string>() { "Person" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<User>> GetAllUserListByPerson(long idPerson)
        {
            BusinessResponse<BaseListReturnType<User>> response = new BusinessResponse<BaseListReturnType<User>>();
            try
            {
                response.Result = GetAllUserListByPersonRaw(idPerson);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User> GetAllUserListByPersonRaw(long idPerson)
        {
            return daoFactory.UserDao.GetAllUserListByPerson(idPerson);
        }

        public BusinessResponse<BaseListReturnType<User>> GetAllUserListByPersonByPage(long idPerson, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<User>> response = new BusinessResponse<BaseListReturnType<User>>();
            try
            {
                response.Result = GetAllUserListByPersonByPageRaw(idPerson, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User> GetAllUserListByPersonByPageRaw(long idPerson,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.UserDao.GetAllUserListByPersonByPage(idPerson, sortingPagingInfo);
        }

		
		
			public BusinessResponse<List<BankStatementStaging>>  UpdateBankStatementStagingsForUserWithoutSavingNewItem(List<BankStatementStaging> newBankStatementStagings,long idUser)
            {
                BusinessResponse<List<BankStatementStaging>> response = new BusinessResponse<List<BankStatementStaging>>();
                try
                {
                    response.Result = UpdateBankStatementStagingsForUserWithoutSavingNewItemRaw(newBankStatementStagings, idUser);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStaging> UpdateBankStatementStagingsForUserWithoutSavingNewItemRaw(List<BankStatementStaging> newBankStatementStagings,long idUser)
            {
                return daoFactory.UserDao.UpdateBankStatementStagingsForUserWithoutSavingNewItem(newBankStatementStagings,idUser); 
            }



		    public BusinessResponse<List<BankStatementStaging>>  UpdateBankStatementStagingsForUser(List<BankStatementStaging> newBankStatementStagings,long idUser)
            {
                BusinessResponse<List<BankStatementStaging>> response = new BusinessResponse<List<BankStatementStaging>>();
                try
                {
                    response.Result = UpdateBankStatementStagingsForUserRaw(newBankStatementStagings, idUser);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<BankStatementStaging> UpdateBankStatementStagingsForUserRaw(List<BankStatementStaging> newBankStatementStagings,long idUser)
            {
                return daoFactory.UserDao.UpdateBankStatementStagingsForUser(newBankStatementStagings,idUser); 
            }





		public BusinessResponse<User> GetUserWithBankStatementStagingsDetails(long idUser,bool shouldRemap=false)
        {
            BusinessResponse<User> response = new BusinessResponse<User>();
            try
            {
                response.Result = GetUserWithBankStatementStagingsDetailsRaw(idUser,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal User GetUserWithBankStatementStagingsDetailsRaw(long idUser,bool shouldRemap=false)
        {
            return GetUserWitDetailsRaw(idUser,new List<string>() { "BankStatementStagings"},shouldRemap);
        }

		
			public BusinessResponse<List<Order>>  UpdateOrdersForUserWithoutSavingNewItem(List<Order> newOrders,long idUser)
            {
                BusinessResponse<List<Order>> response = new BusinessResponse<List<Order>>();
                try
                {
                    response.Result = UpdateOrdersForUserWithoutSavingNewItemRaw(newOrders, idUser);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Order> UpdateOrdersForUserWithoutSavingNewItemRaw(List<Order> newOrders,long idUser)
            {
                return daoFactory.UserDao.UpdateOrdersForUserWithoutSavingNewItem(newOrders,idUser); 
            }



		    public BusinessResponse<List<Order>>  UpdateOrdersForUser(List<Order> newOrders,long idUser)
            {
                BusinessResponse<List<Order>> response = new BusinessResponse<List<Order>>();
                try
                {
                    response.Result = UpdateOrdersForUserRaw(newOrders, idUser);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Order> UpdateOrdersForUserRaw(List<Order> newOrders,long idUser)
            {
                return daoFactory.UserDao.UpdateOrdersForUser(newOrders,idUser); 
            }





		public BusinessResponse<User> GetUserWithOrdersDetails(long idUser,bool shouldRemap=false)
        {
            BusinessResponse<User> response = new BusinessResponse<User>();
            try
            {
                response.Result = GetUserWithOrdersDetailsRaw(idUser,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal User GetUserWithOrdersDetailsRaw(long idUser,bool shouldRemap=false)
        {
            return GetUserWitDetailsRaw(idUser,new List<string>() { "Orders"},shouldRemap);
        }

		
			public BusinessResponse<List<Payment>>  UpdatePaymentsForUserWithoutSavingNewItem(List<Payment> newPayments,long idUser)
            {
                BusinessResponse<List<Payment>> response = new BusinessResponse<List<Payment>>();
                try
                {
                    response.Result = UpdatePaymentsForUserWithoutSavingNewItemRaw(newPayments, idUser);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Payment> UpdatePaymentsForUserWithoutSavingNewItemRaw(List<Payment> newPayments,long idUser)
            {
                return daoFactory.UserDao.UpdatePaymentsForUserWithoutSavingNewItem(newPayments,idUser); 
            }



		    public BusinessResponse<List<Payment>>  UpdatePaymentsForUser(List<Payment> newPayments,long idUser)
            {
                BusinessResponse<List<Payment>> response = new BusinessResponse<List<Payment>>();
                try
                {
                    response.Result = UpdatePaymentsForUserRaw(newPayments, idUser);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Payment> UpdatePaymentsForUserRaw(List<Payment> newPayments,long idUser)
            {
                return daoFactory.UserDao.UpdatePaymentsForUser(newPayments,idUser); 
            }





		public BusinessResponse<User> GetUserWithPaymentsDetails(long idUser,bool shouldRemap=false)
        {
            BusinessResponse<User> response = new BusinessResponse<User>();
            try
            {
                response.Result = GetUserWithPaymentsDetailsRaw(idUser,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal User GetUserWithPaymentsDetailsRaw(long idUser,bool shouldRemap=false)
        {
            return GetUserWitDetailsRaw(idUser,new List<string>() { "Payments"},shouldRemap);
        }

		
			public BusinessResponse<List<Receipt>>  UpdateReceiptsForUserWithoutSavingNewItem(List<Receipt> newReceipts,long idUser)
            {
                BusinessResponse<List<Receipt>> response = new BusinessResponse<List<Receipt>>();
                try
                {
                    response.Result = UpdateReceiptsForUserWithoutSavingNewItemRaw(newReceipts, idUser);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Receipt> UpdateReceiptsForUserWithoutSavingNewItemRaw(List<Receipt> newReceipts,long idUser)
            {
                return daoFactory.UserDao.UpdateReceiptsForUserWithoutSavingNewItem(newReceipts,idUser); 
            }



		    public BusinessResponse<List<Receipt>>  UpdateReceiptsForUser(List<Receipt> newReceipts,long idUser)
            {
                BusinessResponse<List<Receipt>> response = new BusinessResponse<List<Receipt>>();
                try
                {
                    response.Result = UpdateReceiptsForUserRaw(newReceipts, idUser);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Receipt> UpdateReceiptsForUserRaw(List<Receipt> newReceipts,long idUser)
            {
                return daoFactory.UserDao.UpdateReceiptsForUser(newReceipts,idUser); 
            }





		public BusinessResponse<User> GetUserWithReceiptsDetails(long idUser,bool shouldRemap=false)
        {
            BusinessResponse<User> response = new BusinessResponse<User>();
            try
            {
                response.Result = GetUserWithReceiptsDetailsRaw(idUser,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal User GetUserWithReceiptsDetailsRaw(long idUser,bool shouldRemap=false)
        {
            return GetUserWitDetailsRaw(idUser,new List<string>() { "Receipts"},shouldRemap);
        }

		
			public BusinessResponse<List<RequestType_User>>  UpdateRequestType_UserForUserWithoutSavingNewItem(List<RequestType_User> newRequestType_User,long idUser)
            {
                BusinessResponse<List<RequestType_User>> response = new BusinessResponse<List<RequestType_User>>();
                try
                {
                    response.Result = UpdateRequestType_UserForUserWithoutSavingNewItemRaw(newRequestType_User, idUser);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<RequestType_User> UpdateRequestType_UserForUserWithoutSavingNewItemRaw(List<RequestType_User> newRequestType_User,long idUser)
            {
                return daoFactory.UserDao.UpdateRequestType_UserForUserWithoutSavingNewItem(newRequestType_User,idUser); 
            }



		    public BusinessResponse<List<RequestType_User>>  UpdateRequestType_UserForUser(List<RequestType_User> newRequestType_User,long idUser)
            {
                BusinessResponse<List<RequestType_User>> response = new BusinessResponse<List<RequestType_User>>();
                try
                {
                    response.Result = UpdateRequestType_UserForUserRaw(newRequestType_User, idUser);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<RequestType_User> UpdateRequestType_UserForUserRaw(List<RequestType_User> newRequestType_User,long idUser)
            {
                return daoFactory.UserDao.UpdateRequestType_UserForUser(newRequestType_User,idUser); 
            }





		public BusinessResponse<User> GetUserWithRequestType_UserDetails(long idUser,bool shouldRemap=false)
        {
            BusinessResponse<User> response = new BusinessResponse<User>();
            try
            {
                response.Result = GetUserWithRequestType_UserDetailsRaw(idUser,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal User GetUserWithRequestType_UserDetailsRaw(long idUser,bool shouldRemap=false)
        {
            return GetUserWitDetailsRaw(idUser,new List<string>() { "RequestType_User"},shouldRemap);
        }

		
			public BusinessResponse<List<Transaction>>  UpdateTransactionsForUserWithoutSavingNewItem(List<Transaction> newTransactions,long idUser)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForUserWithoutSavingNewItemRaw(newTransactions, idUser);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForUserWithoutSavingNewItemRaw(List<Transaction> newTransactions,long idUser)
            {
                return daoFactory.UserDao.UpdateTransactionsForUserWithoutSavingNewItem(newTransactions,idUser); 
            }



		    public BusinessResponse<List<Transaction>>  UpdateTransactionsForUser(List<Transaction> newTransactions,long idUser)
            {
                BusinessResponse<List<Transaction>> response = new BusinessResponse<List<Transaction>>();
                try
                {
                    response.Result = UpdateTransactionsForUserRaw(newTransactions, idUser);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Transaction> UpdateTransactionsForUserRaw(List<Transaction> newTransactions,long idUser)
            {
                return daoFactory.UserDao.UpdateTransactionsForUser(newTransactions,idUser); 
            }





		public BusinessResponse<User> GetUserWithTransactionsDetails(long idUser,bool shouldRemap=false)
        {
            BusinessResponse<User> response = new BusinessResponse<User>();
            try
            {
                response.Result = GetUserWithTransactionsDetailsRaw(idUser,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal User GetUserWithTransactionsDetailsRaw(long idUser,bool shouldRemap=false)
        {
            return GetUserWitDetailsRaw(idUser,new List<string>() { "Transactions"},shouldRemap);
        }

		



		public BusinessResponse<User> GetUserWithPersonDetails(long idUser,bool shouldRemap=false)
        {
            BusinessResponse<User> response = new BusinessResponse<User>();
            try
            {
                response.Result = GetUserWithPersonDetailsRaw(idUser,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal User GetUserWithPersonDetailsRaw(long idUser,bool shouldRemap=false)
        {
            return GetUserWitDetailsRaw(idUser,new List<string>() { "Person"},shouldRemap);
        }

		
        public BusinessResponse<User> GetUser(long idUser,bool shouldRemap=false)
        {
            BusinessResponse<User> response = new BusinessResponse<User>();
		    try
		    {
			    response.Result = GetUsersRaw(idUser,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal User GetUsersRaw(long idUser,bool shouldRemap=false)
        {
            return daoFactory.UserDao.GetUser(idUser,shouldRemap);
        }

        
        public BusinessResponse<User> GetUserWitDetails(long idUser,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<User> response = new BusinessResponse<User>();
		    try
		    {
			    response.Result = GetUserWitDetailsRaw(idUser,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal User GetUserWitDetailsRaw(long idUser,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.UserDao.GetUserWitDetails(idUser,shouldRemap);
        }


		 public BusinessResponse<User> GetUserCustom( Expression<Func<User, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<User> response = new BusinessResponse<User>();
		    try
		    {
			    response.Result = GetUserCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal User GetUserCustomRaw( Expression<Func<User, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.UserDao.GetUserCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<User>> GetUserCustomList( Expression<Func<User, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<User, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<User>> response = new BusinessResponse<BaseListReturnType<User>>();
		    try
		    {
			    response.Result = GetUserCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<User> GetUserCustomListRaw( Expression<Func<User, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<User, dynamic> orderExpression = null)
		{
            return daoFactory.UserDao.GetUserCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveUser(User user)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveUserRaw(user);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveUserRaw(User user)
        {
            daoFactory.UserDao.SaveUser(user);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyUser(User user)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyUserRaw(user);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyUserRaw(User user)
        {
            daoFactory.UserDao.SaveOnlyUser(user);
            return true;
        }

        public BusinessResponse<bool> DeleteUser(User user)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteUserRaw(user);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteUserRaw(User user)
        {
            daoFactory.UserDao.DeleteUser(user);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyUser(User user)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyUserRaw(user);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyUserRaw(User user)
        {
            daoFactory.UserDao.DeletePermanentlyUser(user);
            return true;
        }
	}
	public partial class User_PermissionService: BaseService
	{
	    public BusinessResponse<List<User_Permission>> GetAllUser_Permission(bool shouldRemap=false)
        {
            BusinessResponse<List<User_Permission>> response = new BusinessResponse<List<User_Permission>>();
		    try
		    {
			    response.Result = GetAllUser_PermissionRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<User_Permission> GetAllUser_PermissionRaw(bool shouldRemap=false)
        {
            return daoFactory.User_PermissionDao.GetAllUser_Permission(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<User_Permission>> GetAllUser_PermissionByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<User_Permission, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<User_Permission>> response = new BusinessResponse<BaseListReturnType<User_Permission>>();
		    try
		    {
			    response.Result = GetAllUser_PermissionByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<User_Permission> GetAllUser_PermissionByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Permission, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<User_Permission, dynamic> orderExpression = null)
        {
            return daoFactory.User_PermissionDao.GetAllUser_PermissionByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<User_Permission>> GetAllUser_PermissionWithPermissionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Permission, bool>> expression = null,bool shouldRemap=false, Func<User_Permission, dynamic> orderExpression = null)
			{
				return GetAllUser_PermissionByPage(sortingPagingInfo, expression,new List<string>(){"Permission"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<User_Permission>> GetAllUser_PermissionWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User_Permission>> response = new BusinessResponse<BaseListReturnType<User_Permission>>();
            try
            {
                response.Result = GetAllUser_PermissionWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User_Permission> GetAllUser_PermissionWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.User_PermissionDao.GetAllUser_PermissionWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<User_Permission>> GetUser_PermissionListByIdList(List<long> user_PermissionIds)
        {
            BusinessResponse<List<User_Permission>> response = new BusinessResponse<List<User_Permission>>();
            try
            {
                response.Result = GetUser_PermissionListByIdListRaw(user_PermissionIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<User_Permission> GetUser_PermissionListByIdListRaw(List<long> user_PermissionIds)
        {
            return daoFactory.User_PermissionDao.GetUser_PermissionListByIdList(user_PermissionIds);
        }

					
		public BusinessResponse<BaseListReturnType<User_Permission>> GetAllUser_PermissionWithPermissionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User_Permission>> response = new BusinessResponse<BaseListReturnType<User_Permission>>();
            try
            {
                response.Result = GetAllUser_PermissionWithPermissionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User_Permission> GetAllUser_PermissionWithPermissionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllUser_PermissionWitDetailsRaw(new List<string>() { "Permission" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<User_Permission>> GetAllUser_PermissionListByPermission(long idPermission)
        {
            BusinessResponse<BaseListReturnType<User_Permission>> response = new BusinessResponse<BaseListReturnType<User_Permission>>();
            try
            {
                response.Result = GetAllUser_PermissionListByPermissionRaw(idPermission);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User_Permission> GetAllUser_PermissionListByPermissionRaw(long idPermission)
        {
            return daoFactory.User_PermissionDao.GetAllUser_PermissionListByPermission(idPermission);
        }

        public BusinessResponse<BaseListReturnType<User_Permission>> GetAllUser_PermissionListByPermissionByPage(long idPermission, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<User_Permission>> response = new BusinessResponse<BaseListReturnType<User_Permission>>();
            try
            {
                response.Result = GetAllUser_PermissionListByPermissionByPageRaw(idPermission, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User_Permission> GetAllUser_PermissionListByPermissionByPageRaw(long idPermission,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.User_PermissionDao.GetAllUser_PermissionListByPermissionByPage(idPermission, sortingPagingInfo);
        }

		
		



		public BusinessResponse<User_Permission> GetUser_PermissionWithPermissionDetails(long idUser_Permission,bool shouldRemap=false)
        {
            BusinessResponse<User_Permission> response = new BusinessResponse<User_Permission>();
            try
            {
                response.Result = GetUser_PermissionWithPermissionDetailsRaw(idUser_Permission,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal User_Permission GetUser_PermissionWithPermissionDetailsRaw(long idUser_Permission,bool shouldRemap=false)
        {
            return GetUser_PermissionWitDetailsRaw(idUser_Permission,new List<string>() { "Permission"},shouldRemap);
        }

		
        public BusinessResponse<User_Permission> GetUser_Permission(long idUser_Permission,bool shouldRemap=false)
        {
            BusinessResponse<User_Permission> response = new BusinessResponse<User_Permission>();
		    try
		    {
			    response.Result = GetUser_PermissionRaw(idUser_Permission,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal User_Permission GetUser_PermissionRaw(long idUser_Permission,bool shouldRemap=false)
        {
            return daoFactory.User_PermissionDao.GetUser_Permission(idUser_Permission,shouldRemap);
        }

        
        public BusinessResponse<User_Permission> GetUser_PermissionWitDetails(long idUser_Permission,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<User_Permission> response = new BusinessResponse<User_Permission>();
		    try
		    {
			    response.Result = GetUser_PermissionWitDetailsRaw(idUser_Permission,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal User_Permission GetUser_PermissionWitDetailsRaw(long idUser_Permission,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.User_PermissionDao.GetUser_PermissionWitDetails(idUser_Permission,shouldRemap);
        }


		 public BusinessResponse<User_Permission> GetUser_PermissionCustom( Expression<Func<User_Permission, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<User_Permission> response = new BusinessResponse<User_Permission>();
		    try
		    {
			    response.Result = GetUser_PermissionCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal User_Permission GetUser_PermissionCustomRaw( Expression<Func<User_Permission, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.User_PermissionDao.GetUser_PermissionCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<User_Permission>> GetUser_PermissionCustomList( Expression<Func<User_Permission, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<User_Permission, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<User_Permission>> response = new BusinessResponse<BaseListReturnType<User_Permission>>();
		    try
		    {
			    response.Result = GetUser_PermissionCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<User_Permission> GetUser_PermissionCustomListRaw( Expression<Func<User_Permission, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<User_Permission, dynamic> orderExpression = null)
		{
            return daoFactory.User_PermissionDao.GetUser_PermissionCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveUser_Permission(User_Permission user_Permission)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveUser_PermissionRaw(user_Permission);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveUser_PermissionRaw(User_Permission user_Permission)
        {
            daoFactory.User_PermissionDao.SaveUser_Permission(user_Permission);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyUser_Permission(User_Permission user_Permission)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyUser_PermissionRaw(user_Permission);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyUser_PermissionRaw(User_Permission user_Permission)
        {
            daoFactory.User_PermissionDao.SaveOnlyUser_Permission(user_Permission);
            return true;
        }

        public BusinessResponse<bool> DeleteUser_Permission(User_Permission user_Permission)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteUser_PermissionRaw(user_Permission);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteUser_PermissionRaw(User_Permission user_Permission)
        {
            daoFactory.User_PermissionDao.DeleteUser_Permission(user_Permission);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyUser_Permission(User_Permission user_Permission)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyUser_PermissionRaw(user_Permission);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyUser_PermissionRaw(User_Permission user_Permission)
        {
            daoFactory.User_PermissionDao.DeletePermanentlyUser_Permission(user_Permission);
            return true;
        }
	}
	public partial class User_RoleService: BaseService
	{
	    public BusinessResponse<List<User_Role>> GetAllUser_Role(bool shouldRemap=false)
        {
            BusinessResponse<List<User_Role>> response = new BusinessResponse<List<User_Role>>();
		    try
		    {
			    response.Result = GetAllUser_RoleRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<User_Role> GetAllUser_RoleRaw(bool shouldRemap=false)
        {
            return daoFactory.User_RoleDao.GetAllUser_Role(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<User_Role>> GetAllUser_RoleByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Role, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<User_Role, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<User_Role>> response = new BusinessResponse<BaseListReturnType<User_Role>>();
		    try
		    {
			    response.Result = GetAllUser_RoleByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<User_Role> GetAllUser_RoleByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Role, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<User_Role, dynamic> orderExpression = null)
        {
            return daoFactory.User_RoleDao.GetAllUser_RoleByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<User_Role>> GetAllUser_RoleWithRoleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_Role, bool>> expression = null,bool shouldRemap=false, Func<User_Role, dynamic> orderExpression = null)
			{
				return GetAllUser_RoleByPage(sortingPagingInfo, expression,new List<string>(){"Role"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<User_Role>> GetAllUser_RoleWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User_Role>> response = new BusinessResponse<BaseListReturnType<User_Role>>();
            try
            {
                response.Result = GetAllUser_RoleWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User_Role> GetAllUser_RoleWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.User_RoleDao.GetAllUser_RoleWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<User_Role>> GetUser_RoleListByIdList(List<long> user_RoleIds)
        {
            BusinessResponse<List<User_Role>> response = new BusinessResponse<List<User_Role>>();
            try
            {
                response.Result = GetUser_RoleListByIdListRaw(user_RoleIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<User_Role> GetUser_RoleListByIdListRaw(List<long> user_RoleIds)
        {
            return daoFactory.User_RoleDao.GetUser_RoleListByIdList(user_RoleIds);
        }

					
		public BusinessResponse<BaseListReturnType<User_Role>> GetAllUser_RoleWithRoleDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User_Role>> response = new BusinessResponse<BaseListReturnType<User_Role>>();
            try
            {
                response.Result = GetAllUser_RoleWithRoleDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User_Role> GetAllUser_RoleWithRoleDetailsRaw(bool shouldRemap=false)
        {
            return GetAllUser_RoleWitDetailsRaw(new List<string>() { "Role" }, shouldRemap);
        }
        
        






		



		public BusinessResponse<User_Role> GetUser_RoleWithRoleDetails(long idUser_Role,bool shouldRemap=false)
        {
            BusinessResponse<User_Role> response = new BusinessResponse<User_Role>();
            try
            {
                response.Result = GetUser_RoleWithRoleDetailsRaw(idUser_Role,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal User_Role GetUser_RoleWithRoleDetailsRaw(long idUser_Role,bool shouldRemap=false)
        {
            return GetUser_RoleWitDetailsRaw(idUser_Role,new List<string>() { "Role"},shouldRemap);
        }

		
        public BusinessResponse<User_Role> GetUser_Role(long idUser_Role,bool shouldRemap=false)
        {
            BusinessResponse<User_Role> response = new BusinessResponse<User_Role>();
		    try
		    {
			    response.Result = GetUser_RoleRaw(idUser_Role,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal User_Role GetUser_RoleRaw(long idUser_Role,bool shouldRemap=false)
        {
            return daoFactory.User_RoleDao.GetUser_Role(idUser_Role,shouldRemap);
        }

        
        public BusinessResponse<User_Role> GetUser_RoleWitDetails(long idUser_Role,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<User_Role> response = new BusinessResponse<User_Role>();
		    try
		    {
			    response.Result = GetUser_RoleWitDetailsRaw(idUser_Role,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal User_Role GetUser_RoleWitDetailsRaw(long idUser_Role,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.User_RoleDao.GetUser_RoleWitDetails(idUser_Role,shouldRemap);
        }


		 public BusinessResponse<User_Role> GetUser_RoleCustom( Expression<Func<User_Role, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<User_Role> response = new BusinessResponse<User_Role>();
		    try
		    {
			    response.Result = GetUser_RoleCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal User_Role GetUser_RoleCustomRaw( Expression<Func<User_Role, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.User_RoleDao.GetUser_RoleCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<User_Role>> GetUser_RoleCustomList( Expression<Func<User_Role, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<User_Role, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<User_Role>> response = new BusinessResponse<BaseListReturnType<User_Role>>();
		    try
		    {
			    response.Result = GetUser_RoleCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<User_Role> GetUser_RoleCustomListRaw( Expression<Func<User_Role, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<User_Role, dynamic> orderExpression = null)
		{
            return daoFactory.User_RoleDao.GetUser_RoleCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveUser_Role(User_Role user_Role)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveUser_RoleRaw(user_Role);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveUser_RoleRaw(User_Role user_Role)
        {
            daoFactory.User_RoleDao.SaveUser_Role(user_Role);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyUser_Role(User_Role user_Role)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyUser_RoleRaw(user_Role);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyUser_RoleRaw(User_Role user_Role)
        {
            daoFactory.User_RoleDao.SaveOnlyUser_Role(user_Role);
            return true;
        }

        public BusinessResponse<bool> DeleteUser_Role(User_Role user_Role)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteUser_RoleRaw(user_Role);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteUser_RoleRaw(User_Role user_Role)
        {
            daoFactory.User_RoleDao.DeleteUser_Role(user_Role);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyUser_Role(User_Role user_Role)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyUser_RoleRaw(user_Role);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyUser_RoleRaw(User_Role user_Role)
        {
            daoFactory.User_RoleDao.DeletePermanentlyUser_Role(user_Role);
            return true;
        }
	}
	public partial class User_SocialNetworkService: BaseService
	{
	    public BusinessResponse<List<User_SocialNetwork>> GetAllUser_SocialNetwork(bool shouldRemap=false)
        {
            BusinessResponse<List<User_SocialNetwork>> response = new BusinessResponse<List<User_SocialNetwork>>();
		    try
		    {
			    response.Result = GetAllUser_SocialNetworkRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<User_SocialNetwork> GetAllUser_SocialNetworkRaw(bool shouldRemap=false)
        {
            return daoFactory.User_SocialNetworkDao.GetAllUser_SocialNetwork(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<User_SocialNetwork>> GetAllUser_SocialNetworkByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_SocialNetwork, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<User_SocialNetwork, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<User_SocialNetwork>> response = new BusinessResponse<BaseListReturnType<User_SocialNetwork>>();
		    try
		    {
			    response.Result = GetAllUser_SocialNetworkByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<User_SocialNetwork> GetAllUser_SocialNetworkByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<User_SocialNetwork, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<User_SocialNetwork, dynamic> orderExpression = null)
        {
            return daoFactory.User_SocialNetworkDao.GetAllUser_SocialNetworkByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

		
		public BusinessResponse<BaseListReturnType<User_SocialNetwork>> GetAllUser_SocialNetworkWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<User_SocialNetwork>> response = new BusinessResponse<BaseListReturnType<User_SocialNetwork>>();
            try
            {
                response.Result = GetAllUser_SocialNetworkWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<User_SocialNetwork> GetAllUser_SocialNetworkWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.User_SocialNetworkDao.GetAllUser_SocialNetworkWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<User_SocialNetwork>> GetUser_SocialNetworkListByIdList(List<long> user_SocialNetworkIds)
        {
            BusinessResponse<List<User_SocialNetwork>> response = new BusinessResponse<List<User_SocialNetwork>>();
            try
            {
                response.Result = GetUser_SocialNetworkListByIdListRaw(user_SocialNetworkIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<User_SocialNetwork> GetUser_SocialNetworkListByIdListRaw(List<long> user_SocialNetworkIds)
        {
            return daoFactory.User_SocialNetworkDao.GetUser_SocialNetworkListByIdList(user_SocialNetworkIds);
        }

		
		
        public BusinessResponse<User_SocialNetwork> GetUser_SocialNetwork(long idUser_SocialNetwork,bool shouldRemap=false)
        {
            BusinessResponse<User_SocialNetwork> response = new BusinessResponse<User_SocialNetwork>();
		    try
		    {
			    response.Result = GetUser_SocialNetworkRaw(idUser_SocialNetwork,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal User_SocialNetwork GetUser_SocialNetworkRaw(long idUser_SocialNetwork,bool shouldRemap=false)
        {
            return daoFactory.User_SocialNetworkDao.GetUser_SocialNetwork(idUser_SocialNetwork,shouldRemap);
        }

        
        public BusinessResponse<User_SocialNetwork> GetUser_SocialNetworkWitDetails(long idUser_SocialNetwork,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<User_SocialNetwork> response = new BusinessResponse<User_SocialNetwork>();
		    try
		    {
			    response.Result = GetUser_SocialNetworkWitDetailsRaw(idUser_SocialNetwork,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal User_SocialNetwork GetUser_SocialNetworkWitDetailsRaw(long idUser_SocialNetwork,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.User_SocialNetworkDao.GetUser_SocialNetworkWitDetails(idUser_SocialNetwork,shouldRemap);
        }


		 public BusinessResponse<User_SocialNetwork> GetUser_SocialNetworkCustom( Expression<Func<User_SocialNetwork, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<User_SocialNetwork> response = new BusinessResponse<User_SocialNetwork>();
		    try
		    {
			    response.Result = GetUser_SocialNetworkCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal User_SocialNetwork GetUser_SocialNetworkCustomRaw( Expression<Func<User_SocialNetwork, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.User_SocialNetworkDao.GetUser_SocialNetworkCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<User_SocialNetwork>> GetUser_SocialNetworkCustomList( Expression<Func<User_SocialNetwork, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<User_SocialNetwork, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<User_SocialNetwork>> response = new BusinessResponse<BaseListReturnType<User_SocialNetwork>>();
		    try
		    {
			    response.Result = GetUser_SocialNetworkCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<User_SocialNetwork> GetUser_SocialNetworkCustomListRaw( Expression<Func<User_SocialNetwork, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<User_SocialNetwork, dynamic> orderExpression = null)
		{
            return daoFactory.User_SocialNetworkDao.GetUser_SocialNetworkCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveUser_SocialNetwork(User_SocialNetwork user_SocialNetwork)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveUser_SocialNetworkRaw(user_SocialNetwork);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveUser_SocialNetworkRaw(User_SocialNetwork user_SocialNetwork)
        {
            daoFactory.User_SocialNetworkDao.SaveUser_SocialNetwork(user_SocialNetwork);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyUser_SocialNetwork(User_SocialNetwork user_SocialNetwork)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyUser_SocialNetworkRaw(user_SocialNetwork);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyUser_SocialNetworkRaw(User_SocialNetwork user_SocialNetwork)
        {
            daoFactory.User_SocialNetworkDao.SaveOnlyUser_SocialNetwork(user_SocialNetwork);
            return true;
        }

        public BusinessResponse<bool> DeleteUser_SocialNetwork(User_SocialNetwork user_SocialNetwork)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteUser_SocialNetworkRaw(user_SocialNetwork);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteUser_SocialNetworkRaw(User_SocialNetwork user_SocialNetwork)
        {
            daoFactory.User_SocialNetworkDao.DeleteUser_SocialNetwork(user_SocialNetwork);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyUser_SocialNetwork(User_SocialNetwork user_SocialNetwork)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyUser_SocialNetworkRaw(user_SocialNetwork);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyUser_SocialNetworkRaw(User_SocialNetwork user_SocialNetwork)
        {
            daoFactory.User_SocialNetworkDao.DeletePermanentlyUser_SocialNetwork(user_SocialNetwork);
            return true;
        }
	}
	public partial class WorkflowService: BaseService
	{
	    public BusinessResponse<List<Workflow>> GetAllWorkflows(bool shouldRemap=false)
        {
            BusinessResponse<List<Workflow>> response = new BusinessResponse<List<Workflow>>();
		    try
		    {
			    response.Result = GetAllWorkflowsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<Workflow> GetAllWorkflowsRaw(bool shouldRemap=false)
        {
            return daoFactory.WorkflowDao.GetAllWorkflows(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<Workflow>> GetAllWorkflowsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Workflow, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<Workflow>> response = new BusinessResponse<BaseListReturnType<Workflow>>();
		    try
		    {
			    response.Result = GetAllWorkflowsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<Workflow> GetAllWorkflowsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<Workflow, dynamic> orderExpression = null)
        {
            return daoFactory.WorkflowDao.GetAllWorkflowsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<Workflow>> GetAllWorkflowsWithApprovalMessagesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap=false, Func<Workflow, dynamic> orderExpression = null)
			{
				return GetAllWorkflowsByPage(sortingPagingInfo, expression,new List<string>(){"ApprovalMessages"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Workflow>> GetAllWorkflowsWithRequestTypesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap=false, Func<Workflow, dynamic> orderExpression = null)
			{
				return GetAllWorkflowsByPage(sortingPagingInfo, expression,new List<string>(){"RequestTypes"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Workflow>> GetAllWorkflowsWithWorkflowActionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap=false, Func<Workflow, dynamic> orderExpression = null)
			{
				return GetAllWorkflowsByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowActions"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Workflow>> GetAllWorkflowsWithWorkflowRolesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap=false, Func<Workflow, dynamic> orderExpression = null)
			{
				return GetAllWorkflowsByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowRoles"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<Workflow>> GetAllWorkflowsWithWorkflowStatesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<Workflow, bool>> expression = null,bool shouldRemap=false, Func<Workflow, dynamic> orderExpression = null)
			{
				return GetAllWorkflowsByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowStates"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<Workflow>> GetAllWorkflowWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Workflow>> response = new BusinessResponse<BaseListReturnType<Workflow>>();
            try
            {
                response.Result = GetAllWorkflowWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Workflow> GetAllWorkflowWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.WorkflowDao.GetAllWorkflowWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<Workflow>> GetWorkflowListByIdList(List<long> workflowIds)
        {
            BusinessResponse<List<Workflow>> response = new BusinessResponse<List<Workflow>>();
            try
            {
                response.Result = GetWorkflowListByIdListRaw(workflowIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<Workflow> GetWorkflowListByIdListRaw(List<long> workflowIds)
        {
            return daoFactory.WorkflowDao.GetWorkflowListByIdList(workflowIds);
        }

					
		public BusinessResponse<BaseListReturnType<Workflow>> GetAllWorkflowsWithApprovalMessagesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Workflow>> response = new BusinessResponse<BaseListReturnType<Workflow>>();
            try
            {
                response.Result = GetAllWorkflowsWithApprovalMessagesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Workflow> GetAllWorkflowsWithApprovalMessagesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowWitDetailsRaw(new List<string>() { "ApprovalMessages" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Workflow>> GetAllWorkflowsWithRequestTypesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Workflow>> response = new BusinessResponse<BaseListReturnType<Workflow>>();
            try
            {
                response.Result = GetAllWorkflowsWithRequestTypesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Workflow> GetAllWorkflowsWithRequestTypesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowWitDetailsRaw(new List<string>() { "RequestTypes" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Workflow>> GetAllWorkflowsWithWorkflowActionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Workflow>> response = new BusinessResponse<BaseListReturnType<Workflow>>();
            try
            {
                response.Result = GetAllWorkflowsWithWorkflowActionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Workflow> GetAllWorkflowsWithWorkflowActionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowWitDetailsRaw(new List<string>() { "WorkflowActions" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Workflow>> GetAllWorkflowsWithWorkflowRolesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Workflow>> response = new BusinessResponse<BaseListReturnType<Workflow>>();
            try
            {
                response.Result = GetAllWorkflowsWithWorkflowRolesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Workflow> GetAllWorkflowsWithWorkflowRolesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowWitDetailsRaw(new List<string>() { "WorkflowRoles" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<Workflow>> GetAllWorkflowsWithWorkflowStatesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<Workflow>> response = new BusinessResponse<BaseListReturnType<Workflow>>();
            try
            {
                response.Result = GetAllWorkflowsWithWorkflowStatesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<Workflow> GetAllWorkflowsWithWorkflowStatesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowWitDetailsRaw(new List<string>() { "WorkflowStates" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<ApprovalMessage>>  UpdateApprovalMessagesForWorkflowWithoutSavingNewItem(List<ApprovalMessage> newApprovalMessages,long idWorkflow)
            {
                BusinessResponse<List<ApprovalMessage>> response = new BusinessResponse<List<ApprovalMessage>>();
                try
                {
                    response.Result = UpdateApprovalMessagesForWorkflowWithoutSavingNewItemRaw(newApprovalMessages, idWorkflow);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<ApprovalMessage> UpdateApprovalMessagesForWorkflowWithoutSavingNewItemRaw(List<ApprovalMessage> newApprovalMessages,long idWorkflow)
            {
                return daoFactory.WorkflowDao.UpdateApprovalMessagesForWorkflowWithoutSavingNewItem(newApprovalMessages,idWorkflow); 
            }



		    public BusinessResponse<List<ApprovalMessage>>  UpdateApprovalMessagesForWorkflow(List<ApprovalMessage> newApprovalMessages,long idWorkflow)
            {
                BusinessResponse<List<ApprovalMessage>> response = new BusinessResponse<List<ApprovalMessage>>();
                try
                {
                    response.Result = UpdateApprovalMessagesForWorkflowRaw(newApprovalMessages, idWorkflow);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<ApprovalMessage> UpdateApprovalMessagesForWorkflowRaw(List<ApprovalMessage> newApprovalMessages,long idWorkflow)
            {
                return daoFactory.WorkflowDao.UpdateApprovalMessagesForWorkflow(newApprovalMessages,idWorkflow); 
            }





		public BusinessResponse<Workflow> GetWorkflowWithApprovalMessagesDetails(long idWorkflow,bool shouldRemap=false)
        {
            BusinessResponse<Workflow> response = new BusinessResponse<Workflow>();
            try
            {
                response.Result = GetWorkflowWithApprovalMessagesDetailsRaw(idWorkflow,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Workflow GetWorkflowWithApprovalMessagesDetailsRaw(long idWorkflow,bool shouldRemap=false)
        {
            return GetWorkflowWitDetailsRaw(idWorkflow,new List<string>() { "ApprovalMessages"},shouldRemap);
        }

		
			public BusinessResponse<List<RequestType>>  UpdateRequestTypesForWorkflowWithoutSavingNewItem(List<RequestType> newRequestTypes,long idWorkflow)
            {
                BusinessResponse<List<RequestType>> response = new BusinessResponse<List<RequestType>>();
                try
                {
                    response.Result = UpdateRequestTypesForWorkflowWithoutSavingNewItemRaw(newRequestTypes, idWorkflow);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<RequestType> UpdateRequestTypesForWorkflowWithoutSavingNewItemRaw(List<RequestType> newRequestTypes,long idWorkflow)
            {
                return daoFactory.WorkflowDao.UpdateRequestTypesForWorkflowWithoutSavingNewItem(newRequestTypes,idWorkflow); 
            }



		    public BusinessResponse<List<RequestType>>  UpdateRequestTypesForWorkflow(List<RequestType> newRequestTypes,long idWorkflow)
            {
                BusinessResponse<List<RequestType>> response = new BusinessResponse<List<RequestType>>();
                try
                {
                    response.Result = UpdateRequestTypesForWorkflowRaw(newRequestTypes, idWorkflow);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<RequestType> UpdateRequestTypesForWorkflowRaw(List<RequestType> newRequestTypes,long idWorkflow)
            {
                return daoFactory.WorkflowDao.UpdateRequestTypesForWorkflow(newRequestTypes,idWorkflow); 
            }





		public BusinessResponse<Workflow> GetWorkflowWithRequestTypesDetails(long idWorkflow,bool shouldRemap=false)
        {
            BusinessResponse<Workflow> response = new BusinessResponse<Workflow>();
            try
            {
                response.Result = GetWorkflowWithRequestTypesDetailsRaw(idWorkflow,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Workflow GetWorkflowWithRequestTypesDetailsRaw(long idWorkflow,bool shouldRemap=false)
        {
            return GetWorkflowWitDetailsRaw(idWorkflow,new List<string>() { "RequestTypes"},shouldRemap);
        }

		
			public BusinessResponse<List<WorkflowAction>>  UpdateWorkflowActionsForWorkflowWithoutSavingNewItem(List<WorkflowAction> newWorkflowActions,long idWorkflow)
            {
                BusinessResponse<List<WorkflowAction>> response = new BusinessResponse<List<WorkflowAction>>();
                try
                {
                    response.Result = UpdateWorkflowActionsForWorkflowWithoutSavingNewItemRaw(newWorkflowActions, idWorkflow);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowAction> UpdateWorkflowActionsForWorkflowWithoutSavingNewItemRaw(List<WorkflowAction> newWorkflowActions,long idWorkflow)
            {
                return daoFactory.WorkflowDao.UpdateWorkflowActionsForWorkflowWithoutSavingNewItem(newWorkflowActions,idWorkflow); 
            }



		    public BusinessResponse<List<WorkflowAction>>  UpdateWorkflowActionsForWorkflow(List<WorkflowAction> newWorkflowActions,long idWorkflow)
            {
                BusinessResponse<List<WorkflowAction>> response = new BusinessResponse<List<WorkflowAction>>();
                try
                {
                    response.Result = UpdateWorkflowActionsForWorkflowRaw(newWorkflowActions, idWorkflow);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowAction> UpdateWorkflowActionsForWorkflowRaw(List<WorkflowAction> newWorkflowActions,long idWorkflow)
            {
                return daoFactory.WorkflowDao.UpdateWorkflowActionsForWorkflow(newWorkflowActions,idWorkflow); 
            }





		public BusinessResponse<Workflow> GetWorkflowWithWorkflowActionsDetails(long idWorkflow,bool shouldRemap=false)
        {
            BusinessResponse<Workflow> response = new BusinessResponse<Workflow>();
            try
            {
                response.Result = GetWorkflowWithWorkflowActionsDetailsRaw(idWorkflow,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Workflow GetWorkflowWithWorkflowActionsDetailsRaw(long idWorkflow,bool shouldRemap=false)
        {
            return GetWorkflowWitDetailsRaw(idWorkflow,new List<string>() { "WorkflowActions"},shouldRemap);
        }

		
			public BusinessResponse<List<WorkflowRole>>  UpdateWorkflowRolesForWorkflowWithoutSavingNewItem(List<WorkflowRole> newWorkflowRoles,long idWorkflow)
            {
                BusinessResponse<List<WorkflowRole>> response = new BusinessResponse<List<WorkflowRole>>();
                try
                {
                    response.Result = UpdateWorkflowRolesForWorkflowWithoutSavingNewItemRaw(newWorkflowRoles, idWorkflow);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowRole> UpdateWorkflowRolesForWorkflowWithoutSavingNewItemRaw(List<WorkflowRole> newWorkflowRoles,long idWorkflow)
            {
                return daoFactory.WorkflowDao.UpdateWorkflowRolesForWorkflowWithoutSavingNewItem(newWorkflowRoles,idWorkflow); 
            }



		    public BusinessResponse<List<WorkflowRole>>  UpdateWorkflowRolesForWorkflow(List<WorkflowRole> newWorkflowRoles,long idWorkflow)
            {
                BusinessResponse<List<WorkflowRole>> response = new BusinessResponse<List<WorkflowRole>>();
                try
                {
                    response.Result = UpdateWorkflowRolesForWorkflowRaw(newWorkflowRoles, idWorkflow);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowRole> UpdateWorkflowRolesForWorkflowRaw(List<WorkflowRole> newWorkflowRoles,long idWorkflow)
            {
                return daoFactory.WorkflowDao.UpdateWorkflowRolesForWorkflow(newWorkflowRoles,idWorkflow); 
            }





		public BusinessResponse<Workflow> GetWorkflowWithWorkflowRolesDetails(long idWorkflow,bool shouldRemap=false)
        {
            BusinessResponse<Workflow> response = new BusinessResponse<Workflow>();
            try
            {
                response.Result = GetWorkflowWithWorkflowRolesDetailsRaw(idWorkflow,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Workflow GetWorkflowWithWorkflowRolesDetailsRaw(long idWorkflow,bool shouldRemap=false)
        {
            return GetWorkflowWitDetailsRaw(idWorkflow,new List<string>() { "WorkflowRoles"},shouldRemap);
        }

		
			public BusinessResponse<List<WorkflowState>>  UpdateWorkflowStatesForWorkflowWithoutSavingNewItem(List<WorkflowState> newWorkflowStates,long idWorkflow)
            {
                BusinessResponse<List<WorkflowState>> response = new BusinessResponse<List<WorkflowState>>();
                try
                {
                    response.Result = UpdateWorkflowStatesForWorkflowWithoutSavingNewItemRaw(newWorkflowStates, idWorkflow);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowState> UpdateWorkflowStatesForWorkflowWithoutSavingNewItemRaw(List<WorkflowState> newWorkflowStates,long idWorkflow)
            {
                return daoFactory.WorkflowDao.UpdateWorkflowStatesForWorkflowWithoutSavingNewItem(newWorkflowStates,idWorkflow); 
            }



		    public BusinessResponse<List<WorkflowState>>  UpdateWorkflowStatesForWorkflow(List<WorkflowState> newWorkflowStates,long idWorkflow)
            {
                BusinessResponse<List<WorkflowState>> response = new BusinessResponse<List<WorkflowState>>();
                try
                {
                    response.Result = UpdateWorkflowStatesForWorkflowRaw(newWorkflowStates, idWorkflow);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowState> UpdateWorkflowStatesForWorkflowRaw(List<WorkflowState> newWorkflowStates,long idWorkflow)
            {
                return daoFactory.WorkflowDao.UpdateWorkflowStatesForWorkflow(newWorkflowStates,idWorkflow); 
            }





		public BusinessResponse<Workflow> GetWorkflowWithWorkflowStatesDetails(long idWorkflow,bool shouldRemap=false)
        {
            BusinessResponse<Workflow> response = new BusinessResponse<Workflow>();
            try
            {
                response.Result = GetWorkflowWithWorkflowStatesDetailsRaw(idWorkflow,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal Workflow GetWorkflowWithWorkflowStatesDetailsRaw(long idWorkflow,bool shouldRemap=false)
        {
            return GetWorkflowWitDetailsRaw(idWorkflow,new List<string>() { "WorkflowStates"},shouldRemap);
        }

		
        public BusinessResponse<Workflow> GetWorkflow(long idWorkflow,bool shouldRemap=false)
        {
            BusinessResponse<Workflow> response = new BusinessResponse<Workflow>();
		    try
		    {
			    response.Result = GetWorkflowsRaw(idWorkflow,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Workflow GetWorkflowsRaw(long idWorkflow,bool shouldRemap=false)
        {
            return daoFactory.WorkflowDao.GetWorkflow(idWorkflow,shouldRemap);
        }

        
        public BusinessResponse<Workflow> GetWorkflowWitDetails(long idWorkflow,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<Workflow> response = new BusinessResponse<Workflow>();
		    try
		    {
			    response.Result = GetWorkflowWitDetailsRaw(idWorkflow,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal Workflow GetWorkflowWitDetailsRaw(long idWorkflow,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.WorkflowDao.GetWorkflowWitDetails(idWorkflow,shouldRemap);
        }


		 public BusinessResponse<Workflow> GetWorkflowCustom( Expression<Func<Workflow, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<Workflow> response = new BusinessResponse<Workflow>();
		    try
		    {
			    response.Result = GetWorkflowCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal Workflow GetWorkflowCustomRaw( Expression<Func<Workflow, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.WorkflowDao.GetWorkflowCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<Workflow>> GetWorkflowCustomList( Expression<Func<Workflow, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Workflow, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<Workflow>> response = new BusinessResponse<BaseListReturnType<Workflow>>();
		    try
		    {
			    response.Result = GetWorkflowCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<Workflow> GetWorkflowCustomListRaw( Expression<Func<Workflow, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<Workflow, dynamic> orderExpression = null)
		{
            return daoFactory.WorkflowDao.GetWorkflowCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveWorkflow(Workflow workflow)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveWorkflowRaw(workflow);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveWorkflowRaw(Workflow workflow)
        {
            daoFactory.WorkflowDao.SaveWorkflow(workflow);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyWorkflow(Workflow workflow)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyWorkflowRaw(workflow);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyWorkflowRaw(Workflow workflow)
        {
            daoFactory.WorkflowDao.SaveOnlyWorkflow(workflow);
            return true;
        }

        public BusinessResponse<bool> DeleteWorkflow(Workflow workflow)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteWorkflowRaw(workflow);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteWorkflowRaw(Workflow workflow)
        {
            daoFactory.WorkflowDao.DeleteWorkflow(workflow);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyWorkflow(Workflow workflow)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyWorkflowRaw(workflow);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyWorkflowRaw(Workflow workflow)
        {
            daoFactory.WorkflowDao.DeletePermanentlyWorkflow(workflow);
            return true;
        }
	}
	public partial class WorkflowActionService: BaseService
	{
	    public BusinessResponse<List<WorkflowAction>> GetAllWorkflowActions(bool shouldRemap=false)
        {
            BusinessResponse<List<WorkflowAction>> response = new BusinessResponse<List<WorkflowAction>>();
		    try
		    {
			    response.Result = GetAllWorkflowActionsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<WorkflowAction> GetAllWorkflowActionsRaw(bool shouldRemap=false)
        {
            return daoFactory.WorkflowActionDao.GetAllWorkflowActions(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<WorkflowAction>> GetAllWorkflowActionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<WorkflowAction, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<WorkflowAction>> response = new BusinessResponse<BaseListReturnType<WorkflowAction>>();
		    try
		    {
			    response.Result = GetAllWorkflowActionsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<WorkflowAction> GetAllWorkflowActionsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<WorkflowAction, dynamic> orderExpression = null)
        {
            return daoFactory.WorkflowActionDao.GetAllWorkflowActionsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<WorkflowAction>> GetAllWorkflowActionsWithApprovalMessagesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null,bool shouldRemap=false, Func<WorkflowAction, dynamic> orderExpression = null)
			{
				return GetAllWorkflowActionsByPage(sortingPagingInfo, expression,new List<string>(){"ApprovalMessages"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<WorkflowAction>> GetAllWorkflowActionsWithWorkflowDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null,bool shouldRemap=false, Func<WorkflowAction, dynamic> orderExpression = null)
			{
				return GetAllWorkflowActionsByPage(sortingPagingInfo, expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<WorkflowAction>> GetAllWorkflowActionsWithWorkflowTransitionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowAction, bool>> expression = null,bool shouldRemap=false, Func<WorkflowAction, dynamic> orderExpression = null)
			{
				return GetAllWorkflowActionsByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowTransitions"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<WorkflowAction>> GetAllWorkflowActionWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowAction>> response = new BusinessResponse<BaseListReturnType<WorkflowAction>>();
            try
            {
                response.Result = GetAllWorkflowActionWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowAction> GetAllWorkflowActionWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.WorkflowActionDao.GetAllWorkflowActionWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<WorkflowAction>> GetWorkflowActionListByIdList(List<long> workflowActionIds)
        {
            BusinessResponse<List<WorkflowAction>> response = new BusinessResponse<List<WorkflowAction>>();
            try
            {
                response.Result = GetWorkflowActionListByIdListRaw(workflowActionIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<WorkflowAction> GetWorkflowActionListByIdListRaw(List<long> workflowActionIds)
        {
            return daoFactory.WorkflowActionDao.GetWorkflowActionListByIdList(workflowActionIds);
        }

					
		public BusinessResponse<BaseListReturnType<WorkflowAction>> GetAllWorkflowActionsWithApprovalMessagesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowAction>> response = new BusinessResponse<BaseListReturnType<WorkflowAction>>();
            try
            {
                response.Result = GetAllWorkflowActionsWithApprovalMessagesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowAction> GetAllWorkflowActionsWithApprovalMessagesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowActionWitDetailsRaw(new List<string>() { "ApprovalMessages" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<WorkflowAction>> GetAllWorkflowActionsWithWorkflowDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowAction>> response = new BusinessResponse<BaseListReturnType<WorkflowAction>>();
            try
            {
                response.Result = GetAllWorkflowActionsWithWorkflowDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowAction> GetAllWorkflowActionsWithWorkflowDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowActionWitDetailsRaw(new List<string>() { "Workflow" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<WorkflowAction>> GetAllWorkflowActionListByWorkflow(long idWorkflow)
        {
            BusinessResponse<BaseListReturnType<WorkflowAction>> response = new BusinessResponse<BaseListReturnType<WorkflowAction>>();
            try
            {
                response.Result = GetAllWorkflowActionListByWorkflowRaw(idWorkflow);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowAction> GetAllWorkflowActionListByWorkflowRaw(long idWorkflow)
        {
            return daoFactory.WorkflowActionDao.GetAllWorkflowActionListByWorkflow(idWorkflow);
        }

        public BusinessResponse<BaseListReturnType<WorkflowAction>> GetAllWorkflowActionListByWorkflowByPage(long idWorkflow, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<WorkflowAction>> response = new BusinessResponse<BaseListReturnType<WorkflowAction>>();
            try
            {
                response.Result = GetAllWorkflowActionListByWorkflowByPageRaw(idWorkflow, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowAction> GetAllWorkflowActionListByWorkflowByPageRaw(long idWorkflow,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.WorkflowActionDao.GetAllWorkflowActionListByWorkflowByPage(idWorkflow, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<WorkflowAction>> GetAllWorkflowActionsWithWorkflowTransitionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowAction>> response = new BusinessResponse<BaseListReturnType<WorkflowAction>>();
            try
            {
                response.Result = GetAllWorkflowActionsWithWorkflowTransitionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowAction> GetAllWorkflowActionsWithWorkflowTransitionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowActionWitDetailsRaw(new List<string>() { "WorkflowTransitions" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<ApprovalMessage>>  UpdateApprovalMessagesForWorkflowActionWithoutSavingNewItem(List<ApprovalMessage> newApprovalMessages,long idWorkflowAction)
            {
                BusinessResponse<List<ApprovalMessage>> response = new BusinessResponse<List<ApprovalMessage>>();
                try
                {
                    response.Result = UpdateApprovalMessagesForWorkflowActionWithoutSavingNewItemRaw(newApprovalMessages, idWorkflowAction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<ApprovalMessage> UpdateApprovalMessagesForWorkflowActionWithoutSavingNewItemRaw(List<ApprovalMessage> newApprovalMessages,long idWorkflowAction)
            {
                return daoFactory.WorkflowActionDao.UpdateApprovalMessagesForWorkflowActionWithoutSavingNewItem(newApprovalMessages,idWorkflowAction); 
            }



		    public BusinessResponse<List<ApprovalMessage>>  UpdateApprovalMessagesForWorkflowAction(List<ApprovalMessage> newApprovalMessages,long idWorkflowAction)
            {
                BusinessResponse<List<ApprovalMessage>> response = new BusinessResponse<List<ApprovalMessage>>();
                try
                {
                    response.Result = UpdateApprovalMessagesForWorkflowActionRaw(newApprovalMessages, idWorkflowAction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<ApprovalMessage> UpdateApprovalMessagesForWorkflowActionRaw(List<ApprovalMessage> newApprovalMessages,long idWorkflowAction)
            {
                return daoFactory.WorkflowActionDao.UpdateApprovalMessagesForWorkflowAction(newApprovalMessages,idWorkflowAction); 
            }





		public BusinessResponse<WorkflowAction> GetWorkflowActionWithApprovalMessagesDetails(long idWorkflowAction,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowAction> response = new BusinessResponse<WorkflowAction>();
            try
            {
                response.Result = GetWorkflowActionWithApprovalMessagesDetailsRaw(idWorkflowAction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowAction GetWorkflowActionWithApprovalMessagesDetailsRaw(long idWorkflowAction,bool shouldRemap=false)
        {
            return GetWorkflowActionWitDetailsRaw(idWorkflowAction,new List<string>() { "ApprovalMessages"},shouldRemap);
        }

		



		public BusinessResponse<WorkflowAction> GetWorkflowActionWithWorkflowDetails(long idWorkflowAction,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowAction> response = new BusinessResponse<WorkflowAction>();
            try
            {
                response.Result = GetWorkflowActionWithWorkflowDetailsRaw(idWorkflowAction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowAction GetWorkflowActionWithWorkflowDetailsRaw(long idWorkflowAction,bool shouldRemap=false)
        {
            return GetWorkflowActionWitDetailsRaw(idWorkflowAction,new List<string>() { "Workflow"},shouldRemap);
        }

		
			public BusinessResponse<List<WorkflowTransition>>  UpdateWorkflowTransitionsForWorkflowActionWithoutSavingNewItem(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowAction)
            {
                BusinessResponse<List<WorkflowTransition>> response = new BusinessResponse<List<WorkflowTransition>>();
                try
                {
                    response.Result = UpdateWorkflowTransitionsForWorkflowActionWithoutSavingNewItemRaw(newWorkflowTransitions, idWorkflowAction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowActionWithoutSavingNewItemRaw(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowAction)
            {
                return daoFactory.WorkflowActionDao.UpdateWorkflowTransitionsForWorkflowActionWithoutSavingNewItem(newWorkflowTransitions,idWorkflowAction); 
            }



		    public BusinessResponse<List<WorkflowTransition>>  UpdateWorkflowTransitionsForWorkflowAction(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowAction)
            {
                BusinessResponse<List<WorkflowTransition>> response = new BusinessResponse<List<WorkflowTransition>>();
                try
                {
                    response.Result = UpdateWorkflowTransitionsForWorkflowActionRaw(newWorkflowTransitions, idWorkflowAction);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowActionRaw(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowAction)
            {
                return daoFactory.WorkflowActionDao.UpdateWorkflowTransitionsForWorkflowAction(newWorkflowTransitions,idWorkflowAction); 
            }





		public BusinessResponse<WorkflowAction> GetWorkflowActionWithWorkflowTransitionsDetails(long idWorkflowAction,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowAction> response = new BusinessResponse<WorkflowAction>();
            try
            {
                response.Result = GetWorkflowActionWithWorkflowTransitionsDetailsRaw(idWorkflowAction,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowAction GetWorkflowActionWithWorkflowTransitionsDetailsRaw(long idWorkflowAction,bool shouldRemap=false)
        {
            return GetWorkflowActionWitDetailsRaw(idWorkflowAction,new List<string>() { "WorkflowTransitions"},shouldRemap);
        }

		
        public BusinessResponse<WorkflowAction> GetWorkflowAction(long idWorkflowAction,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowAction> response = new BusinessResponse<WorkflowAction>();
		    try
		    {
			    response.Result = GetWorkflowActionsRaw(idWorkflowAction,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal WorkflowAction GetWorkflowActionsRaw(long idWorkflowAction,bool shouldRemap=false)
        {
            return daoFactory.WorkflowActionDao.GetWorkflowAction(idWorkflowAction,shouldRemap);
        }

        
        public BusinessResponse<WorkflowAction> GetWorkflowActionWitDetails(long idWorkflowAction,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowAction> response = new BusinessResponse<WorkflowAction>();
		    try
		    {
			    response.Result = GetWorkflowActionWitDetailsRaw(idWorkflowAction,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal WorkflowAction GetWorkflowActionWitDetailsRaw(long idWorkflowAction,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.WorkflowActionDao.GetWorkflowActionWitDetails(idWorkflowAction,shouldRemap);
        }


		 public BusinessResponse<WorkflowAction> GetWorkflowActionCustom( Expression<Func<WorkflowAction, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<WorkflowAction> response = new BusinessResponse<WorkflowAction>();
		    try
		    {
			    response.Result = GetWorkflowActionCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal WorkflowAction GetWorkflowActionCustomRaw( Expression<Func<WorkflowAction, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.WorkflowActionDao.GetWorkflowActionCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<WorkflowAction>> GetWorkflowActionCustomList( Expression<Func<WorkflowAction, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<WorkflowAction, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<WorkflowAction>> response = new BusinessResponse<BaseListReturnType<WorkflowAction>>();
		    try
		    {
			    response.Result = GetWorkflowActionCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<WorkflowAction> GetWorkflowActionCustomListRaw( Expression<Func<WorkflowAction, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<WorkflowAction, dynamic> orderExpression = null)
		{
            return daoFactory.WorkflowActionDao.GetWorkflowActionCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveWorkflowAction(WorkflowAction workflowAction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveWorkflowActionRaw(workflowAction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveWorkflowActionRaw(WorkflowAction workflowAction)
        {
            daoFactory.WorkflowActionDao.SaveWorkflowAction(workflowAction);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyWorkflowAction(WorkflowAction workflowAction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyWorkflowActionRaw(workflowAction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyWorkflowActionRaw(WorkflowAction workflowAction)
        {
            daoFactory.WorkflowActionDao.SaveOnlyWorkflowAction(workflowAction);
            return true;
        }

        public BusinessResponse<bool> DeleteWorkflowAction(WorkflowAction workflowAction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteWorkflowActionRaw(workflowAction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteWorkflowActionRaw(WorkflowAction workflowAction)
        {
            daoFactory.WorkflowActionDao.DeleteWorkflowAction(workflowAction);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyWorkflowAction(WorkflowAction workflowAction)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyWorkflowActionRaw(workflowAction);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyWorkflowActionRaw(WorkflowAction workflowAction)
        {
            daoFactory.WorkflowActionDao.DeletePermanentlyWorkflowAction(workflowAction);
            return true;
        }
	}
	public partial class WorkflowRoleService: BaseService
	{
	    public BusinessResponse<List<WorkflowRole>> GetAllWorkflowRoles(bool shouldRemap=false)
        {
            BusinessResponse<List<WorkflowRole>> response = new BusinessResponse<List<WorkflowRole>>();
		    try
		    {
			    response.Result = GetAllWorkflowRolesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<WorkflowRole> GetAllWorkflowRolesRaw(bool shouldRemap=false)
        {
            return daoFactory.WorkflowRoleDao.GetAllWorkflowRoles(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<WorkflowRole>> GetAllWorkflowRolesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowRole, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<WorkflowRole, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<WorkflowRole>> response = new BusinessResponse<BaseListReturnType<WorkflowRole>>();
		    try
		    {
			    response.Result = GetAllWorkflowRolesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<WorkflowRole> GetAllWorkflowRolesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowRole, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<WorkflowRole, dynamic> orderExpression = null)
        {
            return daoFactory.WorkflowRoleDao.GetAllWorkflowRolesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<WorkflowRole>> GetAllWorkflowRolesWithWorkflowDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowRole, bool>> expression = null,bool shouldRemap=false, Func<WorkflowRole, dynamic> orderExpression = null)
			{
				return GetAllWorkflowRolesByPage(sortingPagingInfo, expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<WorkflowRole>> GetAllWorkflowRolesWithWorkflowTransitionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowRole, bool>> expression = null,bool shouldRemap=false, Func<WorkflowRole, dynamic> orderExpression = null)
			{
				return GetAllWorkflowRolesByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowTransitions"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<WorkflowRole>> GetAllWorkflowRoleWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowRole>> response = new BusinessResponse<BaseListReturnType<WorkflowRole>>();
            try
            {
                response.Result = GetAllWorkflowRoleWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowRole> GetAllWorkflowRoleWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.WorkflowRoleDao.GetAllWorkflowRoleWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<WorkflowRole>> GetWorkflowRoleListByIdList(List<long> workflowRoleIds)
        {
            BusinessResponse<List<WorkflowRole>> response = new BusinessResponse<List<WorkflowRole>>();
            try
            {
                response.Result = GetWorkflowRoleListByIdListRaw(workflowRoleIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<WorkflowRole> GetWorkflowRoleListByIdListRaw(List<long> workflowRoleIds)
        {
            return daoFactory.WorkflowRoleDao.GetWorkflowRoleListByIdList(workflowRoleIds);
        }

					
		public BusinessResponse<BaseListReturnType<WorkflowRole>> GetAllWorkflowRolesWithWorkflowDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowRole>> response = new BusinessResponse<BaseListReturnType<WorkflowRole>>();
            try
            {
                response.Result = GetAllWorkflowRolesWithWorkflowDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowRole> GetAllWorkflowRolesWithWorkflowDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowRoleWitDetailsRaw(new List<string>() { "Workflow" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<WorkflowRole>> GetAllWorkflowRoleListByWorkflow(long idWorkflow)
        {
            BusinessResponse<BaseListReturnType<WorkflowRole>> response = new BusinessResponse<BaseListReturnType<WorkflowRole>>();
            try
            {
                response.Result = GetAllWorkflowRoleListByWorkflowRaw(idWorkflow);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowRole> GetAllWorkflowRoleListByWorkflowRaw(long idWorkflow)
        {
            return daoFactory.WorkflowRoleDao.GetAllWorkflowRoleListByWorkflow(idWorkflow);
        }

        public BusinessResponse<BaseListReturnType<WorkflowRole>> GetAllWorkflowRoleListByWorkflowByPage(long idWorkflow, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<WorkflowRole>> response = new BusinessResponse<BaseListReturnType<WorkflowRole>>();
            try
            {
                response.Result = GetAllWorkflowRoleListByWorkflowByPageRaw(idWorkflow, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowRole> GetAllWorkflowRoleListByWorkflowByPageRaw(long idWorkflow,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.WorkflowRoleDao.GetAllWorkflowRoleListByWorkflowByPage(idWorkflow, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<WorkflowRole>> GetAllWorkflowRolesWithWorkflowTransitionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowRole>> response = new BusinessResponse<BaseListReturnType<WorkflowRole>>();
            try
            {
                response.Result = GetAllWorkflowRolesWithWorkflowTransitionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowRole> GetAllWorkflowRolesWithWorkflowTransitionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowRoleWitDetailsRaw(new List<string>() { "WorkflowTransitions" }, shouldRemap);
        }
        
        






		



		public BusinessResponse<WorkflowRole> GetWorkflowRoleWithWorkflowDetails(long idWorkflowRole,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowRole> response = new BusinessResponse<WorkflowRole>();
            try
            {
                response.Result = GetWorkflowRoleWithWorkflowDetailsRaw(idWorkflowRole,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowRole GetWorkflowRoleWithWorkflowDetailsRaw(long idWorkflowRole,bool shouldRemap=false)
        {
            return GetWorkflowRoleWitDetailsRaw(idWorkflowRole,new List<string>() { "Workflow"},shouldRemap);
        }

		
			public BusinessResponse<List<WorkflowTransition>>  UpdateWorkflowTransitionsForWorkflowRoleWithoutSavingNewItem(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowRole)
            {
                BusinessResponse<List<WorkflowTransition>> response = new BusinessResponse<List<WorkflowTransition>>();
                try
                {
                    response.Result = UpdateWorkflowTransitionsForWorkflowRoleWithoutSavingNewItemRaw(newWorkflowTransitions, idWorkflowRole);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowRoleWithoutSavingNewItemRaw(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowRole)
            {
                return daoFactory.WorkflowRoleDao.UpdateWorkflowTransitionsForWorkflowRoleWithoutSavingNewItem(newWorkflowTransitions,idWorkflowRole); 
            }



		    public BusinessResponse<List<WorkflowTransition>>  UpdateWorkflowTransitionsForWorkflowRole(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowRole)
            {
                BusinessResponse<List<WorkflowTransition>> response = new BusinessResponse<List<WorkflowTransition>>();
                try
                {
                    response.Result = UpdateWorkflowTransitionsForWorkflowRoleRaw(newWorkflowTransitions, idWorkflowRole);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowRoleRaw(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowRole)
            {
                return daoFactory.WorkflowRoleDao.UpdateWorkflowTransitionsForWorkflowRole(newWorkflowTransitions,idWorkflowRole); 
            }





		public BusinessResponse<WorkflowRole> GetWorkflowRoleWithWorkflowTransitionsDetails(long idWorkflowRole,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowRole> response = new BusinessResponse<WorkflowRole>();
            try
            {
                response.Result = GetWorkflowRoleWithWorkflowTransitionsDetailsRaw(idWorkflowRole,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowRole GetWorkflowRoleWithWorkflowTransitionsDetailsRaw(long idWorkflowRole,bool shouldRemap=false)
        {
            return GetWorkflowRoleWitDetailsRaw(idWorkflowRole,new List<string>() { "WorkflowTransitions"},shouldRemap);
        }

		
        public BusinessResponse<WorkflowRole> GetWorkflowRole(long idWorkflowRole,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowRole> response = new BusinessResponse<WorkflowRole>();
		    try
		    {
			    response.Result = GetWorkflowRolesRaw(idWorkflowRole,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal WorkflowRole GetWorkflowRolesRaw(long idWorkflowRole,bool shouldRemap=false)
        {
            return daoFactory.WorkflowRoleDao.GetWorkflowRole(idWorkflowRole,shouldRemap);
        }

        
        public BusinessResponse<WorkflowRole> GetWorkflowRoleWitDetails(long idWorkflowRole,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowRole> response = new BusinessResponse<WorkflowRole>();
		    try
		    {
			    response.Result = GetWorkflowRoleWitDetailsRaw(idWorkflowRole,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal WorkflowRole GetWorkflowRoleWitDetailsRaw(long idWorkflowRole,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.WorkflowRoleDao.GetWorkflowRoleWitDetails(idWorkflowRole,shouldRemap);
        }


		 public BusinessResponse<WorkflowRole> GetWorkflowRoleCustom( Expression<Func<WorkflowRole, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<WorkflowRole> response = new BusinessResponse<WorkflowRole>();
		    try
		    {
			    response.Result = GetWorkflowRoleCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal WorkflowRole GetWorkflowRoleCustomRaw( Expression<Func<WorkflowRole, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.WorkflowRoleDao.GetWorkflowRoleCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<WorkflowRole>> GetWorkflowRoleCustomList( Expression<Func<WorkflowRole, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<WorkflowRole, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<WorkflowRole>> response = new BusinessResponse<BaseListReturnType<WorkflowRole>>();
		    try
		    {
			    response.Result = GetWorkflowRoleCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<WorkflowRole> GetWorkflowRoleCustomListRaw( Expression<Func<WorkflowRole, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<WorkflowRole, dynamic> orderExpression = null)
		{
            return daoFactory.WorkflowRoleDao.GetWorkflowRoleCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveWorkflowRole(WorkflowRole workflowRole)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveWorkflowRoleRaw(workflowRole);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveWorkflowRoleRaw(WorkflowRole workflowRole)
        {
            daoFactory.WorkflowRoleDao.SaveWorkflowRole(workflowRole);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyWorkflowRole(WorkflowRole workflowRole)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyWorkflowRoleRaw(workflowRole);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyWorkflowRoleRaw(WorkflowRole workflowRole)
        {
            daoFactory.WorkflowRoleDao.SaveOnlyWorkflowRole(workflowRole);
            return true;
        }

        public BusinessResponse<bool> DeleteWorkflowRole(WorkflowRole workflowRole)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteWorkflowRoleRaw(workflowRole);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteWorkflowRoleRaw(WorkflowRole workflowRole)
        {
            daoFactory.WorkflowRoleDao.DeleteWorkflowRole(workflowRole);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyWorkflowRole(WorkflowRole workflowRole)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyWorkflowRoleRaw(workflowRole);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyWorkflowRoleRaw(WorkflowRole workflowRole)
        {
            daoFactory.WorkflowRoleDao.DeletePermanentlyWorkflowRole(workflowRole);
            return true;
        }
	}
	public partial class WorkflowStateService: BaseService
	{
	    public BusinessResponse<List<WorkflowState>> GetAllWorkflowStates(bool shouldRemap=false)
        {
            BusinessResponse<List<WorkflowState>> response = new BusinessResponse<List<WorkflowState>>();
		    try
		    {
			    response.Result = GetAllWorkflowStatesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<WorkflowState> GetAllWorkflowStatesRaw(bool shouldRemap=false)
        {
            return daoFactory.WorkflowStateDao.GetAllWorkflowStates(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<WorkflowState>> GetAllWorkflowStatesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<WorkflowState, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<WorkflowState>> response = new BusinessResponse<BaseListReturnType<WorkflowState>>();
		    try
		    {
			    response.Result = GetAllWorkflowStatesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<WorkflowState> GetAllWorkflowStatesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<WorkflowState, dynamic> orderExpression = null)
        {
            return daoFactory.WorkflowStateDao.GetAllWorkflowStatesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<WorkflowState>> GetAllWorkflowStatesWithRequestsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null,bool shouldRemap=false, Func<WorkflowState, dynamic> orderExpression = null)
			{
				return GetAllWorkflowStatesByPage(sortingPagingInfo, expression,new List<string>(){"Requests"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<WorkflowState>> GetAllWorkflowStatesWithWorkflowDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null,bool shouldRemap=false, Func<WorkflowState, dynamic> orderExpression = null)
			{
				return GetAllWorkflowStatesByPage(sortingPagingInfo, expression,new List<string>(){"Workflow"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<WorkflowState>> GetAllWorkflowStatesWithWorkflowTransitionsDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null,bool shouldRemap=false, Func<WorkflowState, dynamic> orderExpression = null)
			{
				return GetAllWorkflowStatesByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowTransitions"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<WorkflowState>> GetAllWorkflowStatesWithWorkflowTransitions1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowState, bool>> expression = null,bool shouldRemap=false, Func<WorkflowState, dynamic> orderExpression = null)
			{
				return GetAllWorkflowStatesByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowTransitions1"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<WorkflowState>> GetAllWorkflowStateWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowState>> response = new BusinessResponse<BaseListReturnType<WorkflowState>>();
            try
            {
                response.Result = GetAllWorkflowStateWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowState> GetAllWorkflowStateWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.WorkflowStateDao.GetAllWorkflowStateWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<WorkflowState>> GetWorkflowStateListByIdList(List<long> workflowStateIds)
        {
            BusinessResponse<List<WorkflowState>> response = new BusinessResponse<List<WorkflowState>>();
            try
            {
                response.Result = GetWorkflowStateListByIdListRaw(workflowStateIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<WorkflowState> GetWorkflowStateListByIdListRaw(List<long> workflowStateIds)
        {
            return daoFactory.WorkflowStateDao.GetWorkflowStateListByIdList(workflowStateIds);
        }

					
		public BusinessResponse<BaseListReturnType<WorkflowState>> GetAllWorkflowStatesWithRequestsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowState>> response = new BusinessResponse<BaseListReturnType<WorkflowState>>();
            try
            {
                response.Result = GetAllWorkflowStatesWithRequestsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithRequestsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowStateWitDetailsRaw(new List<string>() { "Requests" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<WorkflowState>> GetAllWorkflowStatesWithWorkflowDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowState>> response = new BusinessResponse<BaseListReturnType<WorkflowState>>();
            try
            {
                response.Result = GetAllWorkflowStatesWithWorkflowDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithWorkflowDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowStateWitDetailsRaw(new List<string>() { "Workflow" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<WorkflowState>> GetAllWorkflowStateListByWorkflow(long idWorkflow)
        {
            BusinessResponse<BaseListReturnType<WorkflowState>> response = new BusinessResponse<BaseListReturnType<WorkflowState>>();
            try
            {
                response.Result = GetAllWorkflowStateListByWorkflowRaw(idWorkflow);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowState> GetAllWorkflowStateListByWorkflowRaw(long idWorkflow)
        {
            return daoFactory.WorkflowStateDao.GetAllWorkflowStateListByWorkflow(idWorkflow);
        }

        public BusinessResponse<BaseListReturnType<WorkflowState>> GetAllWorkflowStateListByWorkflowByPage(long idWorkflow, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<WorkflowState>> response = new BusinessResponse<BaseListReturnType<WorkflowState>>();
            try
            {
                response.Result = GetAllWorkflowStateListByWorkflowByPageRaw(idWorkflow, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowState> GetAllWorkflowStateListByWorkflowByPageRaw(long idWorkflow,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.WorkflowStateDao.GetAllWorkflowStateListByWorkflowByPage(idWorkflow, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<WorkflowState>> GetAllWorkflowStatesWithWorkflowTransitionsDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowState>> response = new BusinessResponse<BaseListReturnType<WorkflowState>>();
            try
            {
                response.Result = GetAllWorkflowStatesWithWorkflowTransitionsDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithWorkflowTransitionsDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowStateWitDetailsRaw(new List<string>() { "WorkflowTransitions" }, shouldRemap);
        }
        
        





			
		public BusinessResponse<BaseListReturnType<WorkflowState>> GetAllWorkflowStatesWithWorkflowTransitions1Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowState>> response = new BusinessResponse<BaseListReturnType<WorkflowState>>();
            try
            {
                response.Result = GetAllWorkflowStatesWithWorkflowTransitions1DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowState> GetAllWorkflowStatesWithWorkflowTransitions1DetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowStateWitDetailsRaw(new List<string>() { "WorkflowTransitions1" }, shouldRemap);
        }
        
        






		
			public BusinessResponse<List<Request>>  UpdateRequestsForWorkflowStateWithoutSavingNewItem(List<Request> newRequests,long idWorkflowState)
            {
                BusinessResponse<List<Request>> response = new BusinessResponse<List<Request>>();
                try
                {
                    response.Result = UpdateRequestsForWorkflowStateWithoutSavingNewItemRaw(newRequests, idWorkflowState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Request> UpdateRequestsForWorkflowStateWithoutSavingNewItemRaw(List<Request> newRequests,long idWorkflowState)
            {
                return daoFactory.WorkflowStateDao.UpdateRequestsForWorkflowStateWithoutSavingNewItem(newRequests,idWorkflowState); 
            }



		    public BusinessResponse<List<Request>>  UpdateRequestsForWorkflowState(List<Request> newRequests,long idWorkflowState)
            {
                BusinessResponse<List<Request>> response = new BusinessResponse<List<Request>>();
                try
                {
                    response.Result = UpdateRequestsForWorkflowStateRaw(newRequests, idWorkflowState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<Request> UpdateRequestsForWorkflowStateRaw(List<Request> newRequests,long idWorkflowState)
            {
                return daoFactory.WorkflowStateDao.UpdateRequestsForWorkflowState(newRequests,idWorkflowState); 
            }





		public BusinessResponse<WorkflowState> GetWorkflowStateWithRequestsDetails(long idWorkflowState,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowState> response = new BusinessResponse<WorkflowState>();
            try
            {
                response.Result = GetWorkflowStateWithRequestsDetailsRaw(idWorkflowState,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowState GetWorkflowStateWithRequestsDetailsRaw(long idWorkflowState,bool shouldRemap=false)
        {
            return GetWorkflowStateWitDetailsRaw(idWorkflowState,new List<string>() { "Requests"},shouldRemap);
        }

		



		public BusinessResponse<WorkflowState> GetWorkflowStateWithWorkflowDetails(long idWorkflowState,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowState> response = new BusinessResponse<WorkflowState>();
            try
            {
                response.Result = GetWorkflowStateWithWorkflowDetailsRaw(idWorkflowState,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowState GetWorkflowStateWithWorkflowDetailsRaw(long idWorkflowState,bool shouldRemap=false)
        {
            return GetWorkflowStateWitDetailsRaw(idWorkflowState,new List<string>() { "Workflow"},shouldRemap);
        }

		
			public BusinessResponse<List<WorkflowTransition>>  UpdateWorkflowTransitionsForWorkflowStateWithoutSavingNewItem(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState)
            {
                BusinessResponse<List<WorkflowTransition>> response = new BusinessResponse<List<WorkflowTransition>>();
                try
                {
                    response.Result = UpdateWorkflowTransitionsForWorkflowStateWithoutSavingNewItemRaw(newWorkflowTransitions, idWorkflowState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowStateWithoutSavingNewItemRaw(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState)
            {
                return daoFactory.WorkflowStateDao.UpdateWorkflowTransitionsForWorkflowStateWithoutSavingNewItem(newWorkflowTransitions,idWorkflowState); 
            }



		    public BusinessResponse<List<WorkflowTransition>>  UpdateWorkflowTransitionsForWorkflowState(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState)
            {
                BusinessResponse<List<WorkflowTransition>> response = new BusinessResponse<List<WorkflowTransition>>();
                try
                {
                    response.Result = UpdateWorkflowTransitionsForWorkflowStateRaw(newWorkflowTransitions, idWorkflowState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowTransition> UpdateWorkflowTransitionsForWorkflowStateRaw(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState)
            {
                return daoFactory.WorkflowStateDao.UpdateWorkflowTransitionsForWorkflowState(newWorkflowTransitions,idWorkflowState); 
            }





		public BusinessResponse<WorkflowState> GetWorkflowStateWithWorkflowTransitionsDetails(long idWorkflowState,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowState> response = new BusinessResponse<WorkflowState>();
            try
            {
                response.Result = GetWorkflowStateWithWorkflowTransitionsDetailsRaw(idWorkflowState,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowState GetWorkflowStateWithWorkflowTransitionsDetailsRaw(long idWorkflowState,bool shouldRemap=false)
        {
            return GetWorkflowStateWitDetailsRaw(idWorkflowState,new List<string>() { "WorkflowTransitions"},shouldRemap);
        }

		
			public BusinessResponse<List<WorkflowTransition>>  UpdateWorkflowTransitions1ForWorkflowStateWithoutSavingNewItem(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState)
            {
                BusinessResponse<List<WorkflowTransition>> response = new BusinessResponse<List<WorkflowTransition>>();
                try
                {
                    response.Result = UpdateWorkflowTransitions1ForWorkflowStateWithoutSavingNewItemRaw(newWorkflowTransitions, idWorkflowState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowTransition> UpdateWorkflowTransitions1ForWorkflowStateWithoutSavingNewItemRaw(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState)
            {
                return daoFactory.WorkflowStateDao.UpdateWorkflowTransitions1ForWorkflowStateWithoutSavingNewItem(newWorkflowTransitions,idWorkflowState); 
            }



		    public BusinessResponse<List<WorkflowTransition>>  UpdateWorkflowTransitions1ForWorkflowState(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState)
            {
                BusinessResponse<List<WorkflowTransition>> response = new BusinessResponse<List<WorkflowTransition>>();
                try
                {
                    response.Result = UpdateWorkflowTransitions1ForWorkflowStateRaw(newWorkflowTransitions, idWorkflowState);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowTransition> UpdateWorkflowTransitions1ForWorkflowStateRaw(List<WorkflowTransition> newWorkflowTransitions,long idWorkflowState)
            {
                return daoFactory.WorkflowStateDao.UpdateWorkflowTransitions1ForWorkflowState(newWorkflowTransitions,idWorkflowState); 
            }





		public BusinessResponse<WorkflowState> GetWorkflowStateWithWorkflowTransitions1Details(long idWorkflowState,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowState> response = new BusinessResponse<WorkflowState>();
            try
            {
                response.Result = GetWorkflowStateWithWorkflowTransitions1DetailsRaw(idWorkflowState,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowState GetWorkflowStateWithWorkflowTransitions1DetailsRaw(long idWorkflowState,bool shouldRemap=false)
        {
            return GetWorkflowStateWitDetailsRaw(idWorkflowState,new List<string>() { "WorkflowTransitions1"},shouldRemap);
        }

		
        public BusinessResponse<WorkflowState> GetWorkflowState(long idWorkflowState,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowState> response = new BusinessResponse<WorkflowState>();
		    try
		    {
			    response.Result = GetWorkflowStatesRaw(idWorkflowState,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal WorkflowState GetWorkflowStatesRaw(long idWorkflowState,bool shouldRemap=false)
        {
            return daoFactory.WorkflowStateDao.GetWorkflowState(idWorkflowState,shouldRemap);
        }

        
        public BusinessResponse<WorkflowState> GetWorkflowStateWitDetails(long idWorkflowState,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowState> response = new BusinessResponse<WorkflowState>();
		    try
		    {
			    response.Result = GetWorkflowStateWitDetailsRaw(idWorkflowState,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal WorkflowState GetWorkflowStateWitDetailsRaw(long idWorkflowState,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.WorkflowStateDao.GetWorkflowStateWitDetails(idWorkflowState,shouldRemap);
        }


		 public BusinessResponse<WorkflowState> GetWorkflowStateCustom( Expression<Func<WorkflowState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<WorkflowState> response = new BusinessResponse<WorkflowState>();
		    try
		    {
			    response.Result = GetWorkflowStateCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal WorkflowState GetWorkflowStateCustomRaw( Expression<Func<WorkflowState, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.WorkflowStateDao.GetWorkflowStateCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<WorkflowState>> GetWorkflowStateCustomList( Expression<Func<WorkflowState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<WorkflowState, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<WorkflowState>> response = new BusinessResponse<BaseListReturnType<WorkflowState>>();
		    try
		    {
			    response.Result = GetWorkflowStateCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<WorkflowState> GetWorkflowStateCustomListRaw( Expression<Func<WorkflowState, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<WorkflowState, dynamic> orderExpression = null)
		{
            return daoFactory.WorkflowStateDao.GetWorkflowStateCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveWorkflowState(WorkflowState workflowState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveWorkflowStateRaw(workflowState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveWorkflowStateRaw(WorkflowState workflowState)
        {
            daoFactory.WorkflowStateDao.SaveWorkflowState(workflowState);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyWorkflowState(WorkflowState workflowState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyWorkflowStateRaw(workflowState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyWorkflowStateRaw(WorkflowState workflowState)
        {
            daoFactory.WorkflowStateDao.SaveOnlyWorkflowState(workflowState);
            return true;
        }

        public BusinessResponse<bool> DeleteWorkflowState(WorkflowState workflowState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteWorkflowStateRaw(workflowState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteWorkflowStateRaw(WorkflowState workflowState)
        {
            daoFactory.WorkflowStateDao.DeleteWorkflowState(workflowState);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyWorkflowState(WorkflowState workflowState)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyWorkflowStateRaw(workflowState);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyWorkflowStateRaw(WorkflowState workflowState)
        {
            daoFactory.WorkflowStateDao.DeletePermanentlyWorkflowState(workflowState);
            return true;
        }
	}
	public partial class WorkflowTransitionService: BaseService
	{
	    public BusinessResponse<List<WorkflowTransition>> GetAllWorkflowTransitions(bool shouldRemap=false)
        {
            BusinessResponse<List<WorkflowTransition>> response = new BusinessResponse<List<WorkflowTransition>>();
		    try
		    {
			    response.Result = GetAllWorkflowTransitionsRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<WorkflowTransition> GetAllWorkflowTransitionsRaw(bool shouldRemap=false)
        {
            return daoFactory.WorkflowTransitionDao.GetAllWorkflowTransitions(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<WorkflowTransition, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
		    try
		    {
			    response.Result = GetAllWorkflowTransitionsByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<WorkflowTransition, dynamic> orderExpression = null)
        {
            return daoFactory.WorkflowTransitionDao.GetAllWorkflowTransitionsByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionsWithWorkflowActionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap=false, Func<WorkflowTransition, dynamic> orderExpression = null)
			{
				return GetAllWorkflowTransitionsByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowAction"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionsWithWorkflowRoleDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap=false, Func<WorkflowTransition, dynamic> orderExpression = null)
			{
				return GetAllWorkflowTransitionsByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowRole"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionsWithWorkflowStateDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap=false, Func<WorkflowTransition, dynamic> orderExpression = null)
			{
				return GetAllWorkflowTransitionsByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowState"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionsWithWorkflowState1DetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap=false, Func<WorkflowTransition, dynamic> orderExpression = null)
			{
				return GetAllWorkflowTransitionsByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowState1"},shouldRemap,orderExpression);
			
			}
					public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionsWithWorkflowTransitionOnExecutesDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransition, bool>> expression = null,bool shouldRemap=false, Func<WorkflowTransition, dynamic> orderExpression = null)
			{
				return GetAllWorkflowTransitionsByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowTransitionOnExecutes"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.WorkflowTransitionDao.GetAllWorkflowTransitionWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<WorkflowTransition>> GetWorkflowTransitionListByIdList(List<long> workflowTransitionIds)
        {
            BusinessResponse<List<WorkflowTransition>> response = new BusinessResponse<List<WorkflowTransition>>();
            try
            {
                response.Result = GetWorkflowTransitionListByIdListRaw(workflowTransitionIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<WorkflowTransition> GetWorkflowTransitionListByIdListRaw(List<long> workflowTransitionIds)
        {
            return daoFactory.WorkflowTransitionDao.GetWorkflowTransitionListByIdList(workflowTransitionIds);
        }

					
		public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionsWithWorkflowActionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionsWithWorkflowActionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowActionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowTransitionWitDetailsRaw(new List<string>() { "WorkflowAction" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionListByWorkflowAction(long idWorkflowAction)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionListByWorkflowActionRaw(idWorkflowAction);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowActionRaw(long idWorkflowAction)
        {
            return daoFactory.WorkflowTransitionDao.GetAllWorkflowTransitionListByWorkflowAction(idWorkflowAction);
        }

        public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionListByWorkflowActionByPage(long idWorkflowAction, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionListByWorkflowActionByPageRaw(idWorkflowAction, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowActionByPageRaw(long idWorkflowAction,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.WorkflowTransitionDao.GetAllWorkflowTransitionListByWorkflowActionByPage(idWorkflowAction, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionsWithWorkflowRoleDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionsWithWorkflowRoleDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowRoleDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowTransitionWitDetailsRaw(new List<string>() { "WorkflowRole" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionListByWorkflowRole(long idWorkflowRole)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionListByWorkflowRoleRaw(idWorkflowRole);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowRoleRaw(long idWorkflowRole)
        {
            return daoFactory.WorkflowTransitionDao.GetAllWorkflowTransitionListByWorkflowRole(idWorkflowRole);
        }

        public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionListByWorkflowRoleByPage(long idWorkflowRole, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionListByWorkflowRoleByPageRaw(idWorkflowRole, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowRoleByPageRaw(long idWorkflowRole,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.WorkflowTransitionDao.GetAllWorkflowTransitionListByWorkflowRoleByPage(idWorkflowRole, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionsWithWorkflowStateDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionsWithWorkflowStateDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowStateDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowTransitionWitDetailsRaw(new List<string>() { "WorkflowState" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionListByWorkflowState(long idWorkflowState)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionListByWorkflowStateRaw(idWorkflowState);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowStateRaw(long idWorkflowState)
        {
            return daoFactory.WorkflowTransitionDao.GetAllWorkflowTransitionListByWorkflowState(idWorkflowState);
        }

        public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionListByWorkflowStateByPage(long idWorkflowState, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionListByWorkflowStateByPageRaw(idWorkflowState, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowStateByPageRaw(long idWorkflowState,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.WorkflowTransitionDao.GetAllWorkflowTransitionListByWorkflowStateByPage(idWorkflowState, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionsWithWorkflowState1Details(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionsWithWorkflowState1DetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowState1DetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowTransitionWitDetailsRaw(new List<string>() { "WorkflowState1" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionListByWorkflowState1(long idWorkflowState1)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionListByWorkflowState1Raw(idWorkflowState1);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowState1Raw(long idWorkflowState1)
        {
            return daoFactory.WorkflowTransitionDao.GetAllWorkflowTransitionListByWorkflowState1(idWorkflowState1);
        }

        public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionListByWorkflowState1ByPage(long idWorkflowState1, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionListByWorkflowState1ByPageRaw(idWorkflowState1, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionListByWorkflowState1ByPageRaw(long idWorkflowState1,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.WorkflowTransitionDao.GetAllWorkflowTransitionListByWorkflowState1ByPage(idWorkflowState1, sortingPagingInfo);
        }

					
		public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetAllWorkflowTransitionsWithWorkflowTransitionOnExecutesDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
            try
            {
                response.Result = GetAllWorkflowTransitionsWithWorkflowTransitionOnExecutesDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransition> GetAllWorkflowTransitionsWithWorkflowTransitionOnExecutesDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowTransitionWitDetailsRaw(new List<string>() { "WorkflowTransitionOnExecutes" }, shouldRemap);
        }
        
        






		



		public BusinessResponse<WorkflowTransition> GetWorkflowTransitionWithWorkflowActionDetails(long idWorkflowTransition,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowTransition> response = new BusinessResponse<WorkflowTransition>();
            try
            {
                response.Result = GetWorkflowTransitionWithWorkflowActionDetailsRaw(idWorkflowTransition,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowTransition GetWorkflowTransitionWithWorkflowActionDetailsRaw(long idWorkflowTransition,bool shouldRemap=false)
        {
            return GetWorkflowTransitionWitDetailsRaw(idWorkflowTransition,new List<string>() { "WorkflowAction"},shouldRemap);
        }

		



		public BusinessResponse<WorkflowTransition> GetWorkflowTransitionWithWorkflowRoleDetails(long idWorkflowTransition,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowTransition> response = new BusinessResponse<WorkflowTransition>();
            try
            {
                response.Result = GetWorkflowTransitionWithWorkflowRoleDetailsRaw(idWorkflowTransition,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowTransition GetWorkflowTransitionWithWorkflowRoleDetailsRaw(long idWorkflowTransition,bool shouldRemap=false)
        {
            return GetWorkflowTransitionWitDetailsRaw(idWorkflowTransition,new List<string>() { "WorkflowRole"},shouldRemap);
        }

		



		public BusinessResponse<WorkflowTransition> GetWorkflowTransitionWithWorkflowStateDetails(long idWorkflowTransition,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowTransition> response = new BusinessResponse<WorkflowTransition>();
            try
            {
                response.Result = GetWorkflowTransitionWithWorkflowStateDetailsRaw(idWorkflowTransition,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowTransition GetWorkflowTransitionWithWorkflowStateDetailsRaw(long idWorkflowTransition,bool shouldRemap=false)
        {
            return GetWorkflowTransitionWitDetailsRaw(idWorkflowTransition,new List<string>() { "WorkflowState"},shouldRemap);
        }

		



		public BusinessResponse<WorkflowTransition> GetWorkflowTransitionWithWorkflowState1Details(long idWorkflowTransition,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowTransition> response = new BusinessResponse<WorkflowTransition>();
            try
            {
                response.Result = GetWorkflowTransitionWithWorkflowState1DetailsRaw(idWorkflowTransition,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowTransition GetWorkflowTransitionWithWorkflowState1DetailsRaw(long idWorkflowTransition,bool shouldRemap=false)
        {
            return GetWorkflowTransitionWitDetailsRaw(idWorkflowTransition,new List<string>() { "WorkflowState1"},shouldRemap);
        }

		
			public BusinessResponse<List<WorkflowTransitionOnExecute>>  UpdateWorkflowTransitionOnExecutesForWorkflowTransitionWithoutSavingNewItem(List<WorkflowTransitionOnExecute> newWorkflowTransitionOnExecutes,long idWorkflowTransition)
            {
                BusinessResponse<List<WorkflowTransitionOnExecute>> response = new BusinessResponse<List<WorkflowTransitionOnExecute>>();
                try
                {
                    response.Result = UpdateWorkflowTransitionOnExecutesForWorkflowTransitionWithoutSavingNewItemRaw(newWorkflowTransitionOnExecutes, idWorkflowTransition);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowTransitionOnExecute> UpdateWorkflowTransitionOnExecutesForWorkflowTransitionWithoutSavingNewItemRaw(List<WorkflowTransitionOnExecute> newWorkflowTransitionOnExecutes,long idWorkflowTransition)
            {
                return daoFactory.WorkflowTransitionDao.UpdateWorkflowTransitionOnExecutesForWorkflowTransitionWithoutSavingNewItem(newWorkflowTransitionOnExecutes,idWorkflowTransition); 
            }



		    public BusinessResponse<List<WorkflowTransitionOnExecute>>  UpdateWorkflowTransitionOnExecutesForWorkflowTransition(List<WorkflowTransitionOnExecute> newWorkflowTransitionOnExecutes,long idWorkflowTransition)
            {
                BusinessResponse<List<WorkflowTransitionOnExecute>> response = new BusinessResponse<List<WorkflowTransitionOnExecute>>();
                try
                {
                    response.Result = UpdateWorkflowTransitionOnExecutesForWorkflowTransitionRaw(newWorkflowTransitionOnExecutes, idWorkflowTransition);
                }
                catch (Exception ex)
                {
                    response.Result = null;
                    response.Exception = new BusinessLayerException(ex);
                }
                return response;
            }

            internal List<WorkflowTransitionOnExecute> UpdateWorkflowTransitionOnExecutesForWorkflowTransitionRaw(List<WorkflowTransitionOnExecute> newWorkflowTransitionOnExecutes,long idWorkflowTransition)
            {
                return daoFactory.WorkflowTransitionDao.UpdateWorkflowTransitionOnExecutesForWorkflowTransition(newWorkflowTransitionOnExecutes,idWorkflowTransition); 
            }





		public BusinessResponse<WorkflowTransition> GetWorkflowTransitionWithWorkflowTransitionOnExecutesDetails(long idWorkflowTransition,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowTransition> response = new BusinessResponse<WorkflowTransition>();
            try
            {
                response.Result = GetWorkflowTransitionWithWorkflowTransitionOnExecutesDetailsRaw(idWorkflowTransition,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowTransition GetWorkflowTransitionWithWorkflowTransitionOnExecutesDetailsRaw(long idWorkflowTransition,bool shouldRemap=false)
        {
            return GetWorkflowTransitionWitDetailsRaw(idWorkflowTransition,new List<string>() { "WorkflowTransitionOnExecutes"},shouldRemap);
        }

		
        public BusinessResponse<WorkflowTransition> GetWorkflowTransition(long idWorkflowTransition,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowTransition> response = new BusinessResponse<WorkflowTransition>();
		    try
		    {
			    response.Result = GetWorkflowTransitionsRaw(idWorkflowTransition,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal WorkflowTransition GetWorkflowTransitionsRaw(long idWorkflowTransition,bool shouldRemap=false)
        {
            return daoFactory.WorkflowTransitionDao.GetWorkflowTransition(idWorkflowTransition,shouldRemap);
        }

        
        public BusinessResponse<WorkflowTransition> GetWorkflowTransitionWitDetails(long idWorkflowTransition,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowTransition> response = new BusinessResponse<WorkflowTransition>();
		    try
		    {
			    response.Result = GetWorkflowTransitionWitDetailsRaw(idWorkflowTransition,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal WorkflowTransition GetWorkflowTransitionWitDetailsRaw(long idWorkflowTransition,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.WorkflowTransitionDao.GetWorkflowTransitionWitDetails(idWorkflowTransition,shouldRemap);
        }


		 public BusinessResponse<WorkflowTransition> GetWorkflowTransitionCustom( Expression<Func<WorkflowTransition, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<WorkflowTransition> response = new BusinessResponse<WorkflowTransition>();
		    try
		    {
			    response.Result = GetWorkflowTransitionCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal WorkflowTransition GetWorkflowTransitionCustomRaw( Expression<Func<WorkflowTransition, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.WorkflowTransitionDao.GetWorkflowTransitionCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<WorkflowTransition>> GetWorkflowTransitionCustomList( Expression<Func<WorkflowTransition, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<WorkflowTransition, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<WorkflowTransition>> response = new BusinessResponse<BaseListReturnType<WorkflowTransition>>();
		    try
		    {
			    response.Result = GetWorkflowTransitionCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<WorkflowTransition> GetWorkflowTransitionCustomListRaw( Expression<Func<WorkflowTransition, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<WorkflowTransition, dynamic> orderExpression = null)
		{
            return daoFactory.WorkflowTransitionDao.GetWorkflowTransitionCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveWorkflowTransition(WorkflowTransition workflowTransition)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveWorkflowTransitionRaw(workflowTransition);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveWorkflowTransitionRaw(WorkflowTransition workflowTransition)
        {
            daoFactory.WorkflowTransitionDao.SaveWorkflowTransition(workflowTransition);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyWorkflowTransition(WorkflowTransition workflowTransition)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyWorkflowTransitionRaw(workflowTransition);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyWorkflowTransitionRaw(WorkflowTransition workflowTransition)
        {
            daoFactory.WorkflowTransitionDao.SaveOnlyWorkflowTransition(workflowTransition);
            return true;
        }

        public BusinessResponse<bool> DeleteWorkflowTransition(WorkflowTransition workflowTransition)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteWorkflowTransitionRaw(workflowTransition);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteWorkflowTransitionRaw(WorkflowTransition workflowTransition)
        {
            daoFactory.WorkflowTransitionDao.DeleteWorkflowTransition(workflowTransition);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyWorkflowTransition(WorkflowTransition workflowTransition)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyWorkflowTransitionRaw(workflowTransition);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyWorkflowTransitionRaw(WorkflowTransition workflowTransition)
        {
            daoFactory.WorkflowTransitionDao.DeletePermanentlyWorkflowTransition(workflowTransition);
            return true;
        }
	}
	public partial class WorkflowTransitionOnExecuteService: BaseService
	{
	    public BusinessResponse<List<WorkflowTransitionOnExecute>> GetAllWorkflowTransitionOnExecutes(bool shouldRemap=false)
        {
            BusinessResponse<List<WorkflowTransitionOnExecute>> response = new BusinessResponse<List<WorkflowTransitionOnExecute>>();
		    try
		    {
			    response.Result = GetAllWorkflowTransitionOnExecutesRaw(shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
		    return response;
        }

        internal List<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecutesRaw(bool shouldRemap=false)
        {
            return daoFactory.WorkflowTransitionOnExecuteDao.GetAllWorkflowTransitionOnExecutes(shouldRemap);
        }

        public BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> GetAllWorkflowTransitionOnExecutesByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransitionOnExecute, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> response = new BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>>();
		    try
		    {
			    response.Result = GetAllWorkflowTransitionOnExecutesByPageRaw(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    }
            return response;
        }

        internal BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecutesByPageRaw(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransitionOnExecute, bool>> expression = null, List<string> includes = null,bool shouldRemap=false, Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
        {
            return daoFactory.WorkflowTransitionOnExecuteDao.GetAllWorkflowTransitionOnExecutesByPage(sortingPagingInfo,expression,includes,shouldRemap,orderExpression);
        }

					public BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> GetAllWorkflowTransitionOnExecutesWithWorkflowTransitionDetailsByPage(Business.Common.SortingPagingInfo sortingPagingInfo, Expression<Func<WorkflowTransitionOnExecute, bool>> expression = null,bool shouldRemap=false, Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
			{
				return GetAllWorkflowTransitionOnExecutesByPage(sortingPagingInfo, expression,new List<string>(){"WorkflowTransition"},shouldRemap,orderExpression);
			
			}
		
		public BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> GetAllWorkflowTransitionOnExecuteWitDetails(List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> response = new BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>>();
            try
            {
                response.Result = GetAllWorkflowTransitionOnExecuteWitDetailsRaw(includes, shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecuteWitDetailsRaw(List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.WorkflowTransitionOnExecuteDao.GetAllWorkflowTransitionOnExecuteWitDetails(includes, shouldRemap);
        }

        public BusinessResponse<List<WorkflowTransitionOnExecute>> GetWorkflowTransitionOnExecuteListByIdList(List<long> workflowTransitionOnExecuteIds)
        {
            BusinessResponse<List<WorkflowTransitionOnExecute>> response = new BusinessResponse<List<WorkflowTransitionOnExecute>>();
            try
            {
                response.Result = GetWorkflowTransitionOnExecuteListByIdListRaw(workflowTransitionOnExecuteIds);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal List<WorkflowTransitionOnExecute> GetWorkflowTransitionOnExecuteListByIdListRaw(List<long> workflowTransitionOnExecuteIds)
        {
            return daoFactory.WorkflowTransitionOnExecuteDao.GetWorkflowTransitionOnExecuteListByIdList(workflowTransitionOnExecuteIds);
        }

					
		public BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> GetAllWorkflowTransitionOnExecutesWithWorkflowTransitionDetails(bool shouldRemap=false)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> response = new BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>>();
            try
            {
                response.Result = GetAllWorkflowTransitionOnExecutesWithWorkflowTransitionDetailsRaw(shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecutesWithWorkflowTransitionDetailsRaw(bool shouldRemap=false)
        {
            return GetAllWorkflowTransitionOnExecuteWitDetailsRaw(new List<string>() { "WorkflowTransition" }, shouldRemap);
        }
        
        





  
        public BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> GetAllWorkflowTransitionOnExecuteListByWorkflowTransition(long idWorkflowTransition)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> response = new BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>>();
            try
            {
                response.Result = GetAllWorkflowTransitionOnExecuteListByWorkflowTransitionRaw(idWorkflowTransition);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecuteListByWorkflowTransitionRaw(long idWorkflowTransition)
        {
            return daoFactory.WorkflowTransitionOnExecuteDao.GetAllWorkflowTransitionOnExecuteListByWorkflowTransition(idWorkflowTransition);
        }

        public BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> GetAllWorkflowTransitionOnExecuteListByWorkflowTransitionByPage(long idWorkflowTransition, SortingPagingInfo sortingPagingInfo)
        {
            BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> response = new BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>>();
            try
            {
                response.Result = GetAllWorkflowTransitionOnExecuteListByWorkflowTransitionByPageRaw(idWorkflowTransition, sortingPagingInfo);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal BaseListReturnType<WorkflowTransitionOnExecute> GetAllWorkflowTransitionOnExecuteListByWorkflowTransitionByPageRaw(long idWorkflowTransition,SortingPagingInfo sortingPagingInfo)
        {
            return daoFactory.WorkflowTransitionOnExecuteDao.GetAllWorkflowTransitionOnExecuteListByWorkflowTransitionByPage(idWorkflowTransition, sortingPagingInfo);
        }

		
		



		public BusinessResponse<WorkflowTransitionOnExecute> GetWorkflowTransitionOnExecuteWithWorkflowTransitionDetails(long idWorkflowTransitionOnExecute,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowTransitionOnExecute> response = new BusinessResponse<WorkflowTransitionOnExecute>();
            try
            {
                response.Result = GetWorkflowTransitionOnExecuteWithWorkflowTransitionDetailsRaw(idWorkflowTransitionOnExecute,shouldRemap);
            }
            catch (Exception ex)
            {
                response.Result = null;
                response.Exception = new BusinessLayerException(ex);
            }
            return response;
        }

        internal WorkflowTransitionOnExecute GetWorkflowTransitionOnExecuteWithWorkflowTransitionDetailsRaw(long idWorkflowTransitionOnExecute,bool shouldRemap=false)
        {
            return GetWorkflowTransitionOnExecuteWitDetailsRaw(idWorkflowTransitionOnExecute,new List<string>() { "WorkflowTransition"},shouldRemap);
        }

		
        public BusinessResponse<WorkflowTransitionOnExecute> GetWorkflowTransitionOnExecute(long idWorkflowTransitionOnExecute,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowTransitionOnExecute> response = new BusinessResponse<WorkflowTransitionOnExecute>();
		    try
		    {
			    response.Result = GetWorkflowTransitionOnExecutesRaw(idWorkflowTransitionOnExecute,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal WorkflowTransitionOnExecute GetWorkflowTransitionOnExecutesRaw(long idWorkflowTransitionOnExecute,bool shouldRemap=false)
        {
            return daoFactory.WorkflowTransitionOnExecuteDao.GetWorkflowTransitionOnExecute(idWorkflowTransitionOnExecute,shouldRemap);
        }

        
        public BusinessResponse<WorkflowTransitionOnExecute> GetWorkflowTransitionOnExecuteWitDetails(long idWorkflowTransitionOnExecute,List<string> includes = null,bool shouldRemap=false)
        {
            BusinessResponse<WorkflowTransitionOnExecute> response = new BusinessResponse<WorkflowTransitionOnExecute>();
		    try
		    {
			    response.Result = GetWorkflowTransitionOnExecuteWitDetailsRaw(idWorkflowTransitionOnExecute,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal WorkflowTransitionOnExecute GetWorkflowTransitionOnExecuteWitDetailsRaw(long idWorkflowTransitionOnExecute,List<string> includes = null,bool shouldRemap=false)
        {
            return daoFactory.WorkflowTransitionOnExecuteDao.GetWorkflowTransitionOnExecuteWitDetails(idWorkflowTransitionOnExecute,shouldRemap);
        }


		 public BusinessResponse<WorkflowTransitionOnExecute> GetWorkflowTransitionOnExecuteCustom( Expression<Func<WorkflowTransitionOnExecute, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		 {
            BusinessResponse<WorkflowTransitionOnExecute> response = new BusinessResponse<WorkflowTransitionOnExecute>();
		    try
		    {
			    response.Result = GetWorkflowTransitionOnExecuteCustomRaw(expression,includes,shouldRemap);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal WorkflowTransitionOnExecute GetWorkflowTransitionOnExecuteCustomRaw( Expression<Func<WorkflowTransitionOnExecute, bool>> expression, List<string> includes = null,bool shouldRemap=false)
		{
            return daoFactory.WorkflowTransitionOnExecuteDao.GetWorkflowTransitionOnExecuteCustom(expression,includes,shouldRemap);

		}

		 public BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> GetWorkflowTransitionOnExecuteCustomList( Expression<Func<WorkflowTransitionOnExecute, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
		 {
            BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>> response = new BusinessResponse<BaseListReturnType<WorkflowTransitionOnExecute>>();
		    try
		    {
			    response.Result = GetWorkflowTransitionOnExecuteCustomListRaw(expression,includes,shouldRemap,orderExpression);
		    }
		    catch (Exception ex)
		    {
			    response.Result = null;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }


		internal BaseListReturnType<WorkflowTransitionOnExecute> GetWorkflowTransitionOnExecuteCustomListRaw( Expression<Func<WorkflowTransitionOnExecute, bool>> expression, List<string> includes = null,bool shouldRemap=false,Func<WorkflowTransitionOnExecute, dynamic> orderExpression = null)
		{
            return daoFactory.WorkflowTransitionOnExecuteDao.GetWorkflowTransitionOnExecuteCustomList(expression,includes,shouldRemap,orderExpression);

		}
        public BusinessResponse<bool> SaveWorkflowTransitionOnExecute(WorkflowTransitionOnExecute workflowTransitionOnExecute)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveWorkflowTransitionOnExecuteRaw(workflowTransitionOnExecute);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveWorkflowTransitionOnExecuteRaw(WorkflowTransitionOnExecute workflowTransitionOnExecute)
        {
            daoFactory.WorkflowTransitionOnExecuteDao.SaveWorkflowTransitionOnExecute(workflowTransitionOnExecute);
            return true;
        }

        public BusinessResponse<bool> SaveOnlyWorkflowTransitionOnExecute(WorkflowTransitionOnExecute workflowTransitionOnExecute)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    SaveOnlyWorkflowTransitionOnExecuteRaw(workflowTransitionOnExecute);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }

        internal bool SaveOnlyWorkflowTransitionOnExecuteRaw(WorkflowTransitionOnExecute workflowTransitionOnExecute)
        {
            daoFactory.WorkflowTransitionOnExecuteDao.SaveOnlyWorkflowTransitionOnExecute(workflowTransitionOnExecute);
            return true;
        }

        public BusinessResponse<bool> DeleteWorkflowTransitionOnExecute(WorkflowTransitionOnExecute workflowTransitionOnExecute)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeleteWorkflowTransitionOnExecuteRaw(workflowTransitionOnExecute);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeleteWorkflowTransitionOnExecuteRaw(WorkflowTransitionOnExecute workflowTransitionOnExecute)
        {
            daoFactory.WorkflowTransitionOnExecuteDao.DeleteWorkflowTransitionOnExecute(workflowTransitionOnExecute);
            return true;
        }

		public BusinessResponse<bool> DeletePermanentlyWorkflowTransitionOnExecute(WorkflowTransitionOnExecute workflowTransitionOnExecute)
        {
            BusinessResponse<bool> response = new BusinessResponse<bool>();
		    try
		    {
			    DeletePermanentlyWorkflowTransitionOnExecuteRaw(workflowTransitionOnExecute);
                response.Result = true;
		    }
		    catch (Exception ex)
		    {
			    response.Result = false;
			    response.Exception = new BusinessLayerException(ex);
		    } 
            return response;
        }
        
        internal bool DeletePermanentlyWorkflowTransitionOnExecuteRaw(WorkflowTransitionOnExecute workflowTransitionOnExecute)
        {
            daoFactory.WorkflowTransitionOnExecuteDao.DeletePermanentlyWorkflowTransitionOnExecute(workflowTransitionOnExecute);
            return true;
        }
	}
}

	