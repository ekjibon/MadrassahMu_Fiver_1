//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------




class addressModel {
    public idAddress: number;
    public addressLine1: string;
    public addressLine2: string;
    public addressLine3: string;
    public addressLine4: string;
    public postcode: string;
    public idCity: number;
    public isDeactivated: boolean;
    public idCountry: number;
    public city: string;

    public companyLocations: companyLocationModel[]

    public city1: cityModel

    public country: countryModel

    public contacts: contactModel[]

    public person_Address: person_AddressModel[]




















    public idLocalAddress: string
    public static ConvertJSONToModel(_addressJSON: any): addressModel {
        var _addressModel: addressModel = new addressModel();
        _addressModel.idAddress = _addressJSON.IdAddress;
        _addressModel.addressLine1 = _addressJSON.AddressLine1;
        _addressModel.addressLine2 = _addressJSON.AddressLine2;
        _addressModel.addressLine3 = _addressJSON.AddressLine3;
        _addressModel.addressLine4 = _addressJSON.AddressLine4;
        _addressModel.postcode = _addressJSON.Postcode;
        _addressModel.idCity = _addressJSON.IdCity;
        _addressModel.isDeactivated = _addressJSON.IsDeactivated;
        _addressModel.idCountry = _addressJSON.IdCountry;
        _addressModel.city = _addressJSON.City;

        if (_addressJSON.companyLocations != null) {

            _addressModel.companyLocations = companyLocationModel.ConvertJSONListToModelList(_addressJSON.CompanyLocations)
        }

        if (_addressJSON.city1 != null) {

            _addressModel.city1 = cityModel.ConvertJSONToModel(_addressJSON.City1)
        }

        if (_addressJSON.country != null) {

            _addressModel.country = countryModel.ConvertJSONToModel(_addressJSON.Country)
        }

        if (_addressJSON.contacts != null) {

            _addressModel.contacts = contactModel.ConvertJSONListToModelList(_addressJSON.Contacts)
        }

        if (_addressJSON.person_Address != null) {

            _addressModel.person_Address = person_AddressModel.ConvertJSONListToModelList(_addressJSON.Person_Address)
        }

        return _addressModel;



    }
    public static ConvertJSONListToModelList(_addressJSONList: any): addressModel[] {
        var addressList: addressModel[] = new Array();;
        angular.forEach(_addressJSONList, function (_addressJSON) {
            addressList.push(addressModel.ConvertJSONToModel(_addressJSON));
        })
        return addressList;
    }
}



class approvalMessageModel {
    public idApprovalMessage: number;
    public description: string;
    public isDeactivated: boolean;
    public idWorkflowToInitiate: number;
    public idWorkflowAction: number;
    public isRequestRequired: boolean;
    public isPostApprovalRequired: boolean;
    public isProgressBlocked: boolean;

    public workflowAction: workflowActionModel

    public workflow: workflowModel








    public idLocalApprovalMessage: string
    public static ConvertJSONToModel(_approvalMessageJSON: any): approvalMessageModel {
        var _approvalMessageModel: approvalMessageModel = new approvalMessageModel();
        _approvalMessageModel.idApprovalMessage = _approvalMessageJSON.IdApprovalMessage;
        _approvalMessageModel.description = _approvalMessageJSON.Description;
        _approvalMessageModel.isDeactivated = _approvalMessageJSON.IsDeactivated;
        _approvalMessageModel.idWorkflowToInitiate = _approvalMessageJSON.IdWorkflowToInitiate;
        _approvalMessageModel.idWorkflowAction = _approvalMessageJSON.IdWorkflowAction;
        _approvalMessageModel.isRequestRequired = _approvalMessageJSON.IsRequestRequired;
        _approvalMessageModel.isPostApprovalRequired = _approvalMessageJSON.IsPostApprovalRequired;
        _approvalMessageModel.isProgressBlocked = _approvalMessageJSON.IsProgressBlocked;

        if (_approvalMessageJSON.workflowAction != null) {

            _approvalMessageModel.workflowAction = workflowActionModel.ConvertJSONToModel(_approvalMessageJSON.WorkflowAction)
        }

        if (_approvalMessageJSON.workflow != null) {

            _approvalMessageModel.workflow = workflowModel.ConvertJSONToModel(_approvalMessageJSON.Workflow)
        }

        return _approvalMessageModel;



    }
    public static ConvertJSONListToModelList(_approvalMessageJSONList: any): approvalMessageModel[] {
        var approvalMessageList: approvalMessageModel[] = new Array();;
        angular.forEach(_approvalMessageJSONList, function (_approvalMessageJSON) {
            approvalMessageList.push(approvalMessageModel.ConvertJSONToModel(_approvalMessageJSON));
        })
        return approvalMessageList;
    }
}



class bankModel {
    public idBank: number;
    public description: string;
    public isDeactivated: boolean;
    public idBankTransferPaymentMethod: number;
    public idTransactionAccount: number;
    public idTransactionTemplate: number;

    public bankStatementStagings: bankStatementStagingModel[]

    public paymentMethod: paymentMethodModel

    public transactionAccount: transactionAccountModel

    public transactionTemplate: transactionTemplateModel

    public paymentDetails: paymentDetailModel[]



















    public idLocalBank: string
    public static ConvertJSONToModel(_bankJSON: any): bankModel {
        var _bankModel: bankModel = new bankModel();
        _bankModel.idBank = _bankJSON.IdBank;
        _bankModel.description = _bankJSON.Description;
        _bankModel.isDeactivated = _bankJSON.IsDeactivated;
        _bankModel.idBankTransferPaymentMethod = _bankJSON.IdBankTransferPaymentMethod;
        _bankModel.idTransactionAccount = _bankJSON.IdTransactionAccount;
        _bankModel.idTransactionTemplate = _bankJSON.IdTransactionTemplate;

        if (_bankJSON.bankStatementStagings != null) {

            _bankModel.bankStatementStagings = bankStatementStagingModel.ConvertJSONListToModelList(_bankJSON.BankStatementStagings)
        }

        if (_bankJSON.paymentMethod != null) {

            _bankModel.paymentMethod = paymentMethodModel.ConvertJSONToModel(_bankJSON.PaymentMethod)
        }

        if (_bankJSON.transactionAccount != null) {

            _bankModel.transactionAccount = transactionAccountModel.ConvertJSONToModel(_bankJSON.TransactionAccount)
        }

        if (_bankJSON.transactionTemplate != null) {

            _bankModel.transactionTemplate = transactionTemplateModel.ConvertJSONToModel(_bankJSON.TransactionTemplate)
        }

        if (_bankJSON.paymentDetails != null) {

            _bankModel.paymentDetails = paymentDetailModel.ConvertJSONListToModelList(_bankJSON.PaymentDetails)
        }

        return _bankModel;



    }
    public static ConvertJSONListToModelList(_bankJSONList: any): bankModel[] {
        var bankList: bankModel[] = new Array();;
        angular.forEach(_bankJSONList, function (_bankJSON) {
            bankList.push(bankModel.ConvertJSONToModel(_bankJSON));
        })
        return bankList;
    }
}



class bankReconHitTypeModel {
    public idBankReconHitType: number;
    public description: string;
    public isDeactivated: boolean;

    public bankStatementStagingHits: bankStatementStagingHitModel[]






    public idLocalBankReconHitType: string
    public static ConvertJSONToModel(_bankReconHitTypeJSON: any): bankReconHitTypeModel {
        var _bankReconHitTypeModel: bankReconHitTypeModel = new bankReconHitTypeModel();
        _bankReconHitTypeModel.idBankReconHitType = _bankReconHitTypeJSON.IdBankReconHitType;
        _bankReconHitTypeModel.description = _bankReconHitTypeJSON.Description;
        _bankReconHitTypeModel.isDeactivated = _bankReconHitTypeJSON.IsDeactivated;

        if (_bankReconHitTypeJSON.bankStatementStagingHits != null) {

            _bankReconHitTypeModel.bankStatementStagingHits = bankStatementStagingHitModel.ConvertJSONListToModelList(_bankReconHitTypeJSON.BankStatementStagingHits)
        }

        return _bankReconHitTypeModel;



    }
    public static ConvertJSONListToModelList(_bankReconHitTypeJSONList: any): bankReconHitTypeModel[] {
        var bankReconHitTypeList: bankReconHitTypeModel[] = new Array();;
        angular.forEach(_bankReconHitTypeJSONList, function (_bankReconHitTypeJSON) {
            bankReconHitTypeList.push(bankReconHitTypeModel.ConvertJSONToModel(_bankReconHitTypeJSON));
        })
        return bankReconHitTypeList;
    }
}



class bankReconOrderProcessStateModel {
    public idBankReconOrderProcessState: number;
    public isDeactivated: boolean;
    public description: string;

    public bankStatementStagings: bankStatementStagingModel[]






    public idLocalBankReconOrderProcessState: string
    public static ConvertJSONToModel(_bankReconOrderProcessStateJSON: any): bankReconOrderProcessStateModel {
        var _bankReconOrderProcessStateModel: bankReconOrderProcessStateModel = new bankReconOrderProcessStateModel();
        _bankReconOrderProcessStateModel.idBankReconOrderProcessState = _bankReconOrderProcessStateJSON.IdBankReconOrderProcessState;
        _bankReconOrderProcessStateModel.isDeactivated = _bankReconOrderProcessStateJSON.IsDeactivated;
        _bankReconOrderProcessStateModel.description = _bankReconOrderProcessStateJSON.Description;

        if (_bankReconOrderProcessStateJSON.bankStatementStagings != null) {

            _bankReconOrderProcessStateModel.bankStatementStagings = bankStatementStagingModel.ConvertJSONListToModelList(_bankReconOrderProcessStateJSON.BankStatementStagings)
        }

        return _bankReconOrderProcessStateModel;



    }
    public static ConvertJSONListToModelList(_bankReconOrderProcessStateJSONList: any): bankReconOrderProcessStateModel[] {
        var bankReconOrderProcessStateList: bankReconOrderProcessStateModel[] = new Array();;
        angular.forEach(_bankReconOrderProcessStateJSONList, function (_bankReconOrderProcessStateJSON) {
            bankReconOrderProcessStateList.push(bankReconOrderProcessStateModel.ConvertJSONToModel(_bankReconOrderProcessStateJSON));
        })
        return bankReconOrderProcessStateList;
    }
}



class bankReconOrderTypeModel {
    public idBankReconOrderType: number;
    public isDeactivated: boolean;
    public description: string;

    public bankStatementStagingDetails: bankStatementStagingDetailModel[]






    public idLocalBankReconOrderType: string
    public static ConvertJSONToModel(_bankReconOrderTypeJSON: any): bankReconOrderTypeModel {
        var _bankReconOrderTypeModel: bankReconOrderTypeModel = new bankReconOrderTypeModel();
        _bankReconOrderTypeModel.idBankReconOrderType = _bankReconOrderTypeJSON.IdBankReconOrderType;
        _bankReconOrderTypeModel.isDeactivated = _bankReconOrderTypeJSON.IsDeactivated;
        _bankReconOrderTypeModel.description = _bankReconOrderTypeJSON.Description;

        if (_bankReconOrderTypeJSON.bankStatementStagingDetails != null) {

            _bankReconOrderTypeModel.bankStatementStagingDetails = bankStatementStagingDetailModel.ConvertJSONListToModelList(_bankReconOrderTypeJSON.BankStatementStagingDetails)
        }

        return _bankReconOrderTypeModel;



    }
    public static ConvertJSONListToModelList(_bankReconOrderTypeJSONList: any): bankReconOrderTypeModel[] {
        var bankReconOrderTypeList: bankReconOrderTypeModel[] = new Array();;
        angular.forEach(_bankReconOrderTypeJSONList, function (_bankReconOrderTypeJSON) {
            bankReconOrderTypeList.push(bankReconOrderTypeModel.ConvertJSONToModel(_bankReconOrderTypeJSON));
        })
        return bankReconOrderTypeList;
    }
}



class bankStatementHitListModel {
    public idBankStatementHitList: number;
    public description: string;
    public amount: number;
    public hitCount: number;
    public isDeactivated: boolean;
    public idBankStatementStagingDetail: number;

    public bankStatementStagingDetail: bankStatementStagingDetailModel

    public bankStatementHitList_TransactionPreset: bankStatementHitList_TransactionPresetModel[]

    public bankStatementStagingHits: bankStatementStagingHitModel[]

    public temporaryTransactions: temporaryTransactionModel[]

















    public idLocalBankStatementHitList: string
    public static ConvertJSONToModel(_bankStatementHitListJSON: any): bankStatementHitListModel {
        var _bankStatementHitListModel: bankStatementHitListModel = new bankStatementHitListModel();
        _bankStatementHitListModel.idBankStatementHitList = _bankStatementHitListJSON.IdBankStatementHitList;
        _bankStatementHitListModel.description = _bankStatementHitListJSON.Description;
        _bankStatementHitListModel.amount = _bankStatementHitListJSON.Amount;
        _bankStatementHitListModel.hitCount = _bankStatementHitListJSON.HitCount;
        _bankStatementHitListModel.isDeactivated = _bankStatementHitListJSON.IsDeactivated;
        _bankStatementHitListModel.idBankStatementStagingDetail = _bankStatementHitListJSON.IdBankStatementStagingDetail;

        if (_bankStatementHitListJSON.bankStatementStagingDetail != null) {

            _bankStatementHitListModel.bankStatementStagingDetail = bankStatementStagingDetailModel.ConvertJSONToModel(_bankStatementHitListJSON.BankStatementStagingDetail)
        }

        if (_bankStatementHitListJSON.bankStatementHitList_TransactionPreset != null) {

            _bankStatementHitListModel.bankStatementHitList_TransactionPreset = bankStatementHitList_TransactionPresetModel.ConvertJSONListToModelList(_bankStatementHitListJSON.BankStatementHitList_TransactionPreset)
        }

        if (_bankStatementHitListJSON.bankStatementStagingHits != null) {

            _bankStatementHitListModel.bankStatementStagingHits = bankStatementStagingHitModel.ConvertJSONListToModelList(_bankStatementHitListJSON.BankStatementStagingHits)
        }

        if (_bankStatementHitListJSON.temporaryTransactions != null) {

            _bankStatementHitListModel.temporaryTransactions = temporaryTransactionModel.ConvertJSONListToModelList(_bankStatementHitListJSON.TemporaryTransactions)
        }

        return _bankStatementHitListModel;



    }
    public static ConvertJSONListToModelList(_bankStatementHitListJSONList: any): bankStatementHitListModel[] {
        var bankStatementHitListList: bankStatementHitListModel[] = new Array();;
        angular.forEach(_bankStatementHitListJSONList, function (_bankStatementHitListJSON) {
            bankStatementHitListList.push(bankStatementHitListModel.ConvertJSONToModel(_bankStatementHitListJSON));
        })
        return bankStatementHitListList;
    }
}



class bankStatementHitList_TransactionPresetModel {
    public idBankStatementHitList_TransactionPreset: number;
    public idBankStatementHitList: number;
    public idTransactionPreset: number;
    public isDeactivated: boolean;

    public bankStatementHitList: bankStatementHitListModel

    public transactionPreset: transactionPresetModel








    public idLocalBankStatementHitList_TransactionPreset: string
    public static ConvertJSONToModel(_bankStatementHitList_TransactionPresetJSON: any): bankStatementHitList_TransactionPresetModel {
        var _bankStatementHitList_TransactionPresetModel: bankStatementHitList_TransactionPresetModel = new bankStatementHitList_TransactionPresetModel();
        _bankStatementHitList_TransactionPresetModel.idBankStatementHitList_TransactionPreset = _bankStatementHitList_TransactionPresetJSON.IdBankStatementHitList_TransactionPreset;
        _bankStatementHitList_TransactionPresetModel.idBankStatementHitList = _bankStatementHitList_TransactionPresetJSON.IdBankStatementHitList;
        _bankStatementHitList_TransactionPresetModel.idTransactionPreset = _bankStatementHitList_TransactionPresetJSON.IdTransactionPreset;
        _bankStatementHitList_TransactionPresetModel.isDeactivated = _bankStatementHitList_TransactionPresetJSON.IsDeactivated;

        if (_bankStatementHitList_TransactionPresetJSON.bankStatementHitList != null) {

            _bankStatementHitList_TransactionPresetModel.bankStatementHitList = bankStatementHitListModel.ConvertJSONToModel(_bankStatementHitList_TransactionPresetJSON.BankStatementHitList)
        }

        if (_bankStatementHitList_TransactionPresetJSON.transactionPreset != null) {

            _bankStatementHitList_TransactionPresetModel.transactionPreset = transactionPresetModel.ConvertJSONToModel(_bankStatementHitList_TransactionPresetJSON.TransactionPreset)
        }

        return _bankStatementHitList_TransactionPresetModel;



    }
    public static ConvertJSONListToModelList(_bankStatementHitList_TransactionPresetJSONList: any): bankStatementHitList_TransactionPresetModel[] {
        var bankStatementHitList_TransactionPresetList: bankStatementHitList_TransactionPresetModel[] = new Array();;
        angular.forEach(_bankStatementHitList_TransactionPresetJSONList, function (_bankStatementHitList_TransactionPresetJSON) {
            bankStatementHitList_TransactionPresetList.push(bankStatementHitList_TransactionPresetModel.ConvertJSONToModel(_bankStatementHitList_TransactionPresetJSON));
        })
        return bankStatementHitList_TransactionPresetList;
    }
}



class bankStatementStagingModel {
    public idBankStatementStaging: number;
    public uploadDate: Date;
    public idUserUploadedBy: number;
    public account: string;
    public bankStatementDateFrom: Date;
    public bankStatementDateTo: Date;
    public isDeactivated: boolean;
    public idDocument: number;
    public idBankStatementStagingState: number;
    public idBank: number;
    public idBankReconOrderProcessState: number;

    public bankReconOrderProcessState: bankReconOrderProcessStateModel

    public bank: bankModel

    public bankStatementStagingState: bankStatementStagingStateModel

    public document: documentModel

    public user: userModel

    public bankStatementStagingDetails: bankStatementStagingDetailModel[]





















    public idLocalBankStatementStaging: string
    public static ConvertJSONToModel(_bankStatementStagingJSON: any): bankStatementStagingModel {
        var _bankStatementStagingModel: bankStatementStagingModel = new bankStatementStagingModel();
        _bankStatementStagingModel.idBankStatementStaging = _bankStatementStagingJSON.IdBankStatementStaging;
        _bankStatementStagingModel.uploadDate = _bankStatementStagingJSON.UploadDate;
        _bankStatementStagingModel.idUserUploadedBy = _bankStatementStagingJSON.IdUserUploadedBy;
        _bankStatementStagingModel.account = _bankStatementStagingJSON.Account;
        _bankStatementStagingModel.bankStatementDateFrom = _bankStatementStagingJSON.BankStatementDateFrom;
        _bankStatementStagingModel.bankStatementDateTo = _bankStatementStagingJSON.BankStatementDateTo;
        _bankStatementStagingModel.isDeactivated = _bankStatementStagingJSON.IsDeactivated;
        _bankStatementStagingModel.idDocument = _bankStatementStagingJSON.IdDocument;
        _bankStatementStagingModel.idBankStatementStagingState = _bankStatementStagingJSON.IdBankStatementStagingState;
        _bankStatementStagingModel.idBank = _bankStatementStagingJSON.IdBank;
        _bankStatementStagingModel.idBankReconOrderProcessState = _bankStatementStagingJSON.IdBankReconOrderProcessState;

        if (_bankStatementStagingJSON.bankReconOrderProcessState != null) {

            _bankStatementStagingModel.bankReconOrderProcessState = bankReconOrderProcessStateModel.ConvertJSONToModel(_bankStatementStagingJSON.BankReconOrderProcessState)
        }

        if (_bankStatementStagingJSON.bank != null) {

            _bankStatementStagingModel.bank = bankModel.ConvertJSONToModel(_bankStatementStagingJSON.Bank)
        }

        if (_bankStatementStagingJSON.bankStatementStagingState != null) {

            _bankStatementStagingModel.bankStatementStagingState = bankStatementStagingStateModel.ConvertJSONToModel(_bankStatementStagingJSON.BankStatementStagingState)
        }

        if (_bankStatementStagingJSON.document != null) {

            _bankStatementStagingModel.document = documentModel.ConvertJSONToModel(_bankStatementStagingJSON.Document)
        }

        if (_bankStatementStagingJSON.user != null) {

            _bankStatementStagingModel.user = userModel.ConvertJSONToModel(_bankStatementStagingJSON.User)
        }

        if (_bankStatementStagingJSON.bankStatementStagingDetails != null) {

            _bankStatementStagingModel.bankStatementStagingDetails = bankStatementStagingDetailModel.ConvertJSONListToModelList(_bankStatementStagingJSON.BankStatementStagingDetails)
        }

        return _bankStatementStagingModel;



    }
    public static ConvertJSONListToModelList(_bankStatementStagingJSONList: any): bankStatementStagingModel[] {
        var bankStatementStagingList: bankStatementStagingModel[] = new Array();;
        angular.forEach(_bankStatementStagingJSONList, function (_bankStatementStagingJSON) {
            bankStatementStagingList.push(bankStatementStagingModel.ConvertJSONToModel(_bankStatementStagingJSON));
        })
        return bankStatementStagingList;
    }
}



class bankStatementStagingDetailModel {
    public idBankStatementStagingDetail: number;
    public idBankStatementStaging: number;
    public statementLineNo: number;
    public valueDate: Date;
    public branchCode: string;
    public remarks: string;
    public debitAmount: number;
    public creditAmount: number;
    public balance: number;
    public isDeactivated: boolean;
    public idBankStatementStagingDetailBatch: number;
    public idBankReconOrderType: number;
    public orderNumber: string;

    public bankReconOrderType: bankReconOrderTypeModel

    public bankStatementHitLists: bankStatementHitListModel[]

    public bankStatementStaging: bankStatementStagingModel

    public bankStatementStagingDetailBatch: bankStatementStagingDetailBatchModel

    public bankStatementStagingHits: bankStatementStagingHitModel[]

    public temporaryTransactions: temporaryTransactionModel[]

    public transaction_BankStatementStagingDetail: transaction_BankStatementStagingDetailModel[]



























    public idLocalBankStatementStagingDetail: string
    public static ConvertJSONToModel(_bankStatementStagingDetailJSON: any): bankStatementStagingDetailModel {
        var _bankStatementStagingDetailModel: bankStatementStagingDetailModel = new bankStatementStagingDetailModel();
        _bankStatementStagingDetailModel.idBankStatementStagingDetail = _bankStatementStagingDetailJSON.IdBankStatementStagingDetail;
        _bankStatementStagingDetailModel.idBankStatementStaging = _bankStatementStagingDetailJSON.IdBankStatementStaging;
        _bankStatementStagingDetailModel.statementLineNo = _bankStatementStagingDetailJSON.StatementLineNo;
        _bankStatementStagingDetailModel.valueDate = _bankStatementStagingDetailJSON.ValueDate;
        _bankStatementStagingDetailModel.branchCode = _bankStatementStagingDetailJSON.BranchCode;
        _bankStatementStagingDetailModel.remarks = _bankStatementStagingDetailJSON.Remarks;
        _bankStatementStagingDetailModel.debitAmount = _bankStatementStagingDetailJSON.DebitAmount;
        _bankStatementStagingDetailModel.creditAmount = _bankStatementStagingDetailJSON.CreditAmount;
        _bankStatementStagingDetailModel.balance = _bankStatementStagingDetailJSON.Balance;
        _bankStatementStagingDetailModel.isDeactivated = _bankStatementStagingDetailJSON.IsDeactivated;
        _bankStatementStagingDetailModel.idBankStatementStagingDetailBatch = _bankStatementStagingDetailJSON.IdBankStatementStagingDetailBatch;
        _bankStatementStagingDetailModel.idBankReconOrderType = _bankStatementStagingDetailJSON.IdBankReconOrderType;
        _bankStatementStagingDetailModel.orderNumber = _bankStatementStagingDetailJSON.OrderNumber;

        if (_bankStatementStagingDetailJSON.bankReconOrderType != null) {

            _bankStatementStagingDetailModel.bankReconOrderType = bankReconOrderTypeModel.ConvertJSONToModel(_bankStatementStagingDetailJSON.BankReconOrderType)
        }

        if (_bankStatementStagingDetailJSON.bankStatementHitLists != null) {

            _bankStatementStagingDetailModel.bankStatementHitLists = bankStatementHitListModel.ConvertJSONListToModelList(_bankStatementStagingDetailJSON.BankStatementHitLists)
        }

        if (_bankStatementStagingDetailJSON.bankStatementStaging != null) {

            _bankStatementStagingDetailModel.bankStatementStaging = bankStatementStagingModel.ConvertJSONToModel(_bankStatementStagingDetailJSON.BankStatementStaging)
        }

        if (_bankStatementStagingDetailJSON.bankStatementStagingDetailBatch != null) {

            _bankStatementStagingDetailModel.bankStatementStagingDetailBatch = bankStatementStagingDetailBatchModel.ConvertJSONToModel(_bankStatementStagingDetailJSON.BankStatementStagingDetailBatch)
        }

        if (_bankStatementStagingDetailJSON.bankStatementStagingHits != null) {

            _bankStatementStagingDetailModel.bankStatementStagingHits = bankStatementStagingHitModel.ConvertJSONListToModelList(_bankStatementStagingDetailJSON.BankStatementStagingHits)
        }

        if (_bankStatementStagingDetailJSON.temporaryTransactions != null) {

            _bankStatementStagingDetailModel.temporaryTransactions = temporaryTransactionModel.ConvertJSONListToModelList(_bankStatementStagingDetailJSON.TemporaryTransactions)
        }

        if (_bankStatementStagingDetailJSON.transaction_BankStatementStagingDetail != null) {

            _bankStatementStagingDetailModel.transaction_BankStatementStagingDetail = transaction_BankStatementStagingDetailModel.ConvertJSONListToModelList(_bankStatementStagingDetailJSON.Transaction_BankStatementStagingDetail)
        }

        return _bankStatementStagingDetailModel;



    }
    public static ConvertJSONListToModelList(_bankStatementStagingDetailJSONList: any): bankStatementStagingDetailModel[] {
        var bankStatementStagingDetailList: bankStatementStagingDetailModel[] = new Array();;
        angular.forEach(_bankStatementStagingDetailJSONList, function (_bankStatementStagingDetailJSON) {
            bankStatementStagingDetailList.push(bankStatementStagingDetailModel.ConvertJSONToModel(_bankStatementStagingDetailJSON));
        })
        return bankStatementStagingDetailList;
    }
}



class bankStatementStagingDetailBatchModel {
    public idBankStatementStagingDetailBatch: number;
    public isDeactivated: boolean;
    public idBankStatementStagingState: number;
    public batchNumber: number;

    public bankStatementStagingDetails: bankStatementStagingDetailModel[]

    public bankStatementStagingState: bankStatementStagingStateModel









    public idLocalBankStatementStagingDetailBatch: string
    public static ConvertJSONToModel(_bankStatementStagingDetailBatchJSON: any): bankStatementStagingDetailBatchModel {
        var _bankStatementStagingDetailBatchModel: bankStatementStagingDetailBatchModel = new bankStatementStagingDetailBatchModel();
        _bankStatementStagingDetailBatchModel.idBankStatementStagingDetailBatch = _bankStatementStagingDetailBatchJSON.IdBankStatementStagingDetailBatch;
        _bankStatementStagingDetailBatchModel.isDeactivated = _bankStatementStagingDetailBatchJSON.IsDeactivated;
        _bankStatementStagingDetailBatchModel.idBankStatementStagingState = _bankStatementStagingDetailBatchJSON.IdBankStatementStagingState;
        _bankStatementStagingDetailBatchModel.batchNumber = _bankStatementStagingDetailBatchJSON.BatchNumber;

        if (_bankStatementStagingDetailBatchJSON.bankStatementStagingDetails != null) {

            _bankStatementStagingDetailBatchModel.bankStatementStagingDetails = bankStatementStagingDetailModel.ConvertJSONListToModelList(_bankStatementStagingDetailBatchJSON.BankStatementStagingDetails)
        }

        if (_bankStatementStagingDetailBatchJSON.bankStatementStagingState != null) {

            _bankStatementStagingDetailBatchModel.bankStatementStagingState = bankStatementStagingStateModel.ConvertJSONToModel(_bankStatementStagingDetailBatchJSON.BankStatementStagingState)
        }

        return _bankStatementStagingDetailBatchModel;



    }
    public static ConvertJSONListToModelList(_bankStatementStagingDetailBatchJSONList: any): bankStatementStagingDetailBatchModel[] {
        var bankStatementStagingDetailBatchList: bankStatementStagingDetailBatchModel[] = new Array();;
        angular.forEach(_bankStatementStagingDetailBatchJSONList, function (_bankStatementStagingDetailBatchJSON) {
            bankStatementStagingDetailBatchList.push(bankStatementStagingDetailBatchModel.ConvertJSONToModel(_bankStatementStagingDetailBatchJSON));
        })
        return bankStatementStagingDetailBatchList;
    }
}



class bankStatementStagingHitModel {
    public idBankStatementStagingHit: number;
    public idBankStatementStagingDetail: number;
    public hitCount: number;
    public idBankReconHitType: number;
    public isDeactivated: boolean;
    public idBankStatementHitList: number;
    public idOrder: number;

    public bankStatementHitList: bankStatementHitListModel

    public bankStatementStagingDetail: bankStatementStagingDetailModel

    public bankReconHitType: bankReconHitTypeModel

    public order: orderModel

    public bankStatementStagingHit_TransactionPreset: bankStatementStagingHit_TransactionPresetModel[]

    public temporaryTransactions: temporaryTransactionModel[]






















    public idLocalBankStatementStagingHit: string
    public static ConvertJSONToModel(_bankStatementStagingHitJSON: any): bankStatementStagingHitModel {
        var _bankStatementStagingHitModel: bankStatementStagingHitModel = new bankStatementStagingHitModel();
        _bankStatementStagingHitModel.idBankStatementStagingHit = _bankStatementStagingHitJSON.IdBankStatementStagingHit;
        _bankStatementStagingHitModel.idBankStatementStagingDetail = _bankStatementStagingHitJSON.IdBankStatementStagingDetail;
        _bankStatementStagingHitModel.hitCount = _bankStatementStagingHitJSON.HitCount;
        _bankStatementStagingHitModel.idBankReconHitType = _bankStatementStagingHitJSON.IdBankReconHitType;
        _bankStatementStagingHitModel.isDeactivated = _bankStatementStagingHitJSON.IsDeactivated;
        _bankStatementStagingHitModel.idBankStatementHitList = _bankStatementStagingHitJSON.IdBankStatementHitList;
        _bankStatementStagingHitModel.idOrder = _bankStatementStagingHitJSON.IdOrder;

        if (_bankStatementStagingHitJSON.bankStatementHitList != null) {

            _bankStatementStagingHitModel.bankStatementHitList = bankStatementHitListModel.ConvertJSONToModel(_bankStatementStagingHitJSON.BankStatementHitList)
        }

        if (_bankStatementStagingHitJSON.bankStatementStagingDetail != null) {

            _bankStatementStagingHitModel.bankStatementStagingDetail = bankStatementStagingDetailModel.ConvertJSONToModel(_bankStatementStagingHitJSON.BankStatementStagingDetail)
        }

        if (_bankStatementStagingHitJSON.bankReconHitType != null) {

            _bankStatementStagingHitModel.bankReconHitType = bankReconHitTypeModel.ConvertJSONToModel(_bankStatementStagingHitJSON.BankReconHitType)
        }

        if (_bankStatementStagingHitJSON.order != null) {

            _bankStatementStagingHitModel.order = orderModel.ConvertJSONToModel(_bankStatementStagingHitJSON.Order)
        }

        if (_bankStatementStagingHitJSON.bankStatementStagingHit_TransactionPreset != null) {

            _bankStatementStagingHitModel.bankStatementStagingHit_TransactionPreset = bankStatementStagingHit_TransactionPresetModel.ConvertJSONListToModelList(_bankStatementStagingHitJSON.BankStatementStagingHit_TransactionPreset)
        }

        if (_bankStatementStagingHitJSON.temporaryTransactions != null) {

            _bankStatementStagingHitModel.temporaryTransactions = temporaryTransactionModel.ConvertJSONListToModelList(_bankStatementStagingHitJSON.TemporaryTransactions)
        }

        return _bankStatementStagingHitModel;



    }
    public static ConvertJSONListToModelList(_bankStatementStagingHitJSONList: any): bankStatementStagingHitModel[] {
        var bankStatementStagingHitList: bankStatementStagingHitModel[] = new Array();;
        angular.forEach(_bankStatementStagingHitJSONList, function (_bankStatementStagingHitJSON) {
            bankStatementStagingHitList.push(bankStatementStagingHitModel.ConvertJSONToModel(_bankStatementStagingHitJSON));
        })
        return bankStatementStagingHitList;
    }
}



class bankStatementStagingHit_TransactionPresetModel {
    public idBankStatementStagingHit_TransactionPreset: number;
    public idBankStatementStagingHit: number;
    public idTransactionPreset: number;
    public isDeactivated: boolean;

    public bankStatementStagingHit: bankStatementStagingHitModel

    public transactionPreset: transactionPresetModel








    public idLocalBankStatementStagingHit_TransactionPreset: string
    public static ConvertJSONToModel(_bankStatementStagingHit_TransactionPresetJSON: any): bankStatementStagingHit_TransactionPresetModel {
        var _bankStatementStagingHit_TransactionPresetModel: bankStatementStagingHit_TransactionPresetModel = new bankStatementStagingHit_TransactionPresetModel();
        _bankStatementStagingHit_TransactionPresetModel.idBankStatementStagingHit_TransactionPreset = _bankStatementStagingHit_TransactionPresetJSON.IdBankStatementStagingHit_TransactionPreset;
        _bankStatementStagingHit_TransactionPresetModel.idBankStatementStagingHit = _bankStatementStagingHit_TransactionPresetJSON.IdBankStatementStagingHit;
        _bankStatementStagingHit_TransactionPresetModel.idTransactionPreset = _bankStatementStagingHit_TransactionPresetJSON.IdTransactionPreset;
        _bankStatementStagingHit_TransactionPresetModel.isDeactivated = _bankStatementStagingHit_TransactionPresetJSON.IsDeactivated;

        if (_bankStatementStagingHit_TransactionPresetJSON.bankStatementStagingHit != null) {

            _bankStatementStagingHit_TransactionPresetModel.bankStatementStagingHit = bankStatementStagingHitModel.ConvertJSONToModel(_bankStatementStagingHit_TransactionPresetJSON.BankStatementStagingHit)
        }

        if (_bankStatementStagingHit_TransactionPresetJSON.transactionPreset != null) {

            _bankStatementStagingHit_TransactionPresetModel.transactionPreset = transactionPresetModel.ConvertJSONToModel(_bankStatementStagingHit_TransactionPresetJSON.TransactionPreset)
        }

        return _bankStatementStagingHit_TransactionPresetModel;



    }
    public static ConvertJSONListToModelList(_bankStatementStagingHit_TransactionPresetJSONList: any): bankStatementStagingHit_TransactionPresetModel[] {
        var bankStatementStagingHit_TransactionPresetList: bankStatementStagingHit_TransactionPresetModel[] = new Array();;
        angular.forEach(_bankStatementStagingHit_TransactionPresetJSONList, function (_bankStatementStagingHit_TransactionPresetJSON) {
            bankStatementStagingHit_TransactionPresetList.push(bankStatementStagingHit_TransactionPresetModel.ConvertJSONToModel(_bankStatementStagingHit_TransactionPresetJSON));
        })
        return bankStatementStagingHit_TransactionPresetList;
    }
}



class bankStatementStagingStateModel {
    public idBankStatementStagingState: number;
    public isDeactivated: boolean;
    public description: string;

    public bankStatementStagings: bankStatementStagingModel[]

    public bankStatementStagingDetailBatches: bankStatementStagingDetailBatchModel[]










    public idLocalBankStatementStagingState: string
    public static ConvertJSONToModel(_bankStatementStagingStateJSON: any): bankStatementStagingStateModel {
        var _bankStatementStagingStateModel: bankStatementStagingStateModel = new bankStatementStagingStateModel();
        _bankStatementStagingStateModel.idBankStatementStagingState = _bankStatementStagingStateJSON.IdBankStatementStagingState;
        _bankStatementStagingStateModel.isDeactivated = _bankStatementStagingStateJSON.IsDeactivated;
        _bankStatementStagingStateModel.description = _bankStatementStagingStateJSON.Description;

        if (_bankStatementStagingStateJSON.bankStatementStagings != null) {

            _bankStatementStagingStateModel.bankStatementStagings = bankStatementStagingModel.ConvertJSONListToModelList(_bankStatementStagingStateJSON.BankStatementStagings)
        }

        if (_bankStatementStagingStateJSON.bankStatementStagingDetailBatches != null) {

            _bankStatementStagingStateModel.bankStatementStagingDetailBatches = bankStatementStagingDetailBatchModel.ConvertJSONListToModelList(_bankStatementStagingStateJSON.BankStatementStagingDetailBatches)
        }

        return _bankStatementStagingStateModel;



    }
    public static ConvertJSONListToModelList(_bankStatementStagingStateJSONList: any): bankStatementStagingStateModel[] {
        var bankStatementStagingStateList: bankStatementStagingStateModel[] = new Array();;
        angular.forEach(_bankStatementStagingStateJSONList, function (_bankStatementStagingStateJSON) {
            bankStatementStagingStateList.push(bankStatementStagingStateModel.ConvertJSONToModel(_bankStatementStagingStateJSON));
        })
        return bankStatementStagingStateList;
    }
}



class cityModel {
    public idCity: number;
    public description: string;
    public isDeactivated: boolean;
    public idCountry: number;

    public addresses: addressModel[]

    public country: countryModel









    public idLocalCity: string
    public static ConvertJSONToModel(_cityJSON: any): cityModel {
        var _cityModel: cityModel = new cityModel();
        _cityModel.idCity = _cityJSON.IdCity;
        _cityModel.description = _cityJSON.Description;
        _cityModel.isDeactivated = _cityJSON.IsDeactivated;
        _cityModel.idCountry = _cityJSON.IdCountry;

        if (_cityJSON.addresses != null) {

            _cityModel.addresses = addressModel.ConvertJSONListToModelList(_cityJSON.Addresses)
        }

        if (_cityJSON.country != null) {

            _cityModel.country = countryModel.ConvertJSONToModel(_cityJSON.Country)
        }

        return _cityModel;



    }
    public static ConvertJSONListToModelList(_cityJSONList: any): cityModel[] {
        var cityList: cityModel[] = new Array();;
        angular.forEach(_cityJSONList, function (_cityJSON) {
            cityList.push(cityModel.ConvertJSONToModel(_cityJSON));
        })
        return cityList;
    }
}



class companyModel {
    public idCompany: number;
    public name: string;
    public isDeactivated: boolean;
    public description: string;
    public establishmentDate: Date;
    public idEmployeeNoRange: number;
    public idParentCompany: number;
    public registrationCode: string;
    public vatRegistrationNo: string;
    public idCompanyLogo: number;
    public idHostedDomain: number;
    public idOpeningHourType: number;
    public idConcept: number;

    public company_ContactType: company_ContactTypeModel[]

    public customers: customerModel[]

    public concept: conceptModel

    public document: documentModel

    public companyLocations: companyLocationModel[]

    public concepts: conceptModel[]
























    public idLocalCompany: string
    public static ConvertJSONToModel(_companyJSON: any): companyModel {
        var _companyModel: companyModel = new companyModel();
        _companyModel.idCompany = _companyJSON.IdCompany;
        _companyModel.name = _companyJSON.Name;
        _companyModel.isDeactivated = _companyJSON.IsDeactivated;
        _companyModel.description = _companyJSON.Description;
        _companyModel.establishmentDate = _companyJSON.EstablishmentDate;
        _companyModel.idEmployeeNoRange = _companyJSON.IdEmployeeNoRange;
        _companyModel.idParentCompany = _companyJSON.IdParentCompany;
        _companyModel.registrationCode = _companyJSON.RegistrationCode;
        _companyModel.vatRegistrationNo = _companyJSON.VatRegistrationNo;
        _companyModel.idCompanyLogo = _companyJSON.IdCompanyLogo;
        _companyModel.idHostedDomain = _companyJSON.IdHostedDomain;
        _companyModel.idOpeningHourType = _companyJSON.IdOpeningHourType;
        _companyModel.idConcept = _companyJSON.IdConcept;

        if (_companyJSON.company_ContactType != null) {

            _companyModel.company_ContactType = company_ContactTypeModel.ConvertJSONListToModelList(_companyJSON.Company_ContactType)
        }

        if (_companyJSON.customers != null) {

            _companyModel.customers = customerModel.ConvertJSONListToModelList(_companyJSON.Customers)
        }

        if (_companyJSON.concept != null) {

            _companyModel.concept = conceptModel.ConvertJSONToModel(_companyJSON.Concept)
        }

        if (_companyJSON.document != null) {

            _companyModel.document = documentModel.ConvertJSONToModel(_companyJSON.Document)
        }

        if (_companyJSON.companyLocations != null) {

            _companyModel.companyLocations = companyLocationModel.ConvertJSONListToModelList(_companyJSON.CompanyLocations)
        }

        if (_companyJSON.concepts != null) {

            _companyModel.concepts = conceptModel.ConvertJSONListToModelList(_companyJSON.Concepts)
        }

        return _companyModel;



    }
    public static ConvertJSONListToModelList(_companyJSONList: any): companyModel[] {
        var companyList: companyModel[] = new Array();;
        angular.forEach(_companyJSONList, function (_companyJSON) {
            companyList.push(companyModel.ConvertJSONToModel(_companyJSON));
        })
        return companyList;
    }
}



class company_ContactTypeModel {
    public idCompany_ContactType: number;
    public idCompany: number;
    public idContactType: number;
    public isDeactivated: boolean;
    public description: string;

    public company: companyModel

    public contactType: contactTypeModel








    public idLocalCompany_ContactType: string
    public static ConvertJSONToModel(_company_ContactTypeJSON: any): company_ContactTypeModel {
        var _company_ContactTypeModel: company_ContactTypeModel = new company_ContactTypeModel();
        _company_ContactTypeModel.idCompany_ContactType = _company_ContactTypeJSON.IdCompany_ContactType;
        _company_ContactTypeModel.idCompany = _company_ContactTypeJSON.IdCompany;
        _company_ContactTypeModel.idContactType = _company_ContactTypeJSON.IdContactType;
        _company_ContactTypeModel.isDeactivated = _company_ContactTypeJSON.IsDeactivated;
        _company_ContactTypeModel.description = _company_ContactTypeJSON.Description;

        if (_company_ContactTypeJSON.company != null) {

            _company_ContactTypeModel.company = companyModel.ConvertJSONToModel(_company_ContactTypeJSON.Company)
        }

        if (_company_ContactTypeJSON.contactType != null) {

            _company_ContactTypeModel.contactType = contactTypeModel.ConvertJSONToModel(_company_ContactTypeJSON.ContactType)
        }

        return _company_ContactTypeModel;



    }
    public static ConvertJSONListToModelList(_company_ContactTypeJSONList: any): company_ContactTypeModel[] {
        var company_ContactTypeList: company_ContactTypeModel[] = new Array();;
        angular.forEach(_company_ContactTypeJSONList, function (_company_ContactTypeJSON) {
            company_ContactTypeList.push(company_ContactTypeModel.ConvertJSONToModel(_company_ContactTypeJSON));
        })
        return company_ContactTypeList;
    }
}



class companyLocationModel {
    public idCompanyLocation: number;
    public idCompany: number;
    public idAddress: number;
    public detail: string;
    public isDeactivated: boolean;
    public colorCode: string;

    public company: companyModel

    public address: addressModel








    public idLocalCompanyLocation: string
    public static ConvertJSONToModel(_companyLocationJSON: any): companyLocationModel {
        var _companyLocationModel: companyLocationModel = new companyLocationModel();
        _companyLocationModel.idCompanyLocation = _companyLocationJSON.IdCompanyLocation;
        _companyLocationModel.idCompany = _companyLocationJSON.IdCompany;
        _companyLocationModel.idAddress = _companyLocationJSON.IdAddress;
        _companyLocationModel.detail = _companyLocationJSON.Detail;
        _companyLocationModel.isDeactivated = _companyLocationJSON.IsDeactivated;
        _companyLocationModel.colorCode = _companyLocationJSON.ColorCode;

        if (_companyLocationJSON.company != null) {

            _companyLocationModel.company = companyModel.ConvertJSONToModel(_companyLocationJSON.Company)
        }

        if (_companyLocationJSON.address != null) {

            _companyLocationModel.address = addressModel.ConvertJSONToModel(_companyLocationJSON.Address)
        }

        return _companyLocationModel;



    }
    public static ConvertJSONListToModelList(_companyLocationJSONList: any): companyLocationModel[] {
        var companyLocationList: companyLocationModel[] = new Array();;
        angular.forEach(_companyLocationJSONList, function (_companyLocationJSON) {
            companyLocationList.push(companyLocationModel.ConvertJSONToModel(_companyLocationJSON));
        })
        return companyLocationList;
    }
}



class conceptModel {
    public idConcept: number;
    public isDeactivated: boolean;
    public idConceptType: number;
    public idCompany: number;
    public idPerson: number;

    public companies: companyModel[]

    public company: companyModel

    public concept_Address: concept_AddressModel[]

    public concept_ContactType: concept_ContactTypeModel[]

    public concept1: conceptModel

    public concept2: conceptModel

    public person: personModel

    public customers: customerModel[]






























    public idLocalConcept: string
    public static ConvertJSONToModel(_conceptJSON: any): conceptModel {
        var _conceptModel: conceptModel = new conceptModel();
        _conceptModel.idConcept = _conceptJSON.IdConcept;
        _conceptModel.isDeactivated = _conceptJSON.IsDeactivated;
        _conceptModel.idConceptType = _conceptJSON.IdConceptType;
        _conceptModel.idCompany = _conceptJSON.IdCompany;
        _conceptModel.idPerson = _conceptJSON.IdPerson;

        if (_conceptJSON.companies != null) {

            _conceptModel.companies = companyModel.ConvertJSONListToModelList(_conceptJSON.Companies)
        }

        if (_conceptJSON.company != null) {

            _conceptModel.company = companyModel.ConvertJSONToModel(_conceptJSON.Company)
        }

        if (_conceptJSON.concept_Address != null) {

            _conceptModel.concept_Address = concept_AddressModel.ConvertJSONListToModelList(_conceptJSON.Concept_Address)
        }

        if (_conceptJSON.concept_ContactType != null) {

            _conceptModel.concept_ContactType = concept_ContactTypeModel.ConvertJSONListToModelList(_conceptJSON.Concept_ContactType)
        }

        if (_conceptJSON.concept1 != null) {

            _conceptModel.concept1 = conceptModel.ConvertJSONToModel(_conceptJSON.Concept1)
        }

        if (_conceptJSON.concept2 != null) {

            _conceptModel.concept2 = conceptModel.ConvertJSONToModel(_conceptJSON.Concept2)
        }

        if (_conceptJSON.person != null) {

            _conceptModel.person = personModel.ConvertJSONToModel(_conceptJSON.Person)
        }

        if (_conceptJSON.customers != null) {

            _conceptModel.customers = customerModel.ConvertJSONListToModelList(_conceptJSON.Customers)
        }

        return _conceptModel;



    }
    public static ConvertJSONListToModelList(_conceptJSONList: any): conceptModel[] {
        var conceptList: conceptModel[] = new Array();;
        angular.forEach(_conceptJSONList, function (_conceptJSON) {
            conceptList.push(conceptModel.ConvertJSONToModel(_conceptJSON));
        })
        return conceptList;
    }
}



class concept_AddressModel {
    public idConcept_Address: number;
    public idConcept: number;
    public idAddress: number;
    public isDeactivated: boolean;

    public concept: conceptModel





    public idLocalConcept_Address: string
    public static ConvertJSONToModel(_concept_AddressJSON: any): concept_AddressModel {
        var _concept_AddressModel: concept_AddressModel = new concept_AddressModel();
        _concept_AddressModel.idConcept_Address = _concept_AddressJSON.IdConcept_Address;
        _concept_AddressModel.idConcept = _concept_AddressJSON.IdConcept;
        _concept_AddressModel.idAddress = _concept_AddressJSON.IdAddress;
        _concept_AddressModel.isDeactivated = _concept_AddressJSON.IsDeactivated;

        if (_concept_AddressJSON.concept != null) {

            _concept_AddressModel.concept = conceptModel.ConvertJSONToModel(_concept_AddressJSON.Concept)
        }

        return _concept_AddressModel;



    }
    public static ConvertJSONListToModelList(_concept_AddressJSONList: any): concept_AddressModel[] {
        var concept_AddressList: concept_AddressModel[] = new Array();;
        angular.forEach(_concept_AddressJSONList, function (_concept_AddressJSON) {
            concept_AddressList.push(concept_AddressModel.ConvertJSONToModel(_concept_AddressJSON));
        })
        return concept_AddressList;
    }
}



class concept_ContactTypeModel {
    public idConcept_ContactType: number;
    public idConcept: number;
    public idContactType: number;
    public isDeactivated: boolean;

    public contactType: contactTypeModel

    public concept: conceptModel








    public idLocalConcept_ContactType: string
    public static ConvertJSONToModel(_concept_ContactTypeJSON: any): concept_ContactTypeModel {
        var _concept_ContactTypeModel: concept_ContactTypeModel = new concept_ContactTypeModel();
        _concept_ContactTypeModel.idConcept_ContactType = _concept_ContactTypeJSON.IdConcept_ContactType;
        _concept_ContactTypeModel.idConcept = _concept_ContactTypeJSON.IdConcept;
        _concept_ContactTypeModel.idContactType = _concept_ContactTypeJSON.IdContactType;
        _concept_ContactTypeModel.isDeactivated = _concept_ContactTypeJSON.IsDeactivated;

        if (_concept_ContactTypeJSON.contactType != null) {

            _concept_ContactTypeModel.contactType = contactTypeModel.ConvertJSONToModel(_concept_ContactTypeJSON.ContactType)
        }

        if (_concept_ContactTypeJSON.concept != null) {

            _concept_ContactTypeModel.concept = conceptModel.ConvertJSONToModel(_concept_ContactTypeJSON.Concept)
        }

        return _concept_ContactTypeModel;



    }
    public static ConvertJSONListToModelList(_concept_ContactTypeJSONList: any): concept_ContactTypeModel[] {
        var concept_ContactTypeList: concept_ContactTypeModel[] = new Array();;
        angular.forEach(_concept_ContactTypeJSONList, function (_concept_ContactTypeJSON) {
            concept_ContactTypeList.push(concept_ContactTypeModel.ConvertJSONToModel(_concept_ContactTypeJSON));
        })
        return concept_ContactTypeList;
    }
}



class contactModel {
    public idContact: number;
    public firstname: string;
    public lastname: string;
    public phone: string;
    public fax: string;
    public email: string;
    public idAddress: number;
    public isDeactivated: boolean;

    public address: addressModel





    public idLocalContact: string
    public static ConvertJSONToModel(_contactJSON: any): contactModel {
        var _contactModel: contactModel = new contactModel();
        _contactModel.idContact = _contactJSON.IdContact;
        _contactModel.firstname = _contactJSON.Firstname;
        _contactModel.lastname = _contactJSON.Lastname;
        _contactModel.phone = _contactJSON.Phone;
        _contactModel.fax = _contactJSON.Fax;
        _contactModel.email = _contactJSON.Email;
        _contactModel.idAddress = _contactJSON.IdAddress;
        _contactModel.isDeactivated = _contactJSON.IsDeactivated;

        if (_contactJSON.address != null) {

            _contactModel.address = addressModel.ConvertJSONToModel(_contactJSON.Address)
        }

        return _contactModel;



    }
    public static ConvertJSONListToModelList(_contactJSONList: any): contactModel[] {
        var contactList: contactModel[] = new Array();;
        angular.forEach(_contactJSONList, function (_contactJSON) {
            contactList.push(contactModel.ConvertJSONToModel(_contactJSON));
        })
        return contactList;
    }
}



class contactTypeModel {
    public idContactType: number;
    public description: string;
    public isDeactivated: boolean;
    public idParentContactType: number;
    public displayOrder: number;
    public iconClass: string;
    public action: string;

    public company_ContactType: company_ContactTypeModel[]

    public concept_ContactType: concept_ContactTypeModel[]

    public contactType1: contactTypeModel[]

    public contactType2: contactTypeModel

    public orderConcept_ContactType: orderConcept_ContactTypeModel[]

    public person_ContactType: person_ContactTypeModel[]

























    public idLocalContactType: string
    public static ConvertJSONToModel(_contactTypeJSON: any): contactTypeModel {
        var _contactTypeModel: contactTypeModel = new contactTypeModel();
        _contactTypeModel.idContactType = _contactTypeJSON.IdContactType;
        _contactTypeModel.description = _contactTypeJSON.Description;
        _contactTypeModel.isDeactivated = _contactTypeJSON.IsDeactivated;
        _contactTypeModel.idParentContactType = _contactTypeJSON.IdParentContactType;
        _contactTypeModel.displayOrder = _contactTypeJSON.DisplayOrder;
        _contactTypeModel.iconClass = _contactTypeJSON.IconClass;
        _contactTypeModel.action = _contactTypeJSON.Action;

        if (_contactTypeJSON.company_ContactType != null) {

            _contactTypeModel.company_ContactType = company_ContactTypeModel.ConvertJSONListToModelList(_contactTypeJSON.Company_ContactType)
        }

        if (_contactTypeJSON.concept_ContactType != null) {

            _contactTypeModel.concept_ContactType = concept_ContactTypeModel.ConvertJSONListToModelList(_contactTypeJSON.Concept_ContactType)
        }

        if (_contactTypeJSON.contactType1 != null) {

            _contactTypeModel.contactType1 = contactTypeModel.ConvertJSONListToModelList(_contactTypeJSON.ContactType1)
        }

        if (_contactTypeJSON.contactType2 != null) {

            _contactTypeModel.contactType2 = contactTypeModel.ConvertJSONToModel(_contactTypeJSON.ContactType2)
        }

        if (_contactTypeJSON.orderConcept_ContactType != null) {

            _contactTypeModel.orderConcept_ContactType = orderConcept_ContactTypeModel.ConvertJSONListToModelList(_contactTypeJSON.OrderConcept_ContactType)
        }

        if (_contactTypeJSON.person_ContactType != null) {

            _contactTypeModel.person_ContactType = person_ContactTypeModel.ConvertJSONListToModelList(_contactTypeJSON.Person_ContactType)
        }

        return _contactTypeModel;



    }
    public static ConvertJSONListToModelList(_contactTypeJSONList: any): contactTypeModel[] {
        var contactTypeList: contactTypeModel[] = new Array();;
        angular.forEach(_contactTypeJSONList, function (_contactTypeJSON) {
            contactTypeList.push(contactTypeModel.ConvertJSONToModel(_contactTypeJSON));
        })
        return contactTypeList;
    }
}



class countryModel {
    public idCountry: number;
    public description: string;
    public isDeactivated: boolean;

    public addresses: addressModel[]

    public cities: cityModel[]










    public idLocalCountry: string
    public static ConvertJSONToModel(_countryJSON: any): countryModel {
        var _countryModel: countryModel = new countryModel();
        _countryModel.idCountry = _countryJSON.IdCountry;
        _countryModel.description = _countryJSON.Description;
        _countryModel.isDeactivated = _countryJSON.IsDeactivated;

        if (_countryJSON.addresses != null) {

            _countryModel.addresses = addressModel.ConvertJSONListToModelList(_countryJSON.Addresses)
        }

        if (_countryJSON.cities != null) {

            _countryModel.cities = cityModel.ConvertJSONListToModelList(_countryJSON.Cities)
        }

        return _countryModel;



    }
    public static ConvertJSONListToModelList(_countryJSONList: any): countryModel[] {
        var countryList: countryModel[] = new Array();;
        angular.forEach(_countryJSONList, function (_countryJSON) {
            countryList.push(countryModel.ConvertJSONToModel(_countryJSON));
        })
        return countryList;
    }
}



class customerModel {
    public idCustomer: number;
    public isDeactivated: boolean;
    public fullName: string;
    public idConcept: number;
    public idPerson: number;
    public idCompany: number;
    public idCustomerType: number;
    public accountNumber: string;

    public transactionPresets: transactionPresetModel[]

    public company: companyModel

    public customerType: customerTypeModel

    public concept: conceptModel

    public person: personModel

    public transactions: transactionModel[]






















    public idLocalCustomer: string
    public static ConvertJSONToModel(_customerJSON: any): customerModel {
        var _customerModel: customerModel = new customerModel();
        _customerModel.idCustomer = _customerJSON.IdCustomer;
        _customerModel.isDeactivated = _customerJSON.IsDeactivated;
        _customerModel.fullName = _customerJSON.FullName;
        _customerModel.idConcept = _customerJSON.IdConcept;
        _customerModel.idPerson = _customerJSON.IdPerson;
        _customerModel.idCompany = _customerJSON.IdCompany;
        _customerModel.idCustomerType = _customerJSON.IdCustomerType;
        _customerModel.accountNumber = _customerJSON.AccountNumber;

        if (_customerJSON.transactionPresets != null) {

            _customerModel.transactionPresets = transactionPresetModel.ConvertJSONListToModelList(_customerJSON.TransactionPresets)
        }

        if (_customerJSON.company != null) {

            _customerModel.company = companyModel.ConvertJSONToModel(_customerJSON.Company)
        }

        if (_customerJSON.customerType != null) {

            _customerModel.customerType = customerTypeModel.ConvertJSONToModel(_customerJSON.CustomerType)
        }

        if (_customerJSON.concept != null) {

            _customerModel.concept = conceptModel.ConvertJSONToModel(_customerJSON.Concept)
        }

        if (_customerJSON.person != null) {

            _customerModel.person = personModel.ConvertJSONToModel(_customerJSON.Person)
        }

        if (_customerJSON.transactions != null) {

            _customerModel.transactions = transactionModel.ConvertJSONListToModelList(_customerJSON.Transactions)
        }

        return _customerModel;



    }
    public static ConvertJSONListToModelList(_customerJSONList: any): customerModel[] {
        var customerList: customerModel[] = new Array();;
        angular.forEach(_customerJSONList, function (_customerJSON) {
            customerList.push(customerModel.ConvertJSONToModel(_customerJSON));
        })
        return customerList;
    }
}



class customerTypeModel {
    public idCustomerType: number;
    public description: string;
    public isDeactivated: boolean;

    public customers: customerModel[]






    public idLocalCustomerType: string
    public static ConvertJSONToModel(_customerTypeJSON: any): customerTypeModel {
        var _customerTypeModel: customerTypeModel = new customerTypeModel();
        _customerTypeModel.idCustomerType = _customerTypeJSON.IdCustomerType;
        _customerTypeModel.description = _customerTypeJSON.Description;
        _customerTypeModel.isDeactivated = _customerTypeJSON.IsDeactivated;

        if (_customerTypeJSON.customers != null) {

            _customerTypeModel.customers = customerModel.ConvertJSONListToModelList(_customerTypeJSON.Customers)
        }

        return _customerTypeModel;



    }
    public static ConvertJSONListToModelList(_customerTypeJSONList: any): customerTypeModel[] {
        var customerTypeList: customerTypeModel[] = new Array();;
        angular.forEach(_customerTypeJSONList, function (_customerTypeJSON) {
            customerTypeList.push(customerTypeModel.ConvertJSONToModel(_customerTypeJSON));
        })
        return customerTypeList;
    }
}



class documentModel {
    public idDocument: number;
    public fileName: string;
    public fileExtension: string;
    public physicalFilePath: string;
    public documentOrder: number;
    public isDeactivated: boolean;
    public idDocumentType: number;
    public idParameterBasePhysicalFilePath: number;
    public idParameterBaseServerUrl: number;
    public serverFilePath: string;

    public bankStatementStagings: bankStatementStagingModel[]

    public companies: companyModel[]

    public documentType: documentTypeModel

    public parameter: parameterModel

    public parameter1: parameterModel

    public temporaryTransactionOrders: temporaryTransactionOrderModel[]

    public transactions: transactionModel[]



























    public idLocalDocument: string
    public static ConvertJSONToModel(_documentJSON: any): documentModel {
        var _documentModel: documentModel = new documentModel();
        _documentModel.idDocument = _documentJSON.IdDocument;
        _documentModel.fileName = _documentJSON.FileName;
        _documentModel.fileExtension = _documentJSON.FileExtension;
        _documentModel.physicalFilePath = _documentJSON.PhysicalFilePath;
        _documentModel.documentOrder = _documentJSON.DocumentOrder;
        _documentModel.isDeactivated = _documentJSON.IsDeactivated;
        _documentModel.idDocumentType = _documentJSON.IdDocumentType;
        _documentModel.idParameterBasePhysicalFilePath = _documentJSON.IdParameterBasePhysicalFilePath;
        _documentModel.idParameterBaseServerUrl = _documentJSON.IdParameterBaseServerUrl;
        _documentModel.serverFilePath = _documentJSON.ServerFilePath;

        if (_documentJSON.bankStatementStagings != null) {

            _documentModel.bankStatementStagings = bankStatementStagingModel.ConvertJSONListToModelList(_documentJSON.BankStatementStagings)
        }

        if (_documentJSON.companies != null) {

            _documentModel.companies = companyModel.ConvertJSONListToModelList(_documentJSON.Companies)
        }

        if (_documentJSON.documentType != null) {

            _documentModel.documentType = documentTypeModel.ConvertJSONToModel(_documentJSON.DocumentType)
        }

        if (_documentJSON.parameter != null) {

            _documentModel.parameter = parameterModel.ConvertJSONToModel(_documentJSON.Parameter)
        }

        if (_documentJSON.parameter1 != null) {

            _documentModel.parameter1 = parameterModel.ConvertJSONToModel(_documentJSON.Parameter1)
        }

        if (_documentJSON.temporaryTransactionOrders != null) {

            _documentModel.temporaryTransactionOrders = temporaryTransactionOrderModel.ConvertJSONListToModelList(_documentJSON.TemporaryTransactionOrders)
        }

        if (_documentJSON.transactions != null) {

            _documentModel.transactions = transactionModel.ConvertJSONListToModelList(_documentJSON.Transactions)
        }

        return _documentModel;



    }
    public static ConvertJSONListToModelList(_documentJSONList: any): documentModel[] {
        var documentList: documentModel[] = new Array();;
        angular.forEach(_documentJSONList, function (_documentJSON) {
            documentList.push(documentModel.ConvertJSONToModel(_documentJSON));
        })
        return documentList;
    }
}



class documentTypeModel {
    public idDocumentType: number;
    public description: string;
    public isDeactivated: boolean;

    public documents: documentModel[]






    public idLocalDocumentType: string
    public static ConvertJSONToModel(_documentTypeJSON: any): documentTypeModel {
        var _documentTypeModel: documentTypeModel = new documentTypeModel();
        _documentTypeModel.idDocumentType = _documentTypeJSON.IdDocumentType;
        _documentTypeModel.description = _documentTypeJSON.Description;
        _documentTypeModel.isDeactivated = _documentTypeJSON.IsDeactivated;

        if (_documentTypeJSON.documents != null) {

            _documentTypeModel.documents = documentModel.ConvertJSONListToModelList(_documentTypeJSON.Documents)
        }

        return _documentTypeModel;



    }
    public static ConvertJSONListToModelList(_documentTypeJSONList: any): documentTypeModel[] {
        var documentTypeList: documentTypeModel[] = new Array();;
        angular.forEach(_documentTypeJSONList, function (_documentTypeJSON) {
            documentTypeList.push(documentTypeModel.ConvertJSONToModel(_documentTypeJSON));
        })
        return documentTypeList;
    }
}



class endTypeModel {
    public idEndType: number;
    public isDeactivated: boolean;
    public description: string;
    public idLocalEndType: string
    public static ConvertJSONToModel(_endTypeJSON: any): endTypeModel {
        var _endTypeModel: endTypeModel = new endTypeModel();
        _endTypeModel.idEndType = _endTypeJSON.IdEndType;
        _endTypeModel.isDeactivated = _endTypeJSON.IsDeactivated;
        _endTypeModel.description = _endTypeJSON.Description;

        return _endTypeModel;



    }
    public static ConvertJSONListToModelList(_endTypeJSONList: any): endTypeModel[] {
        var endTypeList: endTypeModel[] = new Array();;
        angular.forEach(_endTypeJSONList, function (_endTypeJSON) {
            endTypeList.push(endTypeModel.ConvertJSONToModel(_endTypeJSON));
        })
        return endTypeList;
    }
}



class frequencyModel {
    public idFrequency: number;
    public description: string;
    public isDeactivated: boolean;

    public scheduleSettings: scheduleSettingModel[]






    public idLocalFrequency: string
    public static ConvertJSONToModel(_frequencyJSON: any): frequencyModel {
        var _frequencyModel: frequencyModel = new frequencyModel();
        _frequencyModel.idFrequency = _frequencyJSON.IdFrequency;
        _frequencyModel.description = _frequencyJSON.Description;
        _frequencyModel.isDeactivated = _frequencyJSON.IsDeactivated;

        if (_frequencyJSON.scheduleSettings != null) {

            _frequencyModel.scheduleSettings = scheduleSettingModel.ConvertJSONListToModelList(_frequencyJSON.ScheduleSettings)
        }

        return _frequencyModel;



    }
    public static ConvertJSONListToModelList(_frequencyJSONList: any): frequencyModel[] {
        var frequencyList: frequencyModel[] = new Array();;
        angular.forEach(_frequencyJSONList, function (_frequencyJSON) {
            frequencyList.push(frequencyModel.ConvertJSONToModel(_frequencyJSON));
        })
        return frequencyList;
    }
}



class mailRecipientModel {
    public idMailRecipient: number;
    public name: string;
    public emailAddress: string;
    public isDeactivated: boolean;
    public idMailToSend: number;
    public idMailStatus: number;
    public idMailRecipientType: number;

    public mailRecipientType: mailRecipientTypeModel

    public mailStatu: mailStatuModel

    public mailToSend: mailToSendModel











    public idLocalMailRecipient: string
    public static ConvertJSONToModel(_mailRecipientJSON: any): mailRecipientModel {
        var _mailRecipientModel: mailRecipientModel = new mailRecipientModel();
        _mailRecipientModel.idMailRecipient = _mailRecipientJSON.IdMailRecipient;
        _mailRecipientModel.name = _mailRecipientJSON.Name;
        _mailRecipientModel.emailAddress = _mailRecipientJSON.EmailAddress;
        _mailRecipientModel.isDeactivated = _mailRecipientJSON.IsDeactivated;
        _mailRecipientModel.idMailToSend = _mailRecipientJSON.IdMailToSend;
        _mailRecipientModel.idMailStatus = _mailRecipientJSON.IdMailStatus;
        _mailRecipientModel.idMailRecipientType = _mailRecipientJSON.IdMailRecipientType;

        if (_mailRecipientJSON.mailRecipientType != null) {

            _mailRecipientModel.mailRecipientType = mailRecipientTypeModel.ConvertJSONToModel(_mailRecipientJSON.MailRecipientType)
        }

        if (_mailRecipientJSON.mailStatu != null) {

            _mailRecipientModel.mailStatu = mailStatuModel.ConvertJSONToModel(_mailRecipientJSON.MailStatu)
        }

        if (_mailRecipientJSON.mailToSend != null) {

            _mailRecipientModel.mailToSend = mailToSendModel.ConvertJSONToModel(_mailRecipientJSON.MailToSend)
        }

        return _mailRecipientModel;



    }
    public static ConvertJSONListToModelList(_mailRecipientJSONList: any): mailRecipientModel[] {
        var mailRecipientList: mailRecipientModel[] = new Array();;
        angular.forEach(_mailRecipientJSONList, function (_mailRecipientJSON) {
            mailRecipientList.push(mailRecipientModel.ConvertJSONToModel(_mailRecipientJSON));
        })
        return mailRecipientList;
    }
}



class mailRecipientTypeModel {
    public idMailRecipientType: number;
    public description: string;
    public isDeactivated: boolean;

    public mailRecipients: mailRecipientModel[]






    public idLocalMailRecipientType: string
    public static ConvertJSONToModel(_mailRecipientTypeJSON: any): mailRecipientTypeModel {
        var _mailRecipientTypeModel: mailRecipientTypeModel = new mailRecipientTypeModel();
        _mailRecipientTypeModel.idMailRecipientType = _mailRecipientTypeJSON.IdMailRecipientType;
        _mailRecipientTypeModel.description = _mailRecipientTypeJSON.Description;
        _mailRecipientTypeModel.isDeactivated = _mailRecipientTypeJSON.IsDeactivated;

        if (_mailRecipientTypeJSON.mailRecipients != null) {

            _mailRecipientTypeModel.mailRecipients = mailRecipientModel.ConvertJSONListToModelList(_mailRecipientTypeJSON.MailRecipients)
        }

        return _mailRecipientTypeModel;



    }
    public static ConvertJSONListToModelList(_mailRecipientTypeJSONList: any): mailRecipientTypeModel[] {
        var mailRecipientTypeList: mailRecipientTypeModel[] = new Array();;
        angular.forEach(_mailRecipientTypeJSONList, function (_mailRecipientTypeJSON) {
            mailRecipientTypeList.push(mailRecipientTypeModel.ConvertJSONToModel(_mailRecipientTypeJSON));
        })
        return mailRecipientTypeList;
    }
}



class mailServerSettingModel {
    public idMailServerSetting: number;
    public useSSL: boolean;
    public clientPort: number;
    public host: string;
    public username: string;
    public password: string;
    public isDeactivated: boolean;
    public priority: number;
    public defaultName: string;

    public mailToSends: mailToSendModel[]






    public idLocalMailServerSetting: string
    public static ConvertJSONToModel(_mailServerSettingJSON: any): mailServerSettingModel {
        var _mailServerSettingModel: mailServerSettingModel = new mailServerSettingModel();
        _mailServerSettingModel.idMailServerSetting = _mailServerSettingJSON.IdMailServerSetting;
        _mailServerSettingModel.useSSL = _mailServerSettingJSON.UseSSL;
        _mailServerSettingModel.clientPort = _mailServerSettingJSON.ClientPort;
        _mailServerSettingModel.host = _mailServerSettingJSON.Host;
        _mailServerSettingModel.username = _mailServerSettingJSON.Username;
        _mailServerSettingModel.password = _mailServerSettingJSON.Password;
        _mailServerSettingModel.isDeactivated = _mailServerSettingJSON.IsDeactivated;
        _mailServerSettingModel.priority = _mailServerSettingJSON.Priority;
        _mailServerSettingModel.defaultName = _mailServerSettingJSON.DefaultName;

        if (_mailServerSettingJSON.mailToSends != null) {

            _mailServerSettingModel.mailToSends = mailToSendModel.ConvertJSONListToModelList(_mailServerSettingJSON.MailToSends)
        }

        return _mailServerSettingModel;



    }
    public static ConvertJSONListToModelList(_mailServerSettingJSONList: any): mailServerSettingModel[] {
        var mailServerSettingList: mailServerSettingModel[] = new Array();;
        angular.forEach(_mailServerSettingJSONList, function (_mailServerSettingJSON) {
            mailServerSettingList.push(mailServerSettingModel.ConvertJSONToModel(_mailServerSettingJSON));
        })
        return mailServerSettingList;
    }
}



class mailStatuModel {
    public idMailStatus: number;
    public description: string;
    public isDeactivated: boolean;

    public mailRecipients: mailRecipientModel[]

    public mailToSends: mailToSendModel[]










    public idLocalMailStatu: string
    public static ConvertJSONToModel(_mailStatuJSON: any): mailStatuModel {
        var _mailStatuModel: mailStatuModel = new mailStatuModel();
        _mailStatuModel.idMailStatus = _mailStatuJSON.IdMailStatus;
        _mailStatuModel.description = _mailStatuJSON.Description;
        _mailStatuModel.isDeactivated = _mailStatuJSON.IsDeactivated;

        if (_mailStatuJSON.mailRecipients != null) {

            _mailStatuModel.mailRecipients = mailRecipientModel.ConvertJSONListToModelList(_mailStatuJSON.MailRecipients)
        }

        if (_mailStatuJSON.mailToSends != null) {

            _mailStatuModel.mailToSends = mailToSendModel.ConvertJSONListToModelList(_mailStatuJSON.MailToSends)
        }

        return _mailStatuModel;



    }
    public static ConvertJSONListToModelList(_mailStatuJSONList: any): mailStatuModel[] {
        var mailStatuList: mailStatuModel[] = new Array();;
        angular.forEach(_mailStatuJSONList, function (_mailStatuJSON) {
            mailStatuList.push(mailStatuModel.ConvertJSONToModel(_mailStatuJSON));
        })
        return mailStatuList;
    }
}



class mailToSendModel {
    public idMailToSend: number;
    public idMailServerSetting: number;
    public idEmailStatus: number;
    public failureCount: number;
    public emailSubject: string;
    public errorMessage: string;
    public emailBody: string;
    public isDeactivated: boolean;

    public mailRecipients: mailRecipientModel[]

    public mailServerSetting: mailServerSettingModel

    public mailStatu: mailStatuModel

    public mailToSendDocuments: mailToSendDocumentModel[]

    public transaction_MailToSend: transaction_MailToSendModel[]




















    public idLocalMailToSend: string
    public static ConvertJSONToModel(_mailToSendJSON: any): mailToSendModel {
        var _mailToSendModel: mailToSendModel = new mailToSendModel();
        _mailToSendModel.idMailToSend = _mailToSendJSON.IdMailToSend;
        _mailToSendModel.idMailServerSetting = _mailToSendJSON.IdMailServerSetting;
        _mailToSendModel.idEmailStatus = _mailToSendJSON.IdEmailStatus;
        _mailToSendModel.failureCount = _mailToSendJSON.FailureCount;
        _mailToSendModel.emailSubject = _mailToSendJSON.EmailSubject;
        _mailToSendModel.errorMessage = _mailToSendJSON.ErrorMessage;
        _mailToSendModel.emailBody = _mailToSendJSON.EmailBody;
        _mailToSendModel.isDeactivated = _mailToSendJSON.IsDeactivated;

        if (_mailToSendJSON.mailRecipients != null) {

            _mailToSendModel.mailRecipients = mailRecipientModel.ConvertJSONListToModelList(_mailToSendJSON.MailRecipients)
        }

        if (_mailToSendJSON.mailServerSetting != null) {

            _mailToSendModel.mailServerSetting = mailServerSettingModel.ConvertJSONToModel(_mailToSendJSON.MailServerSetting)
        }

        if (_mailToSendJSON.mailStatu != null) {

            _mailToSendModel.mailStatu = mailStatuModel.ConvertJSONToModel(_mailToSendJSON.MailStatu)
        }

        if (_mailToSendJSON.mailToSendDocuments != null) {

            _mailToSendModel.mailToSendDocuments = mailToSendDocumentModel.ConvertJSONListToModelList(_mailToSendJSON.MailToSendDocuments)
        }

        if (_mailToSendJSON.transaction_MailToSend != null) {

            _mailToSendModel.transaction_MailToSend = transaction_MailToSendModel.ConvertJSONListToModelList(_mailToSendJSON.Transaction_MailToSend)
        }

        return _mailToSendModel;



    }
    public static ConvertJSONListToModelList(_mailToSendJSONList: any): mailToSendModel[] {
        var mailToSendList: mailToSendModel[] = new Array();;
        angular.forEach(_mailToSendJSONList, function (_mailToSendJSON) {
            mailToSendList.push(mailToSendModel.ConvertJSONToModel(_mailToSendJSON));
        })
        return mailToSendList;
    }
}



class mailToSendDocumentModel {
    public idMailToSendDocument: number;
    public idMailToSend: number;
    public isDeactivated: boolean;
    public relativeDocumentPath: string;
    public documentName: string;

    public mailToSend: mailToSendModel





    public idLocalMailToSendDocument: string
    public static ConvertJSONToModel(_mailToSendDocumentJSON: any): mailToSendDocumentModel {
        var _mailToSendDocumentModel: mailToSendDocumentModel = new mailToSendDocumentModel();
        _mailToSendDocumentModel.idMailToSendDocument = _mailToSendDocumentJSON.IdMailToSendDocument;
        _mailToSendDocumentModel.idMailToSend = _mailToSendDocumentJSON.IdMailToSend;
        _mailToSendDocumentModel.isDeactivated = _mailToSendDocumentJSON.IsDeactivated;
        _mailToSendDocumentModel.relativeDocumentPath = _mailToSendDocumentJSON.RelativeDocumentPath;
        _mailToSendDocumentModel.documentName = _mailToSendDocumentJSON.DocumentName;

        if (_mailToSendDocumentJSON.mailToSend != null) {

            _mailToSendDocumentModel.mailToSend = mailToSendModel.ConvertJSONToModel(_mailToSendDocumentJSON.MailToSend)
        }

        return _mailToSendDocumentModel;



    }
    public static ConvertJSONListToModelList(_mailToSendDocumentJSONList: any): mailToSendDocumentModel[] {
        var mailToSendDocumentList: mailToSendDocumentModel[] = new Array();;
        angular.forEach(_mailToSendDocumentJSONList, function (_mailToSendDocumentJSON) {
            mailToSendDocumentList.push(mailToSendDocumentModel.ConvertJSONToModel(_mailToSendDocumentJSON));
        })
        return mailToSendDocumentList;
    }
}



class nLogDetailModel {
    public idNLogDetail: number;
    public callSite: string;
    public application: string;
    public logged: Date;
    public level: string;
    public message: string;
    public userName: string;
    public serverName: string;
    public port: string;
    public url: string;
    public https: string;
    public serverAddress: string;
    public remoteAddress: string;
    public logger: string;
    public exception: string;
    public stacktrace: string;
    public date: Date;
    public isDeactivated: boolean;
    public idLocalNLogDetail: string
    public static ConvertJSONToModel(_nLogDetailJSON: any): nLogDetailModel {
        var _nLogDetailModel: nLogDetailModel = new nLogDetailModel();
        _nLogDetailModel.idNLogDetail = _nLogDetailJSON.IdNLogDetail;
        _nLogDetailModel.callSite = _nLogDetailJSON.CallSite;
        _nLogDetailModel.application = _nLogDetailJSON.Application;
        _nLogDetailModel.logged = _nLogDetailJSON.Logged;
        _nLogDetailModel.level = _nLogDetailJSON.Level;
        _nLogDetailModel.message = _nLogDetailJSON.Message;
        _nLogDetailModel.userName = _nLogDetailJSON.UserName;
        _nLogDetailModel.serverName = _nLogDetailJSON.ServerName;
        _nLogDetailModel.port = _nLogDetailJSON.Port;
        _nLogDetailModel.url = _nLogDetailJSON.Url;
        _nLogDetailModel.https = _nLogDetailJSON.Https;
        _nLogDetailModel.serverAddress = _nLogDetailJSON.ServerAddress;
        _nLogDetailModel.remoteAddress = _nLogDetailJSON.RemoteAddress;
        _nLogDetailModel.logger = _nLogDetailJSON.Logger;
        _nLogDetailModel.exception = _nLogDetailJSON.Exception;
        _nLogDetailModel.stacktrace = _nLogDetailJSON.Stacktrace;
        _nLogDetailModel.date = _nLogDetailJSON.Date;
        _nLogDetailModel.isDeactivated = _nLogDetailJSON.IsDeactivated;

        return _nLogDetailModel;



    }
    public static ConvertJSONListToModelList(_nLogDetailJSONList: any): nLogDetailModel[] {
        var nLogDetailList: nLogDetailModel[] = new Array();;
        angular.forEach(_nLogDetailJSONList, function (_nLogDetailJSON) {
            nLogDetailList.push(nLogDetailModel.ConvertJSONToModel(_nLogDetailJSON));
        })
        return nLogDetailList;
    }
}



class orderModel {
    public idOrder: number;
    public orderDate: Date;
    public idOrderConcept: number;
    public idUserAuthor: number;
    public isDeactivated: boolean;
    public orderNumber: string;
    public idOrderSource: number;
    public idOrderState: number;
    public totalAmount: number;

    public bankStatementStagingHits: bankStatementStagingHitModel[]

    public user: userModel

    public orderConcept: orderConceptModel

    public orderState: orderStateModel

    public orderDetails: orderDetailModel[]



















    public idLocalOrder: string
    public static ConvertJSONToModel(_orderJSON: any): orderModel {
        var _orderModel: orderModel = new orderModel();
        _orderModel.idOrder = _orderJSON.IdOrder;
        _orderModel.orderDate = _orderJSON.OrderDate;
        _orderModel.idOrderConcept = _orderJSON.IdOrderConcept;
        _orderModel.idUserAuthor = _orderJSON.IdUserAuthor;
        _orderModel.isDeactivated = _orderJSON.IsDeactivated;
        _orderModel.orderNumber = _orderJSON.OrderNumber;
        _orderModel.idOrderSource = _orderJSON.IdOrderSource;
        _orderModel.idOrderState = _orderJSON.IdOrderState;
        _orderModel.totalAmount = _orderJSON.TotalAmount;

        if (_orderJSON.bankStatementStagingHits != null) {

            _orderModel.bankStatementStagingHits = bankStatementStagingHitModel.ConvertJSONListToModelList(_orderJSON.BankStatementStagingHits)
        }

        if (_orderJSON.user != null) {

            _orderModel.user = userModel.ConvertJSONToModel(_orderJSON.User)
        }

        if (_orderJSON.orderConcept != null) {

            _orderModel.orderConcept = orderConceptModel.ConvertJSONToModel(_orderJSON.OrderConcept)
        }

        if (_orderJSON.orderState != null) {

            _orderModel.orderState = orderStateModel.ConvertJSONToModel(_orderJSON.OrderState)
        }

        if (_orderJSON.orderDetails != null) {

            _orderModel.orderDetails = orderDetailModel.ConvertJSONListToModelList(_orderJSON.OrderDetails)
        }

        return _orderModel;



    }
    public static ConvertJSONListToModelList(_orderJSONList: any): orderModel[] {
        var orderList: orderModel[] = new Array();;
        angular.forEach(_orderJSONList, function (_orderJSON) {
            orderList.push(orderModel.ConvertJSONToModel(_orderJSON));
        })
        return orderList;
    }
}



class orderAddressModel {
    public idOrderAddress: number;
    public addressLine1: string;
    public addressLine2: string;
    public addressLine3: string;
    public addressLine4: string;
    public postcode: string;
    public isDeactivated: boolean;
    public lat: number;
    public lng: number;
    public city: string;

    public orderConcept_OrderAddress: orderConcept_OrderAddressModel[]






    public idLocalOrderAddress: string
    public static ConvertJSONToModel(_orderAddressJSON: any): orderAddressModel {
        var _orderAddressModel: orderAddressModel = new orderAddressModel();
        _orderAddressModel.idOrderAddress = _orderAddressJSON.IdOrderAddress;
        _orderAddressModel.addressLine1 = _orderAddressJSON.AddressLine1;
        _orderAddressModel.addressLine2 = _orderAddressJSON.AddressLine2;
        _orderAddressModel.addressLine3 = _orderAddressJSON.AddressLine3;
        _orderAddressModel.addressLine4 = _orderAddressJSON.AddressLine4;
        _orderAddressModel.postcode = _orderAddressJSON.Postcode;
        _orderAddressModel.isDeactivated = _orderAddressJSON.IsDeactivated;
        _orderAddressModel.lat = _orderAddressJSON.Lat;
        _orderAddressModel.lng = _orderAddressJSON.Lng;
        _orderAddressModel.city = _orderAddressJSON.City;

        if (_orderAddressJSON.orderConcept_OrderAddress != null) {

            _orderAddressModel.orderConcept_OrderAddress = orderConcept_OrderAddressModel.ConvertJSONListToModelList(_orderAddressJSON.OrderConcept_OrderAddress)
        }

        return _orderAddressModel;



    }
    public static ConvertJSONListToModelList(_orderAddressJSONList: any): orderAddressModel[] {
        var orderAddressList: orderAddressModel[] = new Array();;
        angular.forEach(_orderAddressJSONList, function (_orderAddressJSON) {
            orderAddressList.push(orderAddressModel.ConvertJSONToModel(_orderAddressJSON));
        })
        return orderAddressList;
    }
}



class orderCompanyModel {
    public idOrderCompany: number;
    public name: string;
    public isDeactivated: boolean;
    public description: string;

    public orderConcepts: orderConceptModel[]






    public idLocalOrderCompany: string
    public static ConvertJSONToModel(_orderCompanyJSON: any): orderCompanyModel {
        var _orderCompanyModel: orderCompanyModel = new orderCompanyModel();
        _orderCompanyModel.idOrderCompany = _orderCompanyJSON.IdOrderCompany;
        _orderCompanyModel.name = _orderCompanyJSON.Name;
        _orderCompanyModel.isDeactivated = _orderCompanyJSON.IsDeactivated;
        _orderCompanyModel.description = _orderCompanyJSON.Description;

        if (_orderCompanyJSON.orderConcepts != null) {

            _orderCompanyModel.orderConcepts = orderConceptModel.ConvertJSONListToModelList(_orderCompanyJSON.OrderConcepts)
        }

        return _orderCompanyModel;



    }
    public static ConvertJSONListToModelList(_orderCompanyJSONList: any): orderCompanyModel[] {
        var orderCompanyList: orderCompanyModel[] = new Array();;
        angular.forEach(_orderCompanyJSONList, function (_orderCompanyJSON) {
            orderCompanyList.push(orderCompanyModel.ConvertJSONToModel(_orderCompanyJSON));
        })
        return orderCompanyList;
    }
}



class orderConceptModel {
    public idOrderConcept: number;
    public idOrderCompany: number;
    public idOrderPerson: number;
    public isDeactivated: boolean;

    public orders: orderModel[]

    public orderCompany: orderCompanyModel

    public orderConcept_ContactType: orderConcept_ContactTypeModel[]

    public orderPerson: orderPersonModel

    public orderConcept_OrderAddress: orderConcept_OrderAddressModel[]




















    public idLocalOrderConcept: string
    public static ConvertJSONToModel(_orderConceptJSON: any): orderConceptModel {
        var _orderConceptModel: orderConceptModel = new orderConceptModel();
        _orderConceptModel.idOrderConcept = _orderConceptJSON.IdOrderConcept;
        _orderConceptModel.idOrderCompany = _orderConceptJSON.IdOrderCompany;
        _orderConceptModel.idOrderPerson = _orderConceptJSON.IdOrderPerson;
        _orderConceptModel.isDeactivated = _orderConceptJSON.IsDeactivated;

        if (_orderConceptJSON.orders != null) {

            _orderConceptModel.orders = orderModel.ConvertJSONListToModelList(_orderConceptJSON.Orders)
        }

        if (_orderConceptJSON.orderCompany != null) {

            _orderConceptModel.orderCompany = orderCompanyModel.ConvertJSONToModel(_orderConceptJSON.OrderCompany)
        }

        if (_orderConceptJSON.orderConcept_ContactType != null) {

            _orderConceptModel.orderConcept_ContactType = orderConcept_ContactTypeModel.ConvertJSONListToModelList(_orderConceptJSON.OrderConcept_ContactType)
        }

        if (_orderConceptJSON.orderPerson != null) {

            _orderConceptModel.orderPerson = orderPersonModel.ConvertJSONToModel(_orderConceptJSON.OrderPerson)
        }

        if (_orderConceptJSON.orderConcept_OrderAddress != null) {

            _orderConceptModel.orderConcept_OrderAddress = orderConcept_OrderAddressModel.ConvertJSONListToModelList(_orderConceptJSON.OrderConcept_OrderAddress)
        }

        return _orderConceptModel;



    }
    public static ConvertJSONListToModelList(_orderConceptJSONList: any): orderConceptModel[] {
        var orderConceptList: orderConceptModel[] = new Array();;
        angular.forEach(_orderConceptJSONList, function (_orderConceptJSON) {
            orderConceptList.push(orderConceptModel.ConvertJSONToModel(_orderConceptJSON));
        })
        return orderConceptList;
    }
}



class orderConcept_ContactTypeModel {
    public idOrderConcept_ContactType: number;
    public idOrderConcept: number;
    public idContactType: number;
    public isDeactivated: boolean;
    public description: string;

    public contactType: contactTypeModel

    public orderConcept: orderConceptModel








    public idLocalOrderConcept_ContactType: string
    public static ConvertJSONToModel(_orderConcept_ContactTypeJSON: any): orderConcept_ContactTypeModel {
        var _orderConcept_ContactTypeModel: orderConcept_ContactTypeModel = new orderConcept_ContactTypeModel();
        _orderConcept_ContactTypeModel.idOrderConcept_ContactType = _orderConcept_ContactTypeJSON.IdOrderConcept_ContactType;
        _orderConcept_ContactTypeModel.idOrderConcept = _orderConcept_ContactTypeJSON.IdOrderConcept;
        _orderConcept_ContactTypeModel.idContactType = _orderConcept_ContactTypeJSON.IdContactType;
        _orderConcept_ContactTypeModel.isDeactivated = _orderConcept_ContactTypeJSON.IsDeactivated;
        _orderConcept_ContactTypeModel.description = _orderConcept_ContactTypeJSON.Description;

        if (_orderConcept_ContactTypeJSON.contactType != null) {

            _orderConcept_ContactTypeModel.contactType = contactTypeModel.ConvertJSONToModel(_orderConcept_ContactTypeJSON.ContactType)
        }

        if (_orderConcept_ContactTypeJSON.orderConcept != null) {

            _orderConcept_ContactTypeModel.orderConcept = orderConceptModel.ConvertJSONToModel(_orderConcept_ContactTypeJSON.OrderConcept)
        }

        return _orderConcept_ContactTypeModel;



    }
    public static ConvertJSONListToModelList(_orderConcept_ContactTypeJSONList: any): orderConcept_ContactTypeModel[] {
        var orderConcept_ContactTypeList: orderConcept_ContactTypeModel[] = new Array();;
        angular.forEach(_orderConcept_ContactTypeJSONList, function (_orderConcept_ContactTypeJSON) {
            orderConcept_ContactTypeList.push(orderConcept_ContactTypeModel.ConvertJSONToModel(_orderConcept_ContactTypeJSON));
        })
        return orderConcept_ContactTypeList;
    }
}



class orderConcept_OrderAddressModel {
    public idOrderConcept_OrderAddress: number;
    public idOrderConcept: number;
    public idOrderAddress: number;
    public detail: string;
    public isDeactivated: boolean;

    public orderAddress: orderAddressModel

    public orderConcept: orderConceptModel








    public idLocalOrderConcept_OrderAddress: string
    public static ConvertJSONToModel(_orderConcept_OrderAddressJSON: any): orderConcept_OrderAddressModel {
        var _orderConcept_OrderAddressModel: orderConcept_OrderAddressModel = new orderConcept_OrderAddressModel();
        _orderConcept_OrderAddressModel.idOrderConcept_OrderAddress = _orderConcept_OrderAddressJSON.IdOrderConcept_OrderAddress;
        _orderConcept_OrderAddressModel.idOrderConcept = _orderConcept_OrderAddressJSON.IdOrderConcept;
        _orderConcept_OrderAddressModel.idOrderAddress = _orderConcept_OrderAddressJSON.IdOrderAddress;
        _orderConcept_OrderAddressModel.detail = _orderConcept_OrderAddressJSON.Detail;
        _orderConcept_OrderAddressModel.isDeactivated = _orderConcept_OrderAddressJSON.IsDeactivated;

        if (_orderConcept_OrderAddressJSON.orderAddress != null) {

            _orderConcept_OrderAddressModel.orderAddress = orderAddressModel.ConvertJSONToModel(_orderConcept_OrderAddressJSON.OrderAddress)
        }

        if (_orderConcept_OrderAddressJSON.orderConcept != null) {

            _orderConcept_OrderAddressModel.orderConcept = orderConceptModel.ConvertJSONToModel(_orderConcept_OrderAddressJSON.OrderConcept)
        }

        return _orderConcept_OrderAddressModel;



    }
    public static ConvertJSONListToModelList(_orderConcept_OrderAddressJSONList: any): orderConcept_OrderAddressModel[] {
        var orderConcept_OrderAddressList: orderConcept_OrderAddressModel[] = new Array();;
        angular.forEach(_orderConcept_OrderAddressJSONList, function (_orderConcept_OrderAddressJSON) {
            orderConcept_OrderAddressList.push(orderConcept_OrderAddressModel.ConvertJSONToModel(_orderConcept_OrderAddressJSON));
        })
        return orderConcept_OrderAddressList;
    }
}



class orderDetailModel {
    public idOrderDetail: number;
    public idOrder: number;
    public idProduct: number;
    public quantity: number;
    public rate: number;
    public isDeactivated: boolean;

    public product: productModel

    public order: orderModel








    public idLocalOrderDetail: string
    public static ConvertJSONToModel(_orderDetailJSON: any): orderDetailModel {
        var _orderDetailModel: orderDetailModel = new orderDetailModel();
        _orderDetailModel.idOrderDetail = _orderDetailJSON.IdOrderDetail;
        _orderDetailModel.idOrder = _orderDetailJSON.IdOrder;
        _orderDetailModel.idProduct = _orderDetailJSON.IdProduct;
        _orderDetailModel.quantity = _orderDetailJSON.Quantity;
        _orderDetailModel.rate = _orderDetailJSON.Rate;
        _orderDetailModel.isDeactivated = _orderDetailJSON.IsDeactivated;

        if (_orderDetailJSON.product != null) {

            _orderDetailModel.product = productModel.ConvertJSONToModel(_orderDetailJSON.Product)
        }

        if (_orderDetailJSON.order != null) {

            _orderDetailModel.order = orderModel.ConvertJSONToModel(_orderDetailJSON.Order)
        }

        return _orderDetailModel;



    }
    public static ConvertJSONListToModelList(_orderDetailJSONList: any): orderDetailModel[] {
        var orderDetailList: orderDetailModel[] = new Array();;
        angular.forEach(_orderDetailJSONList, function (_orderDetailJSON) {
            orderDetailList.push(orderDetailModel.ConvertJSONToModel(_orderDetailJSON));
        })
        return orderDetailList;
    }
}



class orderPersonModel {
    public idOrderPerson: number;
    public isDeactivated: boolean;
    public firstname: string;
    public lastname: string;
    public othername: string;
    public idProfilePic: number;
    public headline: string;
    public shortBiography: string;
    public dob: Date;
    public idNationality: number;
    public hasDrivingLicense: boolean;
    public idCoverPic: number;
    public idHostedDomain: number;
    public idTitle: number;
    public nationalIdentificationNumber: string;

    public title: titleModel

    public orderConcepts: orderConceptModel[]









    public idLocalOrderPerson: string
    public static ConvertJSONToModel(_orderPersonJSON: any): orderPersonModel {
        var _orderPersonModel: orderPersonModel = new orderPersonModel();
        _orderPersonModel.idOrderPerson = _orderPersonJSON.IdOrderPerson;
        _orderPersonModel.isDeactivated = _orderPersonJSON.IsDeactivated;
        _orderPersonModel.firstname = _orderPersonJSON.Firstname;
        _orderPersonModel.lastname = _orderPersonJSON.Lastname;
        _orderPersonModel.othername = _orderPersonJSON.Othername;
        _orderPersonModel.idProfilePic = _orderPersonJSON.IdProfilePic;
        _orderPersonModel.headline = _orderPersonJSON.Headline;
        _orderPersonModel.shortBiography = _orderPersonJSON.ShortBiography;
        _orderPersonModel.dob = _orderPersonJSON.Dob;
        _orderPersonModel.idNationality = _orderPersonJSON.IdNationality;
        _orderPersonModel.hasDrivingLicense = _orderPersonJSON.HasDrivingLicense;
        _orderPersonModel.idCoverPic = _orderPersonJSON.IdCoverPic;
        _orderPersonModel.idHostedDomain = _orderPersonJSON.IdHostedDomain;
        _orderPersonModel.idTitle = _orderPersonJSON.IdTitle;
        _orderPersonModel.nationalIdentificationNumber = _orderPersonJSON.NationalIdentificationNumber;

        if (_orderPersonJSON.title != null) {

            _orderPersonModel.title = titleModel.ConvertJSONToModel(_orderPersonJSON.Title)
        }

        if (_orderPersonJSON.orderConcepts != null) {

            _orderPersonModel.orderConcepts = orderConceptModel.ConvertJSONListToModelList(_orderPersonJSON.OrderConcepts)
        }

        return _orderPersonModel;



    }
    public static ConvertJSONListToModelList(_orderPersonJSONList: any): orderPersonModel[] {
        var orderPersonList: orderPersonModel[] = new Array();;
        angular.forEach(_orderPersonJSONList, function (_orderPersonJSON) {
            orderPersonList.push(orderPersonModel.ConvertJSONToModel(_orderPersonJSON));
        })
        return orderPersonList;
    }
}



class orderStateModel {
    public idOrderState: number;
    public isDeactivated: boolean;
    public description: string;

    public orders: orderModel[]






    public idLocalOrderState: string
    public static ConvertJSONToModel(_orderStateJSON: any): orderStateModel {
        var _orderStateModel: orderStateModel = new orderStateModel();
        _orderStateModel.idOrderState = _orderStateJSON.IdOrderState;
        _orderStateModel.isDeactivated = _orderStateJSON.IsDeactivated;
        _orderStateModel.description = _orderStateJSON.Description;

        if (_orderStateJSON.orders != null) {

            _orderStateModel.orders = orderModel.ConvertJSONListToModelList(_orderStateJSON.Orders)
        }

        return _orderStateModel;



    }
    public static ConvertJSONListToModelList(_orderStateJSONList: any): orderStateModel[] {
        var orderStateList: orderStateModel[] = new Array();;
        angular.forEach(_orderStateJSONList, function (_orderStateJSON) {
            orderStateList.push(orderStateModel.ConvertJSONToModel(_orderStateJSON));
        })
        return orderStateList;
    }
}



class parameterModel {
    public idParameter: number;
    public paramaterValue: string;
    public isDeactivated: boolean;
    public code: number;

    public documents: documentModel[]

    public documents1: documentModel[]










    public idLocalParameter: string
    public static ConvertJSONToModel(_parameterJSON: any): parameterModel {
        var _parameterModel: parameterModel = new parameterModel();
        _parameterModel.idParameter = _parameterJSON.IdParameter;
        _parameterModel.paramaterValue = _parameterJSON.ParamaterValue;
        _parameterModel.isDeactivated = _parameterJSON.IsDeactivated;
        _parameterModel.code = _parameterJSON.Code;

        if (_parameterJSON.documents != null) {

            _parameterModel.documents = documentModel.ConvertJSONListToModelList(_parameterJSON.Documents)
        }

        if (_parameterJSON.documents1 != null) {

            _parameterModel.documents1 = documentModel.ConvertJSONListToModelList(_parameterJSON.Documents1)
        }

        return _parameterModel;



    }
    public static ConvertJSONListToModelList(_parameterJSONList: any): parameterModel[] {
        var parameterList: parameterModel[] = new Array();;
        angular.forEach(_parameterJSONList, function (_parameterJSON) {
            parameterList.push(parameterModel.ConvertJSONToModel(_parameterJSON));
        })
        return parameterList;
    }
}



class paymentModel {
    public idPayment: number;
    public isDeactivated: boolean;
    public paymentDate: Date;
    public idUserAuthor: number;
    public idTransaction: number;

    public user: userModel

    public transaction: transactionModel

    public paymentDetails: paymentDetailModel[]

    public transactions: transactionModel[]

    public transaction_Payment: transaction_PaymentModel[]




















    public idLocalPayment: string
    public static ConvertJSONToModel(_paymentJSON: any): paymentModel {
        var _paymentModel: paymentModel = new paymentModel();
        _paymentModel.idPayment = _paymentJSON.IdPayment;
        _paymentModel.isDeactivated = _paymentJSON.IsDeactivated;
        _paymentModel.paymentDate = _paymentJSON.PaymentDate;
        _paymentModel.idUserAuthor = _paymentJSON.IdUserAuthor;
        _paymentModel.idTransaction = _paymentJSON.IdTransaction;

        if (_paymentJSON.user != null) {

            _paymentModel.user = userModel.ConvertJSONToModel(_paymentJSON.User)
        }

        if (_paymentJSON.transaction != null) {

            _paymentModel.transaction = transactionModel.ConvertJSONToModel(_paymentJSON.Transaction)
        }

        if (_paymentJSON.paymentDetails != null) {

            _paymentModel.paymentDetails = paymentDetailModel.ConvertJSONListToModelList(_paymentJSON.PaymentDetails)
        }

        if (_paymentJSON.transactions != null) {

            _paymentModel.transactions = transactionModel.ConvertJSONListToModelList(_paymentJSON.Transactions)
        }

        if (_paymentJSON.transaction_Payment != null) {

            _paymentModel.transaction_Payment = transaction_PaymentModel.ConvertJSONListToModelList(_paymentJSON.Transaction_Payment)
        }

        return _paymentModel;



    }
    public static ConvertJSONListToModelList(_paymentJSONList: any): paymentModel[] {
        var paymentList: paymentModel[] = new Array();;
        angular.forEach(_paymentJSONList, function (_paymentJSON) {
            paymentList.push(paymentModel.ConvertJSONToModel(_paymentJSON));
        })
        return paymentList;
    }
}



class paymentDetailModel {
    public idPaymentDetail: number;
    public isDeactivated: boolean;
    public paymentAmount: number;
    public idPaymentMethod: number;
    public idPayment: number;
    public chequeNo: string;
    public description: string;
    public bankAccountNo: string;
    public idBank: number;

    public bank: bankModel

    public paymentMethod: paymentMethodModel

    public payment: paymentModel











    public idLocalPaymentDetail: string
    public static ConvertJSONToModel(_paymentDetailJSON: any): paymentDetailModel {
        var _paymentDetailModel: paymentDetailModel = new paymentDetailModel();
        _paymentDetailModel.idPaymentDetail = _paymentDetailJSON.IdPaymentDetail;
        _paymentDetailModel.isDeactivated = _paymentDetailJSON.IsDeactivated;
        _paymentDetailModel.paymentAmount = _paymentDetailJSON.PaymentAmount;
        _paymentDetailModel.idPaymentMethod = _paymentDetailJSON.IdPaymentMethod;
        _paymentDetailModel.idPayment = _paymentDetailJSON.IdPayment;
        _paymentDetailModel.chequeNo = _paymentDetailJSON.ChequeNo;
        _paymentDetailModel.description = _paymentDetailJSON.Description;
        _paymentDetailModel.bankAccountNo = _paymentDetailJSON.BankAccountNo;
        _paymentDetailModel.idBank = _paymentDetailJSON.IdBank;

        if (_paymentDetailJSON.bank != null) {

            _paymentDetailModel.bank = bankModel.ConvertJSONToModel(_paymentDetailJSON.Bank)
        }

        if (_paymentDetailJSON.paymentMethod != null) {

            _paymentDetailModel.paymentMethod = paymentMethodModel.ConvertJSONToModel(_paymentDetailJSON.PaymentMethod)
        }

        if (_paymentDetailJSON.payment != null) {

            _paymentDetailModel.payment = paymentModel.ConvertJSONToModel(_paymentDetailJSON.Payment)
        }

        return _paymentDetailModel;



    }
    public static ConvertJSONListToModelList(_paymentDetailJSONList: any): paymentDetailModel[] {
        var paymentDetailList: paymentDetailModel[] = new Array();;
        angular.forEach(_paymentDetailJSONList, function (_paymentDetailJSON) {
            paymentDetailList.push(paymentDetailModel.ConvertJSONToModel(_paymentDetailJSON));
        })
        return paymentDetailList;
    }
}



class paymentDueStateModel {
    public idPaymentDueState: number;
    public isDeactivated: boolean;
    public description: string;
    public idLocalPaymentDueState: string
    public static ConvertJSONToModel(_paymentDueStateJSON: any): paymentDueStateModel {
        var _paymentDueStateModel: paymentDueStateModel = new paymentDueStateModel();
        _paymentDueStateModel.idPaymentDueState = _paymentDueStateJSON.IdPaymentDueState;
        _paymentDueStateModel.isDeactivated = _paymentDueStateJSON.IsDeactivated;
        _paymentDueStateModel.description = _paymentDueStateJSON.Description;

        return _paymentDueStateModel;



    }
    public static ConvertJSONListToModelList(_paymentDueStateJSONList: any): paymentDueStateModel[] {
        var paymentDueStateList: paymentDueStateModel[] = new Array();;
        angular.forEach(_paymentDueStateJSONList, function (_paymentDueStateJSON) {
            paymentDueStateList.push(paymentDueStateModel.ConvertJSONToModel(_paymentDueStateJSON));
        })
        return paymentDueStateList;
    }
}



class paymentMethodModel {
    public idPaymentMethod: number;
    public description: string;
    public isDeactivated: boolean;

    public banks: bankModel[]

    public paymentDetails: paymentDetailModel[]










    public idLocalPaymentMethod: string
    public static ConvertJSONToModel(_paymentMethodJSON: any): paymentMethodModel {
        var _paymentMethodModel: paymentMethodModel = new paymentMethodModel();
        _paymentMethodModel.idPaymentMethod = _paymentMethodJSON.IdPaymentMethod;
        _paymentMethodModel.description = _paymentMethodJSON.Description;
        _paymentMethodModel.isDeactivated = _paymentMethodJSON.IsDeactivated;

        if (_paymentMethodJSON.banks != null) {

            _paymentMethodModel.banks = bankModel.ConvertJSONListToModelList(_paymentMethodJSON.Banks)
        }

        if (_paymentMethodJSON.paymentDetails != null) {

            _paymentMethodModel.paymentDetails = paymentDetailModel.ConvertJSONListToModelList(_paymentMethodJSON.PaymentDetails)
        }

        return _paymentMethodModel;



    }
    public static ConvertJSONListToModelList(_paymentMethodJSONList: any): paymentMethodModel[] {
        var paymentMethodList: paymentMethodModel[] = new Array();;
        angular.forEach(_paymentMethodJSONList, function (_paymentMethodJSON) {
            paymentMethodList.push(paymentMethodModel.ConvertJSONToModel(_paymentMethodJSON));
        })
        return paymentMethodList;
    }
}



class permissionModel {
    public idPermission: number;
    public permissionName: string;
    public permissionCode: number;
    public isDeactivated: boolean;

    public role_Permission: role_PermissionModel[]

    public user_Permission: user_PermissionModel[]










    public idLocalPermission: string
    public static ConvertJSONToModel(_permissionJSON: any): permissionModel {
        var _permissionModel: permissionModel = new permissionModel();
        _permissionModel.idPermission = _permissionJSON.IdPermission;
        _permissionModel.permissionName = _permissionJSON.PermissionName;
        _permissionModel.permissionCode = _permissionJSON.PermissionCode;
        _permissionModel.isDeactivated = _permissionJSON.IsDeactivated;

        if (_permissionJSON.role_Permission != null) {

            _permissionModel.role_Permission = role_PermissionModel.ConvertJSONListToModelList(_permissionJSON.Role_Permission)
        }

        if (_permissionJSON.user_Permission != null) {

            _permissionModel.user_Permission = user_PermissionModel.ConvertJSONListToModelList(_permissionJSON.User_Permission)
        }

        return _permissionModel;



    }
    public static ConvertJSONListToModelList(_permissionJSONList: any): permissionModel[] {
        var permissionList: permissionModel[] = new Array();;
        angular.forEach(_permissionJSONList, function (_permissionJSON) {
            permissionList.push(permissionModel.ConvertJSONToModel(_permissionJSON));
        })
        return permissionList;
    }
}



class personModel {
    public idPerson: number;
    public isDeactivated: boolean;
    public firstname: string;
    public lastname: string;
    public dob: Date;
    public idNationality: number;
    public idTitle: number;
    public nationalIdentificationNumber: string;

    public users: userModel[]

    public title: titleModel

    public concepts: conceptModel[]

    public customers: customerModel[]

    public person_Address: person_AddressModel[]

    public person_ContactType: person_ContactTypeModel[]

























    public idLocalPerson: string
    public static ConvertJSONToModel(_personJSON: any): personModel {
        var _personModel: personModel = new personModel();
        _personModel.idPerson = _personJSON.IdPerson;
        _personModel.isDeactivated = _personJSON.IsDeactivated;
        _personModel.firstname = _personJSON.Firstname;
        _personModel.lastname = _personJSON.Lastname;
        _personModel.dob = _personJSON.Dob;
        _personModel.idNationality = _personJSON.IdNationality;
        _personModel.idTitle = _personJSON.IdTitle;
        _personModel.nationalIdentificationNumber = _personJSON.NationalIdentificationNumber;

        if (_personJSON.users != null) {

            _personModel.users = userModel.ConvertJSONListToModelList(_personJSON.Users)
        }

        if (_personJSON.title != null) {

            _personModel.title = titleModel.ConvertJSONToModel(_personJSON.Title)
        }

        if (_personJSON.concepts != null) {

            _personModel.concepts = conceptModel.ConvertJSONListToModelList(_personJSON.Concepts)
        }

        if (_personJSON.customers != null) {

            _personModel.customers = customerModel.ConvertJSONListToModelList(_personJSON.Customers)
        }

        if (_personJSON.person_Address != null) {

            _personModel.person_Address = person_AddressModel.ConvertJSONListToModelList(_personJSON.Person_Address)
        }

        if (_personJSON.person_ContactType != null) {

            _personModel.person_ContactType = person_ContactTypeModel.ConvertJSONListToModelList(_personJSON.Person_ContactType)
        }

        return _personModel;



    }
    public static ConvertJSONListToModelList(_personJSONList: any): personModel[] {
        var personList: personModel[] = new Array();;
        angular.forEach(_personJSONList, function (_personJSON) {
            personList.push(personModel.ConvertJSONToModel(_personJSON));
        })
        return personList;
    }
}



class person_AddressModel {
    public idPerson_Address: number;
    public idPerson: number;
    public idAddress: number;
    public isDeactivated: boolean;

    public address: addressModel

    public person: personModel








    public idLocalPerson_Address: string
    public static ConvertJSONToModel(_person_AddressJSON: any): person_AddressModel {
        var _person_AddressModel: person_AddressModel = new person_AddressModel();
        _person_AddressModel.idPerson_Address = _person_AddressJSON.IdPerson_Address;
        _person_AddressModel.idPerson = _person_AddressJSON.IdPerson;
        _person_AddressModel.idAddress = _person_AddressJSON.IdAddress;
        _person_AddressModel.isDeactivated = _person_AddressJSON.IsDeactivated;

        if (_person_AddressJSON.address != null) {

            _person_AddressModel.address = addressModel.ConvertJSONToModel(_person_AddressJSON.Address)
        }

        if (_person_AddressJSON.person != null) {

            _person_AddressModel.person = personModel.ConvertJSONToModel(_person_AddressJSON.Person)
        }

        return _person_AddressModel;



    }
    public static ConvertJSONListToModelList(_person_AddressJSONList: any): person_AddressModel[] {
        var person_AddressList: person_AddressModel[] = new Array();;
        angular.forEach(_person_AddressJSONList, function (_person_AddressJSON) {
            person_AddressList.push(person_AddressModel.ConvertJSONToModel(_person_AddressJSON));
        })
        return person_AddressList;
    }
}



class person_ContactTypeModel {
    public idPerson_ContactType: number;
    public idPerson: number;
    public idContactType: number;
    public isDeactivated: boolean;
    public description: string;
    public isPrimary: boolean;

    public contactType: contactTypeModel

    public person: personModel








    public idLocalPerson_ContactType: string
    public static ConvertJSONToModel(_person_ContactTypeJSON: any): person_ContactTypeModel {
        var _person_ContactTypeModel: person_ContactTypeModel = new person_ContactTypeModel();
        _person_ContactTypeModel.idPerson_ContactType = _person_ContactTypeJSON.IdPerson_ContactType;
        _person_ContactTypeModel.idPerson = _person_ContactTypeJSON.IdPerson;
        _person_ContactTypeModel.idContactType = _person_ContactTypeJSON.IdContactType;
        _person_ContactTypeModel.isDeactivated = _person_ContactTypeJSON.IsDeactivated;
        _person_ContactTypeModel.description = _person_ContactTypeJSON.Description;
        _person_ContactTypeModel.isPrimary = _person_ContactTypeJSON.IsPrimary;

        if (_person_ContactTypeJSON.contactType != null) {

            _person_ContactTypeModel.contactType = contactTypeModel.ConvertJSONToModel(_person_ContactTypeJSON.ContactType)
        }

        if (_person_ContactTypeJSON.person != null) {

            _person_ContactTypeModel.person = personModel.ConvertJSONToModel(_person_ContactTypeJSON.Person)
        }

        return _person_ContactTypeModel;



    }
    public static ConvertJSONListToModelList(_person_ContactTypeJSONList: any): person_ContactTypeModel[] {
        var person_ContactTypeList: person_ContactTypeModel[] = new Array();;
        angular.forEach(_person_ContactTypeJSONList, function (_person_ContactTypeJSON) {
            person_ContactTypeList.push(person_ContactTypeModel.ConvertJSONToModel(_person_ContactTypeJSON));
        })
        return person_ContactTypeList;
    }
}



class productModel {
    public idProduct: number;
    public isDeactivated: boolean;
    public description: string;
    public idProductType: number;
    public itemCode: string;
    public rate: number;
    public idTransactionAccount: number;
    public name: string;
    public idDocument: number;
    public isLimitedByStock: boolean;
    public idParentProduct: number;
    public imgUrl: string;
    public isAvailableOnOrder: boolean;

    public transactionDetailPresets: transactionDetailPresetModel[]

    public productType: productTypeModel

    public orderDetails: orderDetailModel[]

    public product1: productModel[]

    public product2: productModel

    public transactionDetails: transactionDetailModel[]
























    public idLocalProduct: string
    public static ConvertJSONToModel(_productJSON: any): productModel {
        var _productModel: productModel = new productModel();
        _productModel.idProduct = _productJSON.IdProduct;
        _productModel.isDeactivated = _productJSON.IsDeactivated;
        _productModel.description = _productJSON.Description;
        _productModel.idProductType = _productJSON.IdProductType;
        _productModel.itemCode = _productJSON.ItemCode;
        _productModel.rate = _productJSON.Rate;
        _productModel.idTransactionAccount = _productJSON.IdTransactionAccount;
        _productModel.name = _productJSON.Name;
        _productModel.idDocument = _productJSON.IdDocument;
        _productModel.isLimitedByStock = _productJSON.IsLimitedByStock;
        _productModel.idParentProduct = _productJSON.IdParentProduct;
        _productModel.imgUrl = _productJSON.ImgUrl;
        _productModel.isAvailableOnOrder = _productJSON.IsAvailableOnOrder;

        if (_productJSON.transactionDetailPresets != null) {

            _productModel.transactionDetailPresets = transactionDetailPresetModel.ConvertJSONListToModelList(_productJSON.TransactionDetailPresets)
        }

        if (_productJSON.productType != null) {

            _productModel.productType = productTypeModel.ConvertJSONToModel(_productJSON.ProductType)
        }

        if (_productJSON.orderDetails != null) {

            _productModel.orderDetails = orderDetailModel.ConvertJSONListToModelList(_productJSON.OrderDetails)
        }

        if (_productJSON.product1 != null) {

            _productModel.product1 = productModel.ConvertJSONListToModelList(_productJSON.Product1)
        }

        if (_productJSON.product2 != null) {

            _productModel.product2 = productModel.ConvertJSONToModel(_productJSON.Product2)
        }

        if (_productJSON.transactionDetails != null) {

            _productModel.transactionDetails = transactionDetailModel.ConvertJSONListToModelList(_productJSON.TransactionDetails)
        }

        return _productModel;



    }
    public static ConvertJSONListToModelList(_productJSONList: any): productModel[] {
        var productList: productModel[] = new Array();;
        angular.forEach(_productJSONList, function (_productJSON) {
            productList.push(productModel.ConvertJSONToModel(_productJSON));
        })
        return productList;
    }
}



class productTypeModel {
    public idProductType: number;
    public isDeactivated: boolean;
    public description: string;

    public products: productModel[]






    public idLocalProductType: string
    public static ConvertJSONToModel(_productTypeJSON: any): productTypeModel {
        var _productTypeModel: productTypeModel = new productTypeModel();
        _productTypeModel.idProductType = _productTypeJSON.IdProductType;
        _productTypeModel.isDeactivated = _productTypeJSON.IsDeactivated;
        _productTypeModel.description = _productTypeJSON.Description;

        if (_productTypeJSON.products != null) {

            _productTypeModel.products = productModel.ConvertJSONListToModelList(_productTypeJSON.Products)
        }

        return _productTypeModel;



    }
    public static ConvertJSONListToModelList(_productTypeJSONList: any): productTypeModel[] {
        var productTypeList: productTypeModel[] = new Array();;
        angular.forEach(_productTypeJSONList, function (_productTypeJSON) {
            productTypeList.push(productTypeModel.ConvertJSONToModel(_productTypeJSON));
        })
        return productTypeList;
    }
}



class receiptModel {
    public idReceipt: number;
    public number: number;
    public isDeactivated: boolean;
    public idUser: number;

    public user: userModel





    public idLocalReceipt: string
    public static ConvertJSONToModel(_receiptJSON: any): receiptModel {
        var _receiptModel: receiptModel = new receiptModel();
        _receiptModel.idReceipt = _receiptJSON.IdReceipt;
        _receiptModel.number = _receiptJSON.Number;
        _receiptModel.isDeactivated = _receiptJSON.IsDeactivated;
        _receiptModel.idUser = _receiptJSON.IdUser;

        if (_receiptJSON.user != null) {

            _receiptModel.user = userModel.ConvertJSONToModel(_receiptJSON.User)
        }

        return _receiptModel;



    }
    public static ConvertJSONListToModelList(_receiptJSONList: any): receiptModel[] {
        var receiptList: receiptModel[] = new Array();;
        angular.forEach(_receiptJSONList, function (_receiptJSON) {
            receiptList.push(receiptModel.ConvertJSONToModel(_receiptJSON));
        })
        return receiptList;
    }
}



class requestModel {
    public idRequest: number;
    public idRequestType: number;
    public idRequestAuthor: number;
    public requestDate: Date;
    public idWorkflowState: number;
    public idUserAssignedTo: number;
    public remarks: string;
    public isDeactivated: boolean;
    public jsonContent: string;

    public requestType: requestTypeModel

    public workflowState: workflowStateModel

    public requestMessageQueues: requestMessageQueueModel[]












    public idLocalRequest: string
    public static ConvertJSONToModel(_requestJSON: any): requestModel {
        var _requestModel: requestModel = new requestModel();
        _requestModel.idRequest = _requestJSON.IdRequest;
        _requestModel.idRequestType = _requestJSON.IdRequestType;
        _requestModel.idRequestAuthor = _requestJSON.IdRequestAuthor;
        _requestModel.requestDate = _requestJSON.RequestDate;
        _requestModel.idWorkflowState = _requestJSON.IdWorkflowState;
        _requestModel.idUserAssignedTo = _requestJSON.IdUserAssignedTo;
        _requestModel.remarks = _requestJSON.Remarks;
        _requestModel.isDeactivated = _requestJSON.IsDeactivated;
        _requestModel.jsonContent = _requestJSON.JsonContent;

        if (_requestJSON.requestType != null) {

            _requestModel.requestType = requestTypeModel.ConvertJSONToModel(_requestJSON.RequestType)
        }

        if (_requestJSON.workflowState != null) {

            _requestModel.workflowState = workflowStateModel.ConvertJSONToModel(_requestJSON.WorkflowState)
        }

        if (_requestJSON.requestMessageQueues != null) {

            _requestModel.requestMessageQueues = requestMessageQueueModel.ConvertJSONListToModelList(_requestJSON.RequestMessageQueues)
        }

        return _requestModel;



    }
    public static ConvertJSONListToModelList(_requestJSONList: any): requestModel[] {
        var requestList: requestModel[] = new Array();;
        angular.forEach(_requestJSONList, function (_requestJSON) {
            requestList.push(requestModel.ConvertJSONToModel(_requestJSON));
        })
        return requestList;
    }
}



class requestMessageQueueModel {
    public idRequestMessageQueue: number;
    public isDeactivated: boolean;
    public message: string;
    public idRequest: number;
    public idUserReceiver: number;
    public dateCreated: Date;

    public request: requestModel





    public idLocalRequestMessageQueue: string
    public static ConvertJSONToModel(_requestMessageQueueJSON: any): requestMessageQueueModel {
        var _requestMessageQueueModel: requestMessageQueueModel = new requestMessageQueueModel();
        _requestMessageQueueModel.idRequestMessageQueue = _requestMessageQueueJSON.IdRequestMessageQueue;
        _requestMessageQueueModel.isDeactivated = _requestMessageQueueJSON.IsDeactivated;
        _requestMessageQueueModel.message = _requestMessageQueueJSON.Message;
        _requestMessageQueueModel.idRequest = _requestMessageQueueJSON.IdRequest;
        _requestMessageQueueModel.idUserReceiver = _requestMessageQueueJSON.IdUserReceiver;
        _requestMessageQueueModel.dateCreated = _requestMessageQueueJSON.DateCreated;

        if (_requestMessageQueueJSON.request != null) {

            _requestMessageQueueModel.request = requestModel.ConvertJSONToModel(_requestMessageQueueJSON.Request)
        }

        return _requestMessageQueueModel;



    }
    public static ConvertJSONListToModelList(_requestMessageQueueJSONList: any): requestMessageQueueModel[] {
        var requestMessageQueueList: requestMessageQueueModel[] = new Array();;
        angular.forEach(_requestMessageQueueJSONList, function (_requestMessageQueueJSON) {
            requestMessageQueueList.push(requestMessageQueueModel.ConvertJSONToModel(_requestMessageQueueJSON));
        })
        return requestMessageQueueList;
    }
}



class requestTypeModel {
    public idRequestType: number;
    public description: string;
    public isDeactivated: boolean;
    public idWorkflow: number;

    public requests: requestModel[]

    public workflow: workflowModel

    public requestType_User: requestType_UserModel[]













    public idLocalRequestType: string
    public static ConvertJSONToModel(_requestTypeJSON: any): requestTypeModel {
        var _requestTypeModel: requestTypeModel = new requestTypeModel();
        _requestTypeModel.idRequestType = _requestTypeJSON.IdRequestType;
        _requestTypeModel.description = _requestTypeJSON.Description;
        _requestTypeModel.isDeactivated = _requestTypeJSON.IsDeactivated;
        _requestTypeModel.idWorkflow = _requestTypeJSON.IdWorkflow;

        if (_requestTypeJSON.requests != null) {

            _requestTypeModel.requests = requestModel.ConvertJSONListToModelList(_requestTypeJSON.Requests)
        }

        if (_requestTypeJSON.workflow != null) {

            _requestTypeModel.workflow = workflowModel.ConvertJSONToModel(_requestTypeJSON.Workflow)
        }

        if (_requestTypeJSON.requestType_User != null) {

            _requestTypeModel.requestType_User = requestType_UserModel.ConvertJSONListToModelList(_requestTypeJSON.RequestType_User)
        }

        return _requestTypeModel;



    }
    public static ConvertJSONListToModelList(_requestTypeJSONList: any): requestTypeModel[] {
        var requestTypeList: requestTypeModel[] = new Array();;
        angular.forEach(_requestTypeJSONList, function (_requestTypeJSON) {
            requestTypeList.push(requestTypeModel.ConvertJSONToModel(_requestTypeJSON));
        })
        return requestTypeList;
    }
}



class requestType_UserModel {
    public idRequestType_User: number;
    public idRequestType: number;
    public idUser: number;
    public idParentRequestType_User: number;
    public isDeactivated: boolean;
    public priority: number;

    public user: userModel

    public requestType: requestTypeModel

    public requestType_User1: requestType_UserModel[]

    public requestType_User2: requestType_UserModel















    public idLocalRequestType_User: string
    public static ConvertJSONToModel(_requestType_UserJSON: any): requestType_UserModel {
        var _requestType_UserModel: requestType_UserModel = new requestType_UserModel();
        _requestType_UserModel.idRequestType_User = _requestType_UserJSON.IdRequestType_User;
        _requestType_UserModel.idRequestType = _requestType_UserJSON.IdRequestType;
        _requestType_UserModel.idUser = _requestType_UserJSON.IdUser;
        _requestType_UserModel.idParentRequestType_User = _requestType_UserJSON.IdParentRequestType_User;
        _requestType_UserModel.isDeactivated = _requestType_UserJSON.IsDeactivated;
        _requestType_UserModel.priority = _requestType_UserJSON.Priority;

        if (_requestType_UserJSON.user != null) {

            _requestType_UserModel.user = userModel.ConvertJSONToModel(_requestType_UserJSON.User)
        }

        if (_requestType_UserJSON.requestType != null) {

            _requestType_UserModel.requestType = requestTypeModel.ConvertJSONToModel(_requestType_UserJSON.RequestType)
        }

        if (_requestType_UserJSON.requestType_User1 != null) {

            _requestType_UserModel.requestType_User1 = requestType_UserModel.ConvertJSONListToModelList(_requestType_UserJSON.RequestType_User1)
        }

        if (_requestType_UserJSON.requestType_User2 != null) {

            _requestType_UserModel.requestType_User2 = requestType_UserModel.ConvertJSONToModel(_requestType_UserJSON.RequestType_User2)
        }

        return _requestType_UserModel;



    }
    public static ConvertJSONListToModelList(_requestType_UserJSONList: any): requestType_UserModel[] {
        var requestType_UserList: requestType_UserModel[] = new Array();;
        angular.forEach(_requestType_UserJSONList, function (_requestType_UserJSON) {
            requestType_UserList.push(requestType_UserModel.ConvertJSONToModel(_requestType_UserJSON));
        })
        return requestType_UserList;
    }
}



class roleModel {
    public idRole: number;
    public name: string;
    public isDeactivated: boolean;

    public role_Permission: role_PermissionModel[]

    public user_Role: user_RoleModel[]










    public idLocalRole: string
    public static ConvertJSONToModel(_roleJSON: any): roleModel {
        var _roleModel: roleModel = new roleModel();
        _roleModel.idRole = _roleJSON.IdRole;
        _roleModel.name = _roleJSON.Name;
        _roleModel.isDeactivated = _roleJSON.IsDeactivated;

        if (_roleJSON.role_Permission != null) {

            _roleModel.role_Permission = role_PermissionModel.ConvertJSONListToModelList(_roleJSON.Role_Permission)
        }

        if (_roleJSON.user_Role != null) {

            _roleModel.user_Role = user_RoleModel.ConvertJSONListToModelList(_roleJSON.User_Role)
        }

        return _roleModel;



    }
    public static ConvertJSONListToModelList(_roleJSONList: any): roleModel[] {
        var roleList: roleModel[] = new Array();;
        angular.forEach(_roleJSONList, function (_roleJSON) {
            roleList.push(roleModel.ConvertJSONToModel(_roleJSON));
        })
        return roleList;
    }
}



class role_PermissionModel {
    public idRole_Permission: number;
    public idRole: number;
    public idPermission: number;
    public isDeactivated: boolean;

    public permission: permissionModel

    public role: roleModel








    public idLocalRole_Permission: string
    public static ConvertJSONToModel(_role_PermissionJSON: any): role_PermissionModel {
        var _role_PermissionModel: role_PermissionModel = new role_PermissionModel();
        _role_PermissionModel.idRole_Permission = _role_PermissionJSON.IdRole_Permission;
        _role_PermissionModel.idRole = _role_PermissionJSON.IdRole;
        _role_PermissionModel.idPermission = _role_PermissionJSON.IdPermission;
        _role_PermissionModel.isDeactivated = _role_PermissionJSON.IsDeactivated;

        if (_role_PermissionJSON.permission != null) {

            _role_PermissionModel.permission = permissionModel.ConvertJSONToModel(_role_PermissionJSON.Permission)
        }

        if (_role_PermissionJSON.role != null) {

            _role_PermissionModel.role = roleModel.ConvertJSONToModel(_role_PermissionJSON.Role)
        }

        return _role_PermissionModel;



    }
    public static ConvertJSONListToModelList(_role_PermissionJSONList: any): role_PermissionModel[] {
        var role_PermissionList: role_PermissionModel[] = new Array();;
        angular.forEach(_role_PermissionJSONList, function (_role_PermissionJSON) {
            role_PermissionList.push(role_PermissionModel.ConvertJSONToModel(_role_PermissionJSON));
        })
        return role_PermissionList;
    }
}



class scheduleSettingModel {
    public idScheduleSetting: number;
    public isDeactivated: boolean;
    public idFrequency: number;
    public reccurEvery: string;
    public weekOccursOnDays: string;
    public monthOccurs: string;
    public monthOnSpecificDays: string;
    public monthEveryOrdinal: string;
    public monthEveryDays: string;
    public startDate: Date;
    public endDate: Date;
    public idTransaction: number;

    public frequency: frequencyModel

    public transaction: transactionModel








    public idLocalScheduleSetting: string
    public static ConvertJSONToModel(_scheduleSettingJSON: any): scheduleSettingModel {
        var _scheduleSettingModel: scheduleSettingModel = new scheduleSettingModel();
        _scheduleSettingModel.idScheduleSetting = _scheduleSettingJSON.IdScheduleSetting;
        _scheduleSettingModel.isDeactivated = _scheduleSettingJSON.IsDeactivated;
        _scheduleSettingModel.idFrequency = _scheduleSettingJSON.IdFrequency;
        _scheduleSettingModel.reccurEvery = _scheduleSettingJSON.ReccurEvery;
        _scheduleSettingModel.weekOccursOnDays = _scheduleSettingJSON.WeekOccursOnDays;
        _scheduleSettingModel.monthOccurs = _scheduleSettingJSON.MonthOccurs;
        _scheduleSettingModel.monthOnSpecificDays = _scheduleSettingJSON.MonthOnSpecificDays;
        _scheduleSettingModel.monthEveryOrdinal = _scheduleSettingJSON.MonthEveryOrdinal;
        _scheduleSettingModel.monthEveryDays = _scheduleSettingJSON.MonthEveryDays;
        _scheduleSettingModel.startDate = _scheduleSettingJSON.StartDate;
        _scheduleSettingModel.endDate = _scheduleSettingJSON.EndDate;
        _scheduleSettingModel.idTransaction = _scheduleSettingJSON.IdTransaction;

        if (_scheduleSettingJSON.frequency != null) {

            _scheduleSettingModel.frequency = frequencyModel.ConvertJSONToModel(_scheduleSettingJSON.Frequency)
        }

        if (_scheduleSettingJSON.transaction != null) {

            _scheduleSettingModel.transaction = transactionModel.ConvertJSONToModel(_scheduleSettingJSON.Transaction)
        }

        return _scheduleSettingModel;



    }
    public static ConvertJSONListToModelList(_scheduleSettingJSONList: any): scheduleSettingModel[] {
        var scheduleSettingList: scheduleSettingModel[] = new Array();;
        angular.forEach(_scheduleSettingJSONList, function (_scheduleSettingJSON) {
            scheduleSettingList.push(scheduleSettingModel.ConvertJSONToModel(_scheduleSettingJSON));
        })
        return scheduleSettingList;
    }
}



class stockLocationModel {
    public idStockLocation: number;
    public description: string;
    public displayOrder: number;
    public isDeactivated: boolean;
    public idLocalStockLocation: string
    public static ConvertJSONToModel(_stockLocationJSON: any): stockLocationModel {
        var _stockLocationModel: stockLocationModel = new stockLocationModel();
        _stockLocationModel.idStockLocation = _stockLocationJSON.IdStockLocation;
        _stockLocationModel.description = _stockLocationJSON.Description;
        _stockLocationModel.displayOrder = _stockLocationJSON.DisplayOrder;
        _stockLocationModel.isDeactivated = _stockLocationJSON.IsDeactivated;

        return _stockLocationModel;



    }
    public static ConvertJSONListToModelList(_stockLocationJSONList: any): stockLocationModel[] {
        var stockLocationList: stockLocationModel[] = new Array();;
        angular.forEach(_stockLocationJSONList, function (_stockLocationJSON) {
            stockLocationList.push(stockLocationModel.ConvertJSONToModel(_stockLocationJSON));
        })
        return stockLocationList;
    }
}



class temporaryPaymentModel {
    public idTemporaryPayment: number;
    public isDeactivated: boolean;
    public paymentDate: Date;
    public idUserAuthor: number;
    public identifier: string;

    public temporaryPaymentDetails: temporaryPaymentDetailModel[]

    public temporaryTransactions: temporaryTransactionModel[]










    public idLocalTemporaryPayment: string
    public static ConvertJSONToModel(_temporaryPaymentJSON: any): temporaryPaymentModel {
        var _temporaryPaymentModel: temporaryPaymentModel = new temporaryPaymentModel();
        _temporaryPaymentModel.idTemporaryPayment = _temporaryPaymentJSON.IdTemporaryPayment;
        _temporaryPaymentModel.isDeactivated = _temporaryPaymentJSON.IsDeactivated;
        _temporaryPaymentModel.paymentDate = _temporaryPaymentJSON.PaymentDate;
        _temporaryPaymentModel.idUserAuthor = _temporaryPaymentJSON.IdUserAuthor;
        _temporaryPaymentModel.identifier = _temporaryPaymentJSON.Identifier;

        if (_temporaryPaymentJSON.temporaryPaymentDetails != null) {

            _temporaryPaymentModel.temporaryPaymentDetails = temporaryPaymentDetailModel.ConvertJSONListToModelList(_temporaryPaymentJSON.TemporaryPaymentDetails)
        }

        if (_temporaryPaymentJSON.temporaryTransactions != null) {

            _temporaryPaymentModel.temporaryTransactions = temporaryTransactionModel.ConvertJSONListToModelList(_temporaryPaymentJSON.TemporaryTransactions)
        }

        return _temporaryPaymentModel;



    }
    public static ConvertJSONListToModelList(_temporaryPaymentJSONList: any): temporaryPaymentModel[] {
        var temporaryPaymentList: temporaryPaymentModel[] = new Array();;
        angular.forEach(_temporaryPaymentJSONList, function (_temporaryPaymentJSON) {
            temporaryPaymentList.push(temporaryPaymentModel.ConvertJSONToModel(_temporaryPaymentJSON));
        })
        return temporaryPaymentList;
    }
}



class temporaryPaymentDetailModel {
    public idTemporaryPaymentDetail: number;
    public isDeactivated: boolean;
    public paymentAmount: number;
    public idPaymentMethod: number;
    public idTemporaryPayment: number;
    public chequeNo: string;
    public identifier: string;

    public temporaryPayment: temporaryPaymentModel





    public idLocalTemporaryPaymentDetail: string
    public static ConvertJSONToModel(_temporaryPaymentDetailJSON: any): temporaryPaymentDetailModel {
        var _temporaryPaymentDetailModel: temporaryPaymentDetailModel = new temporaryPaymentDetailModel();
        _temporaryPaymentDetailModel.idTemporaryPaymentDetail = _temporaryPaymentDetailJSON.IdTemporaryPaymentDetail;
        _temporaryPaymentDetailModel.isDeactivated = _temporaryPaymentDetailJSON.IsDeactivated;
        _temporaryPaymentDetailModel.paymentAmount = _temporaryPaymentDetailJSON.PaymentAmount;
        _temporaryPaymentDetailModel.idPaymentMethod = _temporaryPaymentDetailJSON.IdPaymentMethod;
        _temporaryPaymentDetailModel.idTemporaryPayment = _temporaryPaymentDetailJSON.IdTemporaryPayment;
        _temporaryPaymentDetailModel.chequeNo = _temporaryPaymentDetailJSON.ChequeNo;
        _temporaryPaymentDetailModel.identifier = _temporaryPaymentDetailJSON.Identifier;

        if (_temporaryPaymentDetailJSON.temporaryPayment != null) {

            _temporaryPaymentDetailModel.temporaryPayment = temporaryPaymentModel.ConvertJSONToModel(_temporaryPaymentDetailJSON.TemporaryPayment)
        }

        return _temporaryPaymentDetailModel;



    }
    public static ConvertJSONListToModelList(_temporaryPaymentDetailJSONList: any): temporaryPaymentDetailModel[] {
        var temporaryPaymentDetailList: temporaryPaymentDetailModel[] = new Array();;
        angular.forEach(_temporaryPaymentDetailJSONList, function (_temporaryPaymentDetailJSON) {
            temporaryPaymentDetailList.push(temporaryPaymentDetailModel.ConvertJSONToModel(_temporaryPaymentDetailJSON));
        })
        return temporaryPaymentDetailList;
    }
}



class temporaryTransactionModel {
    public idTemporaryTransaction: number;
    public idTransactionType: number;
    public isDeactivated: boolean;
    public transactionDate: Date;
    public receiptNo: string;
    public idCustomer: number;
    public idTransactionClass: number;
    public idTransactionTemplate: number;
    public idTransactionAccount: number;
    public memo: string;
    public capturedDate: Date;
    public totalAmount: number;
    public idUserAuthor: number;
    public idTemporaryPayment: number;
    public idBankStatementStagingDetail: number;
    public identitifier: string;
    public idBankStatementHitList: number;
    public idBankStatementStagingHit: number;

    public bankStatementHitList: bankStatementHitListModel

    public bankStatementStagingDetail: bankStatementStagingDetailModel

    public bankStatementStagingHit: bankStatementStagingHitModel

    public temporaryPayment: temporaryPaymentModel

    public temporaryTransactionDetails: temporaryTransactionDetailModel[]


















    public idLocalTemporaryTransaction: string
    public static ConvertJSONToModel(_temporaryTransactionJSON: any): temporaryTransactionModel {
        var _temporaryTransactionModel: temporaryTransactionModel = new temporaryTransactionModel();
        _temporaryTransactionModel.idTemporaryTransaction = _temporaryTransactionJSON.IdTemporaryTransaction;
        _temporaryTransactionModel.idTransactionType = _temporaryTransactionJSON.IdTransactionType;
        _temporaryTransactionModel.isDeactivated = _temporaryTransactionJSON.IsDeactivated;
        _temporaryTransactionModel.transactionDate = _temporaryTransactionJSON.TransactionDate;
        _temporaryTransactionModel.receiptNo = _temporaryTransactionJSON.ReceiptNo;
        _temporaryTransactionModel.idCustomer = _temporaryTransactionJSON.IdCustomer;
        _temporaryTransactionModel.idTransactionClass = _temporaryTransactionJSON.IdTransactionClass;
        _temporaryTransactionModel.idTransactionTemplate = _temporaryTransactionJSON.IdTransactionTemplate;
        _temporaryTransactionModel.idTransactionAccount = _temporaryTransactionJSON.IdTransactionAccount;
        _temporaryTransactionModel.memo = _temporaryTransactionJSON.Memo;
        _temporaryTransactionModel.capturedDate = _temporaryTransactionJSON.CapturedDate;
        _temporaryTransactionModel.totalAmount = _temporaryTransactionJSON.TotalAmount;
        _temporaryTransactionModel.idUserAuthor = _temporaryTransactionJSON.IdUserAuthor;
        _temporaryTransactionModel.idTemporaryPayment = _temporaryTransactionJSON.IdTemporaryPayment;
        _temporaryTransactionModel.idBankStatementStagingDetail = _temporaryTransactionJSON.IdBankStatementStagingDetail;
        _temporaryTransactionModel.identitifier = _temporaryTransactionJSON.Identitifier;
        _temporaryTransactionModel.idBankStatementHitList = _temporaryTransactionJSON.IdBankStatementHitList;
        _temporaryTransactionModel.idBankStatementStagingHit = _temporaryTransactionJSON.IdBankStatementStagingHit;

        if (_temporaryTransactionJSON.bankStatementHitList != null) {

            _temporaryTransactionModel.bankStatementHitList = bankStatementHitListModel.ConvertJSONToModel(_temporaryTransactionJSON.BankStatementHitList)
        }

        if (_temporaryTransactionJSON.bankStatementStagingDetail != null) {

            _temporaryTransactionModel.bankStatementStagingDetail = bankStatementStagingDetailModel.ConvertJSONToModel(_temporaryTransactionJSON.BankStatementStagingDetail)
        }

        if (_temporaryTransactionJSON.bankStatementStagingHit != null) {

            _temporaryTransactionModel.bankStatementStagingHit = bankStatementStagingHitModel.ConvertJSONToModel(_temporaryTransactionJSON.BankStatementStagingHit)
        }

        if (_temporaryTransactionJSON.temporaryPayment != null) {

            _temporaryTransactionModel.temporaryPayment = temporaryPaymentModel.ConvertJSONToModel(_temporaryTransactionJSON.TemporaryPayment)
        }

        if (_temporaryTransactionJSON.temporaryTransactionDetails != null) {

            _temporaryTransactionModel.temporaryTransactionDetails = temporaryTransactionDetailModel.ConvertJSONListToModelList(_temporaryTransactionJSON.TemporaryTransactionDetails)
        }

        return _temporaryTransactionModel;



    }
    public static ConvertJSONListToModelList(_temporaryTransactionJSONList: any): temporaryTransactionModel[] {
        var temporaryTransactionList: temporaryTransactionModel[] = new Array();;
        angular.forEach(_temporaryTransactionJSONList, function (_temporaryTransactionJSON) {
            temporaryTransactionList.push(temporaryTransactionModel.ConvertJSONToModel(_temporaryTransactionJSON));
        })
        return temporaryTransactionList;
    }
}



class temporaryTransactionDetailModel {
    public idTemporaryTransactionDetail: number;
    public isDeactivated: boolean;
    public idTemporaryTransaction: number;
    public idProduct: number;
    public description: string;
    public quantity: number;
    public rate: number;
    public idTransactionClass: number;
    public identifier: string;

    public temporaryTransaction: temporaryTransactionModel





    public idLocalTemporaryTransactionDetail: string
    public static ConvertJSONToModel(_temporaryTransactionDetailJSON: any): temporaryTransactionDetailModel {
        var _temporaryTransactionDetailModel: temporaryTransactionDetailModel = new temporaryTransactionDetailModel();
        _temporaryTransactionDetailModel.idTemporaryTransactionDetail = _temporaryTransactionDetailJSON.IdTemporaryTransactionDetail;
        _temporaryTransactionDetailModel.isDeactivated = _temporaryTransactionDetailJSON.IsDeactivated;
        _temporaryTransactionDetailModel.idTemporaryTransaction = _temporaryTransactionDetailJSON.IdTemporaryTransaction;
        _temporaryTransactionDetailModel.idProduct = _temporaryTransactionDetailJSON.IdProduct;
        _temporaryTransactionDetailModel.description = _temporaryTransactionDetailJSON.Description;
        _temporaryTransactionDetailModel.quantity = _temporaryTransactionDetailJSON.Quantity;
        _temporaryTransactionDetailModel.rate = _temporaryTransactionDetailJSON.Rate;
        _temporaryTransactionDetailModel.idTransactionClass = _temporaryTransactionDetailJSON.IdTransactionClass;
        _temporaryTransactionDetailModel.identifier = _temporaryTransactionDetailJSON.Identifier;

        if (_temporaryTransactionDetailJSON.temporaryTransaction != null) {

            _temporaryTransactionDetailModel.temporaryTransaction = temporaryTransactionModel.ConvertJSONToModel(_temporaryTransactionDetailJSON.TemporaryTransaction)
        }

        return _temporaryTransactionDetailModel;



    }
    public static ConvertJSONListToModelList(_temporaryTransactionDetailJSONList: any): temporaryTransactionDetailModel[] {
        var temporaryTransactionDetailList: temporaryTransactionDetailModel[] = new Array();;
        angular.forEach(_temporaryTransactionDetailJSONList, function (_temporaryTransactionDetailJSON) {
            temporaryTransactionDetailList.push(temporaryTransactionDetailModel.ConvertJSONToModel(_temporaryTransactionDetailJSON));
        })
        return temporaryTransactionDetailList;
    }
}



class temporaryTransactionOrderModel {
    public idTemporaryTransactionOrder: number;
    public isDeactivated: boolean;
    public idTemporaryTransactionOrderState: number;
    public transactionJson: string;
    public signatureImage: string;
    public temporaryTransactionOrderDate: Date;
    public idWorkstation: string;
    public idSignatureDocument: number;

    public temporaryTransactionOrderState: temporaryTransactionOrderStateModel

    public document: documentModel








    public idLocalTemporaryTransactionOrder: string
    public static ConvertJSONToModel(_temporaryTransactionOrderJSON: any): temporaryTransactionOrderModel {
        var _temporaryTransactionOrderModel: temporaryTransactionOrderModel = new temporaryTransactionOrderModel();
        _temporaryTransactionOrderModel.idTemporaryTransactionOrder = _temporaryTransactionOrderJSON.IdTemporaryTransactionOrder;
        _temporaryTransactionOrderModel.isDeactivated = _temporaryTransactionOrderJSON.IsDeactivated;
        _temporaryTransactionOrderModel.idTemporaryTransactionOrderState = _temporaryTransactionOrderJSON.IdTemporaryTransactionOrderState;
        _temporaryTransactionOrderModel.transactionJson = _temporaryTransactionOrderJSON.TransactionJson;
        _temporaryTransactionOrderModel.signatureImage = _temporaryTransactionOrderJSON.SignatureImage;
        _temporaryTransactionOrderModel.temporaryTransactionOrderDate = _temporaryTransactionOrderJSON.TemporaryTransactionOrderDate;
        _temporaryTransactionOrderModel.idWorkstation = _temporaryTransactionOrderJSON.IdWorkstation;
        _temporaryTransactionOrderModel.idSignatureDocument = _temporaryTransactionOrderJSON.IdSignatureDocument;

        if (_temporaryTransactionOrderJSON.temporaryTransactionOrderState != null) {

            _temporaryTransactionOrderModel.temporaryTransactionOrderState = temporaryTransactionOrderStateModel.ConvertJSONToModel(_temporaryTransactionOrderJSON.TemporaryTransactionOrderState)
        }

        if (_temporaryTransactionOrderJSON.document != null) {

            _temporaryTransactionOrderModel.document = documentModel.ConvertJSONToModel(_temporaryTransactionOrderJSON.Document)
        }

        return _temporaryTransactionOrderModel;



    }
    public static ConvertJSONListToModelList(_temporaryTransactionOrderJSONList: any): temporaryTransactionOrderModel[] {
        var temporaryTransactionOrderList: temporaryTransactionOrderModel[] = new Array();;
        angular.forEach(_temporaryTransactionOrderJSONList, function (_temporaryTransactionOrderJSON) {
            temporaryTransactionOrderList.push(temporaryTransactionOrderModel.ConvertJSONToModel(_temporaryTransactionOrderJSON));
        })
        return temporaryTransactionOrderList;
    }
}



class temporaryTransactionOrderStateModel {
    public idTemporaryTransactionOrderState: number;
    public description: string;
    public isDeactivated: boolean;

    public temporaryTransactionOrders: temporaryTransactionOrderModel[]






    public idLocalTemporaryTransactionOrderState: string
    public static ConvertJSONToModel(_temporaryTransactionOrderStateJSON: any): temporaryTransactionOrderStateModel {
        var _temporaryTransactionOrderStateModel: temporaryTransactionOrderStateModel = new temporaryTransactionOrderStateModel();
        _temporaryTransactionOrderStateModel.idTemporaryTransactionOrderState = _temporaryTransactionOrderStateJSON.IdTemporaryTransactionOrderState;
        _temporaryTransactionOrderStateModel.description = _temporaryTransactionOrderStateJSON.Description;
        _temporaryTransactionOrderStateModel.isDeactivated = _temporaryTransactionOrderStateJSON.IsDeactivated;

        if (_temporaryTransactionOrderStateJSON.temporaryTransactionOrders != null) {

            _temporaryTransactionOrderStateModel.temporaryTransactionOrders = temporaryTransactionOrderModel.ConvertJSONListToModelList(_temporaryTransactionOrderStateJSON.TemporaryTransactionOrders)
        }

        return _temporaryTransactionOrderStateModel;



    }
    public static ConvertJSONListToModelList(_temporaryTransactionOrderStateJSONList: any): temporaryTransactionOrderStateModel[] {
        var temporaryTransactionOrderStateList: temporaryTransactionOrderStateModel[] = new Array();;
        angular.forEach(_temporaryTransactionOrderStateJSONList, function (_temporaryTransactionOrderStateJSON) {
            temporaryTransactionOrderStateList.push(temporaryTransactionOrderStateModel.ConvertJSONToModel(_temporaryTransactionOrderStateJSON));
        })
        return temporaryTransactionOrderStateList;
    }
}



class titleModel {
    public idTitle: number;
    public description: string;
    public isDeactivated: boolean;

    public orderPersons: orderPersonModel[]

    public people: personModel[]










    public idLocalTitle: string
    public static ConvertJSONToModel(_titleJSON: any): titleModel {
        var _titleModel: titleModel = new titleModel();
        _titleModel.idTitle = _titleJSON.IdTitle;
        _titleModel.description = _titleJSON.Description;
        _titleModel.isDeactivated = _titleJSON.IsDeactivated;

        if (_titleJSON.orderPersons != null) {

            _titleModel.orderPersons = orderPersonModel.ConvertJSONListToModelList(_titleJSON.OrderPersons)
        }

        if (_titleJSON.people != null) {

            _titleModel.people = personModel.ConvertJSONListToModelList(_titleJSON.People)
        }

        return _titleModel;



    }
    public static ConvertJSONListToModelList(_titleJSONList: any): titleModel[] {
        var titleList: titleModel[] = new Array();;
        angular.forEach(_titleJSONList, function (_titleJSON) {
            titleList.push(titleModel.ConvertJSONToModel(_titleJSON));
        })
        return titleList;
    }
}



class transactionModel {
    public idTransaction: number;
    public idTransactionType: number;
    public isDeactivated: boolean;
    public transactionDate: Date;
    public receiptNo: string;
    public idCustomer: number;
    public idTransactionClass: number;
    public idTransactionTemplate: number;
    public idTransactionAccount: number;
    public memo: string;
    public capturedDate: Date;
    public totalAmount: number;
    public idUserAuthor: number;
    public idSignatureDocument: number;
    public idTransactionState: number;
    public idTransactionOriginal: number;
    public idPayment: number;

    public user: userModel

    public transactionState: transactionStateModel

    public transactionType: transactionTypeModel

    public customer: customerModel

    public document: documentModel

    public scheduleSettings: scheduleSettingModel[]

    public transactionDues: transactionDueModel[]

    public transactionDue_Transaction: transactionDue_TransactionModel[]

    public payments: paymentModel[]

    public payment: paymentModel

    public transaction1: transactionModel

    public transaction2: transactionModel

    public transaction11: transactionModel

    public transaction3: transactionModel

    public transaction_Payment: transaction_PaymentModel[]

    public transactionDetails: transactionDetailModel[]

    public transaction_MailToSend: transaction_MailToSendModel[]

    public transaction_BankStatementStagingDetail: transaction_BankStatementStagingDetailModel[]

    public transactionAccount: transactionAccountModel

    public transactionClass: transactionClassModel

    public transactionTemplate: transactionTemplateModel









































































    public idLocalTransaction: string
    public static ConvertJSONToModel(_transactionJSON: any): transactionModel {
        var _transactionModel: transactionModel = new transactionModel();
        _transactionModel.idTransaction = _transactionJSON.IdTransaction;
        _transactionModel.idTransactionType = _transactionJSON.IdTransactionType;
        _transactionModel.isDeactivated = _transactionJSON.IsDeactivated;
        _transactionModel.transactionDate = _transactionJSON.TransactionDate;
        _transactionModel.receiptNo = _transactionJSON.ReceiptNo;
        _transactionModel.idCustomer = _transactionJSON.IdCustomer;
        _transactionModel.idTransactionClass = _transactionJSON.IdTransactionClass;
        _transactionModel.idTransactionTemplate = _transactionJSON.IdTransactionTemplate;
        _transactionModel.idTransactionAccount = _transactionJSON.IdTransactionAccount;
        _transactionModel.memo = _transactionJSON.Memo;
        _transactionModel.capturedDate = _transactionJSON.CapturedDate;
        _transactionModel.totalAmount = _transactionJSON.TotalAmount;
        _transactionModel.idUserAuthor = _transactionJSON.IdUserAuthor;
        _transactionModel.idSignatureDocument = _transactionJSON.IdSignatureDocument;
        _transactionModel.idTransactionState = _transactionJSON.IdTransactionState;
        _transactionModel.idTransactionOriginal = _transactionJSON.IdTransactionOriginal;
        _transactionModel.idPayment = _transactionJSON.IdPayment;

        if (_transactionJSON.user != null) {

            _transactionModel.user = userModel.ConvertJSONToModel(_transactionJSON.User)
        }

        if (_transactionJSON.transactionState != null) {

            _transactionModel.transactionState = transactionStateModel.ConvertJSONToModel(_transactionJSON.TransactionState)
        }

        if (_transactionJSON.transactionType != null) {

            _transactionModel.transactionType = transactionTypeModel.ConvertJSONToModel(_transactionJSON.TransactionType)
        }

        if (_transactionJSON.customer != null) {

            _transactionModel.customer = customerModel.ConvertJSONToModel(_transactionJSON.Customer)
        }

        if (_transactionJSON.document != null) {

            _transactionModel.document = documentModel.ConvertJSONToModel(_transactionJSON.Document)
        }

        if (_transactionJSON.scheduleSettings != null) {

            _transactionModel.scheduleSettings = scheduleSettingModel.ConvertJSONListToModelList(_transactionJSON.ScheduleSettings)
        }

        if (_transactionJSON.transactionDues != null) {

            _transactionModel.transactionDues = transactionDueModel.ConvertJSONListToModelList(_transactionJSON.TransactionDues)
        }

        if (_transactionJSON.transactionDue_Transaction != null) {

            _transactionModel.transactionDue_Transaction = transactionDue_TransactionModel.ConvertJSONListToModelList(_transactionJSON.TransactionDue_Transaction)
        }

        if (_transactionJSON.payments != null) {

            _transactionModel.payments = paymentModel.ConvertJSONListToModelList(_transactionJSON.Payments)
        }

        if (_transactionJSON.payment != null) {

            _transactionModel.payment = paymentModel.ConvertJSONToModel(_transactionJSON.Payment)
        }

        if (_transactionJSON.transaction1 != null) {

            _transactionModel.transaction1 = transactionModel.ConvertJSONToModel(_transactionJSON.Transaction1)
        }

        if (_transactionJSON.transaction2 != null) {

            _transactionModel.transaction2 = transactionModel.ConvertJSONToModel(_transactionJSON.Transaction2)
        }

        if (_transactionJSON.transaction11 != null) {

            _transactionModel.transaction11 = transactionModel.ConvertJSONToModel(_transactionJSON.Transaction11)
        }

        if (_transactionJSON.transaction3 != null) {

            _transactionModel.transaction3 = transactionModel.ConvertJSONToModel(_transactionJSON.Transaction3)
        }

        if (_transactionJSON.transaction_Payment != null) {

            _transactionModel.transaction_Payment = transaction_PaymentModel.ConvertJSONListToModelList(_transactionJSON.Transaction_Payment)
        }

        if (_transactionJSON.transactionDetails != null) {

            _transactionModel.transactionDetails = transactionDetailModel.ConvertJSONListToModelList(_transactionJSON.TransactionDetails)
        }

        if (_transactionJSON.transaction_MailToSend != null) {

            _transactionModel.transaction_MailToSend = transaction_MailToSendModel.ConvertJSONListToModelList(_transactionJSON.Transaction_MailToSend)
        }

        if (_transactionJSON.transaction_BankStatementStagingDetail != null) {

            _transactionModel.transaction_BankStatementStagingDetail = transaction_BankStatementStagingDetailModel.ConvertJSONListToModelList(_transactionJSON.Transaction_BankStatementStagingDetail)
        }

        if (_transactionJSON.transactionAccount != null) {

            _transactionModel.transactionAccount = transactionAccountModel.ConvertJSONToModel(_transactionJSON.TransactionAccount)
        }

        if (_transactionJSON.transactionClass != null) {

            _transactionModel.transactionClass = transactionClassModel.ConvertJSONToModel(_transactionJSON.TransactionClass)
        }

        if (_transactionJSON.transactionTemplate != null) {

            _transactionModel.transactionTemplate = transactionTemplateModel.ConvertJSONToModel(_transactionJSON.TransactionTemplate)
        }

        return _transactionModel;



    }
    public static ConvertJSONListToModelList(_transactionJSONList: any): transactionModel[] {
        var transactionList: transactionModel[] = new Array();;
        angular.forEach(_transactionJSONList, function (_transactionJSON) {
            transactionList.push(transactionModel.ConvertJSONToModel(_transactionJSON));
        })
        return transactionList;
    }
}



class transaction_BankStatementStagingDetailModel {
    public idTransaction_BankStatementStagingDetail: number;
    public idTransaction: number;
    public idBankStatementStagingDetail: number;
    public isDeactivated: boolean;

    public bankStatementStagingDetail: bankStatementStagingDetailModel

    public transaction: transactionModel








    public idLocalTransaction_BankStatementStagingDetail: string
    public static ConvertJSONToModel(_transaction_BankStatementStagingDetailJSON: any): transaction_BankStatementStagingDetailModel {
        var _transaction_BankStatementStagingDetailModel: transaction_BankStatementStagingDetailModel = new transaction_BankStatementStagingDetailModel();
        _transaction_BankStatementStagingDetailModel.idTransaction_BankStatementStagingDetail = _transaction_BankStatementStagingDetailJSON.IdTransaction_BankStatementStagingDetail;
        _transaction_BankStatementStagingDetailModel.idTransaction = _transaction_BankStatementStagingDetailJSON.IdTransaction;
        _transaction_BankStatementStagingDetailModel.idBankStatementStagingDetail = _transaction_BankStatementStagingDetailJSON.IdBankStatementStagingDetail;
        _transaction_BankStatementStagingDetailModel.isDeactivated = _transaction_BankStatementStagingDetailJSON.IsDeactivated;

        if (_transaction_BankStatementStagingDetailJSON.bankStatementStagingDetail != null) {

            _transaction_BankStatementStagingDetailModel.bankStatementStagingDetail = bankStatementStagingDetailModel.ConvertJSONToModel(_transaction_BankStatementStagingDetailJSON.BankStatementStagingDetail)
        }

        if (_transaction_BankStatementStagingDetailJSON.transaction != null) {

            _transaction_BankStatementStagingDetailModel.transaction = transactionModel.ConvertJSONToModel(_transaction_BankStatementStagingDetailJSON.Transaction)
        }

        return _transaction_BankStatementStagingDetailModel;



    }
    public static ConvertJSONListToModelList(_transaction_BankStatementStagingDetailJSONList: any): transaction_BankStatementStagingDetailModel[] {
        var transaction_BankStatementStagingDetailList: transaction_BankStatementStagingDetailModel[] = new Array();;
        angular.forEach(_transaction_BankStatementStagingDetailJSONList, function (_transaction_BankStatementStagingDetailJSON) {
            transaction_BankStatementStagingDetailList.push(transaction_BankStatementStagingDetailModel.ConvertJSONToModel(_transaction_BankStatementStagingDetailJSON));
        })
        return transaction_BankStatementStagingDetailList;
    }
}



class transaction_MailToSendModel {
    public idTransaction_MailToSend: number;
    public idTransaction: number;
    public idMailToSend: number;
    public isDeactivated: boolean;

    public mailToSend: mailToSendModel

    public transaction: transactionModel








    public idLocalTransaction_MailToSend: string
    public static ConvertJSONToModel(_transaction_MailToSendJSON: any): transaction_MailToSendModel {
        var _transaction_MailToSendModel: transaction_MailToSendModel = new transaction_MailToSendModel();
        _transaction_MailToSendModel.idTransaction_MailToSend = _transaction_MailToSendJSON.IdTransaction_MailToSend;
        _transaction_MailToSendModel.idTransaction = _transaction_MailToSendJSON.IdTransaction;
        _transaction_MailToSendModel.idMailToSend = _transaction_MailToSendJSON.IdMailToSend;
        _transaction_MailToSendModel.isDeactivated = _transaction_MailToSendJSON.IsDeactivated;

        if (_transaction_MailToSendJSON.mailToSend != null) {

            _transaction_MailToSendModel.mailToSend = mailToSendModel.ConvertJSONToModel(_transaction_MailToSendJSON.MailToSend)
        }

        if (_transaction_MailToSendJSON.transaction != null) {

            _transaction_MailToSendModel.transaction = transactionModel.ConvertJSONToModel(_transaction_MailToSendJSON.Transaction)
        }

        return _transaction_MailToSendModel;



    }
    public static ConvertJSONListToModelList(_transaction_MailToSendJSONList: any): transaction_MailToSendModel[] {
        var transaction_MailToSendList: transaction_MailToSendModel[] = new Array();;
        angular.forEach(_transaction_MailToSendJSONList, function (_transaction_MailToSendJSON) {
            transaction_MailToSendList.push(transaction_MailToSendModel.ConvertJSONToModel(_transaction_MailToSendJSON));
        })
        return transaction_MailToSendList;
    }
}



class transaction_PaymentModel {
    public idTransaction_Payment: number;
    public idTransaction: number;
    public idPayment: number;
    public isDeactivated: boolean;

    public payment: paymentModel

    public transaction: transactionModel








    public idLocalTransaction_Payment: string
    public static ConvertJSONToModel(_transaction_PaymentJSON: any): transaction_PaymentModel {
        var _transaction_PaymentModel: transaction_PaymentModel = new transaction_PaymentModel();
        _transaction_PaymentModel.idTransaction_Payment = _transaction_PaymentJSON.IdTransaction_Payment;
        _transaction_PaymentModel.idTransaction = _transaction_PaymentJSON.IdTransaction;
        _transaction_PaymentModel.idPayment = _transaction_PaymentJSON.IdPayment;
        _transaction_PaymentModel.isDeactivated = _transaction_PaymentJSON.IsDeactivated;

        if (_transaction_PaymentJSON.payment != null) {

            _transaction_PaymentModel.payment = paymentModel.ConvertJSONToModel(_transaction_PaymentJSON.Payment)
        }

        if (_transaction_PaymentJSON.transaction != null) {

            _transaction_PaymentModel.transaction = transactionModel.ConvertJSONToModel(_transaction_PaymentJSON.Transaction)
        }

        return _transaction_PaymentModel;



    }
    public static ConvertJSONListToModelList(_transaction_PaymentJSONList: any): transaction_PaymentModel[] {
        var transaction_PaymentList: transaction_PaymentModel[] = new Array();;
        angular.forEach(_transaction_PaymentJSONList, function (_transaction_PaymentJSON) {
            transaction_PaymentList.push(transaction_PaymentModel.ConvertJSONToModel(_transaction_PaymentJSON));
        })
        return transaction_PaymentList;
    }
}



class transactionAccountModel {
    public idTransactionAccount: number;
    public description: string;
    public isDeactivated: boolean;
    public idParentTransactionAccount: number;
    public idTransactionAccountType: number;
    public number: number;
    public bankNumber: string;

    public transactionPresets: transactionPresetModel[]

    public banks: bankModel[]

    public transactionAccountType: transactionAccountTypeModel

    public transactions: transactionModel[]

















    public idLocalTransactionAccount: string
    public static ConvertJSONToModel(_transactionAccountJSON: any): transactionAccountModel {
        var _transactionAccountModel: transactionAccountModel = new transactionAccountModel();
        _transactionAccountModel.idTransactionAccount = _transactionAccountJSON.IdTransactionAccount;
        _transactionAccountModel.description = _transactionAccountJSON.Description;
        _transactionAccountModel.isDeactivated = _transactionAccountJSON.IsDeactivated;
        _transactionAccountModel.idParentTransactionAccount = _transactionAccountJSON.IdParentTransactionAccount;
        _transactionAccountModel.idTransactionAccountType = _transactionAccountJSON.IdTransactionAccountType;
        _transactionAccountModel.number = _transactionAccountJSON.Number;
        _transactionAccountModel.bankNumber = _transactionAccountJSON.BankNumber;

        if (_transactionAccountJSON.transactionPresets != null) {

            _transactionAccountModel.transactionPresets = transactionPresetModel.ConvertJSONListToModelList(_transactionAccountJSON.TransactionPresets)
        }

        if (_transactionAccountJSON.banks != null) {

            _transactionAccountModel.banks = bankModel.ConvertJSONListToModelList(_transactionAccountJSON.Banks)
        }

        if (_transactionAccountJSON.transactionAccountType != null) {

            _transactionAccountModel.transactionAccountType = transactionAccountTypeModel.ConvertJSONToModel(_transactionAccountJSON.TransactionAccountType)
        }

        if (_transactionAccountJSON.transactions != null) {

            _transactionAccountModel.transactions = transactionModel.ConvertJSONListToModelList(_transactionAccountJSON.Transactions)
        }

        return _transactionAccountModel;



    }
    public static ConvertJSONListToModelList(_transactionAccountJSONList: any): transactionAccountModel[] {
        var transactionAccountList: transactionAccountModel[] = new Array();;
        angular.forEach(_transactionAccountJSONList, function (_transactionAccountJSON) {
            transactionAccountList.push(transactionAccountModel.ConvertJSONToModel(_transactionAccountJSON));
        })
        return transactionAccountList;
    }
}



class transactionAccountTypeModel {
    public idTransactionAccountType: number;
    public isDeactivated: boolean;
    public description: string;

    public transactionAccounts: transactionAccountModel[]






    public idLocalTransactionAccountType: string
    public static ConvertJSONToModel(_transactionAccountTypeJSON: any): transactionAccountTypeModel {
        var _transactionAccountTypeModel: transactionAccountTypeModel = new transactionAccountTypeModel();
        _transactionAccountTypeModel.idTransactionAccountType = _transactionAccountTypeJSON.IdTransactionAccountType;
        _transactionAccountTypeModel.isDeactivated = _transactionAccountTypeJSON.IsDeactivated;
        _transactionAccountTypeModel.description = _transactionAccountTypeJSON.Description;

        if (_transactionAccountTypeJSON.transactionAccounts != null) {

            _transactionAccountTypeModel.transactionAccounts = transactionAccountModel.ConvertJSONListToModelList(_transactionAccountTypeJSON.TransactionAccounts)
        }

        return _transactionAccountTypeModel;



    }
    public static ConvertJSONListToModelList(_transactionAccountTypeJSONList: any): transactionAccountTypeModel[] {
        var transactionAccountTypeList: transactionAccountTypeModel[] = new Array();;
        angular.forEach(_transactionAccountTypeJSONList, function (_transactionAccountTypeJSON) {
            transactionAccountTypeList.push(transactionAccountTypeModel.ConvertJSONToModel(_transactionAccountTypeJSON));
        })
        return transactionAccountTypeList;
    }
}



class transactionClassModel {
    public idTransactionClass: number;
    public isDeactivated: boolean;
    public description: string;
    public idParentTransactionClass: number;

    public transactionDetailPresets: transactionDetailPresetModel[]

    public transactionPresets: transactionPresetModel[]

    public transactionClass1: transactionClassModel[]

    public transactionClass2: transactionClassModel

    public transactionDetails: transactionDetailModel[]

    public transactions: transactionModel[]

























    public idLocalTransactionClass: string
    public static ConvertJSONToModel(_transactionClassJSON: any): transactionClassModel {
        var _transactionClassModel: transactionClassModel = new transactionClassModel();
        _transactionClassModel.idTransactionClass = _transactionClassJSON.IdTransactionClass;
        _transactionClassModel.isDeactivated = _transactionClassJSON.IsDeactivated;
        _transactionClassModel.description = _transactionClassJSON.Description;
        _transactionClassModel.idParentTransactionClass = _transactionClassJSON.IdParentTransactionClass;

        if (_transactionClassJSON.transactionDetailPresets != null) {

            _transactionClassModel.transactionDetailPresets = transactionDetailPresetModel.ConvertJSONListToModelList(_transactionClassJSON.TransactionDetailPresets)
        }

        if (_transactionClassJSON.transactionPresets != null) {

            _transactionClassModel.transactionPresets = transactionPresetModel.ConvertJSONListToModelList(_transactionClassJSON.TransactionPresets)
        }

        if (_transactionClassJSON.transactionClass1 != null) {

            _transactionClassModel.transactionClass1 = transactionClassModel.ConvertJSONListToModelList(_transactionClassJSON.TransactionClass1)
        }

        if (_transactionClassJSON.transactionClass2 != null) {

            _transactionClassModel.transactionClass2 = transactionClassModel.ConvertJSONToModel(_transactionClassJSON.TransactionClass2)
        }

        if (_transactionClassJSON.transactionDetails != null) {

            _transactionClassModel.transactionDetails = transactionDetailModel.ConvertJSONListToModelList(_transactionClassJSON.TransactionDetails)
        }

        if (_transactionClassJSON.transactions != null) {

            _transactionClassModel.transactions = transactionModel.ConvertJSONListToModelList(_transactionClassJSON.Transactions)
        }

        return _transactionClassModel;



    }
    public static ConvertJSONListToModelList(_transactionClassJSONList: any): transactionClassModel[] {
        var transactionClassList: transactionClassModel[] = new Array();;
        angular.forEach(_transactionClassJSONList, function (_transactionClassJSON) {
            transactionClassList.push(transactionClassModel.ConvertJSONToModel(_transactionClassJSON));
        })
        return transactionClassList;
    }
}



class transactionDetailModel {
    public idTransactionDetail: number;
    public isDeactivated: boolean;
    public idTransaction: number;
    public idProduct: number;
    public description: string;
    public quantity: number;
    public rate: number;
    public idTransactionClass: number;
    public remarks: string;

    public product: productModel

    public transaction: transactionModel

    public transactionClass: transactionClassModel











    public idLocalTransactionDetail: string
    public static ConvertJSONToModel(_transactionDetailJSON: any): transactionDetailModel {
        var _transactionDetailModel: transactionDetailModel = new transactionDetailModel();
        _transactionDetailModel.idTransactionDetail = _transactionDetailJSON.IdTransactionDetail;
        _transactionDetailModel.isDeactivated = _transactionDetailJSON.IsDeactivated;
        _transactionDetailModel.idTransaction = _transactionDetailJSON.IdTransaction;
        _transactionDetailModel.idProduct = _transactionDetailJSON.IdProduct;
        _transactionDetailModel.description = _transactionDetailJSON.Description;
        _transactionDetailModel.quantity = _transactionDetailJSON.Quantity;
        _transactionDetailModel.rate = _transactionDetailJSON.Rate;
        _transactionDetailModel.idTransactionClass = _transactionDetailJSON.IdTransactionClass;
        _transactionDetailModel.remarks = _transactionDetailJSON.Remarks;

        if (_transactionDetailJSON.product != null) {

            _transactionDetailModel.product = productModel.ConvertJSONToModel(_transactionDetailJSON.Product)
        }

        if (_transactionDetailJSON.transaction != null) {

            _transactionDetailModel.transaction = transactionModel.ConvertJSONToModel(_transactionDetailJSON.Transaction)
        }

        if (_transactionDetailJSON.transactionClass != null) {

            _transactionDetailModel.transactionClass = transactionClassModel.ConvertJSONToModel(_transactionDetailJSON.TransactionClass)
        }

        return _transactionDetailModel;



    }
    public static ConvertJSONListToModelList(_transactionDetailJSONList: any): transactionDetailModel[] {
        var transactionDetailList: transactionDetailModel[] = new Array();;
        angular.forEach(_transactionDetailJSONList, function (_transactionDetailJSON) {
            transactionDetailList.push(transactionDetailModel.ConvertJSONToModel(_transactionDetailJSON));
        })
        return transactionDetailList;
    }
}



class transactionDetailPresetModel {
    public idTransactionDetailPreset: number;
    public isDeactivated: boolean;
    public idTransactionPreset: number;
    public idProduct: number;
    public description: string;
    public quantity: number;
    public rate: number;
    public idTransactionClass: number;

    public product: productModel

    public transactionPreset: transactionPresetModel

    public transactionClass: transactionClassModel











    public idLocalTransactionDetailPreset: string
    public static ConvertJSONToModel(_transactionDetailPresetJSON: any): transactionDetailPresetModel {
        var _transactionDetailPresetModel: transactionDetailPresetModel = new transactionDetailPresetModel();
        _transactionDetailPresetModel.idTransactionDetailPreset = _transactionDetailPresetJSON.IdTransactionDetailPreset;
        _transactionDetailPresetModel.isDeactivated = _transactionDetailPresetJSON.IsDeactivated;
        _transactionDetailPresetModel.idTransactionPreset = _transactionDetailPresetJSON.IdTransactionPreset;
        _transactionDetailPresetModel.idProduct = _transactionDetailPresetJSON.IdProduct;
        _transactionDetailPresetModel.description = _transactionDetailPresetJSON.Description;
        _transactionDetailPresetModel.quantity = _transactionDetailPresetJSON.Quantity;
        _transactionDetailPresetModel.rate = _transactionDetailPresetJSON.Rate;
        _transactionDetailPresetModel.idTransactionClass = _transactionDetailPresetJSON.IdTransactionClass;

        if (_transactionDetailPresetJSON.product != null) {

            _transactionDetailPresetModel.product = productModel.ConvertJSONToModel(_transactionDetailPresetJSON.Product)
        }

        if (_transactionDetailPresetJSON.transactionPreset != null) {

            _transactionDetailPresetModel.transactionPreset = transactionPresetModel.ConvertJSONToModel(_transactionDetailPresetJSON.TransactionPreset)
        }

        if (_transactionDetailPresetJSON.transactionClass != null) {

            _transactionDetailPresetModel.transactionClass = transactionClassModel.ConvertJSONToModel(_transactionDetailPresetJSON.TransactionClass)
        }

        return _transactionDetailPresetModel;



    }
    public static ConvertJSONListToModelList(_transactionDetailPresetJSONList: any): transactionDetailPresetModel[] {
        var transactionDetailPresetList: transactionDetailPresetModel[] = new Array();;
        angular.forEach(_transactionDetailPresetJSONList, function (_transactionDetailPresetJSON) {
            transactionDetailPresetList.push(transactionDetailPresetModel.ConvertJSONToModel(_transactionDetailPresetJSON));
        })
        return transactionDetailPresetList;
    }
}



class transactionDueModel {
    public idTransactionDue: number;
    public idTransaction: number;
    public dueDate: Date;
    public amountDue: number;
    public amountRemaining: number;
    public isDeactivated: boolean;

    public transaction: transactionModel

    public transactionDue_Transaction: transactionDue_TransactionModel[]









    public idLocalTransactionDue: string
    public static ConvertJSONToModel(_transactionDueJSON: any): transactionDueModel {
        var _transactionDueModel: transactionDueModel = new transactionDueModel();
        _transactionDueModel.idTransactionDue = _transactionDueJSON.IdTransactionDue;
        _transactionDueModel.idTransaction = _transactionDueJSON.IdTransaction;
        _transactionDueModel.dueDate = _transactionDueJSON.DueDate;
        _transactionDueModel.amountDue = _transactionDueJSON.AmountDue;
        _transactionDueModel.amountRemaining = _transactionDueJSON.AmountRemaining;
        _transactionDueModel.isDeactivated = _transactionDueJSON.IsDeactivated;

        if (_transactionDueJSON.transaction != null) {

            _transactionDueModel.transaction = transactionModel.ConvertJSONToModel(_transactionDueJSON.Transaction)
        }

        if (_transactionDueJSON.transactionDue_Transaction != null) {

            _transactionDueModel.transactionDue_Transaction = transactionDue_TransactionModel.ConvertJSONListToModelList(_transactionDueJSON.TransactionDue_Transaction)
        }

        return _transactionDueModel;



    }
    public static ConvertJSONListToModelList(_transactionDueJSONList: any): transactionDueModel[] {
        var transactionDueList: transactionDueModel[] = new Array();;
        angular.forEach(_transactionDueJSONList, function (_transactionDueJSON) {
            transactionDueList.push(transactionDueModel.ConvertJSONToModel(_transactionDueJSON));
        })
        return transactionDueList;
    }
}



class transactionDue_TransactionModel {
    public idTransactionDue_Transaction: number;
    public isDeactivated: boolean;
    public idTransactionDone: number;
    public idTransactionDue: number;

    public transactionDue: transactionDueModel

    public transaction: transactionModel








    public idLocalTransactionDue_Transaction: string
    public static ConvertJSONToModel(_transactionDue_TransactionJSON: any): transactionDue_TransactionModel {
        var _transactionDue_TransactionModel: transactionDue_TransactionModel = new transactionDue_TransactionModel();
        _transactionDue_TransactionModel.idTransactionDue_Transaction = _transactionDue_TransactionJSON.IdTransactionDue_Transaction;
        _transactionDue_TransactionModel.isDeactivated = _transactionDue_TransactionJSON.IsDeactivated;
        _transactionDue_TransactionModel.idTransactionDone = _transactionDue_TransactionJSON.IdTransactionDone;
        _transactionDue_TransactionModel.idTransactionDue = _transactionDue_TransactionJSON.IdTransactionDue;

        if (_transactionDue_TransactionJSON.transactionDue != null) {

            _transactionDue_TransactionModel.transactionDue = transactionDueModel.ConvertJSONToModel(_transactionDue_TransactionJSON.TransactionDue)
        }

        if (_transactionDue_TransactionJSON.transaction != null) {

            _transactionDue_TransactionModel.transaction = transactionModel.ConvertJSONToModel(_transactionDue_TransactionJSON.Transaction)
        }

        return _transactionDue_TransactionModel;



    }
    public static ConvertJSONListToModelList(_transactionDue_TransactionJSONList: any): transactionDue_TransactionModel[] {
        var transactionDue_TransactionList: transactionDue_TransactionModel[] = new Array();;
        angular.forEach(_transactionDue_TransactionJSONList, function (_transactionDue_TransactionJSON) {
            transactionDue_TransactionList.push(transactionDue_TransactionModel.ConvertJSONToModel(_transactionDue_TransactionJSON));
        })
        return transactionDue_TransactionList;
    }
}



class transactionPresetModel {
    public idTransactionPreset: number;
    public idTransactionType: number;
    public isDeactivated: boolean;
    public idCustomer: number;
    public idTransactionClass: number;
    public idTransactionTemplate: number;
    public idTransactionAccount: number;
    public totalAmount: number;

    public bankStatementHitList_TransactionPreset: bankStatementHitList_TransactionPresetModel[]

    public bankStatementStagingHit_TransactionPreset: bankStatementStagingHit_TransactionPresetModel[]

    public transactionDetailPresets: transactionDetailPresetModel[]

    public customer: customerModel

    public transactionAccount: transactionAccountModel

    public transactionClass: transactionClassModel

    public transactionTemplate: transactionTemplateModel

    public transactionType: transactionTypeModel





























    public idLocalTransactionPreset: string
    public static ConvertJSONToModel(_transactionPresetJSON: any): transactionPresetModel {
        var _transactionPresetModel: transactionPresetModel = new transactionPresetModel();
        _transactionPresetModel.idTransactionPreset = _transactionPresetJSON.IdTransactionPreset;
        _transactionPresetModel.idTransactionType = _transactionPresetJSON.IdTransactionType;
        _transactionPresetModel.isDeactivated = _transactionPresetJSON.IsDeactivated;
        _transactionPresetModel.idCustomer = _transactionPresetJSON.IdCustomer;
        _transactionPresetModel.idTransactionClass = _transactionPresetJSON.IdTransactionClass;
        _transactionPresetModel.idTransactionTemplate = _transactionPresetJSON.IdTransactionTemplate;
        _transactionPresetModel.idTransactionAccount = _transactionPresetJSON.IdTransactionAccount;
        _transactionPresetModel.totalAmount = _transactionPresetJSON.TotalAmount;

        if (_transactionPresetJSON.bankStatementHitList_TransactionPreset != null) {

            _transactionPresetModel.bankStatementHitList_TransactionPreset = bankStatementHitList_TransactionPresetModel.ConvertJSONListToModelList(_transactionPresetJSON.BankStatementHitList_TransactionPreset)
        }

        if (_transactionPresetJSON.bankStatementStagingHit_TransactionPreset != null) {

            _transactionPresetModel.bankStatementStagingHit_TransactionPreset = bankStatementStagingHit_TransactionPresetModel.ConvertJSONListToModelList(_transactionPresetJSON.BankStatementStagingHit_TransactionPreset)
        }

        if (_transactionPresetJSON.transactionDetailPresets != null) {

            _transactionPresetModel.transactionDetailPresets = transactionDetailPresetModel.ConvertJSONListToModelList(_transactionPresetJSON.TransactionDetailPresets)
        }

        if (_transactionPresetJSON.customer != null) {

            _transactionPresetModel.customer = customerModel.ConvertJSONToModel(_transactionPresetJSON.Customer)
        }

        if (_transactionPresetJSON.transactionAccount != null) {

            _transactionPresetModel.transactionAccount = transactionAccountModel.ConvertJSONToModel(_transactionPresetJSON.TransactionAccount)
        }

        if (_transactionPresetJSON.transactionClass != null) {

            _transactionPresetModel.transactionClass = transactionClassModel.ConvertJSONToModel(_transactionPresetJSON.TransactionClass)
        }

        if (_transactionPresetJSON.transactionTemplate != null) {

            _transactionPresetModel.transactionTemplate = transactionTemplateModel.ConvertJSONToModel(_transactionPresetJSON.TransactionTemplate)
        }

        if (_transactionPresetJSON.transactionType != null) {

            _transactionPresetModel.transactionType = transactionTypeModel.ConvertJSONToModel(_transactionPresetJSON.TransactionType)
        }

        return _transactionPresetModel;



    }
    public static ConvertJSONListToModelList(_transactionPresetJSONList: any): transactionPresetModel[] {
        var transactionPresetList: transactionPresetModel[] = new Array();;
        angular.forEach(_transactionPresetJSONList, function (_transactionPresetJSON) {
            transactionPresetList.push(transactionPresetModel.ConvertJSONToModel(_transactionPresetJSON));
        })
        return transactionPresetList;
    }
}



class transactionStateModel {
    public idTransactionState: number;
    public isDeactivated: boolean;
    public description: string;

    public transactions: transactionModel[]






    public idLocalTransactionState: string
    public static ConvertJSONToModel(_transactionStateJSON: any): transactionStateModel {
        var _transactionStateModel: transactionStateModel = new transactionStateModel();
        _transactionStateModel.idTransactionState = _transactionStateJSON.IdTransactionState;
        _transactionStateModel.isDeactivated = _transactionStateJSON.IsDeactivated;
        _transactionStateModel.description = _transactionStateJSON.Description;

        if (_transactionStateJSON.transactions != null) {

            _transactionStateModel.transactions = transactionModel.ConvertJSONListToModelList(_transactionStateJSON.Transactions)
        }

        return _transactionStateModel;



    }
    public static ConvertJSONListToModelList(_transactionStateJSONList: any): transactionStateModel[] {
        var transactionStateList: transactionStateModel[] = new Array();;
        angular.forEach(_transactionStateJSONList, function (_transactionStateJSON) {
            transactionStateList.push(transactionStateModel.ConvertJSONToModel(_transactionStateJSON));
        })
        return transactionStateList;
    }
}



class transactionTemplateModel {
    public idTransactionTemplate: number;
    public isDeactivated: boolean;
    public description: string;

    public transactionPresets: transactionPresetModel[]

    public banks: bankModel[]

    public transactions: transactionModel[]














    public idLocalTransactionTemplate: string
    public static ConvertJSONToModel(_transactionTemplateJSON: any): transactionTemplateModel {
        var _transactionTemplateModel: transactionTemplateModel = new transactionTemplateModel();
        _transactionTemplateModel.idTransactionTemplate = _transactionTemplateJSON.IdTransactionTemplate;
        _transactionTemplateModel.isDeactivated = _transactionTemplateJSON.IsDeactivated;
        _transactionTemplateModel.description = _transactionTemplateJSON.Description;

        if (_transactionTemplateJSON.transactionPresets != null) {

            _transactionTemplateModel.transactionPresets = transactionPresetModel.ConvertJSONListToModelList(_transactionTemplateJSON.TransactionPresets)
        }

        if (_transactionTemplateJSON.banks != null) {

            _transactionTemplateModel.banks = bankModel.ConvertJSONListToModelList(_transactionTemplateJSON.Banks)
        }

        if (_transactionTemplateJSON.transactions != null) {

            _transactionTemplateModel.transactions = transactionModel.ConvertJSONListToModelList(_transactionTemplateJSON.Transactions)
        }

        return _transactionTemplateModel;



    }
    public static ConvertJSONListToModelList(_transactionTemplateJSONList: any): transactionTemplateModel[] {
        var transactionTemplateList: transactionTemplateModel[] = new Array();;
        angular.forEach(_transactionTemplateJSONList, function (_transactionTemplateJSON) {
            transactionTemplateList.push(transactionTemplateModel.ConvertJSONToModel(_transactionTemplateJSON));
        })
        return transactionTemplateList;
    }
}



class transactionTypeModel {
    public idTransactionType: number;
    public description: string;
    public isDeactivated: boolean;

    public transactionPresets: transactionPresetModel[]

    public transactions: transactionModel[]










    public idLocalTransactionType: string
    public static ConvertJSONToModel(_transactionTypeJSON: any): transactionTypeModel {
        var _transactionTypeModel: transactionTypeModel = new transactionTypeModel();
        _transactionTypeModel.idTransactionType = _transactionTypeJSON.IdTransactionType;
        _transactionTypeModel.description = _transactionTypeJSON.Description;
        _transactionTypeModel.isDeactivated = _transactionTypeJSON.IsDeactivated;

        if (_transactionTypeJSON.transactionPresets != null) {

            _transactionTypeModel.transactionPresets = transactionPresetModel.ConvertJSONListToModelList(_transactionTypeJSON.TransactionPresets)
        }

        if (_transactionTypeJSON.transactions != null) {

            _transactionTypeModel.transactions = transactionModel.ConvertJSONListToModelList(_transactionTypeJSON.Transactions)
        }

        return _transactionTypeModel;



    }
    public static ConvertJSONListToModelList(_transactionTypeJSONList: any): transactionTypeModel[] {
        var transactionTypeList: transactionTypeModel[] = new Array();;
        angular.forEach(_transactionTypeJSONList, function (_transactionTypeJSON) {
            transactionTypeList.push(transactionTypeModel.ConvertJSONToModel(_transactionTypeJSON));
        })
        return transactionTypeList;
    }
}



class userModel {
    public idUser: number;
    public email: string;
    public passwordHash: string;
    public securityStamp: string;
    public phoneNumber: string;
    public lockoutEnabled: boolean;
    public userName: string;
    public isDeactivated: boolean;
    public idPerson: number;
    public firstName: string;
    public lastName: string;
    public needPasswordChange: boolean;
    public emailConfirmed: boolean;
    public phoneNumberConfirmed: boolean;
    public twoFactorEnabled: boolean;
    public lockoutEndDateUtc: Date;
    public accessFailedCount: number;

    public bankStatementStagings: bankStatementStagingModel[]

    public orders: orderModel[]

    public payments: paymentModel[]

    public receipts: receiptModel[]

    public requestType_User: requestType_UserModel[]

    public transactions: transactionModel[]

    public person: personModel





























    public idLocalUser: string
    public static ConvertJSONToModel(_userJSON: any): userModel {
        var _userModel: userModel = new userModel();
        _userModel.idUser = _userJSON.IdUser;
        _userModel.email = _userJSON.Email;
        _userModel.passwordHash = _userJSON.PasswordHash;
        _userModel.securityStamp = _userJSON.SecurityStamp;
        _userModel.phoneNumber = _userJSON.PhoneNumber;
        _userModel.lockoutEnabled = _userJSON.LockoutEnabled;
        _userModel.userName = _userJSON.UserName;
        _userModel.isDeactivated = _userJSON.IsDeactivated;
        _userModel.idPerson = _userJSON.IdPerson;
        _userModel.firstName = _userJSON.FirstName;
        _userModel.lastName = _userJSON.LastName;
        _userModel.needPasswordChange = _userJSON.NeedPasswordChange;
        _userModel.emailConfirmed = _userJSON.EmailConfirmed;
        _userModel.phoneNumberConfirmed = _userJSON.PhoneNumberConfirmed;
        _userModel.twoFactorEnabled = _userJSON.TwoFactorEnabled;
        _userModel.lockoutEndDateUtc = _userJSON.LockoutEndDateUtc;
        _userModel.accessFailedCount = _userJSON.AccessFailedCount;

        if (_userJSON.bankStatementStagings != null) {

            _userModel.bankStatementStagings = bankStatementStagingModel.ConvertJSONListToModelList(_userJSON.BankStatementStagings)
        }

        if (_userJSON.orders != null) {

            _userModel.orders = orderModel.ConvertJSONListToModelList(_userJSON.Orders)
        }

        if (_userJSON.payments != null) {

            _userModel.payments = paymentModel.ConvertJSONListToModelList(_userJSON.Payments)
        }

        if (_userJSON.receipts != null) {

            _userModel.receipts = receiptModel.ConvertJSONListToModelList(_userJSON.Receipts)
        }

        if (_userJSON.requestType_User != null) {

            _userModel.requestType_User = requestType_UserModel.ConvertJSONListToModelList(_userJSON.RequestType_User)
        }

        if (_userJSON.transactions != null) {

            _userModel.transactions = transactionModel.ConvertJSONListToModelList(_userJSON.Transactions)
        }

        if (_userJSON.person != null) {

            _userModel.person = personModel.ConvertJSONToModel(_userJSON.Person)
        }

        return _userModel;



    }
    public static ConvertJSONListToModelList(_userJSONList: any): userModel[] {
        var userList: userModel[] = new Array();;
        angular.forEach(_userJSONList, function (_userJSON) {
            userList.push(userModel.ConvertJSONToModel(_userJSON));
        })
        return userList;
    }
}



class user_PermissionModel {
    public idUser_Permission: number;
    public idUser: number;
    public idPermission: number;
    public isDeactivated: boolean;
    public isAllowed: boolean;

    public permission: permissionModel





    public idLocalUser_Permission: string
    public static ConvertJSONToModel(_user_PermissionJSON: any): user_PermissionModel {
        var _user_PermissionModel: user_PermissionModel = new user_PermissionModel();
        _user_PermissionModel.idUser_Permission = _user_PermissionJSON.IdUser_Permission;
        _user_PermissionModel.idUser = _user_PermissionJSON.IdUser;
        _user_PermissionModel.idPermission = _user_PermissionJSON.IdPermission;
        _user_PermissionModel.isDeactivated = _user_PermissionJSON.IsDeactivated;
        _user_PermissionModel.isAllowed = _user_PermissionJSON.IsAllowed;

        if (_user_PermissionJSON.permission != null) {

            _user_PermissionModel.permission = permissionModel.ConvertJSONToModel(_user_PermissionJSON.Permission)
        }

        return _user_PermissionModel;



    }
    public static ConvertJSONListToModelList(_user_PermissionJSONList: any): user_PermissionModel[] {
        var user_PermissionList: user_PermissionModel[] = new Array();;
        angular.forEach(_user_PermissionJSONList, function (_user_PermissionJSON) {
            user_PermissionList.push(user_PermissionModel.ConvertJSONToModel(_user_PermissionJSON));
        })
        return user_PermissionList;
    }
}



class user_RoleModel {
    public idUser: number;
    public idRole: number;
    public isDeactivated: boolean;

    public role: roleModel





    public idLocalUser_Role: string
    public static ConvertJSONToModel(_user_RoleJSON: any): user_RoleModel {
        var _user_RoleModel: user_RoleModel = new user_RoleModel();
        _user_RoleModel.idUser = _user_RoleJSON.IdUser;
        _user_RoleModel.idRole = _user_RoleJSON.IdRole;
        _user_RoleModel.isDeactivated = _user_RoleJSON.IsDeactivated;

        if (_user_RoleJSON.role != null) {

            _user_RoleModel.role = roleModel.ConvertJSONToModel(_user_RoleJSON.Role)
        }

        return _user_RoleModel;



    }
    public static ConvertJSONListToModelList(_user_RoleJSONList: any): user_RoleModel[] {
        var user_RoleList: user_RoleModel[] = new Array();;
        angular.forEach(_user_RoleJSONList, function (_user_RoleJSON) {
            user_RoleList.push(user_RoleModel.ConvertJSONToModel(_user_RoleJSON));
        })
        return user_RoleList;
    }
}



class user_SocialNetworkModel {
    public idUser_SocialNetwork: number;
    public idUser: number;
    public idSocialNetwork: number;
    public isDeactivated: boolean;
    public socialNetworkId: string;
    public idLocalUser_SocialNetwork: string
    public static ConvertJSONToModel(_user_SocialNetworkJSON: any): user_SocialNetworkModel {
        var _user_SocialNetworkModel: user_SocialNetworkModel = new user_SocialNetworkModel();
        _user_SocialNetworkModel.idUser_SocialNetwork = _user_SocialNetworkJSON.IdUser_SocialNetwork;
        _user_SocialNetworkModel.idUser = _user_SocialNetworkJSON.IdUser;
        _user_SocialNetworkModel.idSocialNetwork = _user_SocialNetworkJSON.IdSocialNetwork;
        _user_SocialNetworkModel.isDeactivated = _user_SocialNetworkJSON.IsDeactivated;
        _user_SocialNetworkModel.socialNetworkId = _user_SocialNetworkJSON.SocialNetworkId;

        return _user_SocialNetworkModel;



    }
    public static ConvertJSONListToModelList(_user_SocialNetworkJSONList: any): user_SocialNetworkModel[] {
        var user_SocialNetworkList: user_SocialNetworkModel[] = new Array();;
        angular.forEach(_user_SocialNetworkJSONList, function (_user_SocialNetworkJSON) {
            user_SocialNetworkList.push(user_SocialNetworkModel.ConvertJSONToModel(_user_SocialNetworkJSON));
        })
        return user_SocialNetworkList;
    }
}



class workflowModel {
    public idWorkflow: number;
    public description: string;
    public workflowCode: string;
    public displayOrder: number;
    public isDeactivated: boolean;

    public approvalMessages: approvalMessageModel[]

    public requestTypes: requestTypeModel[]

    public workflowActions: workflowActionModel[]

    public workflowRoles: workflowRoleModel[]

    public workflowStates: workflowStateModel[]






















    public idLocalWorkflow: string
    public static ConvertJSONToModel(_workflowJSON: any): workflowModel {
        var _workflowModel: workflowModel = new workflowModel();
        _workflowModel.idWorkflow = _workflowJSON.IdWorkflow;
        _workflowModel.description = _workflowJSON.Description;
        _workflowModel.workflowCode = _workflowJSON.WorkflowCode;
        _workflowModel.displayOrder = _workflowJSON.DisplayOrder;
        _workflowModel.isDeactivated = _workflowJSON.IsDeactivated;

        if (_workflowJSON.approvalMessages != null) {

            _workflowModel.approvalMessages = approvalMessageModel.ConvertJSONListToModelList(_workflowJSON.ApprovalMessages)
        }

        if (_workflowJSON.requestTypes != null) {

            _workflowModel.requestTypes = requestTypeModel.ConvertJSONListToModelList(_workflowJSON.RequestTypes)
        }

        if (_workflowJSON.workflowActions != null) {

            _workflowModel.workflowActions = workflowActionModel.ConvertJSONListToModelList(_workflowJSON.WorkflowActions)
        }

        if (_workflowJSON.workflowRoles != null) {

            _workflowModel.workflowRoles = workflowRoleModel.ConvertJSONListToModelList(_workflowJSON.WorkflowRoles)
        }

        if (_workflowJSON.workflowStates != null) {

            _workflowModel.workflowStates = workflowStateModel.ConvertJSONListToModelList(_workflowJSON.WorkflowStates)
        }

        return _workflowModel;



    }
    public static ConvertJSONListToModelList(_workflowJSONList: any): workflowModel[] {
        var workflowList: workflowModel[] = new Array();;
        angular.forEach(_workflowJSONList, function (_workflowJSON) {
            workflowList.push(workflowModel.ConvertJSONToModel(_workflowJSON));
        })
        return workflowList;
    }
}



class workflowActionModel {
    public idWorkflowAction: number;
    public description: string;
    public workflowActionCode: string;
    public displayOrder: number;
    public idWorkflow: number;
    public isDeactivated: boolean;

    public approvalMessages: approvalMessageModel[]

    public workflow: workflowModel

    public workflowTransitions: workflowTransitionModel[]













    public idLocalWorkflowAction: string
    public static ConvertJSONToModel(_workflowActionJSON: any): workflowActionModel {
        var _workflowActionModel: workflowActionModel = new workflowActionModel();
        _workflowActionModel.idWorkflowAction = _workflowActionJSON.IdWorkflowAction;
        _workflowActionModel.description = _workflowActionJSON.Description;
        _workflowActionModel.workflowActionCode = _workflowActionJSON.WorkflowActionCode;
        _workflowActionModel.displayOrder = _workflowActionJSON.DisplayOrder;
        _workflowActionModel.idWorkflow = _workflowActionJSON.IdWorkflow;
        _workflowActionModel.isDeactivated = _workflowActionJSON.IsDeactivated;

        if (_workflowActionJSON.approvalMessages != null) {

            _workflowActionModel.approvalMessages = approvalMessageModel.ConvertJSONListToModelList(_workflowActionJSON.ApprovalMessages)
        }

        if (_workflowActionJSON.workflow != null) {

            _workflowActionModel.workflow = workflowModel.ConvertJSONToModel(_workflowActionJSON.Workflow)
        }

        if (_workflowActionJSON.workflowTransitions != null) {

            _workflowActionModel.workflowTransitions = workflowTransitionModel.ConvertJSONListToModelList(_workflowActionJSON.WorkflowTransitions)
        }

        return _workflowActionModel;



    }
    public static ConvertJSONListToModelList(_workflowActionJSONList: any): workflowActionModel[] {
        var workflowActionList: workflowActionModel[] = new Array();;
        angular.forEach(_workflowActionJSONList, function (_workflowActionJSON) {
            workflowActionList.push(workflowActionModel.ConvertJSONToModel(_workflowActionJSON));
        })
        return workflowActionList;
    }
}



class workflowRoleModel {
    public idWorkflowRole: number;
    public description: string;
    public workflowRoleCode: string;
    public displayOrder: number;
    public idWorkflow: number;
    public isDeactivated: boolean;

    public workflow: workflowModel

    public workflowTransitions: workflowTransitionModel[]









    public idLocalWorkflowRole: string
    public static ConvertJSONToModel(_workflowRoleJSON: any): workflowRoleModel {
        var _workflowRoleModel: workflowRoleModel = new workflowRoleModel();
        _workflowRoleModel.idWorkflowRole = _workflowRoleJSON.IdWorkflowRole;
        _workflowRoleModel.description = _workflowRoleJSON.Description;
        _workflowRoleModel.workflowRoleCode = _workflowRoleJSON.WorkflowRoleCode;
        _workflowRoleModel.displayOrder = _workflowRoleJSON.DisplayOrder;
        _workflowRoleModel.idWorkflow = _workflowRoleJSON.IdWorkflow;
        _workflowRoleModel.isDeactivated = _workflowRoleJSON.IsDeactivated;

        if (_workflowRoleJSON.workflow != null) {

            _workflowRoleModel.workflow = workflowModel.ConvertJSONToModel(_workflowRoleJSON.Workflow)
        }

        if (_workflowRoleJSON.workflowTransitions != null) {

            _workflowRoleModel.workflowTransitions = workflowTransitionModel.ConvertJSONListToModelList(_workflowRoleJSON.WorkflowTransitions)
        }

        return _workflowRoleModel;



    }
    public static ConvertJSONListToModelList(_workflowRoleJSONList: any): workflowRoleModel[] {
        var workflowRoleList: workflowRoleModel[] = new Array();;
        angular.forEach(_workflowRoleJSONList, function (_workflowRoleJSON) {
            workflowRoleList.push(workflowRoleModel.ConvertJSONToModel(_workflowRoleJSON));
        })
        return workflowRoleList;
    }
}



class workflowStateModel {
    public idWorkflowState: number;
    public description: string;
    public workflowStateCode: string;
    public displayOrder: number;
    public idWorkflow: number;
    public isDeactivated: boolean;

    public requests: requestModel[]

    public workflow: workflowModel

    public workflowTransitions: workflowTransitionModel[]

    public workflowTransitions1: workflowTransitionModel[]

















    public idLocalWorkflowState: string
    public static ConvertJSONToModel(_workflowStateJSON: any): workflowStateModel {
        var _workflowStateModel: workflowStateModel = new workflowStateModel();
        _workflowStateModel.idWorkflowState = _workflowStateJSON.IdWorkflowState;
        _workflowStateModel.description = _workflowStateJSON.Description;
        _workflowStateModel.workflowStateCode = _workflowStateJSON.WorkflowStateCode;
        _workflowStateModel.displayOrder = _workflowStateJSON.DisplayOrder;
        _workflowStateModel.idWorkflow = _workflowStateJSON.IdWorkflow;
        _workflowStateModel.isDeactivated = _workflowStateJSON.IsDeactivated;

        if (_workflowStateJSON.requests != null) {

            _workflowStateModel.requests = requestModel.ConvertJSONListToModelList(_workflowStateJSON.Requests)
        }

        if (_workflowStateJSON.workflow != null) {

            _workflowStateModel.workflow = workflowModel.ConvertJSONToModel(_workflowStateJSON.Workflow)
        }

        if (_workflowStateJSON.workflowTransitions != null) {

            _workflowStateModel.workflowTransitions = workflowTransitionModel.ConvertJSONListToModelList(_workflowStateJSON.WorkflowTransitions)
        }

        if (_workflowStateJSON.workflowTransitions1 != null) {

            _workflowStateModel.workflowTransitions1 = workflowTransitionModel.ConvertJSONListToModelList(_workflowStateJSON.WorkflowTransitions1)
        }

        return _workflowStateModel;



    }
    public static ConvertJSONListToModelList(_workflowStateJSONList: any): workflowStateModel[] {
        var workflowStateList: workflowStateModel[] = new Array();;
        angular.forEach(_workflowStateJSONList, function (_workflowStateJSON) {
            workflowStateList.push(workflowStateModel.ConvertJSONToModel(_workflowStateJSON));
        })
        return workflowStateList;
    }
}



class workflowTransitionModel {
    public idWorkflowTransition: number;
    public idWorkflowStateInitial: number;
    public idWorkflowAction: number;
    public idWorkflowStateFinal: number;
    public idWorkflowRole: number;
    public isDeactivated: boolean;

    public workflowAction: workflowActionModel

    public workflowRole: workflowRoleModel

    public workflowState: workflowStateModel

    public workflowState1: workflowStateModel

    public workflowTransitionOnExecutes: workflowTransitionOnExecuteModel[]


















    public idLocalWorkflowTransition: string
    public static ConvertJSONToModel(_workflowTransitionJSON: any): workflowTransitionModel {
        var _workflowTransitionModel: workflowTransitionModel = new workflowTransitionModel();
        _workflowTransitionModel.idWorkflowTransition = _workflowTransitionJSON.IdWorkflowTransition;
        _workflowTransitionModel.idWorkflowStateInitial = _workflowTransitionJSON.IdWorkflowStateInitial;
        _workflowTransitionModel.idWorkflowAction = _workflowTransitionJSON.IdWorkflowAction;
        _workflowTransitionModel.idWorkflowStateFinal = _workflowTransitionJSON.IdWorkflowStateFinal;
        _workflowTransitionModel.idWorkflowRole = _workflowTransitionJSON.IdWorkflowRole;
        _workflowTransitionModel.isDeactivated = _workflowTransitionJSON.IsDeactivated;

        if (_workflowTransitionJSON.workflowAction != null) {

            _workflowTransitionModel.workflowAction = workflowActionModel.ConvertJSONToModel(_workflowTransitionJSON.WorkflowAction)
        }

        if (_workflowTransitionJSON.workflowRole != null) {

            _workflowTransitionModel.workflowRole = workflowRoleModel.ConvertJSONToModel(_workflowTransitionJSON.WorkflowRole)
        }

        if (_workflowTransitionJSON.workflowState != null) {

            _workflowTransitionModel.workflowState = workflowStateModel.ConvertJSONToModel(_workflowTransitionJSON.WorkflowState)
        }

        if (_workflowTransitionJSON.workflowState1 != null) {

            _workflowTransitionModel.workflowState1 = workflowStateModel.ConvertJSONToModel(_workflowTransitionJSON.WorkflowState1)
        }

        if (_workflowTransitionJSON.workflowTransitionOnExecutes != null) {

            _workflowTransitionModel.workflowTransitionOnExecutes = workflowTransitionOnExecuteModel.ConvertJSONListToModelList(_workflowTransitionJSON.WorkflowTransitionOnExecutes)
        }

        return _workflowTransitionModel;



    }
    public static ConvertJSONListToModelList(_workflowTransitionJSONList: any): workflowTransitionModel[] {
        var workflowTransitionList: workflowTransitionModel[] = new Array();;
        angular.forEach(_workflowTransitionJSONList, function (_workflowTransitionJSON) {
            workflowTransitionList.push(workflowTransitionModel.ConvertJSONToModel(_workflowTransitionJSON));
        })
        return workflowTransitionList;
    }
}



class workflowTransitionOnExecuteModel {
    public idWorkflowTransitionOnExecute: number;
    public action: string;
    public idWorkflowTransition: number;
    public jsonContent: string;
    public isDeactivated: boolean;

    public workflowTransition: workflowTransitionModel





    public idLocalWorkflowTransitionOnExecute: string
    public static ConvertJSONToModel(_workflowTransitionOnExecuteJSON: any): workflowTransitionOnExecuteModel {
        var _workflowTransitionOnExecuteModel: workflowTransitionOnExecuteModel = new workflowTransitionOnExecuteModel();
        _workflowTransitionOnExecuteModel.idWorkflowTransitionOnExecute = _workflowTransitionOnExecuteJSON.IdWorkflowTransitionOnExecute;
        _workflowTransitionOnExecuteModel.action = _workflowTransitionOnExecuteJSON.Action;
        _workflowTransitionOnExecuteModel.idWorkflowTransition = _workflowTransitionOnExecuteJSON.IdWorkflowTransition;
        _workflowTransitionOnExecuteModel.jsonContent = _workflowTransitionOnExecuteJSON.JsonContent;
        _workflowTransitionOnExecuteModel.isDeactivated = _workflowTransitionOnExecuteJSON.IsDeactivated;

        if (_workflowTransitionOnExecuteJSON.workflowTransition != null) {

            _workflowTransitionOnExecuteModel.workflowTransition = workflowTransitionModel.ConvertJSONToModel(_workflowTransitionOnExecuteJSON.WorkflowTransition)
        }

        return _workflowTransitionOnExecuteModel;



    }
    public static ConvertJSONListToModelList(_workflowTransitionOnExecuteJSONList: any): workflowTransitionOnExecuteModel[] {
        var workflowTransitionOnExecuteList: workflowTransitionOnExecuteModel[] = new Array();;
        angular.forEach(_workflowTransitionOnExecuteJSONList, function (_workflowTransitionOnExecuteJSON) {
            workflowTransitionOnExecuteList.push(workflowTransitionOnExecuteModel.ConvertJSONToModel(_workflowTransitionOnExecuteJSON));
        })
        return workflowTransitionOnExecuteList;
    }
}
